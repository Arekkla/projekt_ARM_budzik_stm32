
projekt_ARM_budzik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08006fdc  08006fdc  00007fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007570  08007570  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007570  08007570  00008570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007578  08007578  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007578  08007578  00008578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800757c  0800757c  0000857c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007580  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  080075e8  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080075e8  00009324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef46  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029da  00000000  00000000  00017fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  0001a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bcb  00000000  00000000  0001b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018621  00000000  00000000  0001c4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001375a  00000000  00000000  00034aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f30  00000000  00000000  00048246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9176  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  000d91bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000dd900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fc4 	.word	0x08006fc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006fc4 	.word	0x08006fc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4604      	mov	r4, r0
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4623      	mov	r3, r4
 80005bc:	80fb      	strh	r3, [r7, #6]
 80005be:	4603      	mov	r3, r0
 80005c0:	80bb      	strh	r3, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	70fb      	strb	r3, [r7, #3]
 80005c6:	4613      	mov	r3, r2
 80005c8:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 80005ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80005d0:	f300 8100 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80005da:	f300 80fb 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005de:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80005e2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	440b      	add	r3, r1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f340 80ef 	ble.w	80007d4 <GFX_draw_char+0x228>
 80005f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	4413      	add	r3, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	f340 80e6 	ble.w	80007d4 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e0aa      	b.n	8000764 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	441a      	add	r2, r3
 8000616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061a:	4413      	add	r3, r2
 800061c:	4a6f      	ldr	r2, [pc, #444]	@ (80007dc <GFX_draw_char+0x230>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000622:	2307      	movs	r3, #7
 8000624:	73bb      	strb	r3, [r7, #14]
 8000626:	e092      	b.n	800074e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d040      	beq.n	80006b4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000632:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000636:	2b01      	cmp	r3, #1
 8000638:	d116      	bne.n	8000668 <GFX_draw_char+0xbc>
 800063a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800063e:	2b01      	cmp	r3, #1
 8000640:	d112      	bne.n	8000668 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000646:	b29a      	uxth	r2, r3
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4413      	add	r3, r2
 800064c:	b29b      	uxth	r3, r3
 800064e:	b218      	sxth	r0, r3
 8000650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000654:	b29a      	uxth	r2, r3
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	b29b      	uxth	r3, r3
 800065c:	b21b      	sxth	r3, r3
 800065e:	883a      	ldrh	r2, [r7, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f000 f9f7 	bl	8000a54 <SSD1306_draw_pixel>
 8000666:	e069      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066c:	b29a      	uxth	r2, r3
 800066e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000672:	b29b      	uxth	r3, r3
 8000674:	fb12 f303 	smulbb	r3, r2, r3
 8000678:	b29a      	uxth	r2, r3
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	b218      	sxth	r0, r3
 8000682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000686:	b29a      	uxth	r2, r3
 8000688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800068c:	b29b      	uxth	r3, r3
 800068e:	fb12 f303 	smulbb	r3, r2, r3
 8000692:	b29a      	uxth	r2, r3
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	b29b      	uxth	r3, r3
 800069a:	b219      	sxth	r1, r3
 800069c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006a6:	b21c      	sxth	r4, r3
 80006a8:	883b      	ldrh	r3, [r7, #0]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4623      	mov	r3, r4
 80006ae:	f000 f8d0 	bl	8000852 <GFX_draw_fill_rect>
 80006b2:	e043      	b.n	800073c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 80006b4:	8c3a      	ldrh	r2, [r7, #32]
 80006b6:	883b      	ldrh	r3, [r7, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d03f      	beq.n	800073c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 80006bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d116      	bne.n	80006f2 <GFX_draw_char+0x146>
 80006c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d112      	bne.n	80006f2 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80006cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b218      	sxth	r0, r3
 80006da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	88bb      	ldrh	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	8c3a      	ldrh	r2, [r7, #32]
 80006ea:	4619      	mov	r1, r3
 80006ec:	f000 f9b2 	bl	8000a54 <SSD1306_draw_pixel>
 80006f0:	e024      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80006f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	fb12 f303 	smulbb	r3, r2, r3
 8000702:	b29a      	uxth	r2, r3
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4413      	add	r3, r2
 8000708:	b29b      	uxth	r3, r3
 800070a:	b218      	sxth	r0, r3
 800070c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000710:	b29a      	uxth	r2, r3
 8000712:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000716:	b29b      	uxth	r3, r3
 8000718:	fb12 f303 	smulbb	r3, r2, r3
 800071c:	b29a      	uxth	r2, r3
 800071e:	88bb      	ldrh	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	b219      	sxth	r1, r3
 8000726:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800072a:	b21a      	sxth	r2, r3
 800072c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000730:	b21c      	sxth	r4, r3
 8000732:	8c3b      	ldrh	r3, [r7, #32]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	4623      	mov	r3, r4
 8000738:	f000 f88b 	bl	8000852 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800073c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	73bb      	strb	r3, [r7, #14]
 8000748:	7b7b      	ldrb	r3, [r7, #13]
 800074a:	085b      	lsrs	r3, r3, #1
 800074c:	737b      	strb	r3, [r7, #13]
 800074e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000752:	2b00      	cmp	r3, #0
 8000754:	f6bf af68 	bge.w	8000628 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000768:	2b04      	cmp	r3, #4
 800076a:	f77f af50 	ble.w	800060e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800076e:	8c3a      	ldrh	r2, [r7, #32]
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d02f      	beq.n	80007d6 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000776:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10e      	bne.n	800079c <GFX_draw_char+0x1f0>
 800077e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10a      	bne.n	800079c <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	3305      	adds	r3, #5
 800078a:	b29b      	uxth	r3, r3
 800078c:	b218      	sxth	r0, r3
 800078e:	8c3b      	ldrh	r3, [r7, #32]
 8000790:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000794:	2208      	movs	r2, #8
 8000796:	f000 fad3 	bl	8000d40 <SSD1306_draw_fast_vline>
 800079a:	e01c      	b.n	80007d6 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800079c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	0092      	lsls	r2, r2, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	4413      	add	r3, r2
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	b218      	sxth	r0, r3
 80007b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007bc:	b29b      	uxth	r3, r3
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b21c      	sxth	r4, r3
 80007c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007c8:	8c3b      	ldrh	r3, [r7, #32]
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4623      	mov	r3, r4
 80007ce:	f000 f840 	bl	8000852 <GFX_draw_fill_rect>
 80007d2:	e000      	b.n	80007d6 <GFX_draw_char+0x22a>
		return;
 80007d4:	bf00      	nop
		}
	}
}
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	0800700c 	.word	0x0800700c

080007e0 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af04      	add	r7, sp, #16
 80007e6:	60ba      	str	r2, [r7, #8]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	81fb      	strh	r3, [r7, #14]
 80007ee:	460b      	mov	r3, r1
 80007f0:	81bb      	strh	r3, [r7, #12]
 80007f2:	4613      	mov	r3, r2
 80007f4:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]
	while(*c)
 80007fa:	e021      	b.n	8000840 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	4413      	add	r3, r2
 8000804:	b29b      	uxth	r3, r3
 8000806:	b218      	sxth	r0, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	88fc      	ldrh	r4, [r7, #6]
 800080e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000812:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4623      	mov	r3, r4
 8000824:	f7ff fec2 	bl	80005ac <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000828:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800082c:	461a      	mov	r2, r3
 800082e:	00d2      	lsls	r2, r2, #3
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b2da      	uxtb	r2, r3
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	4413      	add	r3, r2
 8000838:	75fb      	strb	r3, [r7, #23]
		c++;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3301      	adds	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1d9      	bne.n	80007fc <GFX_draw_string+0x1c>
	}
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	371c      	adds	r7, #28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}

08000852 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000852:	b590      	push	{r4, r7, lr}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	4604      	mov	r4, r0
 800085a:	4608      	mov	r0, r1
 800085c:	4611      	mov	r1, r2
 800085e:	461a      	mov	r2, r3
 8000860:	4623      	mov	r3, r4
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4603      	mov	r3, r0
 8000866:	80bb      	strh	r3, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
 800086c:	4613      	mov	r3, r2
 800086e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	e00e      	b.n	8000894 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000876:	8c3b      	ldrh	r3, [r7, #32]
 8000878:	f9b7 2000 	ldrsh.w	r2, [r7]
 800087c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000880:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000884:	f000 fa5c 	bl	8000d40 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8000888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088c:	b29b      	uxth	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b29b      	uxth	r3, r3
 8000892:	81fb      	strh	r3, [r7, #14]
 8000894:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000898:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800089c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a0:	440b      	add	r3, r1
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbe7      	blt.n	8000876 <GFX_draw_fill_rect+0x24>
	}
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af04      	add	r7, sp, #16
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	2178      	movs	r1, #120	@ 0x78
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <platform_write+0x34>)
 80008d6:	f002 f9df 	bl	8002c98 <HAL_I2C_Mem_Write>
	return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000008c 	.word	0x2000008c

080008e8 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	88bb      	ldrh	r3, [r7, #4]
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	2178      	movs	r1, #120	@ 0x78
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <platform_write_dma+0x30>)
 800090a:	f002 fabf 	bl	8002e8c <HAL_I2C_Mem_Write_DMA>
	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000008c 	.word	0x2000008c

0800091c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ffbf 	bl	80008b0 <platform_write>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <SSD1306_init>:

bool SSD1306_init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8000942:	2302      	movs	r3, #2
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	238f      	movs	r3, #143	@ 0x8f
 8000948:	71bb      	strb	r3, [r7, #6]
 800094a:	2302      	movs	r3, #2
 800094c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800094e:	4b40      	ldr	r3, [pc, #256]	@ (8000a50 <SSD1306_init+0x114>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10d      	bne.n	8000972 <SSD1306_init+0x36>
 8000956:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800095a:	f005 fb1b 	bl	8005f94 <malloc>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b3b      	ldr	r3, [pc, #236]	@ (8000a50 <SSD1306_init+0x114>)
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	4b3a      	ldr	r3, [pc, #232]	@ (8000a50 <SSD1306_init+0x114>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <SSD1306_init+0x36>
  {
    return false;
 800096e:	2300      	movs	r3, #0
 8000970:	e06a      	b.n	8000a48 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 8000972:	f000 f947 	bl	8000c04 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000976:	20ae      	movs	r0, #174	@ 0xae
 8000978:	f7ff ffd0 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 800097c:	20d5      	movs	r0, #213	@ 0xd5
 800097e:	f7ff ffcd 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 8000982:	20e0      	movs	r0, #224	@ 0xe0
 8000984:	f7ff ffca 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8000988:	20a8      	movs	r0, #168	@ 0xa8
 800098a:	f7ff ffc7 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 800098e:	203f      	movs	r0, #63	@ 0x3f
 8000990:	f7ff ffc4 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 8000994:	20d3      	movs	r0, #211	@ 0xd3
 8000996:	f7ff ffc1 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ffbe 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80009a0:	2040      	movs	r0, #64	@ 0x40
 80009a2:	f7ff ffbb 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80009a6:	208d      	movs	r0, #141	@ 0x8d
 80009a8:	f7ff ffb8 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80009ac:	797b      	ldrb	r3, [r7, #5]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d101      	bne.n	80009b6 <SSD1306_init+0x7a>
 80009b2:	2310      	movs	r3, #16
 80009b4:	e000      	b.n	80009b8 <SSD1306_init+0x7c>
 80009b6:	2314      	movs	r3, #20
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffaf 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80009be:	2020      	movs	r0, #32
 80009c0:	f7ff ffac 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff ffa9 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80009ca:	20b0      	movs	r0, #176	@ 0xb0
 80009cc:	f7ff ffa6 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80009d0:	20c8      	movs	r0, #200	@ 0xc8
 80009d2:	f7ff ffa3 	bl	800091c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80009d6:	2312      	movs	r3, #18
 80009d8:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80009da:	797b      	ldrb	r3, [r7, #5]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d101      	bne.n	80009e4 <SSD1306_init+0xa8>
 80009e0:	239f      	movs	r3, #159	@ 0x9f
 80009e2:	e000      	b.n	80009e6 <SSD1306_init+0xaa>
 80009e4:	23cf      	movs	r3, #207	@ 0xcf
 80009e6:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 80009e8:	20da      	movs	r0, #218	@ 0xda
 80009ea:	f7ff ff97 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff93 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 80009f6:	2081      	movs	r0, #129	@ 0x81
 80009f8:	f7ff ff90 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff8c 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000a04:	20d9      	movs	r0, #217	@ 0xd9
 8000a06:	f7ff ff89 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000a0a:	797b      	ldrb	r3, [r7, #5]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <SSD1306_init+0xd8>
 8000a10:	2322      	movs	r3, #34	@ 0x22
 8000a12:	e000      	b.n	8000a16 <SSD1306_init+0xda>
 8000a14:	23f1      	movs	r3, #241	@ 0xf1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff80 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8000a1c:	20db      	movs	r0, #219	@ 0xdb
 8000a1e:	f7ff ff7d 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8000a22:	2040      	movs	r0, #64	@ 0x40
 8000a24:	f7ff ff7a 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000a28:	20a4      	movs	r0, #164	@ 0xa4
 8000a2a:	f7ff ff77 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8000a2e:	20a6      	movs	r0, #166	@ 0xa6
 8000a30:	f7ff ff74 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000a34:	202e      	movs	r0, #46	@ 0x2e
 8000a36:	f7ff ff71 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8000a3a:	20af      	movs	r0, #175	@ 0xaf
 8000a3c:	f7ff ff6e 	bl	800091c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fb17 	bl	8001074 <SSD1306_set_rotation>
  return true;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000084 	.word	0x20000084

08000a54 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8000a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f2c0 80c4 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a76:	f300 80bf 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f2c0 80ba 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a88:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a8a:	f300 80b5 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 8000a8e:	f000 fb01 	bl	8001094 <SSD1306_get_rotation>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d023      	beq.n	8000ae0 <SSD1306_draw_pixel+0x8c>
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	dc33      	bgt.n	8000b04 <SSD1306_draw_pixel+0xb0>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d002      	beq.n	8000aa6 <SSD1306_draw_pixel+0x52>
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d012      	beq.n	8000aca <SSD1306_draw_pixel+0x76>
 8000aa4:	e02e      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	4053      	eors	r3, r2
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	80bb      	strh	r3, [r7, #4]
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	4053      	eors	r3, r2
 8000abc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	80fb      	strh	r3, [r7, #6]
				break;
 8000ac8:	e01c      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	80bb      	strh	r3, [r7, #4]
				break;
 8000ade:	e011      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	4053      	eors	r3, r2
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4053      	eors	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
 8000af0:	88fa      	ldrh	r2, [r7, #6]
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	4053      	eors	r3, r2
 8000af6:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	80bb      	strh	r3, [r7, #4]
				break;
 8000b02:	bf00      	nop
		}

		switch (color)
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d051      	beq.n	8000bae <SSD1306_draw_pixel+0x15a>
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	dc74      	bgt.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d026      	beq.n	8000b60 <SSD1306_draw_pixel+0x10c>
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d170      	bne.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8000b16:	4b3a      	ldr	r3, [pc, #232]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da00      	bge.n	8000b28 <SSD1306_draw_pixel+0xd4>
 8000b26:	3307      	adds	r3, #7
 8000b28:	10db      	asrs	r3, r3, #3
 8000b2a:	b218      	sxth	r0, r3
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	440b      	add	r3, r1
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b25c      	sxtb	r4, r3
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b52:	4602      	mov	r2, r0
 8000b54:	01d2      	lsls	r2, r2, #7
 8000b56:	440a      	add	r2, r1
 8000b58:	4413      	add	r3, r2
 8000b5a:	b2e2      	uxtb	r2, r4
 8000b5c:	701a      	strb	r2, [r3, #0]
				break;
 8000b5e:	e04b      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8000b60:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <SSD1306_draw_pixel+0x11e>
 8000b70:	3307      	adds	r3, #7
 8000b72:	10db      	asrs	r3, r3, #3
 8000b74:	b218      	sxth	r0, r3
 8000b76:	4603      	mov	r3, r0
 8000b78:	01db      	lsls	r3, r3, #7
 8000b7a:	440b      	add	r3, r1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	4013      	ands	r3, r2
 8000b96:	b25c      	sxtb	r4, r3
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	01d2      	lsls	r2, r2, #7
 8000ba4:	440a      	add	r2, r1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2e2      	uxtb	r2, r4
 8000baa:	701a      	strb	r2, [r3, #0]
				break;
 8000bac:	e024      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da00      	bge.n	8000bc0 <SSD1306_draw_pixel+0x16c>
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	10db      	asrs	r3, r3, #3
 8000bc2:	b218      	sxth	r0, r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	440b      	add	r3, r1
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	4053      	eors	r3, r2
 8000be0:	b25c      	sxtb	r4, r3
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bea:	4602      	mov	r2, r0
 8000bec:	01d2      	lsls	r2, r2, #7
 8000bee:	440a      	add	r2, r1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2e2      	uxtb	r2, r4
 8000bf4:	701a      	strb	r2, [r3, #0]
				break;
 8000bf6:	bf00      	nop
		}
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	20000084 	.word	0x20000084

08000c04 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <SSD1306_display_clear+0x18>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f005 fc8e 	bl	8006534 <memset>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000084 	.word	0x20000084

08000c20 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000c20:	b490      	push	{r4, r7}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4604      	mov	r4, r0
 8000c28:	4608      	mov	r0, r1
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4623      	mov	r3, r4
 8000c30:	80fb      	strh	r3, [r7, #6]
 8000c32:	4603      	mov	r3, r0
 8000c34:	80bb      	strh	r3, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8000c3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db75      	blt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c4c:	dc71      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8000c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da06      	bge.n	8000c64 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	807b      	strh	r3, [r7, #2]
			x = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8000c64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2b80      	cmp	r3, #128	@ 0x80
 8000c70:	dd04      	ble.n	8000c7c <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8000c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dd56      	ble.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <SSD1306_draw_fast_hline_internal+0x11c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da00      	bge.n	8000c92 <SSD1306_draw_fast_hline_internal+0x72>
 8000c90:	3307      	adds	r3, #7
 8000c92:	10db      	asrs	r3, r3, #3
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	01d9      	lsls	r1, r3, #7
 8000c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8000cb0:	883b      	ldrh	r3, [r7, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d034      	beq.n	8000d20 <SSD1306_draw_fast_hline_internal+0x100>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	dc3b      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d013      	beq.n	8000ce6 <SSD1306_draw_fast_hline_internal+0xc6>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d137      	bne.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
			{
				case SSD1306_WHITE:
					while (w--)
 8000cc2:	e007      	b.n	8000cd4 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60fa      	str	r2, [r7, #12]
 8000cca:	7819      	ldrb	r1, [r3, #0]
 8000ccc:	7afa      	ldrb	r2, [r7, #11]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	3a01      	subs	r2, #1
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	807a      	strh	r2, [r7, #2]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1ef      	bne.n	8000cc4 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000ce4:	e025      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_BLACK:
					mask = ~mask;
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000cec:	e007      	b.n	8000cfe <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60fa      	str	r2, [r7, #12]
 8000cf4:	7819      	ldrb	r1, [r3, #0]
 8000cf6:	7afa      	ldrb	r2, [r7, #11]
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	3a01      	subs	r2, #1
 8000d06:	b292      	uxth	r2, r2
 8000d08:	807a      	strh	r2, [r7, #2]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1ef      	bne.n	8000cee <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8000d0e:	e010      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60fa      	str	r2, [r7, #12]
 8000d16:	7819      	ldrb	r1, [r3, #0]
 8000d18:	7afa      	ldrb	r2, [r7, #11]
 8000d1a:	404a      	eors	r2, r1
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	3a01      	subs	r2, #1
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	807a      	strh	r2, [r7, #2]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ef      	bne.n	8000d10 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8000d30:	bf00      	nop
			}
		}
	}
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc90      	pop	{r4, r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000084 	.word	0x20000084

08000d40 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4604      	mov	r4, r0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4623      	mov	r3, r4
 8000d50:	80fb      	strh	r3, [r7, #6]
 8000d52:	4603      	mov	r3, r0
 8000d54:	80bb      	strh	r3, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8000d62:	f000 f997 	bl	8001094 <SSD1306_get_rotation>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d033      	beq.n	8000dd4 <SSD1306_draw_fast_vline+0x94>
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	dc45      	bgt.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d002      	beq.n	8000d7a <SSD1306_draw_fast_vline+0x3a>
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d01b      	beq.n	8000db0 <SSD1306_draw_fast_vline+0x70>
 8000d78:	e040      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8000d7e:	88fa      	ldrh	r2, [r7, #6]
 8000d80:	88bb      	ldrh	r3, [r7, #4]
 8000d82:	4053      	eors	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	88ba      	ldrh	r2, [r7, #4]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4053      	eors	r3, r2
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	88fa      	ldrh	r2, [r7, #6]
 8000d90:	88bb      	ldrh	r3, [r7, #4]
 8000d92:	4053      	eors	r3, r2
 8000d94:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	80fb      	strh	r3, [r7, #6]
  			break;
 8000dae:	e025      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000dba:	88bb      	ldrh	r3, [r7, #4]
 8000dbc:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dd2:	e013      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000dd8:	88fa      	ldrh	r2, [r7, #6]
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	4053      	eors	r3, r2
 8000dde:	80fb      	strh	r3, [r7, #6]
 8000de0:	88ba      	ldrh	r2, [r7, #4]
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	4053      	eors	r3, r2
 8000de6:	80bb      	strh	r3, [r7, #4]
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	4053      	eors	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dfa:	bf00      	nop
	}

	if (bSwap)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d009      	beq.n	8000e16 <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8000e02:	883b      	ldrh	r3, [r7, #0]
 8000e04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e10:	f7ff ff06 	bl	8000c20 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8000e14:	e008      	b.n	8000e28 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e24:	f000 f804 	bl	8000e30 <SSD1306_draw_fast_vline_internal>
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}

08000e30 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f2c0 80dc 	blt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5e:	f300 80d7 	bgt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
	{
		// X coord in bounds?
		if (__y < 0)
 8000e62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da06      	bge.n	8000e78 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000e78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e80:	4413      	add	r3, r2
 8000e82:	2b40      	cmp	r3, #64	@ 0x40
 8000e84:	dd04      	ble.n	8000e90 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000e90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f340 80bb 	ble.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	737b      	strb	r3, [r7, #13]
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800101c <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	7b7a      	ldrb	r2, [r7, #13]
 8000ea8:	08d2      	lsrs	r2, r2, #3
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	01d1      	lsls	r1, r2, #7
 8000eae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000eb2:	440a      	add	r2, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d041      	beq.n	8000f4a <SSD1306_draw_fast_vline_internal+0x11a>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f1c3 0308 	rsb	r3, r3, #8
 8000ecc:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4a53      	ldr	r2, [pc, #332]	@ (8001020 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000ed8:	7dfa      	ldrb	r2, [r7, #23]
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d20b      	bcs.n	8000ef8 <SSD1306_draw_fast_vline_internal+0xc8>
				{
					mask &= (0XFF >> (mod - h));
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	22ff      	movs	r2, #255	@ 0xff
 8000ee8:	fa42 f303 	asr.w	r3, r2, r3
 8000eec:	b25a      	sxtb	r2, r3
 8000eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d01a      	beq.n	8000f34 <SSD1306_draw_fast_vline_internal+0x104>
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	dc20      	bgt.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d009      	beq.n	8000f1a <SSD1306_draw_fast_vline_internal+0xea>
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d11c      	bne.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	701a      	strb	r2, [r3, #0]
						break;
 8000f18:	e014      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	701a      	strb	r2, [r3, #0]
						break;
 8000f32:	e007      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	701a      	strb	r2, [r3, #0]
						break;
 8000f42:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	3380      	adds	r3, #128	@ 0x80
 8000f48:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000f4a:	7dfa      	ldrb	r2, [r7, #23]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d35e      	bcc.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
			{
				// More to go?
				h -= mod;
 8000f52:	7dfa      	ldrb	r2, [r7, #23]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	d925      	bls.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
				{
					if (color == SSD1306_INVERSE)
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d10f      	bne.n	8000f86 <SSD1306_draw_fast_vline_internal+0x156>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3380      	adds	r3, #128	@ 0x80
 8000f76:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d8f0      	bhi.n	8000f66 <SSD1306_draw_fast_vline_internal+0x136>
 8000f84:	e012      	b.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000f86:	883b      	ldrh	r3, [r7, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SSD1306_draw_fast_vline_internal+0x160>
 8000f8c:	23ff      	movs	r3, #255	@ 0xff
 8000f8e:	e000      	b.n	8000f92 <SSD1306_draw_fast_vline_internal+0x162>
 8000f90:	2300      	movs	r3, #0
 8000f92:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	7b3a      	ldrb	r2, [r7, #12]
 8000f98:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3380      	adds	r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	3b08      	subs	r3, #8
 8000fa4:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d8f3      	bhi.n	8000f94 <SSD1306_draw_fast_vline_internal+0x164>
					}
				}

				if (h)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d02e      	beq.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <SSD1306_draw_fast_vline_internal+0x1f4>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000fc4:	883b      	ldrh	r3, [r7, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d01a      	beq.n	8001000 <SSD1306_draw_fast_vline_internal+0x1d0>
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	dc20      	bgt.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <SSD1306_draw_fast_vline_internal+0x1b6>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d11c      	bne.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	701a      	strb	r2, [r3, #0]
							break;
 8000fe4:	e014      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25a      	sxtb	r2, r3
 8000fec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	701a      	strb	r2, [r3, #0]
							break;
 8000ffe:	e007      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	4053      	eors	r3, r2
 8001008:	b2da      	uxtb	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	701a      	strb	r2, [r3, #0]
							break;
 800100e:	bf00      	nop
					}
				}
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bc90      	pop	{r4, r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000084 	.word	0x20000084
 8001020:	0800750c 	.word	0x0800750c
 8001024:	08007514 	.word	0x08007514

08001028 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 800102e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001032:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001034:	2022      	movs	r0, #34	@ 0x22
 8001036:	f7ff fc71 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc6e 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001040:	20ff      	movs	r0, #255	@ 0xff
 8001042:	f7ff fc6b 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8001046:	2021      	movs	r0, #33	@ 0x21
 8001048:	f7ff fc68 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fc65 	bl	800091c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001052:	207f      	movs	r0, #127	@ 0x7f
 8001054:	f7ff fc62 	bl	800091c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SSD1306_display_repaint+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	88fa      	ldrh	r2, [r7, #6]
 800105e:	4619      	mov	r1, r3
 8001060:	2040      	movs	r0, #64	@ 0x40
 8001062:	f7ff fc41 	bl	80008e8 <platform_write_dma>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000084 	.word	0x20000084

08001074 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 800107e:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <SSD1306_set_rotation+0x1c>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	7013      	strb	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000088 	.word	0x20000088

08001094 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return rotation;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <SSD1306_get_rotation+0x14>)
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000088 	.word	0x20000088

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_DMA_Init+0x3c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <MX_DMA_Init+0x3c>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_DMA_Init+0x3c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200c      	movs	r0, #12
 80010d4:	f000 fed3 	bl	8001e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010d8:	200c      	movs	r0, #12
 80010da:	f000 feec 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a38      	ldr	r2, [pc, #224]	@ (80011ec <MX_GPIO_Init+0x100>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a31      	ldr	r2, [pc, #196]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a2a      	ldr	r2, [pc, #168]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <MX_GPIO_Init+0x100>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <MX_GPIO_Init+0x100>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <MX_GPIO_Init+0x100>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001194:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <MX_GPIO_Init+0x104>)
 8001196:	f001 fbd9 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC1_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENC1_BUTTON_Pin;
 800119a:	2301      	movs	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC1_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <MX_GPIO_Init+0x108>)
 80011b0:	f001 fa48 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80011b4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4808      	ldr	r0, [pc, #32]	@ (80011f0 <MX_GPIO_Init+0x104>)
 80011ce:	f001 fa39 	bl	8002644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2006      	movs	r0, #6
 80011d8:	f000 fe51 	bl	8001e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011dc:	2006      	movs	r0, #6
 80011de:	f000 fe6a 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	@ 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40020800 	.word	0x40020800

080011f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <MX_I2C1_Init+0x50>)
 80011fe:	4a13      	ldr	r2, [pc, #76]	@ (800124c <MX_I2C1_Init+0x54>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001204:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <MX_I2C1_Init+0x58>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001216:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800121a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001236:	f001 fbd5 	bl	80029e4 <HAL_I2C_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001240:	f000 fa5e 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000008c 	.word	0x2000008c
 800124c:	40005400 	.word	0x40005400
 8001250:	00061a80 	.word	0x00061a80

08001254 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a34      	ldr	r2, [pc, #208]	@ (8001344 <HAL_I2C_MspInit+0xf0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d161      	bne.n	800133a <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a32      	ldr	r2, [pc, #200]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_I2C_SCL_Pin|OLED_I2C_SDA_Pin;
 8001292:	23c0      	movs	r3, #192	@ 0xc0
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001296:	2312      	movs	r3, #18
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a2:	2304      	movs	r3, #4
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4827      	ldr	r0, [pc, #156]	@ (800134c <HAL_I2C_MspInit+0xf8>)
 80012ae:	f001 f9c9 	bl	8002644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012d0:	4a20      	ldr	r2, [pc, #128]	@ (8001354 <HAL_I2C_MspInit+0x100>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012da:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012dc:	2240      	movs	r2, #64	@ 0x40
 80012de:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 8001302:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001306:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800130e:	4810      	ldr	r0, [pc, #64]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 8001310:	f000 fdec 	bl	8001eec <HAL_DMA_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800131a:	f000 f9f1 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 8001322:	635a      	str	r2, [r3, #52]	@ 0x34
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201f      	movs	r0, #31
 8001330:	f000 fda5 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001334:	201f      	movs	r0, #31
 8001336:	f000 fdbe 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40005400 	.word	0x40005400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400
 8001350:	200000e0 	.word	0x200000e0
 8001354:	40026028 	.word	0x40026028

08001358 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001360:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001364:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001370:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001374:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001378:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001380:	e000      	b.n	8001384 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001382:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001384:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f9      	beq.n	8001382 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800138e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffd1 	bl	8001358 <ITM_SendChar>
	return ch;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c4:	f000 fc0e 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c8:	f000 f810 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013cc:	f7ff fe8e 	bl	80010ec <MX_GPIO_Init>
  MX_DMA_Init();
 80013d0:	f7ff fe6c 	bl	80010ac <MX_DMA_Init>
  MX_I2C1_Init();
 80013d4:	f7ff ff10 	bl	80011f8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80013d8:	f000 fb2e 	bl	8001a38 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  OLED_init();
 80013dc:	f000 f996 	bl	800170c <OLED_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ENCODER1_update();
 80013e0:	f000 f91e 	bl	8001620 <ENCODER1_update>
	  OLED_update_time();
 80013e4:	f000 f860 	bl	80014a8 <OLED_update_time>
	  ENCODER1_update();
 80013e8:	bf00      	nop
 80013ea:	e7f9      	b.n	80013e0 <main+0x20>

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	@ 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	@ 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 f89a 	bl	8006534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <SystemClock_Config+0xb4>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a21      	ldr	r2, [pc, #132]	@ (80014a0 <SystemClock_Config+0xb4>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <SystemClock_Config+0xb4>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <SystemClock_Config+0xb8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <SystemClock_Config+0xb8>)
 8001436:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <SystemClock_Config+0xb8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001448:	2302      	movs	r3, #2
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144c:	2301      	movs	r3, #1
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001450:	2310      	movs	r3, #16
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001454:	2300      	movs	r3, #0
 8001456:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fddb 	bl	8005018 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001468:	f000 f94a 	bl	8001700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f004 f83e 	bl	8005508 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001492:	f000 f935 	bl	8001700 <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3750      	adds	r7, #80	@ 0x50
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <OLED_update_time>:

/* USER CODE BEGIN 4 */

void OLED_update_time(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

    OLED_print("Ustaw godzin\313", 0, OLED_ROW_1, 1);
 80014ac:	2301      	movs	r3, #1
 80014ae:	2238      	movs	r2, #56	@ 0x38
 80014b0:	2100      	movs	r1, #0
 80014b2:	484d      	ldr	r0, [pc, #308]	@ (80015e8 <OLED_update_time+0x140>)
 80014b4:	f000 f930 	bl	8001718 <OLED_print>

    if(selection_mode != SELECTION_NONE) {
 80014b8:	4b4c      	ldr	r3, [pc, #304]	@ (80015ec <OLED_update_time+0x144>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d055      	beq.n	800156c <OLED_update_time+0xc4>

    	if(selection_mode == SELECTION_HOUR) {
 80014c0:	4b4a      	ldr	r3, [pc, #296]	@ (80015ec <OLED_update_time+0x144>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d128      	bne.n	800151a <OLED_update_time+0x72>

    		if(cursor_cnt < 60) {
 80014c8:	4b49      	ldr	r3, [pc, #292]	@ (80015f0 <OLED_update_time+0x148>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b3b      	cmp	r3, #59	@ 0x3b
 80014ce:	d80f      	bhi.n	80014f0 <OLED_update_time+0x48>
    			sprintf(time_hour_str, "%s%d", selected_hour < 10 ? "0" : "", selected_hour);
 80014d0:	4b48      	ldr	r3, [pc, #288]	@ (80015f4 <OLED_update_time+0x14c>)
 80014d2:	f993 3000 	ldrsb.w	r3, [r3]
 80014d6:	2b09      	cmp	r3, #9
 80014d8:	dc01      	bgt.n	80014de <OLED_update_time+0x36>
 80014da:	4a47      	ldr	r2, [pc, #284]	@ (80015f8 <OLED_update_time+0x150>)
 80014dc:	e000      	b.n	80014e0 <OLED_update_time+0x38>
 80014de:	4a47      	ldr	r2, [pc, #284]	@ (80015fc <OLED_update_time+0x154>)
 80014e0:	4b44      	ldr	r3, [pc, #272]	@ (80015f4 <OLED_update_time+0x14c>)
 80014e2:	f993 3000 	ldrsb.w	r3, [r3]
 80014e6:	4946      	ldr	r1, [pc, #280]	@ (8001600 <OLED_update_time+0x158>)
 80014e8:	4846      	ldr	r0, [pc, #280]	@ (8001604 <OLED_update_time+0x15c>)
 80014ea:	f004 ff29 	bl	8006340 <siprintf>
 80014ee:	e004      	b.n	80014fa <OLED_update_time+0x52>
    		} else {
    			sprintf(time_hour_str, "%s", "  ");
 80014f0:	4a45      	ldr	r2, [pc, #276]	@ (8001608 <OLED_update_time+0x160>)
 80014f2:	4946      	ldr	r1, [pc, #280]	@ (800160c <OLED_update_time+0x164>)
 80014f4:	4843      	ldr	r0, [pc, #268]	@ (8001604 <OLED_update_time+0x15c>)
 80014f6:	f004 ff23 	bl	8006340 <siprintf>
    		}
    		sprintf(time_minute_str, "%s%d", selected_minutes < 10 ? "0" : "", selected_minutes);
 80014fa:	4b45      	ldr	r3, [pc, #276]	@ (8001610 <OLED_update_time+0x168>)
 80014fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001500:	2b09      	cmp	r3, #9
 8001502:	dc01      	bgt.n	8001508 <OLED_update_time+0x60>
 8001504:	4a3c      	ldr	r2, [pc, #240]	@ (80015f8 <OLED_update_time+0x150>)
 8001506:	e000      	b.n	800150a <OLED_update_time+0x62>
 8001508:	4a3c      	ldr	r2, [pc, #240]	@ (80015fc <OLED_update_time+0x154>)
 800150a:	4b41      	ldr	r3, [pc, #260]	@ (8001610 <OLED_update_time+0x168>)
 800150c:	f993 3000 	ldrsb.w	r3, [r3]
 8001510:	493b      	ldr	r1, [pc, #236]	@ (8001600 <OLED_update_time+0x158>)
 8001512:	4840      	ldr	r0, [pc, #256]	@ (8001614 <OLED_update_time+0x16c>)
 8001514:	f004 ff14 	bl	8006340 <siprintf>
 8001518:	e046      	b.n	80015a8 <OLED_update_time+0x100>

    	} else {

    		if(cursor_cnt < 60) {
 800151a:	4b35      	ldr	r3, [pc, #212]	@ (80015f0 <OLED_update_time+0x148>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001520:	d80f      	bhi.n	8001542 <OLED_update_time+0x9a>
        		sprintf(time_minute_str, "%s%d", selected_minutes < 10 ? "0" : "", selected_minutes);
 8001522:	4b3b      	ldr	r3, [pc, #236]	@ (8001610 <OLED_update_time+0x168>)
 8001524:	f993 3000 	ldrsb.w	r3, [r3]
 8001528:	2b09      	cmp	r3, #9
 800152a:	dc01      	bgt.n	8001530 <OLED_update_time+0x88>
 800152c:	4a32      	ldr	r2, [pc, #200]	@ (80015f8 <OLED_update_time+0x150>)
 800152e:	e000      	b.n	8001532 <OLED_update_time+0x8a>
 8001530:	4a32      	ldr	r2, [pc, #200]	@ (80015fc <OLED_update_time+0x154>)
 8001532:	4b37      	ldr	r3, [pc, #220]	@ (8001610 <OLED_update_time+0x168>)
 8001534:	f993 3000 	ldrsb.w	r3, [r3]
 8001538:	4931      	ldr	r1, [pc, #196]	@ (8001600 <OLED_update_time+0x158>)
 800153a:	4836      	ldr	r0, [pc, #216]	@ (8001614 <OLED_update_time+0x16c>)
 800153c:	f004 ff00 	bl	8006340 <siprintf>
 8001540:	e004      	b.n	800154c <OLED_update_time+0xa4>
			} else {
				sprintf(time_minute_str, "%s", "  ");
 8001542:	4a31      	ldr	r2, [pc, #196]	@ (8001608 <OLED_update_time+0x160>)
 8001544:	4931      	ldr	r1, [pc, #196]	@ (800160c <OLED_update_time+0x164>)
 8001546:	4833      	ldr	r0, [pc, #204]	@ (8001614 <OLED_update_time+0x16c>)
 8001548:	f004 fefa 	bl	8006340 <siprintf>
			}
    		sprintf(time_hour_str, "%s%d", selected_hour < 10 ? "0" : "", selected_hour);
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <OLED_update_time+0x14c>)
 800154e:	f993 3000 	ldrsb.w	r3, [r3]
 8001552:	2b09      	cmp	r3, #9
 8001554:	dc01      	bgt.n	800155a <OLED_update_time+0xb2>
 8001556:	4a28      	ldr	r2, [pc, #160]	@ (80015f8 <OLED_update_time+0x150>)
 8001558:	e000      	b.n	800155c <OLED_update_time+0xb4>
 800155a:	4a28      	ldr	r2, [pc, #160]	@ (80015fc <OLED_update_time+0x154>)
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <OLED_update_time+0x14c>)
 800155e:	f993 3000 	ldrsb.w	r3, [r3]
 8001562:	4927      	ldr	r1, [pc, #156]	@ (8001600 <OLED_update_time+0x158>)
 8001564:	4827      	ldr	r0, [pc, #156]	@ (8001604 <OLED_update_time+0x15c>)
 8001566:	f004 feeb 	bl	8006340 <siprintf>
 800156a:	e01d      	b.n	80015a8 <OLED_update_time+0x100>
    	}

    } else {
		sprintf(time_hour_str, "%s%d", selected_hour < 10 ? "0" : "", selected_hour);
 800156c:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <OLED_update_time+0x14c>)
 800156e:	f993 3000 	ldrsb.w	r3, [r3]
 8001572:	2b09      	cmp	r3, #9
 8001574:	dc01      	bgt.n	800157a <OLED_update_time+0xd2>
 8001576:	4a20      	ldr	r2, [pc, #128]	@ (80015f8 <OLED_update_time+0x150>)
 8001578:	e000      	b.n	800157c <OLED_update_time+0xd4>
 800157a:	4a20      	ldr	r2, [pc, #128]	@ (80015fc <OLED_update_time+0x154>)
 800157c:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <OLED_update_time+0x14c>)
 800157e:	f993 3000 	ldrsb.w	r3, [r3]
 8001582:	491f      	ldr	r1, [pc, #124]	@ (8001600 <OLED_update_time+0x158>)
 8001584:	481f      	ldr	r0, [pc, #124]	@ (8001604 <OLED_update_time+0x15c>)
 8001586:	f004 fedb 	bl	8006340 <siprintf>
		sprintf(time_minute_str, "%s%d", selected_minutes < 10 ? "0" : "", selected_minutes);
 800158a:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <OLED_update_time+0x168>)
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	2b09      	cmp	r3, #9
 8001592:	dc01      	bgt.n	8001598 <OLED_update_time+0xf0>
 8001594:	4a18      	ldr	r2, [pc, #96]	@ (80015f8 <OLED_update_time+0x150>)
 8001596:	e000      	b.n	800159a <OLED_update_time+0xf2>
 8001598:	4a18      	ldr	r2, [pc, #96]	@ (80015fc <OLED_update_time+0x154>)
 800159a:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <OLED_update_time+0x168>)
 800159c:	f993 3000 	ldrsb.w	r3, [r3]
 80015a0:	4917      	ldr	r1, [pc, #92]	@ (8001600 <OLED_update_time+0x158>)
 80015a2:	481c      	ldr	r0, [pc, #112]	@ (8001614 <OLED_update_time+0x16c>)
 80015a4:	f004 fecc 	bl	8006340 <siprintf>
    }

    if(cursor_cnt > 70) cursor_cnt = 0;
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <OLED_update_time+0x148>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	2b46      	cmp	r3, #70	@ 0x46
 80015ae:	d903      	bls.n	80015b8 <OLED_update_time+0x110>
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <OLED_update_time+0x148>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	801a      	strh	r2, [r3, #0]
 80015b6:	e005      	b.n	80015c4 <OLED_update_time+0x11c>
    else cursor_cnt++;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <OLED_update_time+0x148>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	b29a      	uxth	r2, r3
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <OLED_update_time+0x148>)
 80015c2:	801a      	strh	r2, [r3, #0]

    printf("%s\n", time_str);
 80015c4:	4814      	ldr	r0, [pc, #80]	@ (8001618 <OLED_update_time+0x170>)
 80015c6:	f004 feb3 	bl	8006330 <puts>

	sprintf(time_str, "%s:%s", time_hour_str, time_minute_str);
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <OLED_update_time+0x16c>)
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <OLED_update_time+0x15c>)
 80015ce:	4913      	ldr	r1, [pc, #76]	@ (800161c <OLED_update_time+0x174>)
 80015d0:	4811      	ldr	r0, [pc, #68]	@ (8001618 <OLED_update_time+0x170>)
 80015d2:	f004 feb5 	bl	8006340 <siprintf>
	OLED_print(time_str, 0, OLED_ROW_5, 2);
 80015d6:	2302      	movs	r3, #2
 80015d8:	2218      	movs	r2, #24
 80015da:	2100      	movs	r1, #0
 80015dc:	480e      	ldr	r0, [pc, #56]	@ (8001618 <OLED_update_time+0x170>)
 80015de:	f000 f89b 	bl	8001718 <OLED_print>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08006fdc 	.word	0x08006fdc
 80015ec:	20000184 	.word	0x20000184
 80015f0:	20000142 	.word	0x20000142
 80015f4:	20000140 	.word	0x20000140
 80015f8:	08006fec 	.word	0x08006fec
 80015fc:	08006ff0 	.word	0x08006ff0
 8001600:	08006ff4 	.word	0x08006ff4
 8001604:	20000164 	.word	0x20000164
 8001608:	08006ffc 	.word	0x08006ffc
 800160c:	08007000 	.word	0x08007000
 8001610:	20000141 	.word	0x20000141
 8001614:	20000174 	.word	0x20000174
 8001618:	20000144 	.word	0x20000144
 800161c:	08007004 	.word	0x08007004

08001620 <ENCODER1_update>:


void ENCODER1_update(void) {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
	static uint16_t last_cnt = 0;
	int diff = htim1.Instance->CNT - last_cnt;
 8001626:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <ENCODER1_update+0xcc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	4a30      	ldr	r2, [pc, #192]	@ (80016f0 <ENCODER1_update+0xd0>)
 800162e:	8812      	ldrh	r2, [r2, #0]
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	607b      	str	r3, [r7, #4]

	if(diff >= 4 || diff <= -4) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b03      	cmp	r3, #3
 8001638:	dc03      	bgt.n	8001642 <ENCODER1_update+0x22>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f113 0f03 	cmn.w	r3, #3
 8001640:	da4d      	bge.n	80016de <ENCODER1_update+0xbe>
		diff /= 4;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da00      	bge.n	800164a <ENCODER1_update+0x2a>
 8001648:	3303      	adds	r3, #3
 800164a:	109b      	asrs	r3, r3, #2
 800164c:	607b      	str	r3, [r7, #4]

		switch(selection_mode) {
 800164e:	4b29      	ldr	r3, [pc, #164]	@ (80016f4 <ENCODER1_update+0xd4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <ENCODER1_update+0x3c>
 8001656:	2b01      	cmp	r3, #1
 8001658:	d01c      	beq.n	8001694 <ENCODER1_update+0x74>
				selected_minutes += (int8_t)diff;

				if(selected_minutes > 59) selected_minutes = 0;
				if (selected_minutes < 0) selected_minutes = 59;
			default:
				break;
 800165a:	e039      	b.n	80016d0 <ENCODER1_update+0xb0>
				selected_hour += (int8_t)diff;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <ENCODER1_update+0xd8>)
 8001662:	f993 3000 	ldrsb.w	r3, [r3]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4413      	add	r3, r2
 800166a:	b2db      	uxtb	r3, r3
 800166c:	b25a      	sxtb	r2, r3
 800166e:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <ENCODER1_update+0xd8>)
 8001670:	701a      	strb	r2, [r3, #0]
				if(selected_hour > 23) selected_hour = 0;
 8001672:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <ENCODER1_update+0xd8>)
 8001674:	f993 3000 	ldrsb.w	r3, [r3]
 8001678:	2b17      	cmp	r3, #23
 800167a:	dd02      	ble.n	8001682 <ENCODER1_update+0x62>
 800167c:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <ENCODER1_update+0xd8>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
				if (selected_hour < 0) selected_hour = 23;
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <ENCODER1_update+0xd8>)
 8001684:	f993 3000 	ldrsb.w	r3, [r3]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da1f      	bge.n	80016cc <ENCODER1_update+0xac>
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <ENCODER1_update+0xd8>)
 800168e:	2217      	movs	r2, #23
 8001690:	701a      	strb	r2, [r3, #0]
				break;
 8001692:	e01b      	b.n	80016cc <ENCODER1_update+0xac>
				selected_minutes += (int8_t)diff;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <ENCODER1_update+0xdc>)
 800169a:	f993 3000 	ldrsb.w	r3, [r3]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <ENCODER1_update+0xdc>)
 80016a8:	701a      	strb	r2, [r3, #0]
				if(selected_minutes > 59) selected_minutes = 0;
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <ENCODER1_update+0xdc>)
 80016ac:	f993 3000 	ldrsb.w	r3, [r3]
 80016b0:	2b3b      	cmp	r3, #59	@ 0x3b
 80016b2:	dd02      	ble.n	80016ba <ENCODER1_update+0x9a>
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <ENCODER1_update+0xdc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
				if (selected_minutes < 0) selected_minutes = 59;
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <ENCODER1_update+0xdc>)
 80016bc:	f993 3000 	ldrsb.w	r3, [r3]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	da05      	bge.n	80016d0 <ENCODER1_update+0xb0>
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <ENCODER1_update+0xdc>)
 80016c6:	223b      	movs	r2, #59	@ 0x3b
 80016c8:	701a      	strb	r2, [r3, #0]
				break;
 80016ca:	e001      	b.n	80016d0 <ENCODER1_update+0xb0>
				break;
 80016cc:	bf00      	nop
 80016ce:	e000      	b.n	80016d2 <ENCODER1_update+0xb2>
				break;
 80016d0:	bf00      	nop
		}

		last_cnt = htim1.Instance->CNT;
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <ENCODER1_update+0xcc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <ENCODER1_update+0xd0>)
 80016dc:	801a      	strh	r2, [r3, #0]
	}
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	2000018c 	.word	0x2000018c
 80016f0:	20000186 	.word	0x20000186
 80016f4:	20000184 	.word	0x20000184
 80016f8:	20000140 	.word	0x20000140
 80016fc:	20000141 	.word	0x20000141

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <Error_Handler+0x8>

0800170c <OLED_init>:
 */


#include "oled.h"

void OLED_init(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	SSD1306_init();
 8001710:	f7ff f914 	bl	800093c <SSD1306_init>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <OLED_print>:


void OLED_print(char *str, uint16_t x, uint16_t y, uint8_t size) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af04      	add	r7, sp, #16
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4603      	mov	r3, r0
 8001728:	817b      	strh	r3, [r7, #10]
 800172a:	460b      	mov	r3, r1
 800172c:	813b      	strh	r3, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	71fb      	strb	r3, [r7, #7]
	GFX_draw_string(x, y, str, WHITE, BLACK, size, size);
 8001732:	8978      	ldrh	r0, [r7, #10]
 8001734:	8939      	ldrh	r1, [r7, #8]
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	79fa      	ldrb	r2, [r7, #7]
 800173a:	9202      	str	r2, [sp, #8]
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	2300      	movs	r3, #0
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2301      	movs	r3, #1
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	f7ff f84b 	bl	80007e0 <GFX_draw_string>
	SSD1306_display_repaint();
 800174a:	f7ff fc6d 	bl	8001028 <SSD1306_display_repaint>
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176c:	6453      	str	r3, [r2, #68]	@ 0x44
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a08      	ldr	r2, [pc, #32]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <NMI_Handler+0x4>

080017b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <MemManage_Handler+0x4>

080017c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <UsageFault_Handler+0x4>

080017d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fe:	f000 fa43 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}

08001806 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_BUTTON_Pin);
 800180a:	2001      	movs	r0, #1
 800180c:	f001 f8d2 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <DMA1_Stream1_IRQHandler+0x10>)
 800181a:	f000 fc8f 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200000e0 	.word	0x200000e0

08001828 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800182e:	f004 f96b 	bl	8005b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000018c 	.word	0x2000018c

0800183c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <I2C1_EV_IRQHandler+0x10>)
 8001842:	f001 fc81 	bl	8003148 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000008c 	.word	0x2000008c

08001850 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d104      	bne.n	800186c <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8001862:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001866:	4804      	ldr	r0, [pc, #16]	@ (8001878 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001868:	f001 f889 	bl	800297e <HAL_GPIO_TogglePin>
    }
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40010000 	.word	0x40010000
 8001878:	40020c00 	.word	0x40020c00

0800187c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
    if (pin == ENC1_BUTTON_Pin)
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d116      	bne.n	80018ba <HAL_GPIO_EXTI_Callback+0x3e>
    {
    	switch(selection_mode) {
 800188c:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_EXTI_Callback+0x26>
 8001894:	2b02      	cmp	r3, #2
 8001896:	dc10      	bgt.n	80018ba <HAL_GPIO_EXTI_Callback+0x3e>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_GPIO_EXTI_Callback+0x2e>
 800189c:	2b01      	cmp	r3, #1
 800189e:	d008      	beq.n	80018b2 <HAL_GPIO_EXTI_Callback+0x36>
    		case SELECTION_MINUTE:
    			selection_mode = SELECTION_NONE;
				break;
    	}
    }
}
 80018a0:	e00b      	b.n	80018ba <HAL_GPIO_EXTI_Callback+0x3e>
    			selection_mode = SELECTION_HOUR;
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
    			break;
 80018a8:	e007      	b.n	80018ba <HAL_GPIO_EXTI_Callback+0x3e>
    			selection_mode = SELECTION_MINUTE;
 80018aa:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
				break;
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_EXTI_Callback+0x3e>
    			selection_mode = SELECTION_NONE;
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	701a      	strb	r2, [r3, #0]
				break;
 80018b8:	bf00      	nop
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000184 	.word	0x20000184

080018cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e00a      	b.n	80018f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018de:	f3af 8000 	nop.w
 80018e2:	4601      	mov	r1, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf0      	blt.n	80018de <_read+0x12>
  }

  return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e009      	b.n	800192c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fd40 	bl	80013a6 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf1      	blt.n	8001918 <_write+0x12>
  }
  return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_close>:

int _close(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001966:	605a      	str	r2, [r3, #4]
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_isatty>:

int _isatty(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f004 fe0a 	bl	80065f0 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20020000 	.word	0x20020000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	20000188 	.word	0x20000188
 8001a10:	20000328 	.word	0x20000328

08001a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <SystemInit+0x20>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a1e:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <SystemInit+0x20>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	@ 0x30
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2224      	movs	r2, #36	@ 0x24
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f004 fd74 	bl	8006534 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a54:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001a56:	4a25      	ldr	r2, [pc, #148]	@ (8001aec <MX_TIM1_Init+0xb4>)
 8001a58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001a68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480f      	ldr	r0, [pc, #60]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001aac:	f003 fef8 	bl	80058a0 <HAL_TIM_Encoder_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ab6:	f7ff fe23 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4808      	ldr	r0, [pc, #32]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001ac8:	f004 f9e2 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ad2:	f7ff fe15 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001ad6:	213c      	movs	r1, #60	@ 0x3c
 8001ad8:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <MX_TIM1_Init+0xb0>)
 8001ada:	f003 ff87 	bl	80059ec <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	3730      	adds	r7, #48	@ 0x30
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000018c 	.word	0x2000018c
 8001aec:	40010000 	.word	0x40010000

08001af0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b84 <HAL_TIM_Encoder_MspInit+0x94>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d134      	bne.n	8001b7c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a14      	ldr	r2, [pc, #80]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8001b38:	f043 0310 	orr.w	r3, r3, #16
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CLK_Pin|ENC1_DATA_Pin;
 8001b4a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4809      	ldr	r0, [pc, #36]	@ (8001b8c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001b68:	f000 fd6c 	bl	8002644 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2019      	movs	r0, #25
 8001b72:	f000 f984 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b76:	2019      	movs	r0, #25
 8001b78:	f000 f99d 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	@ 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40021000 	.word	0x40021000

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b94:	f7ff ff3e 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f004 fd1d 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7ff fbfd 	bl	80013c0 <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001bd4:	08007580 	.word	0x08007580
  ldr r2, =_sbss
 8001bd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001bdc:	20000324 	.word	0x20000324

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	@ (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f92b 	bl	8001e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	200f      	movs	r0, #15
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fd9e 	bl	8001758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f943 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f90b 	bl	8001e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	200001d4 	.word	0x200001d4

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200001d4 	.word	0x200001d4

08001cc8 <__NVIC_SetPriorityGrouping>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <__NVIC_EnableIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	@ (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	@ 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <SysTick_Config>:
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e34:	d301      	bcc.n	8001e3a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00f      	b.n	8001e5a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <SysTick_Config+0x40>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e42:	210f      	movs	r1, #15
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f7ff ff8e 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <SysTick_Config+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <SysTick_Config+0x40>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010

08001e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff29 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff3e 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff8e 	bl	8001dbc <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5d 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff31 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa2 	bl	8001e24 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff feda 	bl	8001cb0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e099      	b.n	800203c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f28:	e00f      	b.n	8001f4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f2a:	f7ff fec1 	bl	8001cb0 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d908      	bls.n	8001f4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2203      	movs	r2, #3
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e078      	b.n	800203c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e8      	bne.n	8001f2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <HAL_DMA_Init+0x158>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d107      	bne.n	8001fb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	4313      	orrs	r3, r2
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f023 0307 	bic.w	r3, r3, #7
 8001fca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d117      	bne.n	800200e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00e      	beq.n	800200e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 faab 	bl	800254c <DMA_CheckFifoParam>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2240      	movs	r2, #64	@ 0x40
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800200a:	2301      	movs	r3, #1
 800200c:	e016      	b.n	800203c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fa62 	bl	80024e0 <DMA_CalcBaseAndBitshift>
 800201c:	4603      	mov	r3, r0
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002024:	223f      	movs	r2, #63	@ 0x3f
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	f010803f 	.word	0xf010803f

08002048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_DMA_Start_IT+0x26>
 800206a:	2302      	movs	r3, #2
 800206c:	e040      	b.n	80020f0 <HAL_DMA_Start_IT+0xa8>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d12f      	bne.n	80020e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2202      	movs	r2, #2
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f9f4 	bl	8002484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a0:	223f      	movs	r2, #63	@ 0x3f
 80020a2:	409a      	lsls	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0216 	orr.w	r2, r2, #22
 80020b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0208 	orr.w	r2, r2, #8
 80020ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e005      	b.n	80020ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2280      	movs	r2, #128	@ 0x80
 8002110:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00c      	b.n	8002130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2205      	movs	r2, #5
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002148:	4b8e      	ldr	r3, [pc, #568]	@ (8002384 <HAL_DMA_IRQHandler+0x248>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a8e      	ldr	r2, [pc, #568]	@ (8002388 <HAL_DMA_IRQHandler+0x24c>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0a9b      	lsrs	r3, r3, #10
 8002154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002166:	2208      	movs	r2, #8
 8002168:	409a      	lsls	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01a      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0204 	bic.w	r2, r2, #4
 800218e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	2208      	movs	r2, #8
 8002196:	409a      	lsls	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ac:	2201      	movs	r2, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d6:	f043 0202 	orr.w	r2, r3, #2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	2204      	movs	r2, #4
 80021e4:	409a      	lsls	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d012      	beq.n	8002214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002200:	2204      	movs	r2, #4
 8002202:	409a      	lsls	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	2210      	movs	r2, #16
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d043      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d03c      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	2210      	movs	r2, #16
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d018      	beq.n	800227e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d024      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
 800226a:	e01f      	b.n	80022ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01b      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
 800227c:	e016      	b.n	80022ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0208 	bic.w	r2, r2, #8
 800229a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b0:	2220      	movs	r2, #32
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 808f 	beq.w	80023dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8087 	beq.w	80023dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d2:	2220      	movs	r2, #32
 80022d4:	409a      	lsls	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d136      	bne.n	8002354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0216 	bic.w	r2, r2, #22
 80022f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <HAL_DMA_IRQHandler+0x1da>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0208 	bic.w	r2, r2, #8
 8002324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232a:	223f      	movs	r2, #63	@ 0x3f
 800232c:	409a      	lsls	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002346:	2b00      	cmp	r3, #0
 8002348:	d07e      	beq.n	8002448 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
        }
        return;
 8002352:	e079      	b.n	8002448 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01d      	beq.n	800239e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002374:	2b00      	cmp	r3, #0
 8002376:	d031      	beq.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
 8002380:	e02c      	b.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
 8002382:	bf00      	nop
 8002384:	20000000 	.word	0x20000000
 8002388:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
 800239c:	e01e      	b.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10f      	bne.n	80023cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0210 	bic.w	r2, r2, #16
 80023ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d032      	beq.n	800244a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d022      	beq.n	8002436 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2205      	movs	r2, #5
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	3301      	adds	r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	429a      	cmp	r2, r3
 8002412:	d307      	bcc.n	8002424 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f2      	bne.n	8002408 <HAL_DMA_IRQHandler+0x2cc>
 8002422:	e000      	b.n	8002426 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002424:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4798      	blx	r3
 8002446:	e000      	b.n	800244a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002448:	bf00      	nop
    }
  }
}
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800245e:	b2db      	uxtb	r3, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b40      	cmp	r3, #64	@ 0x40
 80024b0:	d108      	bne.n	80024c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024c2:	e007      	b.n	80024d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	60da      	str	r2, [r3, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	3b10      	subs	r3, #16
 80024f0:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <DMA_CalcBaseAndBitshift+0x64>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024fa:	4a13      	ldr	r2, [pc, #76]	@ (8002548 <DMA_CalcBaseAndBitshift+0x68>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d909      	bls.n	8002522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	1d1a      	adds	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002520:	e007      	b.n	8002532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	aaaaaaab 	.word	0xaaaaaaab
 8002548:	08007534 	.word	0x08007534

0800254c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11f      	bne.n	80025a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d856      	bhi.n	800261a <DMA_CheckFifoParam+0xce>
 800256c:	a201      	add	r2, pc, #4	@ (adr r2, 8002574 <DMA_CheckFifoParam+0x28>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	08002585 	.word	0x08002585
 8002578:	08002597 	.word	0x08002597
 800257c:	08002585 	.word	0x08002585
 8002580:	0800261b 	.word	0x0800261b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d046      	beq.n	800261e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002594:	e043      	b.n	800261e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800259e:	d140      	bne.n	8002622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a4:	e03d      	b.n	8002622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ae:	d121      	bne.n	80025f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d837      	bhi.n	8002626 <DMA_CheckFifoParam+0xda>
 80025b6:	a201      	add	r2, pc, #4	@ (adr r2, 80025bc <DMA_CheckFifoParam+0x70>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025d3 	.word	0x080025d3
 80025c4:	080025cd 	.word	0x080025cd
 80025c8:	080025e5 	.word	0x080025e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e030      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d025      	beq.n	800262a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e2:	e022      	b.n	800262a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025ec:	d11f      	bne.n	800262e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025f2:	e01c      	b.n	800262e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d903      	bls.n	8002602 <DMA_CheckFifoParam+0xb6>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d003      	beq.n	8002608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002600:	e018      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
      break;
 8002606:	e015      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      break;
 8002618:	e00b      	b.n	8002632 <DMA_CheckFifoParam+0xe6>
      break;
 800261a:	bf00      	nop
 800261c:	e00a      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e008      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e006      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e004      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e002      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;   
 800262e:	bf00      	nop
 8002630:	e000      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
    }
  } 
  
  return status; 
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e159      	b.n	8002914 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8148 	bne.w	800290e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a2 	beq.w	800290e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b57      	ldr	r3, [pc, #348]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a56      	ldr	r2, [pc, #344]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027e6:	4a52      	ldr	r2, [pc, #328]	@ (8002930 <HAL_GPIO_Init+0x2ec>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a49      	ldr	r2, [pc, #292]	@ (8002934 <HAL_GPIO_Init+0x2f0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d019      	beq.n	8002846 <HAL_GPIO_Init+0x202>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <HAL_GPIO_Init+0x2f4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0x1fe>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a47      	ldr	r2, [pc, #284]	@ (800293c <HAL_GPIO_Init+0x2f8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00d      	beq.n	800283e <HAL_GPIO_Init+0x1fa>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a46      	ldr	r2, [pc, #280]	@ (8002940 <HAL_GPIO_Init+0x2fc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0x1f6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a45      	ldr	r2, [pc, #276]	@ (8002944 <HAL_GPIO_Init+0x300>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_GPIO_Init+0x1f2>
 8002832:	2304      	movs	r3, #4
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002836:	2307      	movs	r3, #7
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x204>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x204>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	@ (8002930 <HAL_GPIO_Init+0x2ec>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a2f      	ldr	r2, [pc, #188]	@ (8002948 <HAL_GPIO_Init+0x304>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a24      	ldr	r2, [pc, #144]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ba:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028de:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e4:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002908:	4a0f      	ldr	r2, [pc, #60]	@ (8002948 <HAL_GPIO_Init+0x304>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f aea2 	bls.w	8002660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40013c00 	.word	0x40013c00

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002968:	e003      	b.n	8002972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	619a      	str	r2, [r3, #24]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002990:	887a      	ldrh	r2, [r7, #2]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	041a      	lsls	r2, r3, #16
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43d9      	mvns	r1, r3
 800299c:	887b      	ldrh	r3, [r7, #2]
 800299e:	400b      	ands	r3, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ca:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe ff52 	bl	800187c <HAL_GPIO_EXTI_Callback>
  }
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e12b      	b.n	8002c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe fc22 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	@ 0x24
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a48:	f002 ff16 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8002a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a81      	ldr	r2, [pc, #516]	@ (8002c58 <HAL_I2C_Init+0x274>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d807      	bhi.n	8002a68 <HAL_I2C_Init+0x84>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a80      	ldr	r2, [pc, #512]	@ (8002c5c <HAL_I2C_Init+0x278>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	bf94      	ite	ls
 8002a60:	2301      	movls	r3, #1
 8002a62:	2300      	movhi	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e006      	b.n	8002a76 <HAL_I2C_Init+0x92>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c60 <HAL_I2C_Init+0x27c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	bf94      	ite	ls
 8002a70:	2301      	movls	r3, #1
 8002a72:	2300      	movhi	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0e7      	b.n	8002c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a78      	ldr	r2, [pc, #480]	@ (8002c64 <HAL_I2C_Init+0x280>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0c9b      	lsrs	r3, r3, #18
 8002a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a6a      	ldr	r2, [pc, #424]	@ (8002c58 <HAL_I2C_Init+0x274>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d802      	bhi.n	8002ab8 <HAL_I2C_Init+0xd4>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	e009      	b.n	8002acc <HAL_I2C_Init+0xe8>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	4a69      	ldr	r2, [pc, #420]	@ (8002c68 <HAL_I2C_Init+0x284>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	099b      	lsrs	r3, r3, #6
 8002aca:	3301      	adds	r3, #1
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ade:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	495c      	ldr	r1, [pc, #368]	@ (8002c58 <HAL_I2C_Init+0x274>)
 8002ae8:	428b      	cmp	r3, r1
 8002aea:	d819      	bhi.n	8002b20 <HAL_I2C_Init+0x13c>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e59      	subs	r1, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002afa:	1c59      	adds	r1, r3, #1
 8002afc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b00:	400b      	ands	r3, r1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_I2C_Init+0x138>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e59      	subs	r1, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1a:	e051      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e04f      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d111      	bne.n	8002b4c <HAL_I2C_Init+0x168>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1e58      	subs	r0, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e012      	b.n	8002b72 <HAL_I2C_Init+0x18e>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	0099      	lsls	r1, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Init+0x196>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e022      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10e      	bne.n	8002ba0 <HAL_I2C_Init+0x1bc>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1e58      	subs	r0, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	440b      	add	r3, r1
 8002b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b9e:	e00f      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	0099      	lsls	r1, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	6809      	ldr	r1, [r1, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6911      	ldr	r1, [r2, #16]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68d2      	ldr	r2, [r2, #12]
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	000186a0 	.word	0x000186a0
 8002c5c:	001e847f 	.word	0x001e847f
 8002c60:	003d08ff 	.word	0x003d08ff
 8002c64:	431bde83 	.word	0x431bde83
 8002c68:	10624dd3 	.word	0x10624dd3

08002c6c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	2b80      	cmp	r3, #128	@ 0x80
 8002c80:	d103      	bne.n	8002c8a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	817b      	strh	r3, [r7, #10]
 8002caa:	460b      	mov	r3, r1
 8002cac:	813b      	strh	r3, [r7, #8]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cb2:	f7fe fffd 	bl	8001cb0 <HAL_GetTick>
 8002cb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	f040 80d9 	bne.w	8002e78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	2319      	movs	r3, #25
 8002ccc:	2201      	movs	r2, #1
 8002cce:	496d      	ldr	r1, [pc, #436]	@ (8002e84 <HAL_I2C_Mem_Write+0x1ec>)
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f001 ff7b 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e0cc      	b.n	8002e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Mem_Write+0x56>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0c5      	b.n	8002e7a <HAL_I2C_Mem_Write+0x1e2>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d007      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2221      	movs	r2, #33	@ 0x21
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2240      	movs	r2, #64	@ 0x40
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a4d      	ldr	r2, [pc, #308]	@ (8002e88 <HAL_I2C_Mem_Write+0x1f0>)
 8002d54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d56:	88f8      	ldrh	r0, [r7, #6]
 8002d58:	893a      	ldrh	r2, [r7, #8]
 8002d5a:	8979      	ldrh	r1, [r7, #10]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4603      	mov	r3, r0
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f001 fcd6 	bl	8004718 <I2C_RequestMemoryWrite>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d052      	beq.n	8002e18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e081      	b.n	8002e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f002 f840 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d107      	bne.n	8002d9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06b      	b.n	8002e7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d11b      	bne.n	8002e18 <HAL_I2C_Mem_Write+0x180>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d017      	beq.n	8002e18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1aa      	bne.n	8002d76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f002 f833 	bl	8004e90 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d107      	bne.n	8002e48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e016      	b.n	8002e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	00100002 	.word	0x00100002
 8002e88:	ffff0000 	.word	0xffff0000

08002e8c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	@ 0x28
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	813b      	strh	r3, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eaa:	f7fe ff01 	bl	8001cb0 <HAL_GetTick>
 8002eae:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	f040 8136 	bne.w	800312a <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ebe:	4b9d      	ldr	r3, [pc, #628]	@ (8003134 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	08db      	lsrs	r3, r3, #3
 8002ec4:	4a9c      	ldr	r2, [pc, #624]	@ (8003138 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	0a1a      	lsrs	r2, r3, #8
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009a      	lsls	r2, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d112      	bne.n	8002f0a <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	f043 0220 	orr.w	r2, r3, #32
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	e110      	b.n	800312c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d0df      	beq.n	8002ed8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Mem_Write_DMA+0x9a>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e102      	b.n	800312c <HAL_I2C_Mem_Write_DMA+0x2a0>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d007      	beq.n	8002f4c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2221      	movs	r2, #33	@ 0x21
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2240      	movs	r2, #64	@ 0x40
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800313c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8002f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002f8e:	897a      	ldrh	r2, [r7, #10]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002f94:	893a      	ldrh	r2, [r7, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002f9a:	88fa      	ldrh	r2, [r7, #6]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80a9 	beq.w	8003102 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02a      	beq.n	800300e <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbc:	4a60      	ldr	r2, [pc, #384]	@ (8003140 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8002fbe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc4:	4a5f      	ldr	r2, [pc, #380]	@ (8003144 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8002fc6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fdc:	2200      	movs	r2, #0
 8002fde:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3310      	adds	r3, #16
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffe:	f7ff f823 	bl	8002048 <HAL_DMA_Start_IT>
 8003002:	4603      	mov	r3, r0
 8003004:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003006:	7efb      	ldrb	r3, [r7, #27]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d166      	bne.n	80030da <HAL_I2C_Mem_Write_DMA+0x24e>
 800300c:	e013      	b.n	8003036 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07a      	b.n	800312c <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003036:	88f8      	ldrh	r0, [r7, #6]
 8003038:	893a      	ldrh	r2, [r7, #8]
 800303a:	8979      	ldrh	r1, [r7, #10]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	2323      	movs	r3, #35	@ 0x23
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4603      	mov	r3, r0
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f001 fb66 	bl	8004718 <I2C_RequestMemoryWrite>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d022      	beq.n	8003098 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff f84e 	bl	80020f8 <HAL_DMA_Abort_IT>
 800305c:	4603      	mov	r3, r0
 800305e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003064:	2200      	movs	r2, #0
 8003066:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003076:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e049      	b.n	800312c <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030d4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e028      	b.n	800312c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f043 0210 	orr.w	r2, r3, #16
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e014      	b.n	800312c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800312a:	2302      	movs	r3, #2
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000000 	.word	0x20000000
 8003138:	14f8b589 	.word	0x14f8b589
 800313c:	ffff0000 	.word	0xffff0000
 8003140:	08004845 	.word	0x08004845
 8003144:	08004a03 	.word	0x08004a03

08003148 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003168:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003170:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b10      	cmp	r3, #16
 8003176:	d003      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x38>
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b40      	cmp	r3, #64	@ 0x40
 800317c:	f040 80c1 	bne.w	8003302 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80031a0:	d003      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0x62>
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_EV_IRQHandler+0x66>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_I2C_EV_IRQHandler+0x68>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	f000 8132 	beq.w	800341a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00c      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0x92>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	0a5b      	lsrs	r3, r3, #9
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d006      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f001 ff08 	bl	8004fe2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fcf4 	bl	8003bc0 <I2C_Master_SB>
 80031d8:	e092      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	08db      	lsrs	r3, r3, #3
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_I2C_EV_IRQHandler+0xb2>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	0a5b      	lsrs	r3, r3, #9
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fd6a 	bl	8003ccc <I2C_Master_ADD10>
 80031f8:	e082      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	085b      	lsrs	r3, r3, #1
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_I2C_EV_IRQHandler+0xd2>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	0a5b      	lsrs	r3, r3, #9
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fd84 	bl	8003d20 <I2C_Master_ADDR>
 8003218:	e072      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d03b      	beq.n	800329e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003234:	f000 80f3 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	09db      	lsrs	r3, r3, #7
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00f      	beq.n	8003264 <HAL_I2C_EV_IRQHandler+0x11c>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	0a9b      	lsrs	r3, r3, #10
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_I2C_EV_IRQHandler+0x11c>
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d103      	bne.n	8003264 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f94c 	bl	80034fa <I2C_MasterTransmit_TXE>
 8003262:	e04d      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80d6 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	0a5b      	lsrs	r3, r3, #9
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80cf 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003280:	7bbb      	ldrb	r3, [r7, #14]
 8003282:	2b21      	cmp	r3, #33	@ 0x21
 8003284:	d103      	bne.n	800328e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f9d3 	bl	8003632 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328c:	e0c7      	b.n	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	2b40      	cmp	r3, #64	@ 0x40
 8003292:	f040 80c4 	bne.w	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa41 	bl	800371e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329c:	e0bf      	b.n	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ac:	f000 80b7 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	099b      	lsrs	r3, r3, #6
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00f      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x194>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x194>
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 faba 	bl	800384e <I2C_MasterReceive_RXNE>
 80032da:	e011      	b.n	8003300 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 809a 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	0a5b      	lsrs	r3, r3, #9
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8093 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fb70 	bl	80039de <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032fe:	e08e      	b.n	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003300:	e08d      	b.n	800341e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d004      	beq.n	8003314 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e007      	b.n	8003324 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d012      	beq.n	8003356 <HAL_I2C_EV_IRQHandler+0x20e>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	0a5b      	lsrs	r3, r3, #9
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00c      	beq.n	8003356 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800334c:	69b9      	ldr	r1, [r7, #24]
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 ff35 	bl	80041be <I2C_Slave_ADDR>
 8003354:	e066      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_I2C_EV_IRQHandler+0x22e>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	0a5b      	lsrs	r3, r3, #9
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 ff70 	bl	8004254 <I2C_Slave_STOPF>
 8003374:	e056      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003376:	7bbb      	ldrb	r3, [r7, #14]
 8003378:	2b21      	cmp	r3, #33	@ 0x21
 800337a:	d002      	beq.n	8003382 <HAL_I2C_EV_IRQHandler+0x23a>
 800337c:	7bbb      	ldrb	r3, [r7, #14]
 800337e:	2b29      	cmp	r3, #41	@ 0x29
 8003380:	d125      	bne.n	80033ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	09db      	lsrs	r3, r3, #7
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00f      	beq.n	80033ae <HAL_I2C_EV_IRQHandler+0x266>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	0a9b      	lsrs	r3, r3, #10
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_I2C_EV_IRQHandler+0x266>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d103      	bne.n	80033ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fe4b 	bl	8004042 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ac:	e039      	b.n	8003422 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d033      	beq.n	8003422 <HAL_I2C_EV_IRQHandler+0x2da>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	0a5b      	lsrs	r3, r3, #9
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02d      	beq.n	8003422 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fe78 	bl	80040bc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033cc:	e029      	b.n	8003422 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00f      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	0a9b      	lsrs	r3, r3, #10
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fe83 	bl	80040fe <I2C_SlaveReceive_RXNE>
 80033f8:	e014      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00e      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	0a5b      	lsrs	r3, r3, #9
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 feb1 	bl	800417a <I2C_SlaveReceive_BTF>
 8003418:	e004      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800341a:	bf00      	nop
 800341c:	e002      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003422:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	70fb      	strb	r3, [r7, #3]
 8003486:	4613      	mov	r3, r2
 8003488:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003508:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003510:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003516:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d150      	bne.n	80035c2 <I2C_MasterTransmit_TXE+0xc8>
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b21      	cmp	r3, #33	@ 0x21
 8003524:	d14d      	bne.n	80035c2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d01d      	beq.n	8003568 <I2C_MasterTransmit_TXE+0x6e>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b20      	cmp	r3, #32
 8003530:	d01a      	beq.n	8003568 <I2C_MasterTransmit_TXE+0x6e>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003538:	d016      	beq.n	8003568 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003548:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2211      	movs	r2, #17
 800354e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff62 	bl	800342a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003566:	e060      	b.n	800362a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003576:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003586:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d107      	bne.n	80035b2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ff7d 	bl	80034aa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035b0:	e03b      	b.n	800362a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ff35 	bl	800342a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035c0:	e033      	b.n	800362a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b21      	cmp	r3, #33	@ 0x21
 80035c6:	d005      	beq.n	80035d4 <I2C_MasterTransmit_TXE+0xda>
 80035c8:	7bbb      	ldrb	r3, [r7, #14]
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d12d      	bne.n	800362a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	2b22      	cmp	r3, #34	@ 0x22
 80035d2:	d12a      	bne.n	800362a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035ee:	e01c      	b.n	800362a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b40      	cmp	r3, #64	@ 0x40
 80035fa:	d103      	bne.n	8003604 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f88e 	bl	800371e <I2C_MemoryTransmit_TXE_BTF>
}
 8003602:	e012      	b.n	800362a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003628:	e7ff      	b.n	800362a <I2C_MasterTransmit_TXE+0x130>
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b21      	cmp	r3, #33	@ 0x21
 800364a:	d164      	bne.n	8003716 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d012      	beq.n	800367c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800367a:	e04c      	b.n	8003716 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d01d      	beq.n	80036be <I2C_MasterTransmit_BTF+0x8c>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b20      	cmp	r3, #32
 8003686:	d01a      	beq.n	80036be <I2C_MasterTransmit_BTF+0x8c>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800368e:	d016      	beq.n	80036be <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800369e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2211      	movs	r2, #17
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff feb7 	bl	800342a <HAL_I2C_MasterTxCpltCallback>
}
 80036bc:	e02b      	b.n	8003716 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036cc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036dc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	d107      	bne.n	8003708 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fed2 	bl	80034aa <HAL_I2C_MemTxCpltCallback>
}
 8003706:	e006      	b.n	8003716 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fe8a 	bl	800342a <HAL_I2C_MasterTxCpltCallback>
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800372c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11d      	bne.n	8003772 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d10b      	bne.n	8003756 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003742:	b2da      	uxtb	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374e:	1c9a      	adds	r2, r3, #2
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003754:	e077      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375a:	b29b      	uxth	r3, r3
 800375c:	121b      	asrs	r3, r3, #8
 800375e:	b2da      	uxtb	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003770:	e069      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10b      	bne.n	8003792 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377e:	b2da      	uxtb	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003790:	e059      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003796:	2b02      	cmp	r3, #2
 8003798:	d152      	bne.n	8003840 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b22      	cmp	r3, #34	@ 0x22
 800379e:	d10d      	bne.n	80037bc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ae:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80037ba:	e044      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d015      	beq.n	80037f2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	2b21      	cmp	r3, #33	@ 0x21
 80037ca:	d112      	bne.n	80037f2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037f0:	e029      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d124      	bne.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b21      	cmp	r3, #33	@ 0x21
 8003800:	d121      	bne.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003810:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003820:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff fe36 	bl	80034aa <HAL_I2C_MemTxCpltCallback>
}
 800383e:	e002      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fa13 	bl	8002c6c <I2C_Flush_DR>
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b22      	cmp	r3, #34	@ 0x22
 8003860:	f040 80b9 	bne.w	80039d6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d921      	bls.n	80038bc <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	f040 8096 	bne.w	80039d6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80038ba:	e08c      	b.n	80039d6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d07f      	beq.n	80039c4 <I2C_MasterReceive_RXNE+0x176>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d002      	beq.n	80038d0 <I2C_MasterReceive_RXNE+0x82>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d179      	bne.n	80039c4 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f001 fb25 	bl	8004f20 <I2C_WaitOnSTOPRequestThroughIT>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d14c      	bne.n	8003976 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b40      	cmp	r3, #64	@ 0x40
 8003934:	d10a      	bne.n	800394c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fdba 	bl	80034be <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800394a:	e044      	b.n	80039d6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b08      	cmp	r3, #8
 8003958:	d002      	beq.n	8003960 <I2C_MasterReceive_RXNE+0x112>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b20      	cmp	r3, #32
 800395e:	d103      	bne.n	8003968 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
 8003966:	e002      	b.n	800396e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2212      	movs	r2, #18
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fd65 	bl	800343e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003974:	e02f      	b.n	80039d6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003984:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fd88 	bl	80034d2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039c2:	e008      	b.n	80039d6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d2:	605a      	str	r2, [r3, #4]
}
 80039d4:	e7ff      	b.n	80039d6 <I2C_MasterReceive_RXNE+0x188>
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d11b      	bne.n	8003a2e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a04:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a2c:	e0c4      	b.n	8003bb8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d129      	bne.n	8003a8c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a46:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d00a      	beq.n	8003a64 <I2C_MasterReceive_BTF+0x86>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d007      	beq.n	8003a64 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a8a:	e095      	b.n	8003bb8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d17d      	bne.n	8003b92 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d002      	beq.n	8003aa2 <I2C_MasterReceive_BTF+0xc4>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d108      	bne.n	8003ab4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e016      	b.n	8003ae2 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d002      	beq.n	8003ac0 <I2C_MasterReceive_BTF+0xe2>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d108      	bne.n	8003ad2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e007      	b.n	8003ae2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b40      	cmp	r3, #64	@ 0x40
 8003b50:	d10a      	bne.n	8003b68 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fcac 	bl	80034be <HAL_I2C_MemRxCpltCallback>
}
 8003b66:	e027      	b.n	8003bb8 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d002      	beq.n	8003b7c <I2C_MasterReceive_BTF+0x19e>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d103      	bne.n	8003b84 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b82:	e002      	b.n	8003b8a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2212      	movs	r2, #18
 8003b88:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fc57 	bl	800343e <HAL_I2C_MasterRxCpltCallback>
}
 8003b90:	e012      	b.n	8003bb8 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d117      	bne.n	8003c04 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bee:	e067      	b.n	8003cc0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	611a      	str	r2, [r3, #16]
}
 8003c02:	e05d      	b.n	8003cc0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c0c:	d133      	bne.n	8003c76 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b21      	cmp	r3, #33	@ 0x21
 8003c18:	d109      	bne.n	8003c2e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c2a:	611a      	str	r2, [r3, #16]
 8003c2c:	e008      	b.n	8003c40 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <I2C_Master_SB+0x92>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d032      	beq.n	8003cc0 <I2C_Master_SB+0x100>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02d      	beq.n	8003cc0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c72:	605a      	str	r2, [r3, #4]
}
 8003c74:	e024      	b.n	8003cc0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10e      	bne.n	8003c9c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	11db      	asrs	r3, r3, #7
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 0306 	and.w	r3, r3, #6
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f063 030f 	orn	r3, r3, #15
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	611a      	str	r2, [r3, #16]
}
 8003c9a:	e011      	b.n	8003cc0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10d      	bne.n	8003cc0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	11db      	asrs	r3, r3, #7
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 0306 	and.w	r3, r3, #6
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f063 030e 	orn	r3, r3, #14
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <I2C_Master_ADD10+0x26>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00c      	beq.n	8003d14 <I2C_Master_ADD10+0x48>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d12:	605a      	str	r2, [r3, #4]
  }
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b091      	sub	sp, #68	@ 0x44
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b22      	cmp	r3, #34	@ 0x22
 8003d48:	f040 8169 	bne.w	800401e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10f      	bne.n	8003d74 <I2C_Master_ADDR+0x54>
 8003d54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003d58:	2b40      	cmp	r3, #64	@ 0x40
 8003d5a:	d10b      	bne.n	8003d74 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	e160      	b.n	8004036 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11d      	bne.n	8003db8 <I2C_Master_ADDR+0x98>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d84:	d118      	bne.n	8003db8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d86:	2300      	movs	r3, #0
 8003d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003daa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003db6:	e13e      	b.n	8004036 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d113      	bne.n	8003dea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e115      	b.n	8004016 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 808a 	bne.w	8003f0a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dfc:	d137      	bne.n	8003e6e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e1c:	d113      	bne.n	8003e46 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	e0e7      	b.n	8004016 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	623b      	str	r3, [r7, #32]
 8003e5a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e0d3      	b.n	8004016 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d02e      	beq.n	8003ed2 <I2C_Master_ADDR+0x1b2>
 8003e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d02b      	beq.n	8003ed2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7c:	2b12      	cmp	r3, #18
 8003e7e:	d102      	bne.n	8003e86 <I2C_Master_ADDR+0x166>
 8003e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d125      	bne.n	8003ed2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00e      	beq.n	8003eaa <I2C_Master_ADDR+0x18a>
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d00b      	beq.n	8003eaa <I2C_Master_ADDR+0x18a>
 8003e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d008      	beq.n	8003eaa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e007      	b.n	8003eba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003eb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	e0a1      	b.n	8004016 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e085      	b.n	8004016 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d14d      	bne.n	8003fb0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d016      	beq.n	8003f48 <I2C_Master_ADDR+0x228>
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d013      	beq.n	8003f48 <I2C_Master_ADDR+0x228>
 8003f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d010      	beq.n	8003f48 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f34:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e007      	b.n	8003f58 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f56:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f66:	d117      	bne.n	8003f98 <I2C_Master_ADDR+0x278>
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f6e:	d00b      	beq.n	8003f88 <I2C_Master_ADDR+0x268>
 8003f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d008      	beq.n	8003f88 <I2C_Master_ADDR+0x268>
 8003f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d005      	beq.n	8003f88 <I2C_Master_ADDR+0x268>
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d002      	beq.n	8003f88 <I2C_Master_ADDR+0x268>
 8003f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d107      	bne.n	8003f98 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f96:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	e032      	b.n	8004016 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fbe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fce:	d117      	bne.n	8004000 <I2C_Master_ADDR+0x2e0>
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fd6:	d00b      	beq.n	8003ff0 <I2C_Master_ADDR+0x2d0>
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d008      	beq.n	8003ff0 <I2C_Master_ADDR+0x2d0>
 8003fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d005      	beq.n	8003ff0 <I2C_Master_ADDR+0x2d0>
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d002      	beq.n	8003ff0 <I2C_Master_ADDR+0x2d0>
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d107      	bne.n	8004000 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ffe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800401c:	e00b      	b.n	8004036 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	e7ff      	b.n	8004036 <I2C_Master_ADDR+0x316>
 8004036:	bf00      	nop
 8004038:	3744      	adds	r7, #68	@ 0x44
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004050:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02b      	beq.n	80040b4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d114      	bne.n	80040b4 <I2C_SlaveTransmit_TXE+0x72>
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b29      	cmp	r3, #41	@ 0x29
 800408e:	d111      	bne.n	80040b4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2221      	movs	r2, #33	@ 0x21
 80040a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2228      	movs	r2, #40	@ 0x28
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff f9cf 	bl	8003452 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d011      	beq.n	80040f2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02c      	beq.n	8004172 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d114      	bne.n	8004172 <I2C_SlaveReceive_RXNE+0x74>
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b2a      	cmp	r3, #42	@ 0x2a
 800414c:	d111      	bne.n	8004172 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2222      	movs	r2, #34	@ 0x22
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2228      	movs	r2, #40	@ 0x28
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff f97a 	bl	8003466 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d012      	beq.n	80041b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041d8:	2b28      	cmp	r3, #40	@ 0x28
 80041da:	d127      	bne.n	800422c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	09db      	lsrs	r3, r3, #7
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d103      	bne.n	8004210 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	81bb      	strh	r3, [r7, #12]
 800420e:	e002      	b.n	8004216 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800421e:	89ba      	ldrh	r2, [r7, #12]
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff f928 	bl	800347a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800422a:	e00e      	b.n	800424a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004262:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004272:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b0:	d172      	bne.n	8004398 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	2b22      	cmp	r3, #34	@ 0x22
 80042b6:	d002      	beq.n	80042be <I2C_Slave_STOPF+0x6a>
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80042bc:	d135      	bne.n	800432a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f043 0204 	orr.w	r2, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe f8aa 	bl	8002450 <HAL_DMA_GetState>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d049      	beq.n	8004396 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004306:	4a69      	ldr	r2, [pc, #420]	@ (80044ac <I2C_Slave_STOPF+0x258>)
 8004308:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fef2 	bl	80020f8 <HAL_DMA_Abort_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03d      	beq.n	8004396 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004324:	4610      	mov	r0, r2
 8004326:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004328:	e035      	b.n	8004396 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	f043 0204 	orr.w	r2, r3, #4
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800435c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe f874 	bl	8002450 <HAL_DMA_GetState>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d014      	beq.n	8004398 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004372:	4a4e      	ldr	r2, [pc, #312]	@ (80044ac <I2C_Slave_STOPF+0x258>)
 8004374:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd febc 	bl	80020f8 <HAL_DMA_Abort_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004390:	4610      	mov	r0, r2
 8004392:	4798      	blx	r3
 8004394:	e000      	b.n	8004398 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004396:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d03e      	beq.n	8004420 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d112      	bne.n	80043d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	d112      	bne.n	800440a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	f043 0204 	orr.w	r2, r3, #4
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f843 	bl	80044b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800442e:	e039      	b.n	80044a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b2a      	cmp	r3, #42	@ 0x2a
 8004434:	d109      	bne.n	800444a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2228      	movs	r2, #40	@ 0x28
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff f80e 	bl	8003466 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b28      	cmp	r3, #40	@ 0x28
 8004454:	d111      	bne.n	800447a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a15      	ldr	r2, [pc, #84]	@ (80044b0 <I2C_Slave_STOPF+0x25c>)
 800445a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff f80f 	bl	8003496 <HAL_I2C_ListenCpltCallback>
}
 8004478:	e014      	b.n	80044a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	2b22      	cmp	r3, #34	@ 0x22
 8004480:	d002      	beq.n	8004488 <I2C_Slave_STOPF+0x234>
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2b22      	cmp	r3, #34	@ 0x22
 8004486:	d10d      	bne.n	80044a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fe ffe1 	bl	8003466 <HAL_I2C_SlaveRxCpltCallback>
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	08004a7d 	.word	0x08004a7d
 80044b0:	ffff0000 	.word	0xffff0000

080044b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044cc:	7bbb      	ldrb	r3, [r7, #14]
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d002      	beq.n	80044d8 <I2C_ITError+0x24>
 80044d2:	7bbb      	ldrb	r3, [r7, #14]
 80044d4:	2b40      	cmp	r3, #64	@ 0x40
 80044d6:	d10a      	bne.n	80044ee <I2C_ITError+0x3a>
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b22      	cmp	r3, #34	@ 0x22
 80044dc:	d107      	bne.n	80044ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80044f4:	2b28      	cmp	r3, #40	@ 0x28
 80044f6:	d107      	bne.n	8004508 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2228      	movs	r2, #40	@ 0x28
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004506:	e015      	b.n	8004534 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004516:	d00a      	beq.n	800452e <I2C_ITError+0x7a>
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b60      	cmp	r3, #96	@ 0x60
 800451c:	d007      	beq.n	800452e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800453e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004542:	d162      	bne.n	800460a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004552:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d020      	beq.n	80045a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004566:	4a6a      	ldr	r2, [pc, #424]	@ (8004710 <I2C_ITError+0x25c>)
 8004568:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd fdc2 	bl	80020f8 <HAL_DMA_Abort_IT>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8089 	beq.w	800468e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800459e:	4610      	mov	r0, r2
 80045a0:	4798      	blx	r3
 80045a2:	e074      	b.n	800468e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a8:	4a59      	ldr	r2, [pc, #356]	@ (8004710 <I2C_ITError+0x25c>)
 80045aa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fd fda1 	bl	80020f8 <HAL_DMA_Abort_IT>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d068      	beq.n	800468e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c6:	2b40      	cmp	r3, #64	@ 0x40
 80045c8:	d10b      	bne.n	80045e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004604:	4610      	mov	r0, r2
 8004606:	4798      	blx	r3
 8004608:	e041      	b.n	800468e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b60      	cmp	r3, #96	@ 0x60
 8004614:	d125      	bne.n	8004662 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462e:	2b40      	cmp	r3, #64	@ 0x40
 8004630:	d10b      	bne.n	800464a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fe ff43 	bl	80034e6 <HAL_I2C_AbortCpltCallback>
 8004660:	e015      	b.n	800468e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466c:	2b40      	cmp	r3, #64	@ 0x40
 800466e:	d10b      	bne.n	8004688 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fe ff22 	bl	80034d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10e      	bne.n	80046bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d113      	bne.n	8004708 <I2C_ITError+0x254>
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b28      	cmp	r3, #40	@ 0x28
 80046e4:	d110      	bne.n	8004708 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004714 <I2C_ITError+0x260>)
 80046ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fe fec7 	bl	8003496 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	08004a7d 	.word	0x08004a7d
 8004714:	ffff0000 	.word	0xffff0000

08004718 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	4608      	mov	r0, r1
 8004722:	4611      	mov	r1, r2
 8004724:	461a      	mov	r2, r3
 8004726:	4603      	mov	r3, r0
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	460b      	mov	r3, r1
 800472c:	813b      	strh	r3, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004740:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	2200      	movs	r2, #0
 800474a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fa3c 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00d      	beq.n	8004776 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004768:	d103      	bne.n	8004772 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004770:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e05f      	b.n	8004836 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004776:	897b      	ldrh	r3, [r7, #10]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004784:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	492d      	ldr	r1, [pc, #180]	@ (8004840 <I2C_RequestMemoryWrite+0x128>)
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fa97 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e04c      	b.n	8004836 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b4:	6a39      	ldr	r1, [r7, #32]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fb22 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d107      	bne.n	80047da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e02b      	b.n	8004836 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e4:	893b      	ldrh	r3, [r7, #8]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	611a      	str	r2, [r3, #16]
 80047ee:	e021      	b.n	8004834 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047f0:	893b      	ldrh	r3, [r7, #8]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004800:	6a39      	ldr	r1, [r7, #32]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fafc 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	2b04      	cmp	r3, #4
 8004814:	d107      	bne.n	8004826 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004824:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e005      	b.n	8004836 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800482a:	893b      	ldrh	r3, [r7, #8]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	00010002 	.word	0x00010002

08004844 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004858:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004860:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004876:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004884:	2200      	movs	r2, #0
 8004886:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	2200      	movs	r2, #0
 8004896:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800489e:	2b21      	cmp	r3, #33	@ 0x21
 80048a0:	d007      	beq.n	80048b2 <I2C_DMAXferCplt+0x6e>
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80048a8:	2b22      	cmp	r3, #34	@ 0x22
 80048aa:	d131      	bne.n	8004910 <I2C_DMAXferCplt+0xcc>
 80048ac:	7cbb      	ldrb	r3, [r7, #18]
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d12e      	bne.n	8004910 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048c0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2200      	movs	r2, #0
 80048c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	2b29      	cmp	r3, #41	@ 0x29
 80048cc:	d10a      	bne.n	80048e4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2221      	movs	r2, #33	@ 0x21
 80048d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2228      	movs	r2, #40	@ 0x28
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048dc:	6978      	ldr	r0, [r7, #20]
 80048de:	f7fe fdb8 	bl	8003452 <HAL_I2C_SlaveTxCpltCallback>
 80048e2:	e00c      	b.n	80048fe <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80048e8:	d109      	bne.n	80048fe <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2222      	movs	r2, #34	@ 0x22
 80048ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2228      	movs	r2, #40	@ 0x28
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048f8:	6978      	ldr	r0, [r7, #20]
 80048fa:	f7fe fdb4 	bl	8003466 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800490c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800490e:	e074      	b.n	80049fa <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d06e      	beq.n	80049fa <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d107      	bne.n	8004936 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004934:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004944:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800494c:	d009      	beq.n	8004962 <I2C_DMAXferCplt+0x11e>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d006      	beq.n	8004962 <I2C_DMAXferCplt+0x11e>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800495a:	d002      	beq.n	8004962 <I2C_DMAXferCplt+0x11e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b20      	cmp	r3, #32
 8004960:	d107      	bne.n	8004972 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004970:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004980:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004990:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2200      	movs	r2, #0
 8004996:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80049a0:	6978      	ldr	r0, [r7, #20]
 80049a2:	f7fe fd96 	bl	80034d2 <HAL_I2C_ErrorCallback>
}
 80049a6:	e028      	b.n	80049fa <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b40      	cmp	r3, #64	@ 0x40
 80049ba:	d10a      	bne.n	80049d2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f7fe fd77 	bl	80034be <HAL_I2C_MemRxCpltCallback>
}
 80049d0:	e013      	b.n	80049fa <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d002      	beq.n	80049e6 <I2C_DMAXferCplt+0x1a2>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d103      	bne.n	80049ee <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80049ec:	e002      	b.n	80049f4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2212      	movs	r2, #18
 80049f2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80049f4:	6978      	ldr	r0, [r7, #20]
 80049f6:	f7fe fd22 	bl	800343e <HAL_I2C_MasterRxCpltCallback>
}
 80049fa:	bf00      	nop
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7fd fd1b 	bl	800246c <HAL_DMA_GetError>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d01b      	beq.n	8004a74 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a4a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	f043 0210 	orr.w	r2, r3, #16
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7fe fd2f 	bl	80034d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a94:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a96:	4b4b      	ldr	r3, [pc, #300]	@ (8004bc4 <I2C_DMAAbort+0x148>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	08db      	lsrs	r3, r3, #3
 8004a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc8 <I2C_DMAAbort+0x14c>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	0a1a      	lsrs	r2, r3, #8
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00da      	lsls	r2, r3, #3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004ac2:	e00a      	b.n	8004ada <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad8:	d0ea      	beq.n	8004ab0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	2200      	movs	r2, #0
 8004af8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b08:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b60      	cmp	r3, #96	@ 0x60
 8004b4a:	d10e      	bne.n	8004b6a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b62:	6978      	ldr	r0, [r7, #20]
 8004b64:	f7fe fcbf 	bl	80034e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b68:	e027      	b.n	8004bba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b70:	2b28      	cmp	r3, #40	@ 0x28
 8004b72:	d117      	bne.n	8004ba4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2228      	movs	r2, #40	@ 0x28
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ba2:	e007      	b.n	8004bb4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bb4:	6978      	ldr	r0, [r7, #20]
 8004bb6:	f7fe fc8c 	bl	80034d2 <HAL_I2C_ErrorCallback>
}
 8004bba:	bf00      	nop
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	14f8b589 	.word	0x14f8b589

08004bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bdc:	e048      	b.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d044      	beq.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fd f863 	bl	8001cb0 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d139      	bne.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d10d      	bne.n	8004c22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	43da      	mvns	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4013      	ands	r3, r2
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	e00c      	b.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d116      	bne.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e023      	b.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	0c1b      	lsrs	r3, r3, #16
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d10d      	bne.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	43da      	mvns	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4013      	ands	r3, r2
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	e00c      	b.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d093      	beq.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cce:	e071      	b.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cde:	d123      	bne.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	f043 0204 	orr.w	r2, r3, #4
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e067      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d041      	beq.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d30:	f7fc ffbe 	bl	8001cb0 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d302      	bcc.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d136      	bne.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d10c      	bne.n	8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	43da      	mvns	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e00b      	b.n	8004d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	43da      	mvns	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4013      	ands	r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	f043 0220 	orr.w	r2, r3, #32
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e021      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10c      	bne.n	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e00b      	b.n	8004df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	43da      	mvns	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af6d 	bne.w	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0c:	e034      	b.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f8b8 	bl	8004f84 <I2C_IsAcknowledgeFailed>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e034      	b.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d028      	beq.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fc ff43 	bl	8001cb0 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11d      	bne.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e46:	2b80      	cmp	r3, #128	@ 0x80
 8004e48:	d016      	beq.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e007      	b.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e82:	2b80      	cmp	r3, #128	@ 0x80
 8004e84:	d1c3      	bne.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e9c:	e034      	b.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f870 	bl	8004f84 <I2C_IsAcknowledgeFailed>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e034      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d028      	beq.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb6:	f7fc fefb 	bl	8001cb0 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d302      	bcc.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d11d      	bne.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d016      	beq.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e007      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d1c3      	bne.n	8004e9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f2c:	4b13      	ldr	r3, [pc, #76]	@ (8004f7c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	08db      	lsrs	r3, r3, #3
 8004f32:	4a13      	ldr	r2, [pc, #76]	@ (8004f80 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	0a1a      	lsrs	r2, r3, #8
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d107      	bne.n	8004f5e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f043 0220 	orr.w	r2, r3, #32
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e008      	b.n	8004f70 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f6c:	d0e9      	beq.n	8004f42 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000000 	.word	0x20000000
 8004f80:	14f8b589 	.word	0x14f8b589

08004f84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f9a:	d11b      	bne.n	8004fd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	f043 0204 	orr.w	r2, r3, #4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004ff2:	d103      	bne.n	8004ffc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ffa:	e007      	b.n	800500c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005000:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005004:	d102      	bne.n	800500c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2208      	movs	r2, #8
 800500a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e267      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d075      	beq.n	8005122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005036:	4b88      	ldr	r3, [pc, #544]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b04      	cmp	r3, #4
 8005040:	d00c      	beq.n	800505c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005042:	4b85      	ldr	r3, [pc, #532]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800504a:	2b08      	cmp	r3, #8
 800504c:	d112      	bne.n	8005074 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800504e:	4b82      	ldr	r3, [pc, #520]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800505a:	d10b      	bne.n	8005074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	4b7e      	ldr	r3, [pc, #504]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d05b      	beq.n	8005120 <HAL_RCC_OscConfig+0x108>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d157      	bne.n	8005120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e242      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507c:	d106      	bne.n	800508c <HAL_RCC_OscConfig+0x74>
 800507e:	4b76      	ldr	r3, [pc, #472]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a75      	ldr	r2, [pc, #468]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e01d      	b.n	80050c8 <HAL_RCC_OscConfig+0xb0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005094:	d10c      	bne.n	80050b0 <HAL_RCC_OscConfig+0x98>
 8005096:	4b70      	ldr	r3, [pc, #448]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6f      	ldr	r2, [pc, #444]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 800509c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0xb0>
 80050b0:	4b69      	ldr	r3, [pc, #420]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a68      	ldr	r2, [pc, #416]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b66      	ldr	r3, [pc, #408]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a65      	ldr	r2, [pc, #404]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80050c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d013      	beq.n	80050f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fc fdee 	bl	8001cb0 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fc fdea 	bl	8001cb0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	@ 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e207      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0xc0>
 80050f6:	e014      	b.n	8005122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fc fdda 	bl	8001cb0 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005100:	f7fc fdd6 	bl	8001cb0 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b64      	cmp	r3, #100	@ 0x64
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e1f3      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005112:	4b51      	ldr	r3, [pc, #324]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0xe8>
 800511e:	e000      	b.n	8005122 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d063      	beq.n	80051f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800512e:	4b4a      	ldr	r3, [pc, #296]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513a:	4b47      	ldr	r3, [pc, #284]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005142:	2b08      	cmp	r3, #8
 8005144:	d11c      	bne.n	8005180 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005146:	4b44      	ldr	r3, [pc, #272]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d116      	bne.n	8005180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005152:	4b41      	ldr	r3, [pc, #260]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_RCC_OscConfig+0x152>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d001      	beq.n	800516a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e1c7      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516a:	4b3b      	ldr	r3, [pc, #236]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4937      	ldr	r1, [pc, #220]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517e:	e03a      	b.n	80051f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005188:	4b34      	ldr	r3, [pc, #208]	@ (800525c <HAL_RCC_OscConfig+0x244>)
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518e:	f7fc fd8f 	bl	8001cb0 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005196:	f7fc fd8b 	bl	8001cb0 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e1a8      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	4b28      	ldr	r3, [pc, #160]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4925      	ldr	r1, [pc, #148]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
 80051c8:	e015      	b.n	80051f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ca:	4b24      	ldr	r3, [pc, #144]	@ (800525c <HAL_RCC_OscConfig+0x244>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fc fd6e 	bl	8001cb0 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d8:	f7fc fd6a 	bl	8001cb0 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e187      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d036      	beq.n	8005270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520a:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <HAL_RCC_OscConfig+0x248>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005210:	f7fc fd4e 	bl	8001cb0 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005218:	f7fc fd4a 	bl	8001cb0 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e167      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522a:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <HAL_RCC_OscConfig+0x240>)
 800522c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x200>
 8005236:	e01b      	b.n	8005270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005238:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <HAL_RCC_OscConfig+0x248>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523e:	f7fc fd37 	bl	8001cb0 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	e00e      	b.n	8005264 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005246:	f7fc fd33 	bl	8001cb0 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d907      	bls.n	8005264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e150      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
 8005258:	40023800 	.word	0x40023800
 800525c:	42470000 	.word	0x42470000
 8005260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	4b88      	ldr	r3, [pc, #544]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ea      	bne.n	8005246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8097 	beq.w	80053ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005282:	4b81      	ldr	r3, [pc, #516]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	4b7d      	ldr	r3, [pc, #500]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	4a7c      	ldr	r2, [pc, #496]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	@ 0x40
 800529e:	4b7a      	ldr	r3, [pc, #488]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	4b77      	ldr	r3, [pc, #476]	@ (800548c <HAL_RCC_OscConfig+0x474>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d118      	bne.n	80052ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ba:	4b74      	ldr	r3, [pc, #464]	@ (800548c <HAL_RCC_OscConfig+0x474>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a73      	ldr	r2, [pc, #460]	@ (800548c <HAL_RCC_OscConfig+0x474>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c6:	f7fc fcf3 	bl	8001cb0 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ce:	f7fc fcef 	bl	8001cb0 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e10c      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e0:	4b6a      	ldr	r3, [pc, #424]	@ (800548c <HAL_RCC_OscConfig+0x474>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d106      	bne.n	8005302 <HAL_RCC_OscConfig+0x2ea>
 80052f4:	4b64      	ldr	r3, [pc, #400]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	4a63      	ldr	r2, [pc, #396]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005300:	e01c      	b.n	800533c <HAL_RCC_OscConfig+0x324>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b05      	cmp	r3, #5
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x30c>
 800530a:	4b5f      	ldr	r3, [pc, #380]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	4a5e      	ldr	r2, [pc, #376]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	6713      	str	r3, [r2, #112]	@ 0x70
 8005316:	4b5c      	ldr	r3, [pc, #368]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	4a5b      	ldr	r2, [pc, #364]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6713      	str	r3, [r2, #112]	@ 0x70
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0x324>
 8005324:	4b58      	ldr	r3, [pc, #352]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	4a57      	ldr	r2, [pc, #348]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005330:	4b55      	ldr	r3, [pc, #340]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005334:	4a54      	ldr	r2, [pc, #336]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005336:	f023 0304 	bic.w	r3, r3, #4
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fc fcb4 	bl	8001cb0 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	e00a      	b.n	8005362 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fc fcb0 	bl	8001cb0 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0cb      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005362:	4b49      	ldr	r3, [pc, #292]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0ee      	beq.n	800534c <HAL_RCC_OscConfig+0x334>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005370:	f7fc fc9e 	bl	8001cb0 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005376:	e00a      	b.n	800538e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7fc fc9a 	bl	8001cb0 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e0b5      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538e:	4b3e      	ldr	r3, [pc, #248]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ee      	bne.n	8005378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a0:	4b39      	ldr	r3, [pc, #228]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	4a38      	ldr	r2, [pc, #224]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 80053a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80a1 	beq.w	80054f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b6:	4b34      	ldr	r3, [pc, #208]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d05c      	beq.n	800547c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d141      	bne.n	800544e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b31      	ldr	r3, [pc, #196]	@ (8005490 <HAL_RCC_OscConfig+0x478>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fc fc6e 	bl	8001cb0 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fc fc6a 	bl	8001cb0 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e087      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b27      	ldr	r3, [pc, #156]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	3b01      	subs	r3, #1
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	491b      	ldr	r1, [pc, #108]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005420:	4b1b      	ldr	r3, [pc, #108]	@ (8005490 <HAL_RCC_OscConfig+0x478>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005426:	f7fc fc43 	bl	8001cb0 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542e:	f7fc fc3f 	bl	8001cb0 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e05c      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005440:	4b11      	ldr	r3, [pc, #68]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x416>
 800544c:	e054      	b.n	80054f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b10      	ldr	r3, [pc, #64]	@ (8005490 <HAL_RCC_OscConfig+0x478>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fc fc2c 	bl	8001cb0 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fc fc28 	bl	8001cb0 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e045      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <HAL_RCC_OscConfig+0x470>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x444>
 800547a:	e03d      	b.n	80054f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d107      	bne.n	8005494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e038      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
 8005488:	40023800 	.word	0x40023800
 800548c:	40007000 	.word	0x40007000
 8005490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005494:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <HAL_RCC_OscConfig+0x4ec>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d028      	beq.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d121      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d11a      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d111      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	3b01      	subs	r3, #1
 80054de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800

08005508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0cc      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800551c:	4b68      	ldr	r3, [pc, #416]	@ (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d90c      	bls.n	8005544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b65      	ldr	r3, [pc, #404]	@ (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005532:	4b63      	ldr	r3, [pc, #396]	@ (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0b8      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d020      	beq.n	8005592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800555c:	4b59      	ldr	r3, [pc, #356]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a58      	ldr	r2, [pc, #352]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005566:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005574:	4b53      	ldr	r3, [pc, #332]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4a52      	ldr	r2, [pc, #328]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800557e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005580:	4b50      	ldr	r3, [pc, #320]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	494d      	ldr	r1, [pc, #308]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d044      	beq.n	8005628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d107      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a6:	4b47      	ldr	r3, [pc, #284]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d119      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e07f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d003      	beq.n	80055c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	4b3f      	ldr	r3, [pc, #252]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e06f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d6:	4b3b      	ldr	r3, [pc, #236]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e067      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e6:	4b37      	ldr	r3, [pc, #220]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f023 0203 	bic.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4934      	ldr	r1, [pc, #208]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f8:	f7fc fb5a 	bl	8001cb0 <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fc fb56 	bl	8001cb0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e04f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	4b2b      	ldr	r3, [pc, #172]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 020c 	and.w	r2, r3, #12
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	429a      	cmp	r2, r3
 8005626:	d1eb      	bne.n	8005600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005628:	4b25      	ldr	r3, [pc, #148]	@ (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d20c      	bcs.n	8005650 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b22      	ldr	r3, [pc, #136]	@ (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800563e:	4b20      	ldr	r3, [pc, #128]	@ (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d001      	beq.n	8005650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e032      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800565c:	4b19      	ldr	r3, [pc, #100]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4916      	ldr	r1, [pc, #88]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567a:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	490e      	ldr	r1, [pc, #56]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800568e:	f000 f821 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8005692:	4602      	mov	r2, r0
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	490a      	ldr	r1, [pc, #40]	@ (80056c8 <HAL_RCC_ClockConfig+0x1c0>)
 80056a0:	5ccb      	ldrb	r3, [r1, r3]
 80056a2:	fa22 f303 	lsr.w	r3, r2, r3
 80056a6:	4a09      	ldr	r2, [pc, #36]	@ (80056cc <HAL_RCC_ClockConfig+0x1c4>)
 80056a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056aa:	4b09      	ldr	r3, [pc, #36]	@ (80056d0 <HAL_RCC_ClockConfig+0x1c8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fc faba 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40023c00 	.word	0x40023c00
 80056c4:	40023800 	.word	0x40023800
 80056c8:	0800751c 	.word	0x0800751c
 80056cc:	20000000 	.word	0x20000000
 80056d0:	20000004 	.word	0x20000004

080056d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d8:	b090      	sub	sp, #64	@ 0x40
 80056da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ec:	4b59      	ldr	r3, [pc, #356]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 030c 	and.w	r3, r3, #12
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d00d      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0x40>
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	f200 80a1 	bhi.w	8005840 <HAL_RCC_GetSysClockFreq+0x16c>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x34>
 8005702:	2b04      	cmp	r3, #4
 8005704:	d003      	beq.n	800570e <HAL_RCC_GetSysClockFreq+0x3a>
 8005706:	e09b      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005708:	4b53      	ldr	r3, [pc, #332]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x184>)
 800570a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800570c:	e09b      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800570e:	4b53      	ldr	r3, [pc, #332]	@ (800585c <HAL_RCC_GetSysClockFreq+0x188>)
 8005710:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005712:	e098      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005714:	4b4f      	ldr	r3, [pc, #316]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800571e:	4b4d      	ldr	r3, [pc, #308]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d028      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800572a:	4b4a      	ldr	r3, [pc, #296]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	099b      	lsrs	r3, r3, #6
 8005730:	2200      	movs	r2, #0
 8005732:	623b      	str	r3, [r7, #32]
 8005734:	627a      	str	r2, [r7, #36]	@ 0x24
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800573c:	2100      	movs	r1, #0
 800573e:	4b47      	ldr	r3, [pc, #284]	@ (800585c <HAL_RCC_GetSysClockFreq+0x188>)
 8005740:	fb03 f201 	mul.w	r2, r3, r1
 8005744:	2300      	movs	r3, #0
 8005746:	fb00 f303 	mul.w	r3, r0, r3
 800574a:	4413      	add	r3, r2
 800574c:	4a43      	ldr	r2, [pc, #268]	@ (800585c <HAL_RCC_GetSysClockFreq+0x188>)
 800574e:	fba0 1202 	umull	r1, r2, r0, r2
 8005752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005754:	460a      	mov	r2, r1
 8005756:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800575a:	4413      	add	r3, r2
 800575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800575e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005760:	2200      	movs	r2, #0
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	61fa      	str	r2, [r7, #28]
 8005766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800576a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800576e:	f7fa fd87 	bl	8000280 <__aeabi_uldivmod>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4613      	mov	r3, r2
 8005778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800577a:	e053      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577c:	4b35      	ldr	r3, [pc, #212]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	099b      	lsrs	r3, r3, #6
 8005782:	2200      	movs	r2, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	617a      	str	r2, [r7, #20]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800578e:	f04f 0b00 	mov.w	fp, #0
 8005792:	4652      	mov	r2, sl
 8005794:	465b      	mov	r3, fp
 8005796:	f04f 0000 	mov.w	r0, #0
 800579a:	f04f 0100 	mov.w	r1, #0
 800579e:	0159      	lsls	r1, r3, #5
 80057a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057a4:	0150      	lsls	r0, r2, #5
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	ebb2 080a 	subs.w	r8, r2, sl
 80057ae:	eb63 090b 	sbc.w	r9, r3, fp
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057c6:	ebb2 0408 	subs.w	r4, r2, r8
 80057ca:	eb63 0509 	sbc.w	r5, r3, r9
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	00eb      	lsls	r3, r5, #3
 80057d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057dc:	00e2      	lsls	r2, r4, #3
 80057de:	4614      	mov	r4, r2
 80057e0:	461d      	mov	r5, r3
 80057e2:	eb14 030a 	adds.w	r3, r4, sl
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	eb45 030b 	adc.w	r3, r5, fp
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057fa:	4629      	mov	r1, r5
 80057fc:	028b      	lsls	r3, r1, #10
 80057fe:	4621      	mov	r1, r4
 8005800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005804:	4621      	mov	r1, r4
 8005806:	028a      	lsls	r2, r1, #10
 8005808:	4610      	mov	r0, r2
 800580a:	4619      	mov	r1, r3
 800580c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580e:	2200      	movs	r2, #0
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	60fa      	str	r2, [r7, #12]
 8005814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005818:	f7fa fd32 	bl	8000280 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4613      	mov	r3, r2
 8005822:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x180>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	3301      	adds	r3, #1
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005834:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800583e:	e002      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x184>)
 8005842:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005848:	4618      	mov	r0, r3
 800584a:	3740      	adds	r7, #64	@ 0x40
 800584c:	46bd      	mov	sp, r7
 800584e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800
 8005858:	00f42400 	.word	0x00f42400
 800585c:	017d7840 	.word	0x017d7840

08005860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005864:	4b03      	ldr	r3, [pc, #12]	@ (8005874 <HAL_RCC_GetHCLKFreq+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000000 	.word	0x20000000

08005878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800587c:	f7ff fff0 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8005880:	4602      	mov	r2, r0
 8005882:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	0a9b      	lsrs	r3, r3, #10
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	4903      	ldr	r1, [pc, #12]	@ (800589c <HAL_RCC_GetPCLK1Freq+0x24>)
 800588e:	5ccb      	ldrb	r3, [r1, r3]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40023800 	.word	0x40023800
 800589c:	0800752c 	.word	0x0800752c

080058a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e097      	b.n	80059e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fc f911 	bl	8001af0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058e4:	f023 0307 	bic.w	r3, r3, #7
 80058e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f000 fa1f 	bl	8005d38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005922:	f023 0303 	bic.w	r3, r3, #3
 8005926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	4313      	orrs	r3, r2
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005940:	f023 030c 	bic.w	r3, r3, #12
 8005944:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800594c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	4313      	orrs	r3, r2
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	011a      	lsls	r2, r3, #4
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	031b      	lsls	r3, r3, #12
 8005970:	4313      	orrs	r3, r2
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	4313      	orrs	r3, r2
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d110      	bne.n	8005a3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d102      	bne.n	8005a28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a22:	7b7b      	ldrb	r3, [r7, #13]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d001      	beq.n	8005a2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e069      	b.n	8005b00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a3c:	e031      	b.n	8005aa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d110      	bne.n	8005a66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a44:	7bbb      	ldrb	r3, [r7, #14]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d102      	bne.n	8005a50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a4a:	7b3b      	ldrb	r3, [r7, #12]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d001      	beq.n	8005a54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e055      	b.n	8005b00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a64:	e01d      	b.n	8005aa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d108      	bne.n	8005a7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a72:	7b7b      	ldrb	r3, [r7, #13]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d102      	bne.n	8005a7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a78:	7b3b      	ldrb	r3, [r7, #12]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d001      	beq.n	8005a82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e03e      	b.n	8005b00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_TIM_Encoder_Start+0xc4>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d008      	beq.n	8005ac0 <HAL_TIM_Encoder_Start+0xd4>
 8005aae:	e00f      	b.n	8005ad0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 f9c3 	bl	8005e44 <TIM_CCxChannelCmd>
      break;
 8005abe:	e016      	b.n	8005aee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	2104      	movs	r1, #4
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 f9bb 	bl	8005e44 <TIM_CCxChannelCmd>
      break;
 8005ace:	e00e      	b.n	8005aee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f9b3 	bl	8005e44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	2104      	movs	r1, #4
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f9ac 	bl	8005e44 <TIM_CCxChannelCmd>
      break;
 8005aec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0201 	orr.w	r2, r2, #1
 8005afc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d020      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0202 	mvn.w	r2, #2
 8005b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8d2 	bl	8005cfc <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f8c4 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f8d5 	bl	8005d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d020      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01b      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0204 	mvn.w	r2, #4
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f8ac 	bl	8005cfc <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f89e 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f8af 	bl	8005d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d020      	beq.n	8005c04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01b      	beq.n	8005c04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0208 	mvn.w	r2, #8
 8005bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f886 	bl	8005cfc <HAL_TIM_IC_CaptureCallback>
 8005bf0:	e005      	b.n	8005bfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f878 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f889 	bl	8005d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d020      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01b      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0210 	mvn.w	r2, #16
 8005c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2208      	movs	r2, #8
 8005c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f860 	bl	8005cfc <HAL_TIM_IC_CaptureCallback>
 8005c3c:	e005      	b.n	8005c4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f852 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f863 	bl	8005d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0201 	mvn.w	r2, #1
 8005c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fb fdee 	bl	8001850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f974 	bl	8005f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00c      	beq.n	8005cbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f834 	bl	8005d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0220 	mvn.w	r2, #32
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f946 	bl	8005f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a37      	ldr	r2, [pc, #220]	@ (8005e28 <TIM_Base_SetConfig+0xf0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0x38>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0x38>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a34      	ldr	r2, [pc, #208]	@ (8005e2c <TIM_Base_SetConfig+0xf4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0x38>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a33      	ldr	r2, [pc, #204]	@ (8005e30 <TIM_Base_SetConfig+0xf8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0x38>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a32      	ldr	r2, [pc, #200]	@ (8005e34 <TIM_Base_SetConfig+0xfc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a28      	ldr	r2, [pc, #160]	@ (8005e28 <TIM_Base_SetConfig+0xf0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01b      	beq.n	8005dc2 <TIM_Base_SetConfig+0x8a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d90:	d017      	beq.n	8005dc2 <TIM_Base_SetConfig+0x8a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a25      	ldr	r2, [pc, #148]	@ (8005e2c <TIM_Base_SetConfig+0xf4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <TIM_Base_SetConfig+0x8a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a24      	ldr	r2, [pc, #144]	@ (8005e30 <TIM_Base_SetConfig+0xf8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00f      	beq.n	8005dc2 <TIM_Base_SetConfig+0x8a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a23      	ldr	r2, [pc, #140]	@ (8005e34 <TIM_Base_SetConfig+0xfc>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00b      	beq.n	8005dc2 <TIM_Base_SetConfig+0x8a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a22      	ldr	r2, [pc, #136]	@ (8005e38 <TIM_Base_SetConfig+0x100>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d007      	beq.n	8005dc2 <TIM_Base_SetConfig+0x8a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a21      	ldr	r2, [pc, #132]	@ (8005e3c <TIM_Base_SetConfig+0x104>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d003      	beq.n	8005dc2 <TIM_Base_SetConfig+0x8a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a20      	ldr	r2, [pc, #128]	@ (8005e40 <TIM_Base_SetConfig+0x108>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d108      	bne.n	8005dd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a0c      	ldr	r2, [pc, #48]	@ (8005e28 <TIM_Base_SetConfig+0xf0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d103      	bne.n	8005e02 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f043 0204 	orr.w	r2, r3, #4
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	601a      	str	r2, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40010000 	.word	0x40010000
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40000c00 	.word	0x40000c00
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	2201      	movs	r2, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1a      	ldr	r2, [r3, #32]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	401a      	ands	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e050      	b.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d018      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef4:	d013      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a18      	ldr	r2, [pc, #96]	@ (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00e      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a16      	ldr	r2, [pc, #88]	@ (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d004      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a13      	ldr	r2, [pc, #76]	@ (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d10c      	bne.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40014000 	.word	0x40014000

08005f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <malloc>:
 8005f94:	4b02      	ldr	r3, [pc, #8]	@ (8005fa0 <malloc+0xc>)
 8005f96:	4601      	mov	r1, r0
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	f000 b825 	b.w	8005fe8 <_malloc_r>
 8005f9e:	bf00      	nop
 8005fa0:	20000018 	.word	0x20000018

08005fa4 <sbrk_aligned>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4e0f      	ldr	r6, [pc, #60]	@ (8005fe4 <sbrk_aligned+0x40>)
 8005fa8:	460c      	mov	r4, r1
 8005faa:	6831      	ldr	r1, [r6, #0]
 8005fac:	4605      	mov	r5, r0
 8005fae:	b911      	cbnz	r1, 8005fb6 <sbrk_aligned+0x12>
 8005fb0:	f000 fafc 	bl	80065ac <_sbrk_r>
 8005fb4:	6030      	str	r0, [r6, #0]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 faf7 	bl	80065ac <_sbrk_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d103      	bne.n	8005fca <sbrk_aligned+0x26>
 8005fc2:	f04f 34ff 	mov.w	r4, #4294967295
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	1cc4      	adds	r4, r0, #3
 8005fcc:	f024 0403 	bic.w	r4, r4, #3
 8005fd0:	42a0      	cmp	r0, r4
 8005fd2:	d0f8      	beq.n	8005fc6 <sbrk_aligned+0x22>
 8005fd4:	1a21      	subs	r1, r4, r0
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fae8 	bl	80065ac <_sbrk_r>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d1f2      	bne.n	8005fc6 <sbrk_aligned+0x22>
 8005fe0:	e7ef      	b.n	8005fc2 <sbrk_aligned+0x1e>
 8005fe2:	bf00      	nop
 8005fe4:	200001d8 	.word	0x200001d8

08005fe8 <_malloc_r>:
 8005fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fec:	1ccd      	adds	r5, r1, #3
 8005fee:	f025 0503 	bic.w	r5, r5, #3
 8005ff2:	3508      	adds	r5, #8
 8005ff4:	2d0c      	cmp	r5, #12
 8005ff6:	bf38      	it	cc
 8005ff8:	250c      	movcc	r5, #12
 8005ffa:	2d00      	cmp	r5, #0
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	db01      	blt.n	8006004 <_malloc_r+0x1c>
 8006000:	42a9      	cmp	r1, r5
 8006002:	d904      	bls.n	800600e <_malloc_r+0x26>
 8006004:	230c      	movs	r3, #12
 8006006:	6033      	str	r3, [r6, #0]
 8006008:	2000      	movs	r0, #0
 800600a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800600e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060e4 <_malloc_r+0xfc>
 8006012:	f000 f869 	bl	80060e8 <__malloc_lock>
 8006016:	f8d8 3000 	ldr.w	r3, [r8]
 800601a:	461c      	mov	r4, r3
 800601c:	bb44      	cbnz	r4, 8006070 <_malloc_r+0x88>
 800601e:	4629      	mov	r1, r5
 8006020:	4630      	mov	r0, r6
 8006022:	f7ff ffbf 	bl	8005fa4 <sbrk_aligned>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	4604      	mov	r4, r0
 800602a:	d158      	bne.n	80060de <_malloc_r+0xf6>
 800602c:	f8d8 4000 	ldr.w	r4, [r8]
 8006030:	4627      	mov	r7, r4
 8006032:	2f00      	cmp	r7, #0
 8006034:	d143      	bne.n	80060be <_malloc_r+0xd6>
 8006036:	2c00      	cmp	r4, #0
 8006038:	d04b      	beq.n	80060d2 <_malloc_r+0xea>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	4639      	mov	r1, r7
 800603e:	4630      	mov	r0, r6
 8006040:	eb04 0903 	add.w	r9, r4, r3
 8006044:	f000 fab2 	bl	80065ac <_sbrk_r>
 8006048:	4581      	cmp	r9, r0
 800604a:	d142      	bne.n	80060d2 <_malloc_r+0xea>
 800604c:	6821      	ldr	r1, [r4, #0]
 800604e:	1a6d      	subs	r5, r5, r1
 8006050:	4629      	mov	r1, r5
 8006052:	4630      	mov	r0, r6
 8006054:	f7ff ffa6 	bl	8005fa4 <sbrk_aligned>
 8006058:	3001      	adds	r0, #1
 800605a:	d03a      	beq.n	80060d2 <_malloc_r+0xea>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	442b      	add	r3, r5
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	f8d8 3000 	ldr.w	r3, [r8]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	bb62      	cbnz	r2, 80060c4 <_malloc_r+0xdc>
 800606a:	f8c8 7000 	str.w	r7, [r8]
 800606e:	e00f      	b.n	8006090 <_malloc_r+0xa8>
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	1b52      	subs	r2, r2, r5
 8006074:	d420      	bmi.n	80060b8 <_malloc_r+0xd0>
 8006076:	2a0b      	cmp	r2, #11
 8006078:	d917      	bls.n	80060aa <_malloc_r+0xc2>
 800607a:	1961      	adds	r1, r4, r5
 800607c:	42a3      	cmp	r3, r4
 800607e:	6025      	str	r5, [r4, #0]
 8006080:	bf18      	it	ne
 8006082:	6059      	strne	r1, [r3, #4]
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	bf08      	it	eq
 8006088:	f8c8 1000 	streq.w	r1, [r8]
 800608c:	5162      	str	r2, [r4, r5]
 800608e:	604b      	str	r3, [r1, #4]
 8006090:	4630      	mov	r0, r6
 8006092:	f000 f82f 	bl	80060f4 <__malloc_unlock>
 8006096:	f104 000b 	add.w	r0, r4, #11
 800609a:	1d23      	adds	r3, r4, #4
 800609c:	f020 0007 	bic.w	r0, r0, #7
 80060a0:	1ac2      	subs	r2, r0, r3
 80060a2:	bf1c      	itt	ne
 80060a4:	1a1b      	subne	r3, r3, r0
 80060a6:	50a3      	strne	r3, [r4, r2]
 80060a8:	e7af      	b.n	800600a <_malloc_r+0x22>
 80060aa:	6862      	ldr	r2, [r4, #4]
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	bf0c      	ite	eq
 80060b0:	f8c8 2000 	streq.w	r2, [r8]
 80060b4:	605a      	strne	r2, [r3, #4]
 80060b6:	e7eb      	b.n	8006090 <_malloc_r+0xa8>
 80060b8:	4623      	mov	r3, r4
 80060ba:	6864      	ldr	r4, [r4, #4]
 80060bc:	e7ae      	b.n	800601c <_malloc_r+0x34>
 80060be:	463c      	mov	r4, r7
 80060c0:	687f      	ldr	r7, [r7, #4]
 80060c2:	e7b6      	b.n	8006032 <_malloc_r+0x4a>
 80060c4:	461a      	mov	r2, r3
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d1fb      	bne.n	80060c4 <_malloc_r+0xdc>
 80060cc:	2300      	movs	r3, #0
 80060ce:	6053      	str	r3, [r2, #4]
 80060d0:	e7de      	b.n	8006090 <_malloc_r+0xa8>
 80060d2:	230c      	movs	r3, #12
 80060d4:	6033      	str	r3, [r6, #0]
 80060d6:	4630      	mov	r0, r6
 80060d8:	f000 f80c 	bl	80060f4 <__malloc_unlock>
 80060dc:	e794      	b.n	8006008 <_malloc_r+0x20>
 80060de:	6005      	str	r5, [r0, #0]
 80060e0:	e7d6      	b.n	8006090 <_malloc_r+0xa8>
 80060e2:	bf00      	nop
 80060e4:	200001dc 	.word	0x200001dc

080060e8 <__malloc_lock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	@ (80060f0 <__malloc_lock+0x8>)
 80060ea:	f000 baac 	b.w	8006646 <__retarget_lock_acquire_recursive>
 80060ee:	bf00      	nop
 80060f0:	20000320 	.word	0x20000320

080060f4 <__malloc_unlock>:
 80060f4:	4801      	ldr	r0, [pc, #4]	@ (80060fc <__malloc_unlock+0x8>)
 80060f6:	f000 baa7 	b.w	8006648 <__retarget_lock_release_recursive>
 80060fa:	bf00      	nop
 80060fc:	20000320 	.word	0x20000320

08006100 <std>:
 8006100:	2300      	movs	r3, #0
 8006102:	b510      	push	{r4, lr}
 8006104:	4604      	mov	r4, r0
 8006106:	e9c0 3300 	strd	r3, r3, [r0]
 800610a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800610e:	6083      	str	r3, [r0, #8]
 8006110:	8181      	strh	r1, [r0, #12]
 8006112:	6643      	str	r3, [r0, #100]	@ 0x64
 8006114:	81c2      	strh	r2, [r0, #14]
 8006116:	6183      	str	r3, [r0, #24]
 8006118:	4619      	mov	r1, r3
 800611a:	2208      	movs	r2, #8
 800611c:	305c      	adds	r0, #92	@ 0x5c
 800611e:	f000 fa09 	bl	8006534 <memset>
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <std+0x58>)
 8006124:	6263      	str	r3, [r4, #36]	@ 0x24
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <std+0x5c>)
 8006128:	62a3      	str	r3, [r4, #40]	@ 0x28
 800612a:	4b0d      	ldr	r3, [pc, #52]	@ (8006160 <std+0x60>)
 800612c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800612e:	4b0d      	ldr	r3, [pc, #52]	@ (8006164 <std+0x64>)
 8006130:	6323      	str	r3, [r4, #48]	@ 0x30
 8006132:	4b0d      	ldr	r3, [pc, #52]	@ (8006168 <std+0x68>)
 8006134:	6224      	str	r4, [r4, #32]
 8006136:	429c      	cmp	r4, r3
 8006138:	d006      	beq.n	8006148 <std+0x48>
 800613a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800613e:	4294      	cmp	r4, r2
 8006140:	d002      	beq.n	8006148 <std+0x48>
 8006142:	33d0      	adds	r3, #208	@ 0xd0
 8006144:	429c      	cmp	r4, r3
 8006146:	d105      	bne.n	8006154 <std+0x54>
 8006148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800614c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006150:	f000 ba78 	b.w	8006644 <__retarget_lock_init_recursive>
 8006154:	bd10      	pop	{r4, pc}
 8006156:	bf00      	nop
 8006158:	08006385 	.word	0x08006385
 800615c:	080063a7 	.word	0x080063a7
 8006160:	080063df 	.word	0x080063df
 8006164:	08006403 	.word	0x08006403
 8006168:	200001e0 	.word	0x200001e0

0800616c <stdio_exit_handler>:
 800616c:	4a02      	ldr	r2, [pc, #8]	@ (8006178 <stdio_exit_handler+0xc>)
 800616e:	4903      	ldr	r1, [pc, #12]	@ (800617c <stdio_exit_handler+0x10>)
 8006170:	4803      	ldr	r0, [pc, #12]	@ (8006180 <stdio_exit_handler+0x14>)
 8006172:	f000 b869 	b.w	8006248 <_fwalk_sglue>
 8006176:	bf00      	nop
 8006178:	2000000c 	.word	0x2000000c
 800617c:	08006db1 	.word	0x08006db1
 8006180:	2000001c 	.word	0x2000001c

08006184 <cleanup_stdio>:
 8006184:	6841      	ldr	r1, [r0, #4]
 8006186:	4b0c      	ldr	r3, [pc, #48]	@ (80061b8 <cleanup_stdio+0x34>)
 8006188:	4299      	cmp	r1, r3
 800618a:	b510      	push	{r4, lr}
 800618c:	4604      	mov	r4, r0
 800618e:	d001      	beq.n	8006194 <cleanup_stdio+0x10>
 8006190:	f000 fe0e 	bl	8006db0 <_fflush_r>
 8006194:	68a1      	ldr	r1, [r4, #8]
 8006196:	4b09      	ldr	r3, [pc, #36]	@ (80061bc <cleanup_stdio+0x38>)
 8006198:	4299      	cmp	r1, r3
 800619a:	d002      	beq.n	80061a2 <cleanup_stdio+0x1e>
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fe07 	bl	8006db0 <_fflush_r>
 80061a2:	68e1      	ldr	r1, [r4, #12]
 80061a4:	4b06      	ldr	r3, [pc, #24]	@ (80061c0 <cleanup_stdio+0x3c>)
 80061a6:	4299      	cmp	r1, r3
 80061a8:	d004      	beq.n	80061b4 <cleanup_stdio+0x30>
 80061aa:	4620      	mov	r0, r4
 80061ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061b0:	f000 bdfe 	b.w	8006db0 <_fflush_r>
 80061b4:	bd10      	pop	{r4, pc}
 80061b6:	bf00      	nop
 80061b8:	200001e0 	.word	0x200001e0
 80061bc:	20000248 	.word	0x20000248
 80061c0:	200002b0 	.word	0x200002b0

080061c4 <global_stdio_init.part.0>:
 80061c4:	b510      	push	{r4, lr}
 80061c6:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <global_stdio_init.part.0+0x30>)
 80061c8:	4c0b      	ldr	r4, [pc, #44]	@ (80061f8 <global_stdio_init.part.0+0x34>)
 80061ca:	4a0c      	ldr	r2, [pc, #48]	@ (80061fc <global_stdio_init.part.0+0x38>)
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	4620      	mov	r0, r4
 80061d0:	2200      	movs	r2, #0
 80061d2:	2104      	movs	r1, #4
 80061d4:	f7ff ff94 	bl	8006100 <std>
 80061d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061dc:	2201      	movs	r2, #1
 80061de:	2109      	movs	r1, #9
 80061e0:	f7ff ff8e 	bl	8006100 <std>
 80061e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061e8:	2202      	movs	r2, #2
 80061ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ee:	2112      	movs	r1, #18
 80061f0:	f7ff bf86 	b.w	8006100 <std>
 80061f4:	20000318 	.word	0x20000318
 80061f8:	200001e0 	.word	0x200001e0
 80061fc:	0800616d 	.word	0x0800616d

08006200 <__sfp_lock_acquire>:
 8006200:	4801      	ldr	r0, [pc, #4]	@ (8006208 <__sfp_lock_acquire+0x8>)
 8006202:	f000 ba20 	b.w	8006646 <__retarget_lock_acquire_recursive>
 8006206:	bf00      	nop
 8006208:	20000321 	.word	0x20000321

0800620c <__sfp_lock_release>:
 800620c:	4801      	ldr	r0, [pc, #4]	@ (8006214 <__sfp_lock_release+0x8>)
 800620e:	f000 ba1b 	b.w	8006648 <__retarget_lock_release_recursive>
 8006212:	bf00      	nop
 8006214:	20000321 	.word	0x20000321

08006218 <__sinit>:
 8006218:	b510      	push	{r4, lr}
 800621a:	4604      	mov	r4, r0
 800621c:	f7ff fff0 	bl	8006200 <__sfp_lock_acquire>
 8006220:	6a23      	ldr	r3, [r4, #32]
 8006222:	b11b      	cbz	r3, 800622c <__sinit+0x14>
 8006224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006228:	f7ff bff0 	b.w	800620c <__sfp_lock_release>
 800622c:	4b04      	ldr	r3, [pc, #16]	@ (8006240 <__sinit+0x28>)
 800622e:	6223      	str	r3, [r4, #32]
 8006230:	4b04      	ldr	r3, [pc, #16]	@ (8006244 <__sinit+0x2c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f5      	bne.n	8006224 <__sinit+0xc>
 8006238:	f7ff ffc4 	bl	80061c4 <global_stdio_init.part.0>
 800623c:	e7f2      	b.n	8006224 <__sinit+0xc>
 800623e:	bf00      	nop
 8006240:	08006185 	.word	0x08006185
 8006244:	20000318 	.word	0x20000318

08006248 <_fwalk_sglue>:
 8006248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800624c:	4607      	mov	r7, r0
 800624e:	4688      	mov	r8, r1
 8006250:	4614      	mov	r4, r2
 8006252:	2600      	movs	r6, #0
 8006254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006258:	f1b9 0901 	subs.w	r9, r9, #1
 800625c:	d505      	bpl.n	800626a <_fwalk_sglue+0x22>
 800625e:	6824      	ldr	r4, [r4, #0]
 8006260:	2c00      	cmp	r4, #0
 8006262:	d1f7      	bne.n	8006254 <_fwalk_sglue+0xc>
 8006264:	4630      	mov	r0, r6
 8006266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626a:	89ab      	ldrh	r3, [r5, #12]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d907      	bls.n	8006280 <_fwalk_sglue+0x38>
 8006270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006274:	3301      	adds	r3, #1
 8006276:	d003      	beq.n	8006280 <_fwalk_sglue+0x38>
 8006278:	4629      	mov	r1, r5
 800627a:	4638      	mov	r0, r7
 800627c:	47c0      	blx	r8
 800627e:	4306      	orrs	r6, r0
 8006280:	3568      	adds	r5, #104	@ 0x68
 8006282:	e7e9      	b.n	8006258 <_fwalk_sglue+0x10>

08006284 <_puts_r>:
 8006284:	6a03      	ldr	r3, [r0, #32]
 8006286:	b570      	push	{r4, r5, r6, lr}
 8006288:	6884      	ldr	r4, [r0, #8]
 800628a:	4605      	mov	r5, r0
 800628c:	460e      	mov	r6, r1
 800628e:	b90b      	cbnz	r3, 8006294 <_puts_r+0x10>
 8006290:	f7ff ffc2 	bl	8006218 <__sinit>
 8006294:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006296:	07db      	lsls	r3, r3, #31
 8006298:	d405      	bmi.n	80062a6 <_puts_r+0x22>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	0598      	lsls	r0, r3, #22
 800629e:	d402      	bmi.n	80062a6 <_puts_r+0x22>
 80062a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062a2:	f000 f9d0 	bl	8006646 <__retarget_lock_acquire_recursive>
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	0719      	lsls	r1, r3, #28
 80062aa:	d502      	bpl.n	80062b2 <_puts_r+0x2e>
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d135      	bne.n	800631e <_puts_r+0x9a>
 80062b2:	4621      	mov	r1, r4
 80062b4:	4628      	mov	r0, r5
 80062b6:	f000 f8e7 	bl	8006488 <__swsetup_r>
 80062ba:	b380      	cbz	r0, 800631e <_puts_r+0x9a>
 80062bc:	f04f 35ff 	mov.w	r5, #4294967295
 80062c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062c2:	07da      	lsls	r2, r3, #31
 80062c4:	d405      	bmi.n	80062d2 <_puts_r+0x4e>
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	059b      	lsls	r3, r3, #22
 80062ca:	d402      	bmi.n	80062d2 <_puts_r+0x4e>
 80062cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ce:	f000 f9bb 	bl	8006648 <__retarget_lock_release_recursive>
 80062d2:	4628      	mov	r0, r5
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	da04      	bge.n	80062e4 <_puts_r+0x60>
 80062da:	69a2      	ldr	r2, [r4, #24]
 80062dc:	429a      	cmp	r2, r3
 80062de:	dc17      	bgt.n	8006310 <_puts_r+0x8c>
 80062e0:	290a      	cmp	r1, #10
 80062e2:	d015      	beq.n	8006310 <_puts_r+0x8c>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	6022      	str	r2, [r4, #0]
 80062ea:	7019      	strb	r1, [r3, #0]
 80062ec:	68a3      	ldr	r3, [r4, #8]
 80062ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062f2:	3b01      	subs	r3, #1
 80062f4:	60a3      	str	r3, [r4, #8]
 80062f6:	2900      	cmp	r1, #0
 80062f8:	d1ed      	bne.n	80062d6 <_puts_r+0x52>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	da11      	bge.n	8006322 <_puts_r+0x9e>
 80062fe:	4622      	mov	r2, r4
 8006300:	210a      	movs	r1, #10
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f881 	bl	800640a <__swbuf_r>
 8006308:	3001      	adds	r0, #1
 800630a:	d0d7      	beq.n	80062bc <_puts_r+0x38>
 800630c:	250a      	movs	r5, #10
 800630e:	e7d7      	b.n	80062c0 <_puts_r+0x3c>
 8006310:	4622      	mov	r2, r4
 8006312:	4628      	mov	r0, r5
 8006314:	f000 f879 	bl	800640a <__swbuf_r>
 8006318:	3001      	adds	r0, #1
 800631a:	d1e7      	bne.n	80062ec <_puts_r+0x68>
 800631c:	e7ce      	b.n	80062bc <_puts_r+0x38>
 800631e:	3e01      	subs	r6, #1
 8006320:	e7e4      	b.n	80062ec <_puts_r+0x68>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	220a      	movs	r2, #10
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e7ee      	b.n	800630c <_puts_r+0x88>
	...

08006330 <puts>:
 8006330:	4b02      	ldr	r3, [pc, #8]	@ (800633c <puts+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f7ff bfa5 	b.w	8006284 <_puts_r>
 800633a:	bf00      	nop
 800633c:	20000018 	.word	0x20000018

08006340 <siprintf>:
 8006340:	b40e      	push	{r1, r2, r3}
 8006342:	b510      	push	{r4, lr}
 8006344:	b09d      	sub	sp, #116	@ 0x74
 8006346:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006348:	9002      	str	r0, [sp, #8]
 800634a:	9006      	str	r0, [sp, #24]
 800634c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006350:	480a      	ldr	r0, [pc, #40]	@ (800637c <siprintf+0x3c>)
 8006352:	9107      	str	r1, [sp, #28]
 8006354:	9104      	str	r1, [sp, #16]
 8006356:	490a      	ldr	r1, [pc, #40]	@ (8006380 <siprintf+0x40>)
 8006358:	f853 2b04 	ldr.w	r2, [r3], #4
 800635c:	9105      	str	r1, [sp, #20]
 800635e:	2400      	movs	r4, #0
 8006360:	a902      	add	r1, sp, #8
 8006362:	6800      	ldr	r0, [r0, #0]
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006368:	f000 fa16 	bl	8006798 <_svfiprintf_r>
 800636c:	9b02      	ldr	r3, [sp, #8]
 800636e:	701c      	strb	r4, [r3, #0]
 8006370:	b01d      	add	sp, #116	@ 0x74
 8006372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006376:	b003      	add	sp, #12
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	20000018 	.word	0x20000018
 8006380:	ffff0208 	.word	0xffff0208

08006384 <__sread>:
 8006384:	b510      	push	{r4, lr}
 8006386:	460c      	mov	r4, r1
 8006388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800638c:	f000 f8fc 	bl	8006588 <_read_r>
 8006390:	2800      	cmp	r0, #0
 8006392:	bfab      	itete	ge
 8006394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006396:	89a3      	ldrhlt	r3, [r4, #12]
 8006398:	181b      	addge	r3, r3, r0
 800639a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800639e:	bfac      	ite	ge
 80063a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063a2:	81a3      	strhlt	r3, [r4, #12]
 80063a4:	bd10      	pop	{r4, pc}

080063a6 <__swrite>:
 80063a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063aa:	461f      	mov	r7, r3
 80063ac:	898b      	ldrh	r3, [r1, #12]
 80063ae:	05db      	lsls	r3, r3, #23
 80063b0:	4605      	mov	r5, r0
 80063b2:	460c      	mov	r4, r1
 80063b4:	4616      	mov	r6, r2
 80063b6:	d505      	bpl.n	80063c4 <__swrite+0x1e>
 80063b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063bc:	2302      	movs	r3, #2
 80063be:	2200      	movs	r2, #0
 80063c0:	f000 f8d0 	bl	8006564 <_lseek_r>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	4632      	mov	r2, r6
 80063d2:	463b      	mov	r3, r7
 80063d4:	4628      	mov	r0, r5
 80063d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063da:	f000 b8f7 	b.w	80065cc <_write_r>

080063de <__sseek>:
 80063de:	b510      	push	{r4, lr}
 80063e0:	460c      	mov	r4, r1
 80063e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e6:	f000 f8bd 	bl	8006564 <_lseek_r>
 80063ea:	1c43      	adds	r3, r0, #1
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	bf15      	itete	ne
 80063f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063fa:	81a3      	strheq	r3, [r4, #12]
 80063fc:	bf18      	it	ne
 80063fe:	81a3      	strhne	r3, [r4, #12]
 8006400:	bd10      	pop	{r4, pc}

08006402 <__sclose>:
 8006402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006406:	f000 b89d 	b.w	8006544 <_close_r>

0800640a <__swbuf_r>:
 800640a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640c:	460e      	mov	r6, r1
 800640e:	4614      	mov	r4, r2
 8006410:	4605      	mov	r5, r0
 8006412:	b118      	cbz	r0, 800641c <__swbuf_r+0x12>
 8006414:	6a03      	ldr	r3, [r0, #32]
 8006416:	b90b      	cbnz	r3, 800641c <__swbuf_r+0x12>
 8006418:	f7ff fefe 	bl	8006218 <__sinit>
 800641c:	69a3      	ldr	r3, [r4, #24]
 800641e:	60a3      	str	r3, [r4, #8]
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	071a      	lsls	r2, r3, #28
 8006424:	d501      	bpl.n	800642a <__swbuf_r+0x20>
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	b943      	cbnz	r3, 800643c <__swbuf_r+0x32>
 800642a:	4621      	mov	r1, r4
 800642c:	4628      	mov	r0, r5
 800642e:	f000 f82b 	bl	8006488 <__swsetup_r>
 8006432:	b118      	cbz	r0, 800643c <__swbuf_r+0x32>
 8006434:	f04f 37ff 	mov.w	r7, #4294967295
 8006438:	4638      	mov	r0, r7
 800643a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	6922      	ldr	r2, [r4, #16]
 8006440:	1a98      	subs	r0, r3, r2
 8006442:	6963      	ldr	r3, [r4, #20]
 8006444:	b2f6      	uxtb	r6, r6
 8006446:	4283      	cmp	r3, r0
 8006448:	4637      	mov	r7, r6
 800644a:	dc05      	bgt.n	8006458 <__swbuf_r+0x4e>
 800644c:	4621      	mov	r1, r4
 800644e:	4628      	mov	r0, r5
 8006450:	f000 fcae 	bl	8006db0 <_fflush_r>
 8006454:	2800      	cmp	r0, #0
 8006456:	d1ed      	bne.n	8006434 <__swbuf_r+0x2a>
 8006458:	68a3      	ldr	r3, [r4, #8]
 800645a:	3b01      	subs	r3, #1
 800645c:	60a3      	str	r3, [r4, #8]
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	6022      	str	r2, [r4, #0]
 8006464:	701e      	strb	r6, [r3, #0]
 8006466:	6962      	ldr	r2, [r4, #20]
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	429a      	cmp	r2, r3
 800646c:	d004      	beq.n	8006478 <__swbuf_r+0x6e>
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	07db      	lsls	r3, r3, #31
 8006472:	d5e1      	bpl.n	8006438 <__swbuf_r+0x2e>
 8006474:	2e0a      	cmp	r6, #10
 8006476:	d1df      	bne.n	8006438 <__swbuf_r+0x2e>
 8006478:	4621      	mov	r1, r4
 800647a:	4628      	mov	r0, r5
 800647c:	f000 fc98 	bl	8006db0 <_fflush_r>
 8006480:	2800      	cmp	r0, #0
 8006482:	d0d9      	beq.n	8006438 <__swbuf_r+0x2e>
 8006484:	e7d6      	b.n	8006434 <__swbuf_r+0x2a>
	...

08006488 <__swsetup_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4b29      	ldr	r3, [pc, #164]	@ (8006530 <__swsetup_r+0xa8>)
 800648c:	4605      	mov	r5, r0
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	460c      	mov	r4, r1
 8006492:	b118      	cbz	r0, 800649c <__swsetup_r+0x14>
 8006494:	6a03      	ldr	r3, [r0, #32]
 8006496:	b90b      	cbnz	r3, 800649c <__swsetup_r+0x14>
 8006498:	f7ff febe 	bl	8006218 <__sinit>
 800649c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a0:	0719      	lsls	r1, r3, #28
 80064a2:	d422      	bmi.n	80064ea <__swsetup_r+0x62>
 80064a4:	06da      	lsls	r2, r3, #27
 80064a6:	d407      	bmi.n	80064b8 <__swsetup_r+0x30>
 80064a8:	2209      	movs	r2, #9
 80064aa:	602a      	str	r2, [r5, #0]
 80064ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b0:	81a3      	strh	r3, [r4, #12]
 80064b2:	f04f 30ff 	mov.w	r0, #4294967295
 80064b6:	e033      	b.n	8006520 <__swsetup_r+0x98>
 80064b8:	0758      	lsls	r0, r3, #29
 80064ba:	d512      	bpl.n	80064e2 <__swsetup_r+0x5a>
 80064bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064be:	b141      	cbz	r1, 80064d2 <__swsetup_r+0x4a>
 80064c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064c4:	4299      	cmp	r1, r3
 80064c6:	d002      	beq.n	80064ce <__swsetup_r+0x46>
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 f8bf 	bl	800664c <_free_r>
 80064ce:	2300      	movs	r3, #0
 80064d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064d8:	81a3      	strh	r3, [r4, #12]
 80064da:	2300      	movs	r3, #0
 80064dc:	6063      	str	r3, [r4, #4]
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f043 0308 	orr.w	r3, r3, #8
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	b94b      	cbnz	r3, 8006502 <__swsetup_r+0x7a>
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f8:	d003      	beq.n	8006502 <__swsetup_r+0x7a>
 80064fa:	4621      	mov	r1, r4
 80064fc:	4628      	mov	r0, r5
 80064fe:	f000 fca5 	bl	8006e4c <__smakebuf_r>
 8006502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006506:	f013 0201 	ands.w	r2, r3, #1
 800650a:	d00a      	beq.n	8006522 <__swsetup_r+0x9a>
 800650c:	2200      	movs	r2, #0
 800650e:	60a2      	str	r2, [r4, #8]
 8006510:	6962      	ldr	r2, [r4, #20]
 8006512:	4252      	negs	r2, r2
 8006514:	61a2      	str	r2, [r4, #24]
 8006516:	6922      	ldr	r2, [r4, #16]
 8006518:	b942      	cbnz	r2, 800652c <__swsetup_r+0xa4>
 800651a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800651e:	d1c5      	bne.n	80064ac <__swsetup_r+0x24>
 8006520:	bd38      	pop	{r3, r4, r5, pc}
 8006522:	0799      	lsls	r1, r3, #30
 8006524:	bf58      	it	pl
 8006526:	6962      	ldrpl	r2, [r4, #20]
 8006528:	60a2      	str	r2, [r4, #8]
 800652a:	e7f4      	b.n	8006516 <__swsetup_r+0x8e>
 800652c:	2000      	movs	r0, #0
 800652e:	e7f7      	b.n	8006520 <__swsetup_r+0x98>
 8006530:	20000018 	.word	0x20000018

08006534 <memset>:
 8006534:	4402      	add	r2, r0
 8006536:	4603      	mov	r3, r0
 8006538:	4293      	cmp	r3, r2
 800653a:	d100      	bne.n	800653e <memset+0xa>
 800653c:	4770      	bx	lr
 800653e:	f803 1b01 	strb.w	r1, [r3], #1
 8006542:	e7f9      	b.n	8006538 <memset+0x4>

08006544 <_close_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	4d06      	ldr	r5, [pc, #24]	@ (8006560 <_close_r+0x1c>)
 8006548:	2300      	movs	r3, #0
 800654a:	4604      	mov	r4, r0
 800654c:	4608      	mov	r0, r1
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	f7fb f9f5 	bl	800193e <_close>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_close_r+0x1a>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_close_r+0x1a>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	2000031c 	.word	0x2000031c

08006564 <_lseek_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	@ (8006584 <_lseek_r+0x20>)
 8006568:	4604      	mov	r4, r0
 800656a:	4608      	mov	r0, r1
 800656c:	4611      	mov	r1, r2
 800656e:	2200      	movs	r2, #0
 8006570:	602a      	str	r2, [r5, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f7fb fa0a 	bl	800198c <_lseek>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_lseek_r+0x1e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_lseek_r+0x1e>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	2000031c 	.word	0x2000031c

08006588 <_read_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d07      	ldr	r5, [pc, #28]	@ (80065a8 <_read_r+0x20>)
 800658c:	4604      	mov	r4, r0
 800658e:	4608      	mov	r0, r1
 8006590:	4611      	mov	r1, r2
 8006592:	2200      	movs	r2, #0
 8006594:	602a      	str	r2, [r5, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f7fb f998 	bl	80018cc <_read>
 800659c:	1c43      	adds	r3, r0, #1
 800659e:	d102      	bne.n	80065a6 <_read_r+0x1e>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	b103      	cbz	r3, 80065a6 <_read_r+0x1e>
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	2000031c 	.word	0x2000031c

080065ac <_sbrk_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d06      	ldr	r5, [pc, #24]	@ (80065c8 <_sbrk_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fb f9f6 	bl	80019a8 <_sbrk>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_sbrk_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_sbrk_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	2000031c 	.word	0x2000031c

080065cc <_write_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d07      	ldr	r5, [pc, #28]	@ (80065ec <_write_r+0x20>)
 80065d0:	4604      	mov	r4, r0
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	2200      	movs	r2, #0
 80065d8:	602a      	str	r2, [r5, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	f7fb f993 	bl	8001906 <_write>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_write_r+0x1e>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_write_r+0x1e>
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	2000031c 	.word	0x2000031c

080065f0 <__errno>:
 80065f0:	4b01      	ldr	r3, [pc, #4]	@ (80065f8 <__errno+0x8>)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000018 	.word	0x20000018

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006634 <__libc_init_array+0x38>)
 8006600:	4c0d      	ldr	r4, [pc, #52]	@ (8006638 <__libc_init_array+0x3c>)
 8006602:	1b64      	subs	r4, r4, r5
 8006604:	10a4      	asrs	r4, r4, #2
 8006606:	2600      	movs	r6, #0
 8006608:	42a6      	cmp	r6, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	4d0b      	ldr	r5, [pc, #44]	@ (800663c <__libc_init_array+0x40>)
 800660e:	4c0c      	ldr	r4, [pc, #48]	@ (8006640 <__libc_init_array+0x44>)
 8006610:	f000 fcd8 	bl	8006fc4 <_init>
 8006614:	1b64      	subs	r4, r4, r5
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	2600      	movs	r6, #0
 800661a:	42a6      	cmp	r6, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f855 3b04 	ldr.w	r3, [r5], #4
 8006624:	4798      	blx	r3
 8006626:	3601      	adds	r6, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f855 3b04 	ldr.w	r3, [r5], #4
 800662e:	4798      	blx	r3
 8006630:	3601      	adds	r6, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	08007578 	.word	0x08007578
 8006638:	08007578 	.word	0x08007578
 800663c:	08007578 	.word	0x08007578
 8006640:	0800757c 	.word	0x0800757c

08006644 <__retarget_lock_init_recursive>:
 8006644:	4770      	bx	lr

08006646 <__retarget_lock_acquire_recursive>:
 8006646:	4770      	bx	lr

08006648 <__retarget_lock_release_recursive>:
 8006648:	4770      	bx	lr
	...

0800664c <_free_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4605      	mov	r5, r0
 8006650:	2900      	cmp	r1, #0
 8006652:	d041      	beq.n	80066d8 <_free_r+0x8c>
 8006654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006658:	1f0c      	subs	r4, r1, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	bfb8      	it	lt
 800665e:	18e4      	addlt	r4, r4, r3
 8006660:	f7ff fd42 	bl	80060e8 <__malloc_lock>
 8006664:	4a1d      	ldr	r2, [pc, #116]	@ (80066dc <_free_r+0x90>)
 8006666:	6813      	ldr	r3, [r2, #0]
 8006668:	b933      	cbnz	r3, 8006678 <_free_r+0x2c>
 800666a:	6063      	str	r3, [r4, #4]
 800666c:	6014      	str	r4, [r2, #0]
 800666e:	4628      	mov	r0, r5
 8006670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006674:	f7ff bd3e 	b.w	80060f4 <__malloc_unlock>
 8006678:	42a3      	cmp	r3, r4
 800667a:	d908      	bls.n	800668e <_free_r+0x42>
 800667c:	6820      	ldr	r0, [r4, #0]
 800667e:	1821      	adds	r1, r4, r0
 8006680:	428b      	cmp	r3, r1
 8006682:	bf01      	itttt	eq
 8006684:	6819      	ldreq	r1, [r3, #0]
 8006686:	685b      	ldreq	r3, [r3, #4]
 8006688:	1809      	addeq	r1, r1, r0
 800668a:	6021      	streq	r1, [r4, #0]
 800668c:	e7ed      	b.n	800666a <_free_r+0x1e>
 800668e:	461a      	mov	r2, r3
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	b10b      	cbz	r3, 8006698 <_free_r+0x4c>
 8006694:	42a3      	cmp	r3, r4
 8006696:	d9fa      	bls.n	800668e <_free_r+0x42>
 8006698:	6811      	ldr	r1, [r2, #0]
 800669a:	1850      	adds	r0, r2, r1
 800669c:	42a0      	cmp	r0, r4
 800669e:	d10b      	bne.n	80066b8 <_free_r+0x6c>
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	4401      	add	r1, r0
 80066a4:	1850      	adds	r0, r2, r1
 80066a6:	4283      	cmp	r3, r0
 80066a8:	6011      	str	r1, [r2, #0]
 80066aa:	d1e0      	bne.n	800666e <_free_r+0x22>
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	6053      	str	r3, [r2, #4]
 80066b2:	4408      	add	r0, r1
 80066b4:	6010      	str	r0, [r2, #0]
 80066b6:	e7da      	b.n	800666e <_free_r+0x22>
 80066b8:	d902      	bls.n	80066c0 <_free_r+0x74>
 80066ba:	230c      	movs	r3, #12
 80066bc:	602b      	str	r3, [r5, #0]
 80066be:	e7d6      	b.n	800666e <_free_r+0x22>
 80066c0:	6820      	ldr	r0, [r4, #0]
 80066c2:	1821      	adds	r1, r4, r0
 80066c4:	428b      	cmp	r3, r1
 80066c6:	bf04      	itt	eq
 80066c8:	6819      	ldreq	r1, [r3, #0]
 80066ca:	685b      	ldreq	r3, [r3, #4]
 80066cc:	6063      	str	r3, [r4, #4]
 80066ce:	bf04      	itt	eq
 80066d0:	1809      	addeq	r1, r1, r0
 80066d2:	6021      	streq	r1, [r4, #0]
 80066d4:	6054      	str	r4, [r2, #4]
 80066d6:	e7ca      	b.n	800666e <_free_r+0x22>
 80066d8:	bd38      	pop	{r3, r4, r5, pc}
 80066da:	bf00      	nop
 80066dc:	200001dc 	.word	0x200001dc

080066e0 <__ssputs_r>:
 80066e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	688e      	ldr	r6, [r1, #8]
 80066e6:	461f      	mov	r7, r3
 80066e8:	42be      	cmp	r6, r7
 80066ea:	680b      	ldr	r3, [r1, #0]
 80066ec:	4682      	mov	sl, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	4690      	mov	r8, r2
 80066f2:	d82d      	bhi.n	8006750 <__ssputs_r+0x70>
 80066f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80066fc:	d026      	beq.n	800674c <__ssputs_r+0x6c>
 80066fe:	6965      	ldr	r5, [r4, #20]
 8006700:	6909      	ldr	r1, [r1, #16]
 8006702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006706:	eba3 0901 	sub.w	r9, r3, r1
 800670a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800670e:	1c7b      	adds	r3, r7, #1
 8006710:	444b      	add	r3, r9
 8006712:	106d      	asrs	r5, r5, #1
 8006714:	429d      	cmp	r5, r3
 8006716:	bf38      	it	cc
 8006718:	461d      	movcc	r5, r3
 800671a:	0553      	lsls	r3, r2, #21
 800671c:	d527      	bpl.n	800676e <__ssputs_r+0x8e>
 800671e:	4629      	mov	r1, r5
 8006720:	f7ff fc62 	bl	8005fe8 <_malloc_r>
 8006724:	4606      	mov	r6, r0
 8006726:	b360      	cbz	r0, 8006782 <__ssputs_r+0xa2>
 8006728:	6921      	ldr	r1, [r4, #16]
 800672a:	464a      	mov	r2, r9
 800672c:	f000 fc06 	bl	8006f3c <memcpy>
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800673a:	81a3      	strh	r3, [r4, #12]
 800673c:	6126      	str	r6, [r4, #16]
 800673e:	6165      	str	r5, [r4, #20]
 8006740:	444e      	add	r6, r9
 8006742:	eba5 0509 	sub.w	r5, r5, r9
 8006746:	6026      	str	r6, [r4, #0]
 8006748:	60a5      	str	r5, [r4, #8]
 800674a:	463e      	mov	r6, r7
 800674c:	42be      	cmp	r6, r7
 800674e:	d900      	bls.n	8006752 <__ssputs_r+0x72>
 8006750:	463e      	mov	r6, r7
 8006752:	6820      	ldr	r0, [r4, #0]
 8006754:	4632      	mov	r2, r6
 8006756:	4641      	mov	r1, r8
 8006758:	f000 fbb4 	bl	8006ec4 <memmove>
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	1b9b      	subs	r3, r3, r6
 8006760:	60a3      	str	r3, [r4, #8]
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	4433      	add	r3, r6
 8006766:	6023      	str	r3, [r4, #0]
 8006768:	2000      	movs	r0, #0
 800676a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676e:	462a      	mov	r2, r5
 8006770:	f000 fbf2 	bl	8006f58 <_realloc_r>
 8006774:	4606      	mov	r6, r0
 8006776:	2800      	cmp	r0, #0
 8006778:	d1e0      	bne.n	800673c <__ssputs_r+0x5c>
 800677a:	6921      	ldr	r1, [r4, #16]
 800677c:	4650      	mov	r0, sl
 800677e:	f7ff ff65 	bl	800664c <_free_r>
 8006782:	230c      	movs	r3, #12
 8006784:	f8ca 3000 	str.w	r3, [sl]
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800678e:	81a3      	strh	r3, [r4, #12]
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	e7e9      	b.n	800676a <__ssputs_r+0x8a>
	...

08006798 <_svfiprintf_r>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	4698      	mov	r8, r3
 800679e:	898b      	ldrh	r3, [r1, #12]
 80067a0:	061b      	lsls	r3, r3, #24
 80067a2:	b09d      	sub	sp, #116	@ 0x74
 80067a4:	4607      	mov	r7, r0
 80067a6:	460d      	mov	r5, r1
 80067a8:	4614      	mov	r4, r2
 80067aa:	d510      	bpl.n	80067ce <_svfiprintf_r+0x36>
 80067ac:	690b      	ldr	r3, [r1, #16]
 80067ae:	b973      	cbnz	r3, 80067ce <_svfiprintf_r+0x36>
 80067b0:	2140      	movs	r1, #64	@ 0x40
 80067b2:	f7ff fc19 	bl	8005fe8 <_malloc_r>
 80067b6:	6028      	str	r0, [r5, #0]
 80067b8:	6128      	str	r0, [r5, #16]
 80067ba:	b930      	cbnz	r0, 80067ca <_svfiprintf_r+0x32>
 80067bc:	230c      	movs	r3, #12
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	b01d      	add	sp, #116	@ 0x74
 80067c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ca:	2340      	movs	r3, #64	@ 0x40
 80067cc:	616b      	str	r3, [r5, #20]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80067d2:	2320      	movs	r3, #32
 80067d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80067dc:	2330      	movs	r3, #48	@ 0x30
 80067de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800697c <_svfiprintf_r+0x1e4>
 80067e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067e6:	f04f 0901 	mov.w	r9, #1
 80067ea:	4623      	mov	r3, r4
 80067ec:	469a      	mov	sl, r3
 80067ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f2:	b10a      	cbz	r2, 80067f8 <_svfiprintf_r+0x60>
 80067f4:	2a25      	cmp	r2, #37	@ 0x25
 80067f6:	d1f9      	bne.n	80067ec <_svfiprintf_r+0x54>
 80067f8:	ebba 0b04 	subs.w	fp, sl, r4
 80067fc:	d00b      	beq.n	8006816 <_svfiprintf_r+0x7e>
 80067fe:	465b      	mov	r3, fp
 8006800:	4622      	mov	r2, r4
 8006802:	4629      	mov	r1, r5
 8006804:	4638      	mov	r0, r7
 8006806:	f7ff ff6b 	bl	80066e0 <__ssputs_r>
 800680a:	3001      	adds	r0, #1
 800680c:	f000 80a7 	beq.w	800695e <_svfiprintf_r+0x1c6>
 8006810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006812:	445a      	add	r2, fp
 8006814:	9209      	str	r2, [sp, #36]	@ 0x24
 8006816:	f89a 3000 	ldrb.w	r3, [sl]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 809f 	beq.w	800695e <_svfiprintf_r+0x1c6>
 8006820:	2300      	movs	r3, #0
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800682a:	f10a 0a01 	add.w	sl, sl, #1
 800682e:	9304      	str	r3, [sp, #16]
 8006830:	9307      	str	r3, [sp, #28]
 8006832:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006836:	931a      	str	r3, [sp, #104]	@ 0x68
 8006838:	4654      	mov	r4, sl
 800683a:	2205      	movs	r2, #5
 800683c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006840:	484e      	ldr	r0, [pc, #312]	@ (800697c <_svfiprintf_r+0x1e4>)
 8006842:	f7f9 fccd 	bl	80001e0 <memchr>
 8006846:	9a04      	ldr	r2, [sp, #16]
 8006848:	b9d8      	cbnz	r0, 8006882 <_svfiprintf_r+0xea>
 800684a:	06d0      	lsls	r0, r2, #27
 800684c:	bf44      	itt	mi
 800684e:	2320      	movmi	r3, #32
 8006850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006854:	0711      	lsls	r1, r2, #28
 8006856:	bf44      	itt	mi
 8006858:	232b      	movmi	r3, #43	@ 0x2b
 800685a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800685e:	f89a 3000 	ldrb.w	r3, [sl]
 8006862:	2b2a      	cmp	r3, #42	@ 0x2a
 8006864:	d015      	beq.n	8006892 <_svfiprintf_r+0xfa>
 8006866:	9a07      	ldr	r2, [sp, #28]
 8006868:	4654      	mov	r4, sl
 800686a:	2000      	movs	r0, #0
 800686c:	f04f 0c0a 	mov.w	ip, #10
 8006870:	4621      	mov	r1, r4
 8006872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006876:	3b30      	subs	r3, #48	@ 0x30
 8006878:	2b09      	cmp	r3, #9
 800687a:	d94b      	bls.n	8006914 <_svfiprintf_r+0x17c>
 800687c:	b1b0      	cbz	r0, 80068ac <_svfiprintf_r+0x114>
 800687e:	9207      	str	r2, [sp, #28]
 8006880:	e014      	b.n	80068ac <_svfiprintf_r+0x114>
 8006882:	eba0 0308 	sub.w	r3, r0, r8
 8006886:	fa09 f303 	lsl.w	r3, r9, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	46a2      	mov	sl, r4
 8006890:	e7d2      	b.n	8006838 <_svfiprintf_r+0xa0>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	1d19      	adds	r1, r3, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	9103      	str	r1, [sp, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfbb      	ittet	lt
 800689e:	425b      	neglt	r3, r3
 80068a0:	f042 0202 	orrlt.w	r2, r2, #2
 80068a4:	9307      	strge	r3, [sp, #28]
 80068a6:	9307      	strlt	r3, [sp, #28]
 80068a8:	bfb8      	it	lt
 80068aa:	9204      	strlt	r2, [sp, #16]
 80068ac:	7823      	ldrb	r3, [r4, #0]
 80068ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80068b0:	d10a      	bne.n	80068c8 <_svfiprintf_r+0x130>
 80068b2:	7863      	ldrb	r3, [r4, #1]
 80068b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b6:	d132      	bne.n	800691e <_svfiprintf_r+0x186>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	9203      	str	r2, [sp, #12]
 80068c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068c4:	3402      	adds	r4, #2
 80068c6:	9305      	str	r3, [sp, #20]
 80068c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800698c <_svfiprintf_r+0x1f4>
 80068cc:	7821      	ldrb	r1, [r4, #0]
 80068ce:	2203      	movs	r2, #3
 80068d0:	4650      	mov	r0, sl
 80068d2:	f7f9 fc85 	bl	80001e0 <memchr>
 80068d6:	b138      	cbz	r0, 80068e8 <_svfiprintf_r+0x150>
 80068d8:	9b04      	ldr	r3, [sp, #16]
 80068da:	eba0 000a 	sub.w	r0, r0, sl
 80068de:	2240      	movs	r2, #64	@ 0x40
 80068e0:	4082      	lsls	r2, r0
 80068e2:	4313      	orrs	r3, r2
 80068e4:	3401      	adds	r4, #1
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ec:	4824      	ldr	r0, [pc, #144]	@ (8006980 <_svfiprintf_r+0x1e8>)
 80068ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068f2:	2206      	movs	r2, #6
 80068f4:	f7f9 fc74 	bl	80001e0 <memchr>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d036      	beq.n	800696a <_svfiprintf_r+0x1d2>
 80068fc:	4b21      	ldr	r3, [pc, #132]	@ (8006984 <_svfiprintf_r+0x1ec>)
 80068fe:	bb1b      	cbnz	r3, 8006948 <_svfiprintf_r+0x1b0>
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	3307      	adds	r3, #7
 8006904:	f023 0307 	bic.w	r3, r3, #7
 8006908:	3308      	adds	r3, #8
 800690a:	9303      	str	r3, [sp, #12]
 800690c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800690e:	4433      	add	r3, r6
 8006910:	9309      	str	r3, [sp, #36]	@ 0x24
 8006912:	e76a      	b.n	80067ea <_svfiprintf_r+0x52>
 8006914:	fb0c 3202 	mla	r2, ip, r2, r3
 8006918:	460c      	mov	r4, r1
 800691a:	2001      	movs	r0, #1
 800691c:	e7a8      	b.n	8006870 <_svfiprintf_r+0xd8>
 800691e:	2300      	movs	r3, #0
 8006920:	3401      	adds	r4, #1
 8006922:	9305      	str	r3, [sp, #20]
 8006924:	4619      	mov	r1, r3
 8006926:	f04f 0c0a 	mov.w	ip, #10
 800692a:	4620      	mov	r0, r4
 800692c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006930:	3a30      	subs	r2, #48	@ 0x30
 8006932:	2a09      	cmp	r2, #9
 8006934:	d903      	bls.n	800693e <_svfiprintf_r+0x1a6>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0c6      	beq.n	80068c8 <_svfiprintf_r+0x130>
 800693a:	9105      	str	r1, [sp, #20]
 800693c:	e7c4      	b.n	80068c8 <_svfiprintf_r+0x130>
 800693e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006942:	4604      	mov	r4, r0
 8006944:	2301      	movs	r3, #1
 8006946:	e7f0      	b.n	800692a <_svfiprintf_r+0x192>
 8006948:	ab03      	add	r3, sp, #12
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	462a      	mov	r2, r5
 800694e:	4b0e      	ldr	r3, [pc, #56]	@ (8006988 <_svfiprintf_r+0x1f0>)
 8006950:	a904      	add	r1, sp, #16
 8006952:	4638      	mov	r0, r7
 8006954:	f3af 8000 	nop.w
 8006958:	1c42      	adds	r2, r0, #1
 800695a:	4606      	mov	r6, r0
 800695c:	d1d6      	bne.n	800690c <_svfiprintf_r+0x174>
 800695e:	89ab      	ldrh	r3, [r5, #12]
 8006960:	065b      	lsls	r3, r3, #25
 8006962:	f53f af2d 	bmi.w	80067c0 <_svfiprintf_r+0x28>
 8006966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006968:	e72c      	b.n	80067c4 <_svfiprintf_r+0x2c>
 800696a:	ab03      	add	r3, sp, #12
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	462a      	mov	r2, r5
 8006970:	4b05      	ldr	r3, [pc, #20]	@ (8006988 <_svfiprintf_r+0x1f0>)
 8006972:	a904      	add	r1, sp, #16
 8006974:	4638      	mov	r0, r7
 8006976:	f000 f879 	bl	8006a6c <_printf_i>
 800697a:	e7ed      	b.n	8006958 <_svfiprintf_r+0x1c0>
 800697c:	0800753c 	.word	0x0800753c
 8006980:	08007546 	.word	0x08007546
 8006984:	00000000 	.word	0x00000000
 8006988:	080066e1 	.word	0x080066e1
 800698c:	08007542 	.word	0x08007542

08006990 <_printf_common>:
 8006990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	4616      	mov	r6, r2
 8006996:	4698      	mov	r8, r3
 8006998:	688a      	ldr	r2, [r1, #8]
 800699a:	690b      	ldr	r3, [r1, #16]
 800699c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069a0:	4293      	cmp	r3, r2
 80069a2:	bfb8      	it	lt
 80069a4:	4613      	movlt	r3, r2
 80069a6:	6033      	str	r3, [r6, #0]
 80069a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069ac:	4607      	mov	r7, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	b10a      	cbz	r2, 80069b6 <_printf_common+0x26>
 80069b2:	3301      	adds	r3, #1
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	0699      	lsls	r1, r3, #26
 80069ba:	bf42      	ittt	mi
 80069bc:	6833      	ldrmi	r3, [r6, #0]
 80069be:	3302      	addmi	r3, #2
 80069c0:	6033      	strmi	r3, [r6, #0]
 80069c2:	6825      	ldr	r5, [r4, #0]
 80069c4:	f015 0506 	ands.w	r5, r5, #6
 80069c8:	d106      	bne.n	80069d8 <_printf_common+0x48>
 80069ca:	f104 0a19 	add.w	sl, r4, #25
 80069ce:	68e3      	ldr	r3, [r4, #12]
 80069d0:	6832      	ldr	r2, [r6, #0]
 80069d2:	1a9b      	subs	r3, r3, r2
 80069d4:	42ab      	cmp	r3, r5
 80069d6:	dc26      	bgt.n	8006a26 <_printf_common+0x96>
 80069d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	3b00      	subs	r3, #0
 80069e0:	bf18      	it	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	0692      	lsls	r2, r2, #26
 80069e6:	d42b      	bmi.n	8006a40 <_printf_common+0xb0>
 80069e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069ec:	4641      	mov	r1, r8
 80069ee:	4638      	mov	r0, r7
 80069f0:	47c8      	blx	r9
 80069f2:	3001      	adds	r0, #1
 80069f4:	d01e      	beq.n	8006a34 <_printf_common+0xa4>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	6922      	ldr	r2, [r4, #16]
 80069fa:	f003 0306 	and.w	r3, r3, #6
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	bf02      	ittt	eq
 8006a02:	68e5      	ldreq	r5, [r4, #12]
 8006a04:	6833      	ldreq	r3, [r6, #0]
 8006a06:	1aed      	subeq	r5, r5, r3
 8006a08:	68a3      	ldr	r3, [r4, #8]
 8006a0a:	bf0c      	ite	eq
 8006a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a10:	2500      	movne	r5, #0
 8006a12:	4293      	cmp	r3, r2
 8006a14:	bfc4      	itt	gt
 8006a16:	1a9b      	subgt	r3, r3, r2
 8006a18:	18ed      	addgt	r5, r5, r3
 8006a1a:	2600      	movs	r6, #0
 8006a1c:	341a      	adds	r4, #26
 8006a1e:	42b5      	cmp	r5, r6
 8006a20:	d11a      	bne.n	8006a58 <_printf_common+0xc8>
 8006a22:	2000      	movs	r0, #0
 8006a24:	e008      	b.n	8006a38 <_printf_common+0xa8>
 8006a26:	2301      	movs	r3, #1
 8006a28:	4652      	mov	r2, sl
 8006a2a:	4641      	mov	r1, r8
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	47c8      	blx	r9
 8006a30:	3001      	adds	r0, #1
 8006a32:	d103      	bne.n	8006a3c <_printf_common+0xac>
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	e7c6      	b.n	80069ce <_printf_common+0x3e>
 8006a40:	18e1      	adds	r1, r4, r3
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	2030      	movs	r0, #48	@ 0x30
 8006a46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a4a:	4422      	add	r2, r4
 8006a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a54:	3302      	adds	r3, #2
 8006a56:	e7c7      	b.n	80069e8 <_printf_common+0x58>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	4641      	mov	r1, r8
 8006a5e:	4638      	mov	r0, r7
 8006a60:	47c8      	blx	r9
 8006a62:	3001      	adds	r0, #1
 8006a64:	d0e6      	beq.n	8006a34 <_printf_common+0xa4>
 8006a66:	3601      	adds	r6, #1
 8006a68:	e7d9      	b.n	8006a1e <_printf_common+0x8e>
	...

08006a6c <_printf_i>:
 8006a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a70:	7e0f      	ldrb	r7, [r1, #24]
 8006a72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a74:	2f78      	cmp	r7, #120	@ 0x78
 8006a76:	4691      	mov	r9, r2
 8006a78:	4680      	mov	r8, r0
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	469a      	mov	sl, r3
 8006a7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a82:	d807      	bhi.n	8006a94 <_printf_i+0x28>
 8006a84:	2f62      	cmp	r7, #98	@ 0x62
 8006a86:	d80a      	bhi.n	8006a9e <_printf_i+0x32>
 8006a88:	2f00      	cmp	r7, #0
 8006a8a:	f000 80d1 	beq.w	8006c30 <_printf_i+0x1c4>
 8006a8e:	2f58      	cmp	r7, #88	@ 0x58
 8006a90:	f000 80b8 	beq.w	8006c04 <_printf_i+0x198>
 8006a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a9c:	e03a      	b.n	8006b14 <_printf_i+0xa8>
 8006a9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006aa2:	2b15      	cmp	r3, #21
 8006aa4:	d8f6      	bhi.n	8006a94 <_printf_i+0x28>
 8006aa6:	a101      	add	r1, pc, #4	@ (adr r1, 8006aac <_printf_i+0x40>)
 8006aa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aac:	08006b05 	.word	0x08006b05
 8006ab0:	08006b19 	.word	0x08006b19
 8006ab4:	08006a95 	.word	0x08006a95
 8006ab8:	08006a95 	.word	0x08006a95
 8006abc:	08006a95 	.word	0x08006a95
 8006ac0:	08006a95 	.word	0x08006a95
 8006ac4:	08006b19 	.word	0x08006b19
 8006ac8:	08006a95 	.word	0x08006a95
 8006acc:	08006a95 	.word	0x08006a95
 8006ad0:	08006a95 	.word	0x08006a95
 8006ad4:	08006a95 	.word	0x08006a95
 8006ad8:	08006c17 	.word	0x08006c17
 8006adc:	08006b43 	.word	0x08006b43
 8006ae0:	08006bd1 	.word	0x08006bd1
 8006ae4:	08006a95 	.word	0x08006a95
 8006ae8:	08006a95 	.word	0x08006a95
 8006aec:	08006c39 	.word	0x08006c39
 8006af0:	08006a95 	.word	0x08006a95
 8006af4:	08006b43 	.word	0x08006b43
 8006af8:	08006a95 	.word	0x08006a95
 8006afc:	08006a95 	.word	0x08006a95
 8006b00:	08006bd9 	.word	0x08006bd9
 8006b04:	6833      	ldr	r3, [r6, #0]
 8006b06:	1d1a      	adds	r2, r3, #4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6032      	str	r2, [r6, #0]
 8006b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b14:	2301      	movs	r3, #1
 8006b16:	e09c      	b.n	8006c52 <_printf_i+0x1e6>
 8006b18:	6833      	ldr	r3, [r6, #0]
 8006b1a:	6820      	ldr	r0, [r4, #0]
 8006b1c:	1d19      	adds	r1, r3, #4
 8006b1e:	6031      	str	r1, [r6, #0]
 8006b20:	0606      	lsls	r6, r0, #24
 8006b22:	d501      	bpl.n	8006b28 <_printf_i+0xbc>
 8006b24:	681d      	ldr	r5, [r3, #0]
 8006b26:	e003      	b.n	8006b30 <_printf_i+0xc4>
 8006b28:	0645      	lsls	r5, r0, #25
 8006b2a:	d5fb      	bpl.n	8006b24 <_printf_i+0xb8>
 8006b2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	da03      	bge.n	8006b3c <_printf_i+0xd0>
 8006b34:	232d      	movs	r3, #45	@ 0x2d
 8006b36:	426d      	negs	r5, r5
 8006b38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b3c:	4858      	ldr	r0, [pc, #352]	@ (8006ca0 <_printf_i+0x234>)
 8006b3e:	230a      	movs	r3, #10
 8006b40:	e011      	b.n	8006b66 <_printf_i+0xfa>
 8006b42:	6821      	ldr	r1, [r4, #0]
 8006b44:	6833      	ldr	r3, [r6, #0]
 8006b46:	0608      	lsls	r0, r1, #24
 8006b48:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b4c:	d402      	bmi.n	8006b54 <_printf_i+0xe8>
 8006b4e:	0649      	lsls	r1, r1, #25
 8006b50:	bf48      	it	mi
 8006b52:	b2ad      	uxthmi	r5, r5
 8006b54:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b56:	4852      	ldr	r0, [pc, #328]	@ (8006ca0 <_printf_i+0x234>)
 8006b58:	6033      	str	r3, [r6, #0]
 8006b5a:	bf14      	ite	ne
 8006b5c:	230a      	movne	r3, #10
 8006b5e:	2308      	moveq	r3, #8
 8006b60:	2100      	movs	r1, #0
 8006b62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b66:	6866      	ldr	r6, [r4, #4]
 8006b68:	60a6      	str	r6, [r4, #8]
 8006b6a:	2e00      	cmp	r6, #0
 8006b6c:	db05      	blt.n	8006b7a <_printf_i+0x10e>
 8006b6e:	6821      	ldr	r1, [r4, #0]
 8006b70:	432e      	orrs	r6, r5
 8006b72:	f021 0104 	bic.w	r1, r1, #4
 8006b76:	6021      	str	r1, [r4, #0]
 8006b78:	d04b      	beq.n	8006c12 <_printf_i+0x1a6>
 8006b7a:	4616      	mov	r6, r2
 8006b7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b80:	fb03 5711 	mls	r7, r3, r1, r5
 8006b84:	5dc7      	ldrb	r7, [r0, r7]
 8006b86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b8a:	462f      	mov	r7, r5
 8006b8c:	42bb      	cmp	r3, r7
 8006b8e:	460d      	mov	r5, r1
 8006b90:	d9f4      	bls.n	8006b7c <_printf_i+0x110>
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d10b      	bne.n	8006bae <_printf_i+0x142>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	07df      	lsls	r7, r3, #31
 8006b9a:	d508      	bpl.n	8006bae <_printf_i+0x142>
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	6861      	ldr	r1, [r4, #4]
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	bfde      	ittt	le
 8006ba4:	2330      	movle	r3, #48	@ 0x30
 8006ba6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006baa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bae:	1b92      	subs	r2, r2, r6
 8006bb0:	6122      	str	r2, [r4, #16]
 8006bb2:	f8cd a000 	str.w	sl, [sp]
 8006bb6:	464b      	mov	r3, r9
 8006bb8:	aa03      	add	r2, sp, #12
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	f7ff fee7 	bl	8006990 <_printf_common>
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d14a      	bne.n	8006c5c <_printf_i+0x1f0>
 8006bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bca:	b004      	add	sp, #16
 8006bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	f043 0320 	orr.w	r3, r3, #32
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	4832      	ldr	r0, [pc, #200]	@ (8006ca4 <_printf_i+0x238>)
 8006bda:	2778      	movs	r7, #120	@ 0x78
 8006bdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	6831      	ldr	r1, [r6, #0]
 8006be4:	061f      	lsls	r7, r3, #24
 8006be6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bea:	d402      	bmi.n	8006bf2 <_printf_i+0x186>
 8006bec:	065f      	lsls	r7, r3, #25
 8006bee:	bf48      	it	mi
 8006bf0:	b2ad      	uxthmi	r5, r5
 8006bf2:	6031      	str	r1, [r6, #0]
 8006bf4:	07d9      	lsls	r1, r3, #31
 8006bf6:	bf44      	itt	mi
 8006bf8:	f043 0320 	orrmi.w	r3, r3, #32
 8006bfc:	6023      	strmi	r3, [r4, #0]
 8006bfe:	b11d      	cbz	r5, 8006c08 <_printf_i+0x19c>
 8006c00:	2310      	movs	r3, #16
 8006c02:	e7ad      	b.n	8006b60 <_printf_i+0xf4>
 8006c04:	4826      	ldr	r0, [pc, #152]	@ (8006ca0 <_printf_i+0x234>)
 8006c06:	e7e9      	b.n	8006bdc <_printf_i+0x170>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	f023 0320 	bic.w	r3, r3, #32
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	e7f6      	b.n	8006c00 <_printf_i+0x194>
 8006c12:	4616      	mov	r6, r2
 8006c14:	e7bd      	b.n	8006b92 <_printf_i+0x126>
 8006c16:	6833      	ldr	r3, [r6, #0]
 8006c18:	6825      	ldr	r5, [r4, #0]
 8006c1a:	6961      	ldr	r1, [r4, #20]
 8006c1c:	1d18      	adds	r0, r3, #4
 8006c1e:	6030      	str	r0, [r6, #0]
 8006c20:	062e      	lsls	r6, r5, #24
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	d501      	bpl.n	8006c2a <_printf_i+0x1be>
 8006c26:	6019      	str	r1, [r3, #0]
 8006c28:	e002      	b.n	8006c30 <_printf_i+0x1c4>
 8006c2a:	0668      	lsls	r0, r5, #25
 8006c2c:	d5fb      	bpl.n	8006c26 <_printf_i+0x1ba>
 8006c2e:	8019      	strh	r1, [r3, #0]
 8006c30:	2300      	movs	r3, #0
 8006c32:	6123      	str	r3, [r4, #16]
 8006c34:	4616      	mov	r6, r2
 8006c36:	e7bc      	b.n	8006bb2 <_printf_i+0x146>
 8006c38:	6833      	ldr	r3, [r6, #0]
 8006c3a:	1d1a      	adds	r2, r3, #4
 8006c3c:	6032      	str	r2, [r6, #0]
 8006c3e:	681e      	ldr	r6, [r3, #0]
 8006c40:	6862      	ldr	r2, [r4, #4]
 8006c42:	2100      	movs	r1, #0
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7f9 facb 	bl	80001e0 <memchr>
 8006c4a:	b108      	cbz	r0, 8006c50 <_printf_i+0x1e4>
 8006c4c:	1b80      	subs	r0, r0, r6
 8006c4e:	6060      	str	r0, [r4, #4]
 8006c50:	6863      	ldr	r3, [r4, #4]
 8006c52:	6123      	str	r3, [r4, #16]
 8006c54:	2300      	movs	r3, #0
 8006c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c5a:	e7aa      	b.n	8006bb2 <_printf_i+0x146>
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	4632      	mov	r2, r6
 8006c60:	4649      	mov	r1, r9
 8006c62:	4640      	mov	r0, r8
 8006c64:	47d0      	blx	sl
 8006c66:	3001      	adds	r0, #1
 8006c68:	d0ad      	beq.n	8006bc6 <_printf_i+0x15a>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	079b      	lsls	r3, r3, #30
 8006c6e:	d413      	bmi.n	8006c98 <_printf_i+0x22c>
 8006c70:	68e0      	ldr	r0, [r4, #12]
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	4298      	cmp	r0, r3
 8006c76:	bfb8      	it	lt
 8006c78:	4618      	movlt	r0, r3
 8006c7a:	e7a6      	b.n	8006bca <_printf_i+0x15e>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4632      	mov	r2, r6
 8006c80:	4649      	mov	r1, r9
 8006c82:	4640      	mov	r0, r8
 8006c84:	47d0      	blx	sl
 8006c86:	3001      	adds	r0, #1
 8006c88:	d09d      	beq.n	8006bc6 <_printf_i+0x15a>
 8006c8a:	3501      	adds	r5, #1
 8006c8c:	68e3      	ldr	r3, [r4, #12]
 8006c8e:	9903      	ldr	r1, [sp, #12]
 8006c90:	1a5b      	subs	r3, r3, r1
 8006c92:	42ab      	cmp	r3, r5
 8006c94:	dcf2      	bgt.n	8006c7c <_printf_i+0x210>
 8006c96:	e7eb      	b.n	8006c70 <_printf_i+0x204>
 8006c98:	2500      	movs	r5, #0
 8006c9a:	f104 0619 	add.w	r6, r4, #25
 8006c9e:	e7f5      	b.n	8006c8c <_printf_i+0x220>
 8006ca0:	0800754d 	.word	0x0800754d
 8006ca4:	0800755e 	.word	0x0800755e

08006ca8 <__sflush_r>:
 8006ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb0:	0716      	lsls	r6, r2, #28
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	d454      	bmi.n	8006d62 <__sflush_r+0xba>
 8006cb8:	684b      	ldr	r3, [r1, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dc02      	bgt.n	8006cc4 <__sflush_r+0x1c>
 8006cbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dd48      	ble.n	8006d56 <__sflush_r+0xae>
 8006cc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d045      	beq.n	8006d56 <__sflush_r+0xae>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cd0:	682f      	ldr	r7, [r5, #0]
 8006cd2:	6a21      	ldr	r1, [r4, #32]
 8006cd4:	602b      	str	r3, [r5, #0]
 8006cd6:	d030      	beq.n	8006d3a <__sflush_r+0x92>
 8006cd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	0759      	lsls	r1, r3, #29
 8006cde:	d505      	bpl.n	8006cec <__sflush_r+0x44>
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	1ad2      	subs	r2, r2, r3
 8006ce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ce6:	b10b      	cbz	r3, 8006cec <__sflush_r+0x44>
 8006ce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cea:	1ad2      	subs	r2, r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cf0:	6a21      	ldr	r1, [r4, #32]
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b0      	blx	r6
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	d106      	bne.n	8006d0a <__sflush_r+0x62>
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	291d      	cmp	r1, #29
 8006d00:	d82b      	bhi.n	8006d5a <__sflush_r+0xb2>
 8006d02:	4a2a      	ldr	r2, [pc, #168]	@ (8006dac <__sflush_r+0x104>)
 8006d04:	40ca      	lsrs	r2, r1
 8006d06:	07d6      	lsls	r6, r2, #31
 8006d08:	d527      	bpl.n	8006d5a <__sflush_r+0xb2>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	6062      	str	r2, [r4, #4]
 8006d0e:	04d9      	lsls	r1, r3, #19
 8006d10:	6922      	ldr	r2, [r4, #16]
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	d504      	bpl.n	8006d20 <__sflush_r+0x78>
 8006d16:	1c42      	adds	r2, r0, #1
 8006d18:	d101      	bne.n	8006d1e <__sflush_r+0x76>
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	b903      	cbnz	r3, 8006d20 <__sflush_r+0x78>
 8006d1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d22:	602f      	str	r7, [r5, #0]
 8006d24:	b1b9      	cbz	r1, 8006d56 <__sflush_r+0xae>
 8006d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d002      	beq.n	8006d34 <__sflush_r+0x8c>
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f7ff fc8c 	bl	800664c <_free_r>
 8006d34:	2300      	movs	r3, #0
 8006d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d38:	e00d      	b.n	8006d56 <__sflush_r+0xae>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b0      	blx	r6
 8006d40:	4602      	mov	r2, r0
 8006d42:	1c50      	adds	r0, r2, #1
 8006d44:	d1c9      	bne.n	8006cda <__sflush_r+0x32>
 8006d46:	682b      	ldr	r3, [r5, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0c6      	beq.n	8006cda <__sflush_r+0x32>
 8006d4c:	2b1d      	cmp	r3, #29
 8006d4e:	d001      	beq.n	8006d54 <__sflush_r+0xac>
 8006d50:	2b16      	cmp	r3, #22
 8006d52:	d11e      	bne.n	8006d92 <__sflush_r+0xea>
 8006d54:	602f      	str	r7, [r5, #0]
 8006d56:	2000      	movs	r0, #0
 8006d58:	e022      	b.n	8006da0 <__sflush_r+0xf8>
 8006d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d5e:	b21b      	sxth	r3, r3
 8006d60:	e01b      	b.n	8006d9a <__sflush_r+0xf2>
 8006d62:	690f      	ldr	r7, [r1, #16]
 8006d64:	2f00      	cmp	r7, #0
 8006d66:	d0f6      	beq.n	8006d56 <__sflush_r+0xae>
 8006d68:	0793      	lsls	r3, r2, #30
 8006d6a:	680e      	ldr	r6, [r1, #0]
 8006d6c:	bf08      	it	eq
 8006d6e:	694b      	ldreq	r3, [r1, #20]
 8006d70:	600f      	str	r7, [r1, #0]
 8006d72:	bf18      	it	ne
 8006d74:	2300      	movne	r3, #0
 8006d76:	eba6 0807 	sub.w	r8, r6, r7
 8006d7a:	608b      	str	r3, [r1, #8]
 8006d7c:	f1b8 0f00 	cmp.w	r8, #0
 8006d80:	dde9      	ble.n	8006d56 <__sflush_r+0xae>
 8006d82:	6a21      	ldr	r1, [r4, #32]
 8006d84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d86:	4643      	mov	r3, r8
 8006d88:	463a      	mov	r2, r7
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b0      	blx	r6
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	dc08      	bgt.n	8006da4 <__sflush_r+0xfc>
 8006d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d9a:	81a3      	strh	r3, [r4, #12]
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da4:	4407      	add	r7, r0
 8006da6:	eba8 0800 	sub.w	r8, r8, r0
 8006daa:	e7e7      	b.n	8006d7c <__sflush_r+0xd4>
 8006dac:	20400001 	.word	0x20400001

08006db0 <_fflush_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	690b      	ldr	r3, [r1, #16]
 8006db4:	4605      	mov	r5, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	b913      	cbnz	r3, 8006dc0 <_fflush_r+0x10>
 8006dba:	2500      	movs	r5, #0
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	b118      	cbz	r0, 8006dca <_fflush_r+0x1a>
 8006dc2:	6a03      	ldr	r3, [r0, #32]
 8006dc4:	b90b      	cbnz	r3, 8006dca <_fflush_r+0x1a>
 8006dc6:	f7ff fa27 	bl	8006218 <__sinit>
 8006dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f3      	beq.n	8006dba <_fflush_r+0xa>
 8006dd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dd4:	07d0      	lsls	r0, r2, #31
 8006dd6:	d404      	bmi.n	8006de2 <_fflush_r+0x32>
 8006dd8:	0599      	lsls	r1, r3, #22
 8006dda:	d402      	bmi.n	8006de2 <_fflush_r+0x32>
 8006ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dde:	f7ff fc32 	bl	8006646 <__retarget_lock_acquire_recursive>
 8006de2:	4628      	mov	r0, r5
 8006de4:	4621      	mov	r1, r4
 8006de6:	f7ff ff5f 	bl	8006ca8 <__sflush_r>
 8006dea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dec:	07da      	lsls	r2, r3, #31
 8006dee:	4605      	mov	r5, r0
 8006df0:	d4e4      	bmi.n	8006dbc <_fflush_r+0xc>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	059b      	lsls	r3, r3, #22
 8006df6:	d4e1      	bmi.n	8006dbc <_fflush_r+0xc>
 8006df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dfa:	f7ff fc25 	bl	8006648 <__retarget_lock_release_recursive>
 8006dfe:	e7dd      	b.n	8006dbc <_fflush_r+0xc>

08006e00 <__swhatbuf_r>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	460c      	mov	r4, r1
 8006e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	b096      	sub	sp, #88	@ 0x58
 8006e0c:	4615      	mov	r5, r2
 8006e0e:	461e      	mov	r6, r3
 8006e10:	da0d      	bge.n	8006e2e <__swhatbuf_r+0x2e>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e18:	f04f 0100 	mov.w	r1, #0
 8006e1c:	bf14      	ite	ne
 8006e1e:	2340      	movne	r3, #64	@ 0x40
 8006e20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e24:	2000      	movs	r0, #0
 8006e26:	6031      	str	r1, [r6, #0]
 8006e28:	602b      	str	r3, [r5, #0]
 8006e2a:	b016      	add	sp, #88	@ 0x58
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	466a      	mov	r2, sp
 8006e30:	f000 f862 	bl	8006ef8 <_fstat_r>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	dbec      	blt.n	8006e12 <__swhatbuf_r+0x12>
 8006e38:	9901      	ldr	r1, [sp, #4]
 8006e3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e42:	4259      	negs	r1, r3
 8006e44:	4159      	adcs	r1, r3
 8006e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e4a:	e7eb      	b.n	8006e24 <__swhatbuf_r+0x24>

08006e4c <__smakebuf_r>:
 8006e4c:	898b      	ldrh	r3, [r1, #12]
 8006e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e50:	079d      	lsls	r5, r3, #30
 8006e52:	4606      	mov	r6, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	d507      	bpl.n	8006e68 <__smakebuf_r+0x1c>
 8006e58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	2301      	movs	r3, #1
 8006e62:	6163      	str	r3, [r4, #20]
 8006e64:	b003      	add	sp, #12
 8006e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e68:	ab01      	add	r3, sp, #4
 8006e6a:	466a      	mov	r2, sp
 8006e6c:	f7ff ffc8 	bl	8006e00 <__swhatbuf_r>
 8006e70:	9f00      	ldr	r7, [sp, #0]
 8006e72:	4605      	mov	r5, r0
 8006e74:	4639      	mov	r1, r7
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff f8b6 	bl	8005fe8 <_malloc_r>
 8006e7c:	b948      	cbnz	r0, 8006e92 <__smakebuf_r+0x46>
 8006e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e82:	059a      	lsls	r2, r3, #22
 8006e84:	d4ee      	bmi.n	8006e64 <__smakebuf_r+0x18>
 8006e86:	f023 0303 	bic.w	r3, r3, #3
 8006e8a:	f043 0302 	orr.w	r3, r3, #2
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	e7e2      	b.n	8006e58 <__smakebuf_r+0xc>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	6020      	str	r0, [r4, #0]
 8006e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	9b01      	ldr	r3, [sp, #4]
 8006e9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ea2:	b15b      	cbz	r3, 8006ebc <__smakebuf_r+0x70>
 8006ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f000 f837 	bl	8006f1c <_isatty_r>
 8006eae:	b128      	cbz	r0, 8006ebc <__smakebuf_r+0x70>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	431d      	orrs	r5, r3
 8006ec0:	81a5      	strh	r5, [r4, #12]
 8006ec2:	e7cf      	b.n	8006e64 <__smakebuf_r+0x18>

08006ec4 <memmove>:
 8006ec4:	4288      	cmp	r0, r1
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	eb01 0402 	add.w	r4, r1, r2
 8006ecc:	d902      	bls.n	8006ed4 <memmove+0x10>
 8006ece:	4284      	cmp	r4, r0
 8006ed0:	4623      	mov	r3, r4
 8006ed2:	d807      	bhi.n	8006ee4 <memmove+0x20>
 8006ed4:	1e43      	subs	r3, r0, #1
 8006ed6:	42a1      	cmp	r1, r4
 8006ed8:	d008      	beq.n	8006eec <memmove+0x28>
 8006eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ee2:	e7f8      	b.n	8006ed6 <memmove+0x12>
 8006ee4:	4402      	add	r2, r0
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	428a      	cmp	r2, r1
 8006eea:	d100      	bne.n	8006eee <memmove+0x2a>
 8006eec:	bd10      	pop	{r4, pc}
 8006eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ef6:	e7f7      	b.n	8006ee8 <memmove+0x24>

08006ef8 <_fstat_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d07      	ldr	r5, [pc, #28]	@ (8006f18 <_fstat_r+0x20>)
 8006efc:	2300      	movs	r3, #0
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	f7fa fd26 	bl	8001956 <_fstat>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	d102      	bne.n	8006f14 <_fstat_r+0x1c>
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	b103      	cbz	r3, 8006f14 <_fstat_r+0x1c>
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	bd38      	pop	{r3, r4, r5, pc}
 8006f16:	bf00      	nop
 8006f18:	2000031c 	.word	0x2000031c

08006f1c <_isatty_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d06      	ldr	r5, [pc, #24]	@ (8006f38 <_isatty_r+0x1c>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fa fd25 	bl	8001976 <_isatty>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_isatty_r+0x1a>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_isatty_r+0x1a>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	2000031c 	.word	0x2000031c

08006f3c <memcpy>:
 8006f3c:	440a      	add	r2, r1
 8006f3e:	4291      	cmp	r1, r2
 8006f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f44:	d100      	bne.n	8006f48 <memcpy+0xc>
 8006f46:	4770      	bx	lr
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f52:	4291      	cmp	r1, r2
 8006f54:	d1f9      	bne.n	8006f4a <memcpy+0xe>
 8006f56:	bd10      	pop	{r4, pc}

08006f58 <_realloc_r>:
 8006f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	4614      	mov	r4, r2
 8006f60:	460d      	mov	r5, r1
 8006f62:	b921      	cbnz	r1, 8006f6e <_realloc_r+0x16>
 8006f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f68:	4611      	mov	r1, r2
 8006f6a:	f7ff b83d 	b.w	8005fe8 <_malloc_r>
 8006f6e:	b92a      	cbnz	r2, 8006f7c <_realloc_r+0x24>
 8006f70:	f7ff fb6c 	bl	800664c <_free_r>
 8006f74:	4625      	mov	r5, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7c:	f000 f81a 	bl	8006fb4 <_malloc_usable_size_r>
 8006f80:	4284      	cmp	r4, r0
 8006f82:	4606      	mov	r6, r0
 8006f84:	d802      	bhi.n	8006f8c <_realloc_r+0x34>
 8006f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f8a:	d8f4      	bhi.n	8006f76 <_realloc_r+0x1e>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f7ff f82a 	bl	8005fe8 <_malloc_r>
 8006f94:	4680      	mov	r8, r0
 8006f96:	b908      	cbnz	r0, 8006f9c <_realloc_r+0x44>
 8006f98:	4645      	mov	r5, r8
 8006f9a:	e7ec      	b.n	8006f76 <_realloc_r+0x1e>
 8006f9c:	42b4      	cmp	r4, r6
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	bf28      	it	cs
 8006fa4:	4632      	movcs	r2, r6
 8006fa6:	f7ff ffc9 	bl	8006f3c <memcpy>
 8006faa:	4629      	mov	r1, r5
 8006fac:	4638      	mov	r0, r7
 8006fae:	f7ff fb4d 	bl	800664c <_free_r>
 8006fb2:	e7f1      	b.n	8006f98 <_realloc_r+0x40>

08006fb4 <_malloc_usable_size_r>:
 8006fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb8:	1f18      	subs	r0, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bfbc      	itt	lt
 8006fbe:	580b      	ldrlt	r3, [r1, r0]
 8006fc0:	18c0      	addlt	r0, r0, r3
 8006fc2:	4770      	bx	lr

08006fc4 <_init>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr

08006fd0 <_fini>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr
