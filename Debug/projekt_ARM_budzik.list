
projekt_ARM_budzik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca4  08009ca4  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ca4  08009ca4  0000aca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cac  08009cac  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cac  08009cac  0000acac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cb0  08009cb0  0000acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009cb4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  2000006c  08009d20  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08009d20  0000b4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013048  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342b  00000000  00000000  0001e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00021510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e73  00000000  00000000  000227d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ab4  00000000  00000000  00023643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181ab  00000000  00000000  0003d0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976a2  00000000  00000000  000552a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec944  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005624  00000000  00000000  000ec988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f1fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009680 	.word	0x08009680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08009680 	.word	0x08009680

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4604      	mov	r4, r0
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4623      	mov	r3, r4
 80005bc:	80fb      	strh	r3, [r7, #6]
 80005be:	4603      	mov	r3, r0
 80005c0:	80bb      	strh	r3, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	70fb      	strb	r3, [r7, #3]
 80005c6:	4613      	mov	r3, r2
 80005c8:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 80005ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80005d0:	f300 8100 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80005da:	f300 80fb 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005de:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80005e2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	440b      	add	r3, r1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f340 80ef 	ble.w	80007d4 <GFX_draw_char+0x228>
 80005f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	4413      	add	r3, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	f340 80e6 	ble.w	80007d4 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e0aa      	b.n	8000764 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	441a      	add	r2, r3
 8000616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061a:	4413      	add	r3, r2
 800061c:	4a6f      	ldr	r2, [pc, #444]	@ (80007dc <GFX_draw_char+0x230>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000622:	2307      	movs	r3, #7
 8000624:	73bb      	strb	r3, [r7, #14]
 8000626:	e092      	b.n	800074e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d040      	beq.n	80006b4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000632:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000636:	2b01      	cmp	r3, #1
 8000638:	d116      	bne.n	8000668 <GFX_draw_char+0xbc>
 800063a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800063e:	2b01      	cmp	r3, #1
 8000640:	d112      	bne.n	8000668 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000646:	b29a      	uxth	r2, r3
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4413      	add	r3, r2
 800064c:	b29b      	uxth	r3, r3
 800064e:	b218      	sxth	r0, r3
 8000650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000654:	b29a      	uxth	r2, r3
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	b29b      	uxth	r3, r3
 800065c:	b21b      	sxth	r3, r3
 800065e:	883a      	ldrh	r2, [r7, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f000 f9f7 	bl	8000a54 <SSD1306_draw_pixel>
 8000666:	e069      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066c:	b29a      	uxth	r2, r3
 800066e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000672:	b29b      	uxth	r3, r3
 8000674:	fb12 f303 	smulbb	r3, r2, r3
 8000678:	b29a      	uxth	r2, r3
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	b218      	sxth	r0, r3
 8000682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000686:	b29a      	uxth	r2, r3
 8000688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800068c:	b29b      	uxth	r3, r3
 800068e:	fb12 f303 	smulbb	r3, r2, r3
 8000692:	b29a      	uxth	r2, r3
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	b29b      	uxth	r3, r3
 800069a:	b219      	sxth	r1, r3
 800069c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006a6:	b21c      	sxth	r4, r3
 80006a8:	883b      	ldrh	r3, [r7, #0]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4623      	mov	r3, r4
 80006ae:	f000 f8d0 	bl	8000852 <GFX_draw_fill_rect>
 80006b2:	e043      	b.n	800073c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 80006b4:	8c3a      	ldrh	r2, [r7, #32]
 80006b6:	883b      	ldrh	r3, [r7, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d03f      	beq.n	800073c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 80006bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d116      	bne.n	80006f2 <GFX_draw_char+0x146>
 80006c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d112      	bne.n	80006f2 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80006cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b218      	sxth	r0, r3
 80006da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	88bb      	ldrh	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	8c3a      	ldrh	r2, [r7, #32]
 80006ea:	4619      	mov	r1, r3
 80006ec:	f000 f9b2 	bl	8000a54 <SSD1306_draw_pixel>
 80006f0:	e024      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80006f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	fb12 f303 	smulbb	r3, r2, r3
 8000702:	b29a      	uxth	r2, r3
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4413      	add	r3, r2
 8000708:	b29b      	uxth	r3, r3
 800070a:	b218      	sxth	r0, r3
 800070c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000710:	b29a      	uxth	r2, r3
 8000712:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000716:	b29b      	uxth	r3, r3
 8000718:	fb12 f303 	smulbb	r3, r2, r3
 800071c:	b29a      	uxth	r2, r3
 800071e:	88bb      	ldrh	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	b219      	sxth	r1, r3
 8000726:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800072a:	b21a      	sxth	r2, r3
 800072c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000730:	b21c      	sxth	r4, r3
 8000732:	8c3b      	ldrh	r3, [r7, #32]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	4623      	mov	r3, r4
 8000738:	f000 f88b 	bl	8000852 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800073c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	73bb      	strb	r3, [r7, #14]
 8000748:	7b7b      	ldrb	r3, [r7, #13]
 800074a:	085b      	lsrs	r3, r3, #1
 800074c:	737b      	strb	r3, [r7, #13]
 800074e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000752:	2b00      	cmp	r3, #0
 8000754:	f6bf af68 	bge.w	8000628 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000768:	2b04      	cmp	r3, #4
 800076a:	f77f af50 	ble.w	800060e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800076e:	8c3a      	ldrh	r2, [r7, #32]
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d02f      	beq.n	80007d6 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000776:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10e      	bne.n	800079c <GFX_draw_char+0x1f0>
 800077e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10a      	bne.n	800079c <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	3305      	adds	r3, #5
 800078a:	b29b      	uxth	r3, r3
 800078c:	b218      	sxth	r0, r3
 800078e:	8c3b      	ldrh	r3, [r7, #32]
 8000790:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000794:	2208      	movs	r2, #8
 8000796:	f000 fad3 	bl	8000d40 <SSD1306_draw_fast_vline>
 800079a:	e01c      	b.n	80007d6 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800079c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	0092      	lsls	r2, r2, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	4413      	add	r3, r2
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	b218      	sxth	r0, r3
 80007b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007bc:	b29b      	uxth	r3, r3
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b21c      	sxth	r4, r3
 80007c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007c8:	8c3b      	ldrh	r3, [r7, #32]
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4623      	mov	r3, r4
 80007ce:	f000 f840 	bl	8000852 <GFX_draw_fill_rect>
 80007d2:	e000      	b.n	80007d6 <GFX_draw_char+0x22a>
		return;
 80007d4:	bf00      	nop
		}
	}
}
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	08009740 	.word	0x08009740

080007e0 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af04      	add	r7, sp, #16
 80007e6:	60ba      	str	r2, [r7, #8]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	81fb      	strh	r3, [r7, #14]
 80007ee:	460b      	mov	r3, r1
 80007f0:	81bb      	strh	r3, [r7, #12]
 80007f2:	4613      	mov	r3, r2
 80007f4:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]
	while(*c)
 80007fa:	e021      	b.n	8000840 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	4413      	add	r3, r2
 8000804:	b29b      	uxth	r3, r3
 8000806:	b218      	sxth	r0, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	88fc      	ldrh	r4, [r7, #6]
 800080e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000812:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4623      	mov	r3, r4
 8000824:	f7ff fec2 	bl	80005ac <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000828:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800082c:	461a      	mov	r2, r3
 800082e:	00d2      	lsls	r2, r2, #3
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b2da      	uxtb	r2, r3
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	4413      	add	r3, r2
 8000838:	75fb      	strb	r3, [r7, #23]
		c++;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3301      	adds	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1d9      	bne.n	80007fc <GFX_draw_string+0x1c>
	}
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	371c      	adds	r7, #28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}

08000852 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000852:	b590      	push	{r4, r7, lr}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	4604      	mov	r4, r0
 800085a:	4608      	mov	r0, r1
 800085c:	4611      	mov	r1, r2
 800085e:	461a      	mov	r2, r3
 8000860:	4623      	mov	r3, r4
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4603      	mov	r3, r0
 8000866:	80bb      	strh	r3, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
 800086c:	4613      	mov	r3, r2
 800086e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	e00e      	b.n	8000894 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000876:	8c3b      	ldrh	r3, [r7, #32]
 8000878:	f9b7 2000 	ldrsh.w	r2, [r7]
 800087c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000880:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000884:	f000 fa5c 	bl	8000d40 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8000888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088c:	b29b      	uxth	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b29b      	uxth	r3, r3
 8000892:	81fb      	strh	r3, [r7, #14]
 8000894:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000898:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800089c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a0:	440b      	add	r3, r1
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbe7      	blt.n	8000876 <GFX_draw_fill_rect+0x24>
	}
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af04      	add	r7, sp, #16
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	2178      	movs	r1, #120	@ 0x78
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <platform_write+0x34>)
 80008d6:	f003 f83f 	bl	8003958 <HAL_I2C_Mem_Write>
	return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000090 	.word	0x20000090

080008e8 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	88bb      	ldrh	r3, [r7, #4]
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	2178      	movs	r1, #120	@ 0x78
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <platform_write_dma+0x30>)
 800090a:	f003 f91f 	bl	8003b4c <HAL_I2C_Mem_Write_DMA>
	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000090 	.word	0x20000090

0800091c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ffbf 	bl	80008b0 <platform_write>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <SSD1306_init>:

bool SSD1306_init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8000942:	2302      	movs	r3, #2
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	238f      	movs	r3, #143	@ 0x8f
 8000948:	71bb      	strb	r3, [r7, #6]
 800094a:	2302      	movs	r3, #2
 800094c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800094e:	4b40      	ldr	r3, [pc, #256]	@ (8000a50 <SSD1306_init+0x114>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10d      	bne.n	8000972 <SSD1306_init+0x36>
 8000956:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800095a:	f007 fd83 	bl	8008464 <malloc>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b3b      	ldr	r3, [pc, #236]	@ (8000a50 <SSD1306_init+0x114>)
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	4b3a      	ldr	r3, [pc, #232]	@ (8000a50 <SSD1306_init+0x114>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <SSD1306_init+0x36>
  {
    return false;
 800096e:	2300      	movs	r3, #0
 8000970:	e06a      	b.n	8000a48 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 8000972:	f000 f947 	bl	8000c04 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000976:	20ae      	movs	r0, #174	@ 0xae
 8000978:	f7ff ffd0 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 800097c:	20d5      	movs	r0, #213	@ 0xd5
 800097e:	f7ff ffcd 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 8000982:	20e0      	movs	r0, #224	@ 0xe0
 8000984:	f7ff ffca 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8000988:	20a8      	movs	r0, #168	@ 0xa8
 800098a:	f7ff ffc7 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 800098e:	203f      	movs	r0, #63	@ 0x3f
 8000990:	f7ff ffc4 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 8000994:	20d3      	movs	r0, #211	@ 0xd3
 8000996:	f7ff ffc1 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ffbe 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80009a0:	2040      	movs	r0, #64	@ 0x40
 80009a2:	f7ff ffbb 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80009a6:	208d      	movs	r0, #141	@ 0x8d
 80009a8:	f7ff ffb8 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80009ac:	797b      	ldrb	r3, [r7, #5]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d101      	bne.n	80009b6 <SSD1306_init+0x7a>
 80009b2:	2310      	movs	r3, #16
 80009b4:	e000      	b.n	80009b8 <SSD1306_init+0x7c>
 80009b6:	2314      	movs	r3, #20
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffaf 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80009be:	2020      	movs	r0, #32
 80009c0:	f7ff ffac 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff ffa9 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80009ca:	20b0      	movs	r0, #176	@ 0xb0
 80009cc:	f7ff ffa6 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80009d0:	20c8      	movs	r0, #200	@ 0xc8
 80009d2:	f7ff ffa3 	bl	800091c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80009d6:	2312      	movs	r3, #18
 80009d8:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80009da:	797b      	ldrb	r3, [r7, #5]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d101      	bne.n	80009e4 <SSD1306_init+0xa8>
 80009e0:	239f      	movs	r3, #159	@ 0x9f
 80009e2:	e000      	b.n	80009e6 <SSD1306_init+0xaa>
 80009e4:	23cf      	movs	r3, #207	@ 0xcf
 80009e6:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 80009e8:	20da      	movs	r0, #218	@ 0xda
 80009ea:	f7ff ff97 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff93 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 80009f6:	2081      	movs	r0, #129	@ 0x81
 80009f8:	f7ff ff90 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff8c 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000a04:	20d9      	movs	r0, #217	@ 0xd9
 8000a06:	f7ff ff89 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000a0a:	797b      	ldrb	r3, [r7, #5]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <SSD1306_init+0xd8>
 8000a10:	2322      	movs	r3, #34	@ 0x22
 8000a12:	e000      	b.n	8000a16 <SSD1306_init+0xda>
 8000a14:	23f1      	movs	r3, #241	@ 0xf1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff80 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8000a1c:	20db      	movs	r0, #219	@ 0xdb
 8000a1e:	f7ff ff7d 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8000a22:	2040      	movs	r0, #64	@ 0x40
 8000a24:	f7ff ff7a 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000a28:	20a4      	movs	r0, #164	@ 0xa4
 8000a2a:	f7ff ff77 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8000a2e:	20a6      	movs	r0, #166	@ 0xa6
 8000a30:	f7ff ff74 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000a34:	202e      	movs	r0, #46	@ 0x2e
 8000a36:	f7ff ff71 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8000a3a:	20af      	movs	r0, #175	@ 0xaf
 8000a3c:	f7ff ff6e 	bl	800091c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fb17 	bl	8001074 <SSD1306_set_rotation>
  return true;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000088 	.word	0x20000088

08000a54 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8000a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f2c0 80c4 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a76:	f300 80bf 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f2c0 80ba 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a88:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a8a:	f300 80b5 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 8000a8e:	f000 fb01 	bl	8001094 <SSD1306_get_rotation>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d023      	beq.n	8000ae0 <SSD1306_draw_pixel+0x8c>
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	dc33      	bgt.n	8000b04 <SSD1306_draw_pixel+0xb0>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d002      	beq.n	8000aa6 <SSD1306_draw_pixel+0x52>
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d012      	beq.n	8000aca <SSD1306_draw_pixel+0x76>
 8000aa4:	e02e      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	4053      	eors	r3, r2
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	80bb      	strh	r3, [r7, #4]
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	4053      	eors	r3, r2
 8000abc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	80fb      	strh	r3, [r7, #6]
				break;
 8000ac8:	e01c      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	80bb      	strh	r3, [r7, #4]
				break;
 8000ade:	e011      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	4053      	eors	r3, r2
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4053      	eors	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
 8000af0:	88fa      	ldrh	r2, [r7, #6]
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	4053      	eors	r3, r2
 8000af6:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	80bb      	strh	r3, [r7, #4]
				break;
 8000b02:	bf00      	nop
		}

		switch (color)
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d051      	beq.n	8000bae <SSD1306_draw_pixel+0x15a>
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	dc74      	bgt.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d026      	beq.n	8000b60 <SSD1306_draw_pixel+0x10c>
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d170      	bne.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8000b16:	4b3a      	ldr	r3, [pc, #232]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da00      	bge.n	8000b28 <SSD1306_draw_pixel+0xd4>
 8000b26:	3307      	adds	r3, #7
 8000b28:	10db      	asrs	r3, r3, #3
 8000b2a:	b218      	sxth	r0, r3
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	440b      	add	r3, r1
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b25c      	sxtb	r4, r3
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b52:	4602      	mov	r2, r0
 8000b54:	01d2      	lsls	r2, r2, #7
 8000b56:	440a      	add	r2, r1
 8000b58:	4413      	add	r3, r2
 8000b5a:	b2e2      	uxtb	r2, r4
 8000b5c:	701a      	strb	r2, [r3, #0]
				break;
 8000b5e:	e04b      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8000b60:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <SSD1306_draw_pixel+0x11e>
 8000b70:	3307      	adds	r3, #7
 8000b72:	10db      	asrs	r3, r3, #3
 8000b74:	b218      	sxth	r0, r3
 8000b76:	4603      	mov	r3, r0
 8000b78:	01db      	lsls	r3, r3, #7
 8000b7a:	440b      	add	r3, r1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	4013      	ands	r3, r2
 8000b96:	b25c      	sxtb	r4, r3
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	01d2      	lsls	r2, r2, #7
 8000ba4:	440a      	add	r2, r1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2e2      	uxtb	r2, r4
 8000baa:	701a      	strb	r2, [r3, #0]
				break;
 8000bac:	e024      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da00      	bge.n	8000bc0 <SSD1306_draw_pixel+0x16c>
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	10db      	asrs	r3, r3, #3
 8000bc2:	b218      	sxth	r0, r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	440b      	add	r3, r1
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	4053      	eors	r3, r2
 8000be0:	b25c      	sxtb	r4, r3
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bea:	4602      	mov	r2, r0
 8000bec:	01d2      	lsls	r2, r2, #7
 8000bee:	440a      	add	r2, r1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2e2      	uxtb	r2, r4
 8000bf4:	701a      	strb	r2, [r3, #0]
				break;
 8000bf6:	bf00      	nop
		}
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	20000088 	.word	0x20000088

08000c04 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <SSD1306_display_clear+0x18>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f007 fe15 	bl	8008842 <memset>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000088 	.word	0x20000088

08000c20 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000c20:	b490      	push	{r4, r7}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4604      	mov	r4, r0
 8000c28:	4608      	mov	r0, r1
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4623      	mov	r3, r4
 8000c30:	80fb      	strh	r3, [r7, #6]
 8000c32:	4603      	mov	r3, r0
 8000c34:	80bb      	strh	r3, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8000c3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db75      	blt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c4c:	dc71      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8000c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da06      	bge.n	8000c64 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	807b      	strh	r3, [r7, #2]
			x = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8000c64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2b80      	cmp	r3, #128	@ 0x80
 8000c70:	dd04      	ble.n	8000c7c <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8000c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dd56      	ble.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <SSD1306_draw_fast_hline_internal+0x11c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da00      	bge.n	8000c92 <SSD1306_draw_fast_hline_internal+0x72>
 8000c90:	3307      	adds	r3, #7
 8000c92:	10db      	asrs	r3, r3, #3
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	01d9      	lsls	r1, r3, #7
 8000c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8000cb0:	883b      	ldrh	r3, [r7, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d034      	beq.n	8000d20 <SSD1306_draw_fast_hline_internal+0x100>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	dc3b      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d013      	beq.n	8000ce6 <SSD1306_draw_fast_hline_internal+0xc6>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d137      	bne.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
			{
				case SSD1306_WHITE:
					while (w--)
 8000cc2:	e007      	b.n	8000cd4 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60fa      	str	r2, [r7, #12]
 8000cca:	7819      	ldrb	r1, [r3, #0]
 8000ccc:	7afa      	ldrb	r2, [r7, #11]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	3a01      	subs	r2, #1
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	807a      	strh	r2, [r7, #2]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1ef      	bne.n	8000cc4 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000ce4:	e025      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_BLACK:
					mask = ~mask;
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000cec:	e007      	b.n	8000cfe <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60fa      	str	r2, [r7, #12]
 8000cf4:	7819      	ldrb	r1, [r3, #0]
 8000cf6:	7afa      	ldrb	r2, [r7, #11]
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	3a01      	subs	r2, #1
 8000d06:	b292      	uxth	r2, r2
 8000d08:	807a      	strh	r2, [r7, #2]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1ef      	bne.n	8000cee <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8000d0e:	e010      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60fa      	str	r2, [r7, #12]
 8000d16:	7819      	ldrb	r1, [r3, #0]
 8000d18:	7afa      	ldrb	r2, [r7, #11]
 8000d1a:	404a      	eors	r2, r1
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	3a01      	subs	r2, #1
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	807a      	strh	r2, [r7, #2]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ef      	bne.n	8000d10 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8000d30:	bf00      	nop
			}
		}
	}
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc90      	pop	{r4, r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000088 	.word	0x20000088

08000d40 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4604      	mov	r4, r0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4623      	mov	r3, r4
 8000d50:	80fb      	strh	r3, [r7, #6]
 8000d52:	4603      	mov	r3, r0
 8000d54:	80bb      	strh	r3, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8000d62:	f000 f997 	bl	8001094 <SSD1306_get_rotation>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d033      	beq.n	8000dd4 <SSD1306_draw_fast_vline+0x94>
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	dc45      	bgt.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d002      	beq.n	8000d7a <SSD1306_draw_fast_vline+0x3a>
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d01b      	beq.n	8000db0 <SSD1306_draw_fast_vline+0x70>
 8000d78:	e040      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8000d7e:	88fa      	ldrh	r2, [r7, #6]
 8000d80:	88bb      	ldrh	r3, [r7, #4]
 8000d82:	4053      	eors	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	88ba      	ldrh	r2, [r7, #4]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4053      	eors	r3, r2
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	88fa      	ldrh	r2, [r7, #6]
 8000d90:	88bb      	ldrh	r3, [r7, #4]
 8000d92:	4053      	eors	r3, r2
 8000d94:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	80fb      	strh	r3, [r7, #6]
  			break;
 8000dae:	e025      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000dba:	88bb      	ldrh	r3, [r7, #4]
 8000dbc:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dd2:	e013      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000dd8:	88fa      	ldrh	r2, [r7, #6]
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	4053      	eors	r3, r2
 8000dde:	80fb      	strh	r3, [r7, #6]
 8000de0:	88ba      	ldrh	r2, [r7, #4]
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	4053      	eors	r3, r2
 8000de6:	80bb      	strh	r3, [r7, #4]
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	4053      	eors	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dfa:	bf00      	nop
	}

	if (bSwap)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d009      	beq.n	8000e16 <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8000e02:	883b      	ldrh	r3, [r7, #0]
 8000e04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e10:	f7ff ff06 	bl	8000c20 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8000e14:	e008      	b.n	8000e28 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e24:	f000 f804 	bl	8000e30 <SSD1306_draw_fast_vline_internal>
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}

08000e30 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f2c0 80dc 	blt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5e:	f300 80d7 	bgt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
	{
		// X coord in bounds?
		if (__y < 0)
 8000e62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da06      	bge.n	8000e78 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000e78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e80:	4413      	add	r3, r2
 8000e82:	2b40      	cmp	r3, #64	@ 0x40
 8000e84:	dd04      	ble.n	8000e90 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000e90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f340 80bb 	ble.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	737b      	strb	r3, [r7, #13]
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800101c <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	7b7a      	ldrb	r2, [r7, #13]
 8000ea8:	08d2      	lsrs	r2, r2, #3
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	01d1      	lsls	r1, r2, #7
 8000eae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000eb2:	440a      	add	r2, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d041      	beq.n	8000f4a <SSD1306_draw_fast_vline_internal+0x11a>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f1c3 0308 	rsb	r3, r3, #8
 8000ecc:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4a53      	ldr	r2, [pc, #332]	@ (8001020 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000ed8:	7dfa      	ldrb	r2, [r7, #23]
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d20b      	bcs.n	8000ef8 <SSD1306_draw_fast_vline_internal+0xc8>
				{
					mask &= (0XFF >> (mod - h));
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	22ff      	movs	r2, #255	@ 0xff
 8000ee8:	fa42 f303 	asr.w	r3, r2, r3
 8000eec:	b25a      	sxtb	r2, r3
 8000eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d01a      	beq.n	8000f34 <SSD1306_draw_fast_vline_internal+0x104>
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	dc20      	bgt.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d009      	beq.n	8000f1a <SSD1306_draw_fast_vline_internal+0xea>
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d11c      	bne.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	701a      	strb	r2, [r3, #0]
						break;
 8000f18:	e014      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	701a      	strb	r2, [r3, #0]
						break;
 8000f32:	e007      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	701a      	strb	r2, [r3, #0]
						break;
 8000f42:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	3380      	adds	r3, #128	@ 0x80
 8000f48:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000f4a:	7dfa      	ldrb	r2, [r7, #23]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d35e      	bcc.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
			{
				// More to go?
				h -= mod;
 8000f52:	7dfa      	ldrb	r2, [r7, #23]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	d925      	bls.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
				{
					if (color == SSD1306_INVERSE)
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d10f      	bne.n	8000f86 <SSD1306_draw_fast_vline_internal+0x156>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3380      	adds	r3, #128	@ 0x80
 8000f76:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d8f0      	bhi.n	8000f66 <SSD1306_draw_fast_vline_internal+0x136>
 8000f84:	e012      	b.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000f86:	883b      	ldrh	r3, [r7, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SSD1306_draw_fast_vline_internal+0x160>
 8000f8c:	23ff      	movs	r3, #255	@ 0xff
 8000f8e:	e000      	b.n	8000f92 <SSD1306_draw_fast_vline_internal+0x162>
 8000f90:	2300      	movs	r3, #0
 8000f92:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	7b3a      	ldrb	r2, [r7, #12]
 8000f98:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3380      	adds	r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	3b08      	subs	r3, #8
 8000fa4:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d8f3      	bhi.n	8000f94 <SSD1306_draw_fast_vline_internal+0x164>
					}
				}

				if (h)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d02e      	beq.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <SSD1306_draw_fast_vline_internal+0x1f4>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000fc4:	883b      	ldrh	r3, [r7, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d01a      	beq.n	8001000 <SSD1306_draw_fast_vline_internal+0x1d0>
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	dc20      	bgt.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <SSD1306_draw_fast_vline_internal+0x1b6>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d11c      	bne.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	701a      	strb	r2, [r3, #0]
							break;
 8000fe4:	e014      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25a      	sxtb	r2, r3
 8000fec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	701a      	strb	r2, [r3, #0]
							break;
 8000ffe:	e007      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	4053      	eors	r3, r2
 8001008:	b2da      	uxtb	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	701a      	strb	r2, [r3, #0]
							break;
 800100e:	bf00      	nop
					}
				}
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bc90      	pop	{r4, r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000088 	.word	0x20000088
 8001020:	08009c40 	.word	0x08009c40
 8001024:	08009c48 	.word	0x08009c48

08001028 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 800102e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001032:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001034:	2022      	movs	r0, #34	@ 0x22
 8001036:	f7ff fc71 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc6e 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001040:	20ff      	movs	r0, #255	@ 0xff
 8001042:	f7ff fc6b 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8001046:	2021      	movs	r0, #33	@ 0x21
 8001048:	f7ff fc68 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fc65 	bl	800091c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001052:	207f      	movs	r0, #127	@ 0x7f
 8001054:	f7ff fc62 	bl	800091c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SSD1306_display_repaint+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	88fa      	ldrh	r2, [r7, #6]
 800105e:	4619      	mov	r1, r3
 8001060:	2040      	movs	r0, #64	@ 0x40
 8001062:	f7ff fc41 	bl	80008e8 <platform_write_dma>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000088 	.word	0x20000088

08001074 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 800107e:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <SSD1306_set_rotation+0x1c>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	7013      	strb	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	2000008c 	.word	0x2000008c

08001094 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return rotation;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <SSD1306_get_rotation+0x14>)
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000008c 	.word	0x2000008c

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_DMA_Init+0x4c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <MX_DMA_Init+0x4c>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <MX_DMA_Init+0x4c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200c      	movs	r0, #12
 80010d4:	f001 fc4f 	bl	8002976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010d8:	200c      	movs	r0, #12
 80010da:	f001 fc68 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	200f      	movs	r0, #15
 80010e4:	f001 fc47 	bl	8002976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f001 fc60 	bl	80029ae <HAL_NVIC_EnableIRQ>

}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a42      	ldr	r2, [pc, #264]	@ (8001224 <MX_GPIO_Init+0x128>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a3b      	ldr	r2, [pc, #236]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a34      	ldr	r2, [pc, #208]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <MX_GPIO_Init+0x128>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b2e      	ldr	r3, [pc, #184]	@ (8001224 <MX_GPIO_Init+0x128>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a2d      	ldr	r2, [pc, #180]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a26      	ldr	r2, [pc, #152]	@ (8001224 <MX_GPIO_Init+0x128>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80011a4:	4820      	ldr	r0, [pc, #128]	@ (8001228 <MX_GPIO_Init+0x12c>)
 80011a6:	f002 f94d 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80011aa:	2301      	movs	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	481b      	ldr	r0, [pc, #108]	@ (800122c <MX_GPIO_Init+0x130>)
 80011c0:	f001 ffbc 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80011c4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4812      	ldr	r0, [pc, #72]	@ (8001228 <MX_GPIO_Init+0x12c>)
 80011de:	f001 ffad 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80011e2:	2302      	movs	r3, #2
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <MX_GPIO_Init+0x12c>)
 80011f8:	f001 ffa0 	bl	800313c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2006      	movs	r0, #6
 8001202:	f001 fbb8 	bl	8002976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001206:	2006      	movs	r0, #6
 8001208:	f001 fbd1 	bl	80029ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2007      	movs	r0, #7
 8001212:	f001 fbb0 	bl	8002976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001216:	2007      	movs	r0, #7
 8001218:	f001 fbc9 	bl	80029ae <HAL_NVIC_EnableIRQ>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40020000 	.word	0x40020000

08001230 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001236:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <MX_I2C1_Init+0x54>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_I2C1_Init+0x50>)
 800123c:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_I2C1_Init+0x58>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_I2C1_Init+0x50>)
 800124e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_I2C1_Init+0x50>)
 800126e:	f002 f91b 	bl	80034a8 <HAL_I2C_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 fcb0 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000090 	.word	0x20000090
 8001284:	40005400 	.word	0x40005400
 8001288:	00061a80 	.word	0x00061a80

0800128c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_I2C3_Init+0x50>)
 8001292:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <MX_I2C3_Init+0x54>)
 8001294:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_I2C3_Init+0x50>)
 8001298:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <MX_I2C3_Init+0x58>)
 800129a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_I2C3_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_I2C3_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_I2C3_Init+0x50>)
 80012aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <MX_I2C3_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_I2C3_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <MX_I2C3_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_I2C3_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_I2C3_Init+0x50>)
 80012ca:	f002 f8ed 	bl	80034a8 <HAL_I2C_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012d4:	f000 fc82 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200000e4 	.word	0x200000e4
 80012e0:	40005c00 	.word	0x40005c00
 80012e4:	00061a80 	.word	0x00061a80

080012e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a78      	ldr	r2, [pc, #480]	@ (80014e8 <HAL_I2C_MspInit+0x200>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d162      	bne.n	80013d0 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4b77      	ldr	r3, [pc, #476]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a76      	ldr	r2, [pc, #472]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b74      	ldr	r3, [pc, #464]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_I2C_SCL_Pin|OLED_I2C_SDA_Pin;
 8001326:	23c0      	movs	r3, #192	@ 0xc0
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132a:	2312      	movs	r3, #18
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001336:	2304      	movs	r3, #4
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	486b      	ldr	r0, [pc, #428]	@ (80014f0 <HAL_I2C_MspInit+0x208>)
 8001342:	f001 fefb 	bl	800313c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	4b68      	ldr	r3, [pc, #416]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	4a67      	ldr	r2, [pc, #412]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001354:	6413      	str	r3, [r2, #64]	@ 0x40
 8001356:	4b65      	ldr	r3, [pc, #404]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001362:	4b64      	ldr	r3, [pc, #400]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 8001364:	4a64      	ldr	r2, [pc, #400]	@ (80014f8 <HAL_I2C_MspInit+0x210>)
 8001366:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001368:	4b62      	ldr	r3, [pc, #392]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136e:	4b61      	ldr	r3, [pc, #388]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 8001370:	2240      	movs	r2, #64	@ 0x40
 8001372:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001374:	4b5f      	ldr	r3, [pc, #380]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800137a:	4b5e      	ldr	r3, [pc, #376]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 800137c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001380:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001382:	4b5c      	ldr	r3, [pc, #368]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001388:	4b5a      	ldr	r3, [pc, #360]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800138e:	4b59      	ldr	r3, [pc, #356]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001394:	4b57      	ldr	r3, [pc, #348]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 8001396:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800139a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139c:	4b55      	ldr	r3, [pc, #340]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80013a2:	4854      	ldr	r0, [pc, #336]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 80013a4:	f001 fb1e 	bl	80029e4 <HAL_DMA_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80013ae:	f000 fc15 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4f      	ldr	r2, [pc, #316]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 80013b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80013b8:	4a4e      	ldr	r2, [pc, #312]	@ (80014f4 <HAL_I2C_MspInit+0x20c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	201f      	movs	r0, #31
 80013c4:	f001 fad7 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013c8:	201f      	movs	r0, #31
 80013ca:	f001 faf0 	bl	80029ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80013ce:	e087      	b.n	80014e0 <HAL_I2C_MspInit+0x1f8>
  else if(i2cHandle->Instance==I2C3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a49      	ldr	r2, [pc, #292]	@ (80014fc <HAL_I2C_MspInit+0x214>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	f040 8082 	bne.w	80014e0 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	4b42      	ldr	r3, [pc, #264]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e4:	4a41      	ldr	r2, [pc, #260]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ec:	4b3f      	ldr	r3, [pc, #252]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	4a3a      	ldr	r2, [pc, #232]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6313      	str	r3, [r2, #48]	@ 0x30
 8001408:	4b38      	ldr	r3, [pc, #224]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141a:	2312      	movs	r3, #18
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001426:	2304      	movs	r3, #4
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4833      	ldr	r0, [pc, #204]	@ (8001500 <HAL_I2C_MspInit+0x218>)
 8001432:	f001 fe83 	bl	800313c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001436:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143c:	2312      	movs	r3, #18
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001448:	2304      	movs	r3, #4
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	482c      	ldr	r0, [pc, #176]	@ (8001504 <HAL_I2C_MspInit+0x21c>)
 8001454:	f001 fe72 	bl	800313c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	4a22      	ldr	r2, [pc, #136]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 8001462:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_I2C_MspInit+0x204>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8001474:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 8001476:	4a25      	ldr	r2, [pc, #148]	@ (800150c <HAL_I2C_MspInit+0x224>)
 8001478:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800147a:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 800147c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001480:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 8001484:	2240      	movs	r2, #64	@ 0x40
 8001486:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 8001490:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001494:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80014b4:	4814      	ldr	r0, [pc, #80]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 80014b6:	f001 fa95 	bl	80029e4 <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2C_MspInit+0x1dc>
      Error_Handler();
 80014c0:	f000 fb8c 	bl	8001bdc <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 80014c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001508 <HAL_I2C_MspInit+0x220>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2048      	movs	r0, #72	@ 0x48
 80014d6:	f001 fa4e 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80014da:	2048      	movs	r0, #72	@ 0x48
 80014dc:	f001 fa67 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	@ 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40005400 	.word	0x40005400
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020400 	.word	0x40020400
 80014f4:	20000138 	.word	0x20000138
 80014f8:	40026028 	.word	0x40026028
 80014fc:	40005c00 	.word	0x40005c00
 8001500:	40020800 	.word	0x40020800
 8001504:	40020000 	.word	0x40020000
 8001508:	20000198 	.word	0x20000198
 800150c:	40026070 	.word	0x40026070

08001510 <LCD_send_internal>:
#include "lcd_i2c.h"

static I2C_HandleTypeDef *lcd_i2c;

void LCD_send_internal(uint8_t data, uint8_t rs) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af02      	add	r7, sp, #8
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
    uint8_t high_nibble = data & 0xF0;
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f023 030f 	bic.w	r3, r3, #15
 8001526:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble  = (data << 4) & 0xF0;
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	73bb      	strb	r3, [r7, #14]
    uint8_t data_arr[4];

    data_arr[0] = high_nibble | rs | LCD_BACKLIGHT | LCD_ENABLE;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	4313      	orrs	r3, r2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 030c 	orr.w	r3, r3, #12
 800153a:	b2db      	uxtb	r3, r3
 800153c:	723b      	strb	r3, [r7, #8]
    data_arr[1] = high_nibble | rs | LCD_BACKLIGHT;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	4313      	orrs	r3, r2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f043 0308 	orr.w	r3, r3, #8
 800154a:	b2db      	uxtb	r3, r3
 800154c:	727b      	strb	r3, [r7, #9]
    data_arr[2] = low_nibble | rs | LCD_BACKLIGHT | LCD_ENABLE;
 800154e:	7bba      	ldrb	r2, [r7, #14]
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	4313      	orrs	r3, r2
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f043 030c 	orr.w	r3, r3, #12
 800155a:	b2db      	uxtb	r3, r3
 800155c:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = low_nibble | rs | LCD_BACKLIGHT;
 800155e:	7bba      	ldrb	r2, [r7, #14]
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	4313      	orrs	r3, r2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	b2db      	uxtb	r3, r3
 800156c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd_i2c, LCD_ADDR, data_arr, 4, HAL_MAX_DELAY);
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <LCD_send_internal+0x7c>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	f107 0208 	add.w	r2, r7, #8
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2304      	movs	r3, #4
 800157e:	214e      	movs	r1, #78	@ 0x4e
 8001580:	f002 f8ec 	bl	800375c <HAL_I2C_Master_Transmit>
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200001f8 	.word	0x200001f8

08001590 <LCD_send_cmd>:

void LCD_send_cmd(uint8_t cmd) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
    LCD_send_internal(cmd, 0x00);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ffb6 	bl	8001510 <LCD_send_internal>
    HAL_Delay(2);
 80015a4:	2002      	movs	r0, #2
 80015a6:	f001 f8e7 	bl	8002778 <HAL_Delay>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <LCD_send_data>:

void LCD_send_data(uint8_t data) {
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
    LCD_send_internal(data, LCD_REGISTER_SEL);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ffa5 	bl	8001510 <LCD_send_internal>
    HAL_Delay(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f001 f8d6 	bl	8002778 <HAL_Delay>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <LCD_clear>:

void LCD_clear(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    LCD_send_cmd(0x01);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff ffd9 	bl	8001590 <LCD_send_cmd>
    HAL_Delay(2);
 80015de:	2002      	movs	r0, #2
 80015e0:	f001 f8ca 	bl	8002778 <HAL_Delay>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <LCD_put_cursor>:

void LCD_put_cursor(uint8_t row, uint8_t col) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	460a      	mov	r2, r1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
    switch (row) {
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d819      	bhi.n	8001636 <LCD_put_cursor+0x4e>
 8001602:	a201      	add	r2, pc, #4	@ (adr r2, 8001608 <LCD_put_cursor+0x20>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001619 	.word	0x08001619
 800160c:	0800161f 	.word	0x0800161f
 8001610:	08001627 	.word	0x08001627
 8001614:	0800162f 	.word	0x0800162f
        case 0: addr = 0x00 + col; break;
 8001618:	79bb      	ldrb	r3, [r7, #6]
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e00b      	b.n	8001636 <LCD_put_cursor+0x4e>
        case 1: addr = 0x40 + col; break;
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	3340      	adds	r3, #64	@ 0x40
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e007      	b.n	8001636 <LCD_put_cursor+0x4e>
        case 2: addr = 0x14 + col; break;
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	3314      	adds	r3, #20
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e003      	b.n	8001636 <LCD_put_cursor+0x4e>
        case 3: addr = 0x54 + col; break;
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	3354      	adds	r3, #84	@ 0x54
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	bf00      	nop
    }
    LCD_send_cmd(0x80 | addr);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ffa6 	bl	8001590 <LCD_send_cmd>
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <LCD_send_string>:

void LCD_send_string(char *str) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001654:	e007      	b.n	8001666 <LCD_send_string+0x1a>
        LCD_send_data((uint8_t)(*str));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ffa9 	bl	80015b2 <LCD_send_data>
        str++;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3301      	adds	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f3      	bne.n	8001656 <LCD_send_string+0xa>
    }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <LCD_init>:

void LCD_init(I2C_HandleTypeDef *hi2c) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    lcd_i2c = hi2c;
 8001680:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <LCD_init+0x6c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8001686:	2032      	movs	r0, #50	@ 0x32
 8001688:	f001 f876 	bl	8002778 <HAL_Delay>

    LCD_send_cmd(0x30);
 800168c:	2030      	movs	r0, #48	@ 0x30
 800168e:	f7ff ff7f 	bl	8001590 <LCD_send_cmd>
    HAL_Delay(5);
 8001692:	2005      	movs	r0, #5
 8001694:	f001 f870 	bl	8002778 <HAL_Delay>
    LCD_send_cmd(0x30);
 8001698:	2030      	movs	r0, #48	@ 0x30
 800169a:	f7ff ff79 	bl	8001590 <LCD_send_cmd>
    HAL_Delay(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f001 f86a 	bl	8002778 <HAL_Delay>
    LCD_send_cmd(0x30);
 80016a4:	2030      	movs	r0, #48	@ 0x30
 80016a6:	f7ff ff73 	bl	8001590 <LCD_send_cmd>
    HAL_Delay(10);
 80016aa:	200a      	movs	r0, #10
 80016ac:	f001 f864 	bl	8002778 <HAL_Delay>
    LCD_send_cmd(0x20); // Tryb 4-bitowy
 80016b0:	2020      	movs	r0, #32
 80016b2:	f7ff ff6d 	bl	8001590 <LCD_send_cmd>

    LCD_send_cmd(0x28); // 4-bit, 2-linie, 5x8 font
 80016b6:	2028      	movs	r0, #40	@ 0x28
 80016b8:	f7ff ff6a 	bl	8001590 <LCD_send_cmd>
    LCD_send_cmd(0x08); // Display off
 80016bc:	2008      	movs	r0, #8
 80016be:	f7ff ff67 	bl	8001590 <LCD_send_cmd>
    LCD_send_cmd(0x01); // Clear
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff ff64 	bl	8001590 <LCD_send_cmd>
    HAL_Delay(2);
 80016c8:	2002      	movs	r0, #2
 80016ca:	f001 f855 	bl	8002778 <HAL_Delay>
    LCD_send_cmd(0x06); // Entry mode
 80016ce:	2006      	movs	r0, #6
 80016d0:	f7ff ff5e 	bl	8001590 <LCD_send_cmd>
    LCD_send_cmd(0x0C); // Display on, cursor off, blink off
 80016d4:	200c      	movs	r0, #12
 80016d6:	f7ff ff5b 	bl	8001590 <LCD_send_cmd>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001f8 	.word	0x200001f8

080016e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001700:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001704:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001708:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00b      	beq.n	8001728 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001710:	e000      	b.n	8001714 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001712:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001714:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f9      	beq.n	8001712 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800171e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffd1 	bl	80016e8 <ITM_SendChar>
	return ch;
 8001746:	687b      	ldr	r3, [r7, #4]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
   alarm_info.enabled = false;
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <main+0x70>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
   alarm_info.dismissed = false;
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <main+0x70>)
 800175c:	2200      	movs	r2, #0
 800175e:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001760:	f000 ff98 	bl	8002694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001764:	f000 f836 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001768:	f7ff fcc8 	bl	80010fc <MX_GPIO_Init>
  MX_DMA_Init();
 800176c:	f7ff fc9e 	bl	80010ac <MX_DMA_Init>
  MX_I2C1_Init();
 8001770:	f7ff fd5e 	bl	8001230 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001774:	f000 fd5c 	bl	8002230 <MX_TIM1_Init>
  MX_RTC_Init();
 8001778:	f000 fa5c 	bl	8001c34 <MX_RTC_Init>
  MX_TIM3_Init();
 800177c:	f000 fdb4 	bl	80022e8 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001780:	f7ff fd84 	bl	800128c <MX_I2C3_Init>
  MX_TIM4_Init();
 8001784:	f000 fe0a 	bl	800239c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  OLED_init();
 8001788:	f000 fa2e 	bl	8001be8 <OLED_init>
  LCD_init(&hi2c3);
 800178c:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <main+0x74>)
 800178e:	f7ff ff73 	bl	8001678 <LCD_init>

  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001792:	2100      	movs	r1, #0
 8001794:	480c      	ldr	r0, [pc, #48]	@ (80017c8 <main+0x78>)
 8001796:	f005 fd43 	bl	8007220 <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(is_update_lcd) {
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <main+0x7c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <main+0x5c>
		  is_update_lcd = false;
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <main+0x7c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
		  LCD_update();
 80017a8:	f000 f9ec 	bl	8001b84 <LCD_update>
	  }

	  if(is_update_oled) {
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <main+0x80>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f2      	beq.n	800179a <main+0x4a>
		  ENC_ALARM_update();
 80017b4:	f000 f8f8 	bl	80019a8 <ENC_ALARM_update>
		  OLED_update_time();
 80017b8:	f000 f86c 	bl	8001894 <OLED_update_time>
	  if(is_update_lcd) {
 80017bc:	e7ed      	b.n	800179a <main+0x4a>
 80017be:	bf00      	nop
 80017c0:	20000244 	.word	0x20000244
 80017c4:	200000e4 	.word	0x200000e4
 80017c8:	20000308 	.word	0x20000308
 80017cc:	20000246 	.word	0x20000246
 80017d0:	20000000 	.word	0x20000000

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b094      	sub	sp, #80	@ 0x50
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0320 	add.w	r3, r7, #32
 80017de:	2230      	movs	r2, #48	@ 0x30
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f007 f82d 	bl	8008842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <SystemClock_Config+0xb8>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	4a22      	ldr	r2, [pc, #136]	@ (800188c <SystemClock_Config+0xb8>)
 8001802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001806:	6413      	str	r3, [r2, #64]	@ 0x40
 8001808:	4b20      	ldr	r3, [pc, #128]	@ (800188c <SystemClock_Config+0xb8>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <SystemClock_Config+0xbc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <SystemClock_Config+0xbc>)
 800181e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <SystemClock_Config+0xbc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001830:	230a      	movs	r3, #10
 8001832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001834:	2301      	movs	r3, #1
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001838:	2310      	movs	r3, #16
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800183c:	2301      	movs	r3, #1
 800183e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001840:	2300      	movs	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fac7 	bl	8005ddc <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001854:	f000 f9c2 	bl	8001bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	230f      	movs	r3, #15
 800185a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fd2a 	bl	80062cc <HAL_RCC_ClockConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800187e:	f000 f9ad 	bl	8001bdc <Error_Handler>
  }
}
 8001882:	bf00      	nop
 8001884:	3750      	adds	r7, #80	@ 0x50
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000

08001894 <OLED_update_time>:

/* USER CODE BEGIN 4 */

void OLED_update_time(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

    OLED_print("Ustaw godzin\313", 0, OLED_ROW_1, 1);
 8001898:	2301      	movs	r3, #1
 800189a:	2238      	movs	r2, #56	@ 0x38
 800189c:	2100      	movs	r1, #0
 800189e:	4836      	ldr	r0, [pc, #216]	@ (8001978 <OLED_update_time+0xe4>)
 80018a0:	f000 f9a8 	bl	8001bf4 <OLED_print>

    if(selection_mode != SELECTION_NONE) {
 80018a4:	4b35      	ldr	r3, [pc, #212]	@ (800197c <OLED_update_time+0xe8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d039      	beq.n	8001920 <OLED_update_time+0x8c>

    	if(selection_mode == SELECTION_HOUR) {
 80018ac:	4b33      	ldr	r3, [pc, #204]	@ (800197c <OLED_update_time+0xe8>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d11a      	bne.n	80018ea <OLED_update_time+0x56>

    		if(cursor_cnt < 40) {
 80018b4:	4b32      	ldr	r3, [pc, #200]	@ (8001980 <OLED_update_time+0xec>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	2b27      	cmp	r3, #39	@ 0x27
 80018ba:	d808      	bhi.n	80018ce <OLED_update_time+0x3a>
    			sprintf(time_hour_str, "%02d", selected_hour);
 80018bc:	4b31      	ldr	r3, [pc, #196]	@ (8001984 <OLED_update_time+0xf0>)
 80018be:	f993 3000 	ldrsb.w	r3, [r3]
 80018c2:	461a      	mov	r2, r3
 80018c4:	4930      	ldr	r1, [pc, #192]	@ (8001988 <OLED_update_time+0xf4>)
 80018c6:	4831      	ldr	r0, [pc, #196]	@ (800198c <OLED_update_time+0xf8>)
 80018c8:	f006 ff56 	bl	8008778 <siprintf>
 80018cc:	e004      	b.n	80018d8 <OLED_update_time+0x44>
    		} else {
    			sprintf(time_hour_str, "%s", "  ");
 80018ce:	4a30      	ldr	r2, [pc, #192]	@ (8001990 <OLED_update_time+0xfc>)
 80018d0:	4930      	ldr	r1, [pc, #192]	@ (8001994 <OLED_update_time+0x100>)
 80018d2:	482e      	ldr	r0, [pc, #184]	@ (800198c <OLED_update_time+0xf8>)
 80018d4:	f006 ff50 	bl	8008778 <siprintf>
    		}
    		sprintf(time_minute_str, "%02d", selected_minutes);
 80018d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <OLED_update_time+0x104>)
 80018da:	f993 3000 	ldrsb.w	r3, [r3]
 80018de:	461a      	mov	r2, r3
 80018e0:	4929      	ldr	r1, [pc, #164]	@ (8001988 <OLED_update_time+0xf4>)
 80018e2:	482e      	ldr	r0, [pc, #184]	@ (800199c <OLED_update_time+0x108>)
 80018e4:	f006 ff48 	bl	8008778 <siprintf>
 80018e8:	e02a      	b.n	8001940 <OLED_update_time+0xac>

    	} else {

    		if(cursor_cnt < 40) {
 80018ea:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <OLED_update_time+0xec>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2b27      	cmp	r3, #39	@ 0x27
 80018f0:	d808      	bhi.n	8001904 <OLED_update_time+0x70>
        		sprintf(time_minute_str, "%02d", selected_minutes);
 80018f2:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <OLED_update_time+0x104>)
 80018f4:	f993 3000 	ldrsb.w	r3, [r3]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4923      	ldr	r1, [pc, #140]	@ (8001988 <OLED_update_time+0xf4>)
 80018fc:	4827      	ldr	r0, [pc, #156]	@ (800199c <OLED_update_time+0x108>)
 80018fe:	f006 ff3b 	bl	8008778 <siprintf>
 8001902:	e004      	b.n	800190e <OLED_update_time+0x7a>
			} else {
				sprintf(time_minute_str, "%s", "  ");
 8001904:	4a22      	ldr	r2, [pc, #136]	@ (8001990 <OLED_update_time+0xfc>)
 8001906:	4923      	ldr	r1, [pc, #140]	@ (8001994 <OLED_update_time+0x100>)
 8001908:	4824      	ldr	r0, [pc, #144]	@ (800199c <OLED_update_time+0x108>)
 800190a:	f006 ff35 	bl	8008778 <siprintf>
			}
    		sprintf(time_hour_str, "%02d", selected_hour);
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <OLED_update_time+0xf0>)
 8001910:	f993 3000 	ldrsb.w	r3, [r3]
 8001914:	461a      	mov	r2, r3
 8001916:	491c      	ldr	r1, [pc, #112]	@ (8001988 <OLED_update_time+0xf4>)
 8001918:	481c      	ldr	r0, [pc, #112]	@ (800198c <OLED_update_time+0xf8>)
 800191a:	f006 ff2d 	bl	8008778 <siprintf>
 800191e:	e00f      	b.n	8001940 <OLED_update_time+0xac>
    	}

    } else {
		sprintf(time_hour_str, "%02d", selected_hour);
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <OLED_update_time+0xf0>)
 8001922:	f993 3000 	ldrsb.w	r3, [r3]
 8001926:	461a      	mov	r2, r3
 8001928:	4917      	ldr	r1, [pc, #92]	@ (8001988 <OLED_update_time+0xf4>)
 800192a:	4818      	ldr	r0, [pc, #96]	@ (800198c <OLED_update_time+0xf8>)
 800192c:	f006 ff24 	bl	8008778 <siprintf>
		sprintf(time_minute_str, "%02d", selected_minutes);
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <OLED_update_time+0x104>)
 8001932:	f993 3000 	ldrsb.w	r3, [r3]
 8001936:	461a      	mov	r2, r3
 8001938:	4913      	ldr	r1, [pc, #76]	@ (8001988 <OLED_update_time+0xf4>)
 800193a:	4818      	ldr	r0, [pc, #96]	@ (800199c <OLED_update_time+0x108>)
 800193c:	f006 ff1c 	bl	8008778 <siprintf>
    }

	if(cursor_cnt > 50) cursor_cnt = 0;
 8001940:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <OLED_update_time+0xec>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2b32      	cmp	r3, #50	@ 0x32
 8001946:	d903      	bls.n	8001950 <OLED_update_time+0xbc>
 8001948:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <OLED_update_time+0xec>)
 800194a:	2200      	movs	r2, #0
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	e005      	b.n	800195c <OLED_update_time+0xc8>
	else cursor_cnt++;
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <OLED_update_time+0xec>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <OLED_update_time+0xec>)
 800195a:	801a      	strh	r2, [r3, #0]

	sprintf(time_str, "%s:%s", time_hour_str, time_minute_str);
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <OLED_update_time+0x108>)
 800195e:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <OLED_update_time+0xf8>)
 8001960:	490f      	ldr	r1, [pc, #60]	@ (80019a0 <OLED_update_time+0x10c>)
 8001962:	4810      	ldr	r0, [pc, #64]	@ (80019a4 <OLED_update_time+0x110>)
 8001964:	f006 ff08 	bl	8008778 <siprintf>
	OLED_print(time_str, 0, OLED_ROW_5, 2);
 8001968:	2302      	movs	r3, #2
 800196a:	2218      	movs	r2, #24
 800196c:	2100      	movs	r1, #0
 800196e:	480d      	ldr	r0, [pc, #52]	@ (80019a4 <OLED_update_time+0x110>)
 8001970:	f000 f940 	bl	8001bf4 <OLED_print>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	08009698 	.word	0x08009698
 800197c:	20000240 	.word	0x20000240
 8001980:	200001fe 	.word	0x200001fe
 8001984:	200001fc 	.word	0x200001fc
 8001988:	080096a8 	.word	0x080096a8
 800198c:	20000220 	.word	0x20000220
 8001990:	080096b0 	.word	0x080096b0
 8001994:	080096b4 	.word	0x080096b4
 8001998:	200001fd 	.word	0x200001fd
 800199c:	20000230 	.word	0x20000230
 80019a0:	080096b8 	.word	0x080096b8
 80019a4:	20000200 	.word	0x20000200

080019a8 <ENC_ALARM_update>:

void ENC_ALARM_update(void) {
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
	static uint16_t last_cnt = 0;
	int diff = htim1.Instance->CNT - last_cnt;
 80019ae:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <ENC_ALARM_update+0xcc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	4a30      	ldr	r2, [pc, #192]	@ (8001a78 <ENC_ALARM_update+0xd0>)
 80019b6:	8812      	ldrh	r2, [r2, #0]
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	607b      	str	r3, [r7, #4]

	if(diff >= 4 || diff <= -4) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	dc03      	bgt.n	80019ca <ENC_ALARM_update+0x22>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f113 0f03 	cmn.w	r3, #3
 80019c8:	da4d      	bge.n	8001a66 <ENC_ALARM_update+0xbe>
		diff /= 4;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da00      	bge.n	80019d2 <ENC_ALARM_update+0x2a>
 80019d0:	3303      	adds	r3, #3
 80019d2:	109b      	asrs	r3, r3, #2
 80019d4:	607b      	str	r3, [r7, #4]

		switch(selection_mode) {
 80019d6:	4b29      	ldr	r3, [pc, #164]	@ (8001a7c <ENC_ALARM_update+0xd4>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <ENC_ALARM_update+0x3c>
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d01c      	beq.n	8001a1c <ENC_ALARM_update+0x74>
				selected_minutes += (int8_t)diff;

				if(selected_minutes > 59) selected_minutes = 0;
				if (selected_minutes < 0) selected_minutes = 59;
			default:
				break;
 80019e2:	e039      	b.n	8001a58 <ENC_ALARM_update+0xb0>
				selected_hour += (int8_t)diff;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <ENC_ALARM_update+0xd8>)
 80019ea:	f993 3000 	ldrsb.w	r3, [r3]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <ENC_ALARM_update+0xd8>)
 80019f8:	701a      	strb	r2, [r3, #0]
				if(selected_hour > 23) selected_hour = 0;
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <ENC_ALARM_update+0xd8>)
 80019fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001a00:	2b17      	cmp	r3, #23
 8001a02:	dd02      	ble.n	8001a0a <ENC_ALARM_update+0x62>
 8001a04:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <ENC_ALARM_update+0xd8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
				if (selected_hour < 0) selected_hour = 23;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <ENC_ALARM_update+0xd8>)
 8001a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	da1f      	bge.n	8001a54 <ENC_ALARM_update+0xac>
 8001a14:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <ENC_ALARM_update+0xd8>)
 8001a16:	2217      	movs	r2, #23
 8001a18:	701a      	strb	r2, [r3, #0]
				break;
 8001a1a:	e01b      	b.n	8001a54 <ENC_ALARM_update+0xac>
				selected_minutes += (int8_t)diff;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <ENC_ALARM_update+0xdc>)
 8001a22:	f993 3000 	ldrsb.w	r3, [r3]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	b25a      	sxtb	r2, r3
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <ENC_ALARM_update+0xdc>)
 8001a30:	701a      	strb	r2, [r3, #0]
				if(selected_minutes > 59) selected_minutes = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <ENC_ALARM_update+0xdc>)
 8001a34:	f993 3000 	ldrsb.w	r3, [r3]
 8001a38:	2b3b      	cmp	r3, #59	@ 0x3b
 8001a3a:	dd02      	ble.n	8001a42 <ENC_ALARM_update+0x9a>
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <ENC_ALARM_update+0xdc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
				if (selected_minutes < 0) selected_minutes = 59;
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <ENC_ALARM_update+0xdc>)
 8001a44:	f993 3000 	ldrsb.w	r3, [r3]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	da05      	bge.n	8001a58 <ENC_ALARM_update+0xb0>
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <ENC_ALARM_update+0xdc>)
 8001a4e:	223b      	movs	r2, #59	@ 0x3b
 8001a50:	701a      	strb	r2, [r3, #0]
				break;
 8001a52:	e001      	b.n	8001a58 <ENC_ALARM_update+0xb0>
				break;
 8001a54:	bf00      	nop
 8001a56:	e000      	b.n	8001a5a <ENC_ALARM_update+0xb2>
				break;
 8001a58:	bf00      	nop
		}

		last_cnt = htim1.Instance->CNT;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <ENC_ALARM_update+0xcc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <ENC_ALARM_update+0xd0>)
 8001a64:	801a      	strh	r2, [r3, #0]
	}
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000278 	.word	0x20000278
 8001a78:	20000248 	.word	0x20000248
 8001a7c:	20000240 	.word	0x20000240
 8001a80:	200001fc 	.word	0x200001fc
 8001a84:	200001fd 	.word	0x200001fd

08001a88 <LCD_show_clock_screen>:

void LCD_show_clock_screen() {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b098      	sub	sp, #96	@ 0x60
 8001a8c:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a8e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a92:	2200      	movs	r2, #0
 8001a94:	4619      	mov	r1, r3
 8001a96:	481e      	ldr	r0, [pc, #120]	@ (8001b10 <LCD_show_clock_screen+0x88>)
 8001a98:	f004 ffef 	bl	8006a7a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);  // Musi być po GetTime()
 8001a9c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481a      	ldr	r0, [pc, #104]	@ (8001b10 <LCD_show_clock_screen+0x88>)
 8001aa6:	f005 f8ca 	bl	8006c3e <HAL_RTC_GetDate>

	char buffer[64];
	sprintf(buffer, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001aaa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001aba:	4638      	mov	r0, r7
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4914      	ldr	r1, [pc, #80]	@ (8001b14 <LCD_show_clock_screen+0x8c>)
 8001ac2:	f006 fe59 	bl	8008778 <siprintf>
	LCD_put_cursor(0, 6);
 8001ac6:	2106      	movs	r1, #6
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fd8d 	bl	80015e8 <LCD_put_cursor>
	LCD_send_string(buffer);
 8001ace:	463b      	mov	r3, r7
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fdbb 	bl	800164c <LCD_send_string>

	sprintf(buffer, "%02d.%02d.%d", sDate.Date, sDate.Month, 2000 + sDate.Year);
 8001ad6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001ada:	461a      	mov	r2, r3
 8001adc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001ae6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001aea:	4638      	mov	r0, r7
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	460b      	mov	r3, r1
 8001af0:	4909      	ldr	r1, [pc, #36]	@ (8001b18 <LCD_show_clock_screen+0x90>)
 8001af2:	f006 fe41 	bl	8008778 <siprintf>
	LCD_put_cursor(2, 5);
 8001af6:	2105      	movs	r1, #5
 8001af8:	2002      	movs	r0, #2
 8001afa:	f7ff fd75 	bl	80015e8 <LCD_put_cursor>
	LCD_send_string(buffer);
 8001afe:	463b      	mov	r3, r7
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fda3 	bl	800164c <LCD_send_string>
}
 8001b06:	bf00      	nop
 8001b08:	3758      	adds	r7, #88	@ 0x58
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000024c 	.word	0x2000024c
 8001b14:	080096c0 	.word	0x080096c0
 8001b18:	080096d0 	.word	0x080096d0

08001b1c <LCD_show_alarm_screen>:

void LCD_show_alarm_screen() {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	LCD_put_cursor(2, 3);
 8001b20:	2103      	movs	r1, #3
 8001b22:	2002      	movs	r0, #2
 8001b24:	f7ff fd60 	bl	80015e8 <LCD_put_cursor>
	LCD_send_string("     ALARM    ");
 8001b28:	4812      	ldr	r0, [pc, #72]	@ (8001b74 <LCD_show_alarm_screen+0x58>)
 8001b2a:	f7ff fd8f 	bl	800164c <LCD_send_string>
	HAL_Delay(150);
 8001b2e:	2096      	movs	r0, #150	@ 0x96
 8001b30:	f000 fe22 	bl	8002778 <HAL_Delay>
	LCD_put_cursor(2, 3);
 8001b34:	2103      	movs	r1, #3
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7ff fd56 	bl	80015e8 <LCD_put_cursor>
	LCD_send_string("   ! ALARM !  ");
 8001b3c:	480e      	ldr	r0, [pc, #56]	@ (8001b78 <LCD_show_alarm_screen+0x5c>)
 8001b3e:	f7ff fd85 	bl	800164c <LCD_send_string>
	HAL_Delay(150);
 8001b42:	2096      	movs	r0, #150	@ 0x96
 8001b44:	f000 fe18 	bl	8002778 <HAL_Delay>
	LCD_put_cursor(2, 3);
 8001b48:	2103      	movs	r1, #3
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f7ff fd4c 	bl	80015e8 <LCD_put_cursor>
	LCD_send_string("  !! ALARM !! ");
 8001b50:	480a      	ldr	r0, [pc, #40]	@ (8001b7c <LCD_show_alarm_screen+0x60>)
 8001b52:	f7ff fd7b 	bl	800164c <LCD_send_string>
	HAL_Delay(150);
 8001b56:	2096      	movs	r0, #150	@ 0x96
 8001b58:	f000 fe0e 	bl	8002778 <HAL_Delay>
	LCD_put_cursor(2, 3);
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f7ff fd42 	bl	80015e8 <LCD_put_cursor>
	LCD_send_string(" !!! ALARM !!!");
 8001b64:	4806      	ldr	r0, [pc, #24]	@ (8001b80 <LCD_show_alarm_screen+0x64>)
 8001b66:	f7ff fd71 	bl	800164c <LCD_send_string>
	HAL_Delay(150);
 8001b6a:	2096      	movs	r0, #150	@ 0x96
 8001b6c:	f000 fe04 	bl	8002778 <HAL_Delay>
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	080096e0 	.word	0x080096e0
 8001b78:	080096f0 	.word	0x080096f0
 8001b7c:	08009700 	.word	0x08009700
 8001b80:	08009710 	.word	0x08009710

08001b84 <LCD_update>:

void LCD_update(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	if(alarm_info.enabled) {
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <LCD_update+0x4c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <LCD_update+0x12>
		LCD_show_alarm_screen();
 8001b90:	f7ff ffc4 	bl	8001b1c <LCD_show_alarm_screen>
 8001b94:	e017      	b.n	8001bc6 <LCD_update+0x42>
	} else {
		if(alarm_info.dismissed) {
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <LCD_update+0x4c>)
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00e      	beq.n	8001bbc <LCD_update+0x38>
			LCD_clear();
 8001b9e:	f7ff fd19 	bl	80015d4 <LCD_clear>

			LCD_put_cursor(2, 2);
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f7ff fd1f 	bl	80015e8 <LCD_put_cursor>
			LCD_send_string("ALARM DISMISSED!");
 8001baa:	480a      	ldr	r0, [pc, #40]	@ (8001bd4 <LCD_update+0x50>)
 8001bac:	f7ff fd4e 	bl	800164c <LCD_send_string>
			HAL_Delay(800);
 8001bb0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bb4:	f000 fde0 	bl	8002778 <HAL_Delay>
			LCD_clear();
 8001bb8:	f7ff fd0c 	bl	80015d4 <LCD_clear>
		}
		alarm_info.dismissed = false;
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <LCD_update+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	705a      	strb	r2, [r3, #1]

		LCD_show_clock_screen();
 8001bc2:	f7ff ff61 	bl	8001a88 <LCD_show_clock_screen>
	}
	is_update_lcd = false;
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <LCD_update+0x54>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000244 	.word	0x20000244
 8001bd4:	08009720 	.word	0x08009720
 8001bd8:	20000246 	.word	0x20000246

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <Error_Handler+0x8>

08001be8 <OLED_init>:
 */


#include "oled.h"

void OLED_init(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	SSD1306_init();
 8001bec:	f7fe fea6 	bl	800093c <SSD1306_init>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <OLED_print>:


void OLED_print(char *str, uint16_t x, uint16_t y, uint8_t size) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af04      	add	r7, sp, #16
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	817b      	strh	r3, [r7, #10]
 8001c06:	460b      	mov	r3, r1
 8001c08:	813b      	strh	r3, [r7, #8]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	71fb      	strb	r3, [r7, #7]
	GFX_draw_string(x, y, str, WHITE, BLACK, size, size);
 8001c0e:	8978      	ldrh	r0, [r7, #10]
 8001c10:	8939      	ldrh	r1, [r7, #8]
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	9202      	str	r2, [sp, #8]
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	f7fe fddd 	bl	80007e0 <GFX_draw_string>
	SSD1306_display_repaint();
 8001c26:	f7ff f9ff 	bl	8001028 <SSD1306_display_repaint>
}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b090      	sub	sp, #64	@ 0x40
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	__HAL_RCC_BACKUPRESET_FORCE();
 8001c3a:	4b45      	ldr	r3, [pc, #276]	@ (8001d50 <MX_RTC_Init+0x11c>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
	__HAL_RCC_BACKUPRESET_RELEASE();
 8001c40:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <MX_RTC_Init+0x11c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]


  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c56:	2300      	movs	r3, #0
 8001c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2228      	movs	r2, #40	@ 0x28
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f006 fdee 	bl	8008842 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c66:	4b3b      	ldr	r3, [pc, #236]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001c68:	4a3b      	ldr	r2, [pc, #236]	@ (8001d58 <MX_RTC_Init+0x124>)
 8001c6a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c6c:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c72:	4b38      	ldr	r3, [pc, #224]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001c74:	227f      	movs	r2, #127	@ 0x7f
 8001c76:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001c7a:	22ff      	movs	r2, #255	@ 0xff
 8001c7c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c7e:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c84:	4b33      	ldr	r3, [pc, #204]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c8a:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c90:	4830      	ldr	r0, [pc, #192]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001c92:	f004 fdd7 	bl	8006844 <HAL_RTC_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001c9c:	f7ff ff9e 	bl	8001bdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 8001ca0:	2319      	movs	r3, #25
 8001ca2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4824      	ldr	r0, [pc, #144]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001cc4:	f004 fe3f 	bl	8006946 <HAL_RTC_SetTime>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8001cce:	f7ff ff85 	bl	8001bdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JUNE;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x20;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x25;
 8001ce4:	2325      	movs	r3, #37	@ 0x25
 8001ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4818      	ldr	r0, [pc, #96]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001cf4:	f004 ff1f 	bl	8006b36 <HAL_RTC_SetDate>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001cfe:	f7ff ff6d 	bl	8001bdc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 8001d02:	2319      	movs	r3, #25
 8001d04:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x20;
 8001d26:	2320      	movs	r3, #32
 8001d28:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	2201      	movs	r2, #1
 8001d36:	4619      	mov	r1, r3
 8001d38:	4806      	ldr	r0, [pc, #24]	@ (8001d54 <MX_RTC_Init+0x120>)
 8001d3a:	f004 ffcf 	bl	8006cdc <HAL_RTC_SetAlarm_IT>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001d44:	f7ff ff4a 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	3740      	adds	r7, #64	@ 0x40
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	42470e40 	.word	0x42470e40
 8001d54:	2000024c 	.word	0x2000024c
 8001d58:	40002800 	.word	0x40002800

08001d5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <HAL_RTC_MspInit+0x60>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d119      	bne.n	8001db4 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d80:	2302      	movs	r3, #2
 8001d82:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d88:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 fc68 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001d9a:	f7ff ff1f 	bl	8001bdc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d9e:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <HAL_RTC_MspInit+0x64>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	2029      	movs	r0, #41	@ 0x29
 8001daa:	f000 fde4 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001dae:	2029      	movs	r0, #41	@ 0x29
 8001db0:	f000 fdfd 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40002800 	.word	0x40002800
 8001dc0:	42470e3c 	.word	0x42470e3c

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <NMI_Handler+0x4>

08001e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6a:	f000 fc65 	bl	8002738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f001 fafe 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001e84:	2002      	movs	r0, #2
 8001e86:	f001 faf7 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <DMA1_Stream1_IRQHandler+0x10>)
 8001e96:	f000 fecd 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000138 	.word	0x20000138

08001ea4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <DMA1_Stream4_IRQHandler+0x10>)
 8001eaa:	f000 fec3 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000198 	.word	0x20000198

08001eb8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001ebe:	f005 fde1 	bl	8007a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000278 	.word	0x20000278

08001ecc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ed2:	f005 fdd7 	bl	8007a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000278 	.word	0x20000278

08001ee0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ee4:	4802      	ldr	r0, [pc, #8]	@ (8001ef0 <TIM3_IRQHandler+0x10>)
 8001ee6:	f005 fdcd 	bl	8007a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200002c0 	.word	0x200002c0

08001ef4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ef8:	4802      	ldr	r0, [pc, #8]	@ (8001f04 <TIM4_IRQHandler+0x10>)
 8001efa:	f005 fdc3 	bl	8007a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000308 	.word	0x20000308

08001f08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <I2C1_EV_IRQHandler+0x10>)
 8001f0e:	f001 ff7b 	bl	8003e08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000090 	.word	0x20000090

08001f1c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001f20:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <RTC_Alarm_IRQHandler+0x10>)
 8001f22:	f005 f81f 	bl	8006f64 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000024c 	.word	0x2000024c

08001f30 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001f34:	4802      	ldr	r0, [pc, #8]	@ (8001f40 <I2C3_EV_IRQHandler+0x10>)
 8001f36:	f001 ff67 	bl	8003e08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000e4 	.word	0x200000e4

08001f44 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a26      	ldr	r2, [pc, #152]	@ (8001fec <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d120      	bne.n	8001f98 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7f1b      	ldrb	r3, [r3, #28]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d11c      	bne.n	8001f98 <HAL_TIM_PWM_PulseFinishedCallback+0x54>

    	if(buzzer_cnt < 5) {
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d805      	bhi.n	8001f74 <HAL_TIM_PWM_PulseFinishedCallback+0x30>
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 8001f68:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f72:	e003      	b.n	8001f7c <HAL_TIM_PWM_PulseFinishedCallback+0x38>

    	} else {
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001f74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff4 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	635a      	str	r2, [r3, #52]	@ 0x34
    	}

    	buzzer_cnt = buzzer_cnt <= 6 ? buzzer_cnt + 1 : 0;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d805      	bhi.n	8001f92 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	e000      	b.n	8001f94 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
 8001f92:	2300      	movs	r3, #0
 8001f94:	4a16      	ldr	r2, [pc, #88]	@ (8001ff0 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8001f96:	7013      	strb	r3, [r2, #0]
    }

    if(htim->Instance == TIM4) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ff8 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d11d      	bne.n	8001fde <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
    	is_update_lcd = !is_update_lcd;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f083 0301 	eor.w	r3, r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8001fbe:	701a      	strb	r2, [r3, #0]
    	is_update_oled = !is_update_oled;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 8001fdc:	701a      	strb	r2, [r3, #0]
    }
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	2000026c 	.word	0x2000026c
 8001ff4:	200002c0 	.word	0x200002c0
 8001ff8:	40000800 	.word	0x40000800
 8001ffc:	20000246 	.word	0x20000246
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
    if (pin == ENC_BTN_Pin)
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d12a      	bne.n	800206a <HAL_GPIO_EXTI_Callback+0x66>
    {
    	if(HAL_GetTick() - enc_alarm_selection_mode_tick > 70) {
 8002014:	f000 fba4 	bl	8002760 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <HAL_GPIO_EXTI_Callback+0x90>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b46      	cmp	r3, #70	@ 0x46
 8002022:	d932      	bls.n	800208a <HAL_GPIO_EXTI_Callback+0x86>
    		enc_alarm_selection_mode_tick = HAL_GetTick();
 8002024:	f000 fb9c 	bl	8002760 <HAL_GetTick>
 8002028:	4603      	mov	r3, r0
 800202a:	4a1a      	ldr	r2, [pc, #104]	@ (8002094 <HAL_GPIO_EXTI_Callback+0x90>)
 800202c:	6013      	str	r3, [r2, #0]

    		switch(selection_mode) {
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <HAL_GPIO_EXTI_Callback+0x94>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d006      	beq.n	8002044 <HAL_GPIO_EXTI_Callback+0x40>
 8002036:	2b02      	cmp	r3, #2
 8002038:	dc10      	bgt.n	800205c <HAL_GPIO_EXTI_Callback+0x58>
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <HAL_GPIO_EXTI_Callback+0x48>
 800203e:	2b01      	cmp	r3, #1
 8002040:	d008      	beq.n	8002054 <HAL_GPIO_EXTI_Callback+0x50>
 8002042:	e00b      	b.n	800205c <HAL_GPIO_EXTI_Callback+0x58>
				case SELECTION_NONE:
					selection_mode = SELECTION_HOUR;
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <HAL_GPIO_EXTI_Callback+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
					break;
 800204a:	e007      	b.n	800205c <HAL_GPIO_EXTI_Callback+0x58>
				case SELECTION_HOUR:
					selection_mode = SELECTION_MINUTE;
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_GPIO_EXTI_Callback+0x94>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
					break;
 8002052:	e003      	b.n	800205c <HAL_GPIO_EXTI_Callback+0x58>
				case SELECTION_MINUTE:
					selection_mode = SELECTION_NONE;
 8002054:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <HAL_GPIO_EXTI_Callback+0x94>)
 8002056:	2202      	movs	r2, #2
 8002058:	701a      	strb	r2, [r3, #0]
					break;
 800205a:	bf00      	nop
			}
			printf("Mode: %d \n", selection_mode);
 800205c:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <HAL_GPIO_EXTI_Callback+0x94>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	480e      	ldr	r0, [pc, #56]	@ (800209c <HAL_GPIO_EXTI_Callback+0x98>)
 8002064:	f006 fb76 	bl	8008754 <iprintf>
			alarm_info.dismissed = true;
			BUZZER_set_enable(false);

    	}
    }
}
 8002068:	e00f      	b.n	800208a <HAL_GPIO_EXTI_Callback+0x86>
    else if(pin == USER_BTN_Pin) {
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d10c      	bne.n	800208a <HAL_GPIO_EXTI_Callback+0x86>
    	if(alarm_info.enabled) {
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_GPIO_EXTI_Callback+0x86>
    		alarm_info.enabled = false;
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
			alarm_info.dismissed = true;
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002080:	2201      	movs	r2, #1
 8002082:	705a      	strb	r2, [r3, #1]
			BUZZER_set_enable(false);
 8002084:	2000      	movs	r0, #0
 8002086:	f000 fac3 	bl	8002610 <BUZZER_set_enable>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000270 	.word	0x20000270
 8002098:	20000240 	.word	0x20000240
 800209c:	08009734 	.word	0x08009734
 80020a0:	20000244 	.word	0x20000244

080020a4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc_)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	alarm_info.enabled = true;
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
	BUZZER_set_enable(true);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f000 faac 	bl	8002610 <BUZZER_set_enable>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000244 	.word	0x20000244

080020c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e00a      	b.n	80020ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d6:	f3af 8000 	nop.w
 80020da:	4601      	mov	r1, r0
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	60ba      	str	r2, [r7, #8]
 80020e2:	b2ca      	uxtb	r2, r1
 80020e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3301      	adds	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dbf0      	blt.n	80020d6 <_read+0x12>
  }

  return len;
 80020f4:	687b      	ldr	r3, [r7, #4]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e009      	b.n	8002124 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	60ba      	str	r2, [r7, #8]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fb0c 	bl	8001736 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	dbf1      	blt.n	8002110 <_write+0x12>
  }
  return len;
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_close>:

int _close(int file)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800215e:	605a      	str	r2, [r3, #4]
  return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_isatty>:

int _isatty(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a8:	4a14      	ldr	r2, [pc, #80]	@ (80021fc <_sbrk+0x5c>)
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <_sbrk+0x60>)
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b4:	4b13      	ldr	r3, [pc, #76]	@ (8002204 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <_sbrk+0x64>)
 80021be:	4a12      	ldr	r2, [pc, #72]	@ (8002208 <_sbrk+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d207      	bcs.n	80021e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d0:	f006 fb96 	bl	8008900 <__errno>
 80021d4:	4603      	mov	r3, r0
 80021d6:	220c      	movs	r2, #12
 80021d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e009      	b.n	80021f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e0:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <_sbrk+0x64>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20020000 	.word	0x20020000
 8002200:	00000400 	.word	0x00000400
 8002204:	20000274 	.word	0x20000274
 8002208:	200004a0 	.word	0x200004a0

0800220c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <SystemInit+0x20>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	4a05      	ldr	r2, [pc, #20]	@ (800222c <SystemInit+0x20>)
 8002218:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	@ 0x30
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	2224      	movs	r2, #36	@ 0x24
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f006 faff 	bl	8008842 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800224c:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 800224e:	4a25      	ldr	r2, [pc, #148]	@ (80022e4 <MX_TIM1_Init+0xb4>)
 8002250:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002252:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002258:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 8002260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002264:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002266:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800226c:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002272:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002278:	2301      	movs	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002280:	2301      	movs	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002290:	2301      	movs	r3, #1
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4619      	mov	r1, r3
 80022a2:	480f      	ldr	r0, [pc, #60]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 80022a4:	f005 faba 	bl	800781c <HAL_TIM_Encoder_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80022ae:	f7ff fc95 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4808      	ldr	r0, [pc, #32]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 80022c0:	f006 f84e 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80022ca:	f7ff fc87 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80022ce:	213c      	movs	r1, #60	@ 0x3c
 80022d0:	4803      	ldr	r0, [pc, #12]	@ (80022e0 <MX_TIM1_Init+0xb0>)
 80022d2:	f005 fb49 	bl	8007968 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	3730      	adds	r7, #48	@ 0x30
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000278 	.word	0x20000278
 80022e4:	40010000 	.word	0x40010000

080022e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	@ 0x28
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ee:	f107 0320 	add.w	r3, r7, #32
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800230a:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <MX_TIM3_Init+0xac>)
 800230c:	4a22      	ldr	r2, [pc, #136]	@ (8002398 <MX_TIM3_Init+0xb0>)
 800230e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8002310:	4b20      	ldr	r3, [pc, #128]	@ (8002394 <MX_TIM3_Init+0xac>)
 8002312:	2220      	movs	r2, #32
 8002314:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002316:	4b1f      	ldr	r3, [pc, #124]	@ (8002394 <MX_TIM3_Init+0xac>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 800231c:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <MX_TIM3_Init+0xac>)
 800231e:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8002322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <MX_TIM3_Init+0xac>)
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800232a:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <MX_TIM3_Init+0xac>)
 800232c:	2280      	movs	r2, #128	@ 0x80
 800232e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002330:	4818      	ldr	r0, [pc, #96]	@ (8002394 <MX_TIM3_Init+0xac>)
 8002332:	f005 f873 	bl	800741c <HAL_TIM_PWM_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800233c:	f7ff fc4e 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002348:	f107 0320 	add.w	r3, r7, #32
 800234c:	4619      	mov	r1, r3
 800234e:	4811      	ldr	r0, [pc, #68]	@ (8002394 <MX_TIM3_Init+0xac>)
 8002350:	f006 f806 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800235a:	f7ff fc3f 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800235e:	2360      	movs	r3, #96	@ 0x60
 8002360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002362:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	4807      	ldr	r0, [pc, #28]	@ (8002394 <MX_TIM3_Init+0xac>)
 8002378:	f005 fcd0 	bl	8007d1c <HAL_TIM_PWM_ConfigChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002382:	f7ff fc2b 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002386:	4803      	ldr	r0, [pc, #12]	@ (8002394 <MX_TIM3_Init+0xac>)
 8002388:	f000 f908 	bl	800259c <HAL_TIM_MspPostInit>

}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	@ 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200002c0 	.word	0x200002c0
 8002398:	40000400 	.word	0x40000400

0800239c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	@ 0x28
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a2:	f107 0320 	add.w	r3, r7, #32
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	615a      	str	r2, [r3, #20]
 80023bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023be:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <MX_TIM4_Init+0xa8>)
 80023c0:	4a21      	ldr	r2, [pc, #132]	@ (8002448 <MX_TIM4_Init+0xac>)
 80023c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <MX_TIM4_Init+0xa8>)
 80023c6:	2210      	movs	r2, #16
 80023c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <MX_TIM4_Init+0xa8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <MX_TIM4_Init+0xa8>)
 80023d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80023d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <MX_TIM4_Init+0xa8>)
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <MX_TIM4_Init+0xa8>)
 80023e0:	2280      	movs	r2, #128	@ 0x80
 80023e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80023e4:	4817      	ldr	r0, [pc, #92]	@ (8002444 <MX_TIM4_Init+0xa8>)
 80023e6:	f004 fecb 	bl	8007180 <HAL_TIM_OC_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80023f0:	f7ff fbf4 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023fc:	f107 0320 	add.w	r3, r7, #32
 8002400:	4619      	mov	r1, r3
 8002402:	4810      	ldr	r0, [pc, #64]	@ (8002444 <MX_TIM4_Init+0xa8>)
 8002404:	f005 ffac 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800240e:	f7ff fbe5 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8002416:	f241 3388 	movw	r3, #5000	@ 0x1388
 800241a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2200      	movs	r2, #0
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	@ (8002444 <MX_TIM4_Init+0xa8>)
 800242c:	f005 fc1a 	bl	8007c64 <HAL_TIM_OC_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002436:	f7ff fbd1 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	@ 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000308 	.word	0x20000308
 8002448:	40000800 	.word	0x40000800

0800244c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	@ 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a21      	ldr	r2, [pc, #132]	@ (80024f0 <HAL_TIM_Encoder_MspInit+0xa4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d13c      	bne.n	80024e8 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6453      	str	r3, [r2, #68]	@ 0x44
 800247e:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b19      	ldr	r3, [pc, #100]	@ (80024f4 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002494:	f043 0310 	orr.w	r3, r3, #16
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <HAL_TIM_Encoder_MspInit+0xa8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CLK_Pin|ENC1_DATA_Pin;
 80024a6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80024aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4619      	mov	r1, r3
 80024c2:	480d      	ldr	r0, [pc, #52]	@ (80024f8 <HAL_TIM_Encoder_MspInit+0xac>)
 80024c4:	f000 fe3a 	bl	800313c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2100      	movs	r1, #0
 80024cc:	2018      	movs	r0, #24
 80024ce:	f000 fa52 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80024d2:	2018      	movs	r0, #24
 80024d4:	f000 fa6b 	bl	80029ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	2019      	movs	r0, #25
 80024de:	f000 fa4a 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024e2:	2019      	movs	r0, #25
 80024e4:	f000 fa63 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	@ 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40021000 	.word	0x40021000

080024fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <HAL_TIM_PWM_MspInit+0x48>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d115      	bne.n	800253a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <HAL_TIM_PWM_MspInit+0x4c>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a0c      	ldr	r2, [pc, #48]	@ (8002548 <HAL_TIM_PWM_MspInit+0x4c>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <HAL_TIM_PWM_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	201d      	movs	r0, #29
 8002530:	f000 fa21 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002534:	201d      	movs	r0, #29
 8002536:	f000 fa3a 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40000400 	.word	0x40000400
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <HAL_TIM_OC_MspInit+0x48>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d115      	bne.n	800258a <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <HAL_TIM_OC_MspInit+0x4c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a0c      	ldr	r2, [pc, #48]	@ (8002598 <HAL_TIM_OC_MspInit+0x4c>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
 800256e:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <HAL_TIM_OC_MspInit+0x4c>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201e      	movs	r0, #30
 8002580:	f000 f9f9 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002584:	201e      	movs	r0, #30
 8002586:	f000 fa12 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40000800 	.word	0x40000800
 8002598:	40023800 	.word	0x40023800

0800259c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a12      	ldr	r2, [pc, #72]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d11d      	bne.n	80025fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_TIM_MspPostInit+0x6c>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	4a10      	ldr	r2, [pc, #64]	@ (8002608 <HAL_TIM_MspPostInit+0x6c>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002608 <HAL_TIM_MspPostInit+0x6c>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_TIM3_PWM_Pin;
 80025da:	2340      	movs	r3, #64	@ 0x40
 80025dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025ea:	2302      	movs	r3, #2
 80025ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_TIM3_PWM_GPIO_Port, &GPIO_InitStruct);
 80025ee:	f107 030c 	add.w	r3, r7, #12
 80025f2:	4619      	mov	r1, r3
 80025f4:	4805      	ldr	r0, [pc, #20]	@ (800260c <HAL_TIM_MspPostInit+0x70>)
 80025f6:	f000 fda1 	bl	800313c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025fa:	bf00      	nop
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40000400 	.word	0x40000400
 8002608:	40023800 	.word	0x40023800
 800260c:	40020000 	.word	0x40020000

08002610 <BUZZER_set_enable>:
  /* USER CODE END TIM4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void BUZZER_set_enable(bool enable) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
	if(enable) {
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <BUZZER_set_enable+0x1a>
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002620:	2100      	movs	r1, #0
 8002622:	4806      	ldr	r0, [pc, #24]	@ (800263c <BUZZER_set_enable+0x2c>)
 8002624:	f004 ff4a 	bl	80074bc <HAL_TIM_PWM_Start_IT>
	} else {
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
	}
}
 8002628:	e003      	b.n	8002632 <BUZZER_set_enable+0x22>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 800262a:	2100      	movs	r1, #0
 800262c:	4803      	ldr	r0, [pc, #12]	@ (800263c <BUZZER_set_enable+0x2c>)
 800262e:	f005 f843 	bl	80076b8 <HAL_TIM_PWM_Stop_IT>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002c0 	.word	0x200002c0

08002640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002644:	f7ff fde2 	bl	800220c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002648:	480c      	ldr	r0, [pc, #48]	@ (800267c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800264a:	490d      	ldr	r1, [pc, #52]	@ (8002680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800264c:	4a0d      	ldr	r2, [pc, #52]	@ (8002684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002650:	e002      	b.n	8002658 <LoopCopyDataInit>

08002652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002656:	3304      	adds	r3, #4

08002658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800265c:	d3f9      	bcc.n	8002652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265e:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002660:	4c0a      	ldr	r4, [pc, #40]	@ (800268c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002664:	e001      	b.n	800266a <LoopFillZerobss>

08002666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002668:	3204      	adds	r2, #4

0800266a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800266c:	d3fb      	bcc.n	8002666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800266e:	f006 f94d 	bl	800890c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002672:	f7ff f86d 	bl	8001750 <main>
  bx  lr    
 8002676:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800267c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002680:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002684:	08009cb4 	.word	0x08009cb4
  ldr r2, =_sbss
 8002688:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800268c:	200004a0 	.word	0x200004a0

08002690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002690:	e7fe      	b.n	8002690 <ADC_IRQHandler>
	...

08002694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002698:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <HAL_Init+0x40>)
 800269e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <HAL_Init+0x40>)
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b0:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a07      	ldr	r2, [pc, #28]	@ (80026d4 <HAL_Init+0x40>)
 80026b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026bc:	2003      	movs	r0, #3
 80026be:	f000 f94f 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c2:	200f      	movs	r0, #15
 80026c4:	f000 f808 	bl	80026d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c8:	f7ff fb7c 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e0:	4b12      	ldr	r3, [pc, #72]	@ (800272c <HAL_InitTick+0x54>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <HAL_InitTick+0x58>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f967 	bl	80029ca <HAL_SYSTICK_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e00e      	b.n	8002724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d80a      	bhi.n	8002722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270c:	2200      	movs	r2, #0
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f000 f92f 	bl	8002976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002718:	4a06      	ldr	r2, [pc, #24]	@ (8002734 <HAL_InitTick+0x5c>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000004 	.word	0x20000004
 8002730:	2000000c 	.word	0x2000000c
 8002734:	20000008 	.word	0x20000008

08002738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_IncTick+0x20>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_IncTick+0x24>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4413      	add	r3, r2
 8002748:	4a04      	ldr	r2, [pc, #16]	@ (800275c <HAL_IncTick+0x24>)
 800274a:	6013      	str	r3, [r2, #0]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000000c 	.word	0x2000000c
 800275c:	20000350 	.word	0x20000350

08002760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_GetTick+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000350 	.word	0x20000350

08002778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff ffee 	bl	8002760 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d005      	beq.n	800279e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002792:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <HAL_Delay+0x44>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800279e:	bf00      	nop
 80027a0:	f7ff ffde 	bl	8002760 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d8f7      	bhi.n	80027a0 <HAL_Delay+0x28>
  {
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000000c 	.word	0x2000000c

080027c0 <__NVIC_SetPriorityGrouping>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f2:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	60d3      	str	r3, [r2, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_GetPriorityGrouping>:
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_EnableIRQ>:
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db0b      	blt.n	800284e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	4907      	ldr	r1, [pc, #28]	@ (800285c <__NVIC_EnableIRQ+0x38>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2001      	movs	r0, #1
 8002846:	fa00 f202 	lsl.w	r2, r0, r2
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000e100 	.word	0xe000e100

08002860 <__NVIC_SetPriority>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	db0a      	blt.n	800288a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	490c      	ldr	r1, [pc, #48]	@ (80028ac <__NVIC_SetPriority+0x4c>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	440b      	add	r3, r1
 8002884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002888:	e00a      	b.n	80028a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4908      	ldr	r1, [pc, #32]	@ (80028b0 <__NVIC_SetPriority+0x50>)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	3b04      	subs	r3, #4
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	440b      	add	r3, r1
 800289e:	761a      	strb	r2, [r3, #24]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000e100 	.word	0xe000e100
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <NVIC_EncodePriority>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f1c3 0307 	rsb	r3, r3, #7
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	bf28      	it	cs
 80028d2:	2304      	movcs	r3, #4
 80028d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3304      	adds	r3, #4
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d902      	bls.n	80028e4 <NVIC_EncodePriority+0x30>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3b03      	subs	r3, #3
 80028e2:	e000      	b.n	80028e6 <NVIC_EncodePriority+0x32>
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	401a      	ands	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43d9      	mvns	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	4313      	orrs	r3, r2
}
 800290e:	4618      	mov	r0, r3
 8002910:	3724      	adds	r7, #36	@ 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <SysTick_Config>:
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800292c:	d301      	bcc.n	8002932 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800292e:	2301      	movs	r3, #1
 8002930:	e00f      	b.n	8002952 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002932:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <SysTick_Config+0x40>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293a:	210f      	movs	r1, #15
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f7ff ff8e 	bl	8002860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002944:	4b05      	ldr	r3, [pc, #20]	@ (800295c <SysTick_Config+0x40>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294a:	4b04      	ldr	r3, [pc, #16]	@ (800295c <SysTick_Config+0x40>)
 800294c:	2207      	movs	r2, #7
 800294e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000e010 	.word	0xe000e010

08002960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff29 	bl	80027c0 <__NVIC_SetPriorityGrouping>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff3e 	bl	8002808 <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff8e 	bl	80028b4 <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff5d 	bl	8002860 <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff31 	bl	8002824 <__NVIC_EnableIRQ>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ffa2 	bl	800291c <SysTick_Config>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff feb6 	bl	8002760 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e099      	b.n	8002b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a20:	e00f      	b.n	8002a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a22:	f7ff fe9d 	bl	8002760 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d908      	bls.n	8002a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e078      	b.n	8002b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e8      	bne.n	8002a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4b38      	ldr	r3, [pc, #224]	@ (8002b3c <HAL_DMA_Init+0x158>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d107      	bne.n	8002aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0307 	bic.w	r3, r3, #7
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d117      	bne.n	8002b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00e      	beq.n	8002b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 faab 	bl	8003044 <DMA_CheckFifoParam>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b02:	2301      	movs	r3, #1
 8002b04:	e016      	b.n	8002b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fa62 	bl	8002fd8 <DMA_CalcBaseAndBitshift>
 8002b14:	4603      	mov	r3, r0
 8002b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1c:	223f      	movs	r2, #63	@ 0x3f
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	f010803f 	.word	0xf010803f

08002b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA_Start_IT+0x26>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e040      	b.n	8002be8 <HAL_DMA_Start_IT+0xa8>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d12f      	bne.n	8002bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f9f4 	bl	8002f7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b98:	223f      	movs	r2, #63	@ 0x3f
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0216 	orr.w	r2, r2, #22
 8002bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0208 	orr.w	r2, r2, #8
 8002bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e005      	b.n	8002be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
 8002be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2280      	movs	r2, #128	@ 0x80
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00c      	b.n	8002c28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2205      	movs	r2, #5
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c40:	4b8e      	ldr	r3, [pc, #568]	@ (8002e7c <HAL_DMA_IRQHandler+0x248>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a8e      	ldr	r2, [pc, #568]	@ (8002e80 <HAL_DMA_IRQHandler+0x24c>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5e:	2208      	movs	r2, #8
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01a      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cce:	f043 0202 	orr.w	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cda:	2204      	movs	r2, #4
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f043 0204 	orr.w	r2, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d10:	2210      	movs	r2, #16
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d043      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d03c      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	2210      	movs	r2, #16
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d018      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d024      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
 8002d62:	e01f      	b.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
 8002d74:	e016      	b.n	8002da4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0208 	bic.w	r2, r2, #8
 8002d92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da8:	2220      	movs	r2, #32
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 808f 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8087 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	2220      	movs	r2, #32
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d136      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0216 	bic.w	r2, r2, #22
 8002dec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x1da>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0208 	bic.w	r2, r2, #8
 8002e1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	223f      	movs	r2, #63	@ 0x3f
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d07e      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
        }
        return;
 8002e4a:	e079      	b.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01d      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d031      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
 8002e78:	e02c      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
 8002e7a:	bf00      	nop
 8002e7c:	20000004 	.word	0x20000004
 8002e80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d023      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
 8002e94:	e01e      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0210 	bic.w	r2, r2, #16
 8002eb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d032      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d022      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2205      	movs	r2, #5
 8002eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d307      	bcc.n	8002f1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f2      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x2cc>
 8002f1a:	e000      	b.n	8002f1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
 8002f3e:	e000      	b.n	8002f42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f40:	bf00      	nop
    }
  }
}
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f56:	b2db      	uxtb	r3, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b40      	cmp	r3, #64	@ 0x40
 8002fa8:	d108      	bne.n	8002fbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fba:	e007      	b.n	8002fcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	60da      	str	r2, [r3, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3b10      	subs	r3, #16
 8002fe8:	4a14      	ldr	r2, [pc, #80]	@ (800303c <DMA_CalcBaseAndBitshift+0x64>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ff2:	4a13      	ldr	r2, [pc, #76]	@ (8003040 <DMA_CalcBaseAndBitshift+0x68>)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d909      	bls.n	800301a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	1d1a      	adds	r2, r3, #4
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	659a      	str	r2, [r3, #88]	@ 0x58
 8003018:	e007      	b.n	800302a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	aaaaaaab 	.word	0xaaaaaaab
 8003040:	08009c68 	.word	0x08009c68

08003044 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003054:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d11f      	bne.n	800309e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d856      	bhi.n	8003112 <DMA_CheckFifoParam+0xce>
 8003064:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <DMA_CheckFifoParam+0x28>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	0800307d 	.word	0x0800307d
 8003070:	0800308f 	.word	0x0800308f
 8003074:	0800307d 	.word	0x0800307d
 8003078:	08003113 	.word	0x08003113
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d046      	beq.n	8003116 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308c:	e043      	b.n	8003116 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003096:	d140      	bne.n	800311a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309c:	e03d      	b.n	800311a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030a6:	d121      	bne.n	80030ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d837      	bhi.n	800311e <DMA_CheckFifoParam+0xda>
 80030ae:	a201      	add	r2, pc, #4	@ (adr r2, 80030b4 <DMA_CheckFifoParam+0x70>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	080030c5 	.word	0x080030c5
 80030b8:	080030cb 	.word	0x080030cb
 80030bc:	080030c5 	.word	0x080030c5
 80030c0:	080030dd 	.word	0x080030dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
      break;
 80030c8:	e030      	b.n	800312c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d025      	beq.n	8003122 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030da:	e022      	b.n	8003122 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030e4:	d11f      	bne.n	8003126 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ea:	e01c      	b.n	8003126 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d903      	bls.n	80030fa <DMA_CheckFifoParam+0xb6>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d003      	beq.n	8003100 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030f8:	e018      	b.n	800312c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      break;
 80030fe:	e015      	b.n	800312c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00e      	beq.n	800312a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e00b      	b.n	800312a <DMA_CheckFifoParam+0xe6>
      break;
 8003112:	bf00      	nop
 8003114:	e00a      	b.n	800312c <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e008      	b.n	800312c <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e006      	b.n	800312c <DMA_CheckFifoParam+0xe8>
      break;
 800311e:	bf00      	nop
 8003120:	e004      	b.n	800312c <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <DMA_CheckFifoParam+0xe8>
      break;   
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
    }
  } 
  
  return status; 
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	@ 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	e159      	b.n	800340c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003158:	2201      	movs	r2, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	429a      	cmp	r2, r3
 8003172:	f040 8148 	bne.w	8003406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d005      	beq.n	800318e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318a:	2b02      	cmp	r3, #2
 800318c:	d130      	bne.n	80031f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 0201 	and.w	r2, r3, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d017      	beq.n	800322c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d123      	bne.n	8003280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3208      	adds	r2, #8
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	08da      	lsrs	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3208      	adds	r2, #8
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a2 	beq.w	8003406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b57      	ldr	r3, [pc, #348]	@ (8003424 <HAL_GPIO_Init+0x2e8>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	4a56      	ldr	r2, [pc, #344]	@ (8003424 <HAL_GPIO_Init+0x2e8>)
 80032cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032d2:	4b54      	ldr	r3, [pc, #336]	@ (8003424 <HAL_GPIO_Init+0x2e8>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032de:	4a52      	ldr	r2, [pc, #328]	@ (8003428 <HAL_GPIO_Init+0x2ec>)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3302      	adds	r3, #2
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a49      	ldr	r2, [pc, #292]	@ (800342c <HAL_GPIO_Init+0x2f0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d019      	beq.n	800333e <HAL_GPIO_Init+0x202>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a48      	ldr	r2, [pc, #288]	@ (8003430 <HAL_GPIO_Init+0x2f4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_GPIO_Init+0x1fe>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a47      	ldr	r2, [pc, #284]	@ (8003434 <HAL_GPIO_Init+0x2f8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_Init+0x1fa>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a46      	ldr	r2, [pc, #280]	@ (8003438 <HAL_GPIO_Init+0x2fc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x1f6>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a45      	ldr	r2, [pc, #276]	@ (800343c <HAL_GPIO_Init+0x300>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_Init+0x1f2>
 800332a:	2304      	movs	r3, #4
 800332c:	e008      	b.n	8003340 <HAL_GPIO_Init+0x204>
 800332e:	2307      	movs	r3, #7
 8003330:	e006      	b.n	8003340 <HAL_GPIO_Init+0x204>
 8003332:	2303      	movs	r3, #3
 8003334:	e004      	b.n	8003340 <HAL_GPIO_Init+0x204>
 8003336:	2302      	movs	r3, #2
 8003338:	e002      	b.n	8003340 <HAL_GPIO_Init+0x204>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_GPIO_Init+0x204>
 800333e:	2300      	movs	r3, #0
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	f002 0203 	and.w	r2, r2, #3
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	4093      	lsls	r3, r2
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003350:	4935      	ldr	r1, [pc, #212]	@ (8003428 <HAL_GPIO_Init+0x2ec>)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3302      	adds	r3, #2
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335e:	4b38      	ldr	r3, [pc, #224]	@ (8003440 <HAL_GPIO_Init+0x304>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003382:	4a2f      	ldr	r2, [pc, #188]	@ (8003440 <HAL_GPIO_Init+0x304>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003388:	4b2d      	ldr	r3, [pc, #180]	@ (8003440 <HAL_GPIO_Init+0x304>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ac:	4a24      	ldr	r2, [pc, #144]	@ (8003440 <HAL_GPIO_Init+0x304>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033b2:	4b23      	ldr	r3, [pc, #140]	@ (8003440 <HAL_GPIO_Init+0x304>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003440 <HAL_GPIO_Init+0x304>)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033dc:	4b18      	ldr	r3, [pc, #96]	@ (8003440 <HAL_GPIO_Init+0x304>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003400:	4a0f      	ldr	r2, [pc, #60]	@ (8003440 <HAL_GPIO_Init+0x304>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3301      	adds	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	f67f aea2 	bls.w	8003158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3724      	adds	r7, #36	@ 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	40013800 	.word	0x40013800
 800342c:	40020000 	.word	0x40020000
 8003430:	40020400 	.word	0x40020400
 8003434:	40020800 	.word	0x40020800
 8003438:	40020c00 	.word	0x40020c00
 800343c:	40021000 	.word	0x40021000
 8003440:	40013c00 	.word	0x40013c00

08003444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
 8003450:	4613      	mov	r3, r2
 8003452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003454:	787b      	ldrb	r3, [r7, #1]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003460:	e003      	b.n	800346a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003462:	887b      	ldrh	r3, [r7, #2]
 8003464:	041a      	lsls	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	619a      	str	r2, [r3, #24]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348e:	4a05      	ldr	r2, [pc, #20]	@ (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fdb4 	bl	8002004 <HAL_GPIO_EXTI_Callback>
  }
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e12b      	b.n	8003712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd ff0a 	bl	80012e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	@ 0x24
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800350a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800350c:	f003 f896 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8003510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a81      	ldr	r2, [pc, #516]	@ (800371c <HAL_I2C_Init+0x274>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d807      	bhi.n	800352c <HAL_I2C_Init+0x84>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a80      	ldr	r2, [pc, #512]	@ (8003720 <HAL_I2C_Init+0x278>)
 8003520:	4293      	cmp	r3, r2
 8003522:	bf94      	ite	ls
 8003524:	2301      	movls	r3, #1
 8003526:	2300      	movhi	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e006      	b.n	800353a <HAL_I2C_Init+0x92>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a7d      	ldr	r2, [pc, #500]	@ (8003724 <HAL_I2C_Init+0x27c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	bf94      	ite	ls
 8003534:	2301      	movls	r3, #1
 8003536:	2300      	movhi	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0e7      	b.n	8003712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a78      	ldr	r2, [pc, #480]	@ (8003728 <HAL_I2C_Init+0x280>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	0c9b      	lsrs	r3, r3, #18
 800354c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a6a      	ldr	r2, [pc, #424]	@ (800371c <HAL_I2C_Init+0x274>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d802      	bhi.n	800357c <HAL_I2C_Init+0xd4>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3301      	adds	r3, #1
 800357a:	e009      	b.n	8003590 <HAL_I2C_Init+0xe8>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	4a69      	ldr	r2, [pc, #420]	@ (800372c <HAL_I2C_Init+0x284>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	3301      	adds	r3, #1
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	430b      	orrs	r3, r1
 8003596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	495c      	ldr	r1, [pc, #368]	@ (800371c <HAL_I2C_Init+0x274>)
 80035ac:	428b      	cmp	r3, r1
 80035ae:	d819      	bhi.n	80035e4 <HAL_I2C_Init+0x13c>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e59      	subs	r1, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80035be:	1c59      	adds	r1, r3, #1
 80035c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035c4:	400b      	ands	r3, r1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_I2C_Init+0x138>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1e59      	subs	r1, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035de:	e051      	b.n	8003684 <HAL_I2C_Init+0x1dc>
 80035e0:	2304      	movs	r3, #4
 80035e2:	e04f      	b.n	8003684 <HAL_I2C_Init+0x1dc>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d111      	bne.n	8003610 <HAL_I2C_Init+0x168>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1e58      	subs	r0, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	440b      	add	r3, r1
 80035fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fe:	3301      	adds	r3, #1
 8003600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e012      	b.n	8003636 <HAL_I2C_Init+0x18e>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1e58      	subs	r0, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	0099      	lsls	r1, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	fbb0 f3f3 	udiv	r3, r0, r3
 8003626:	3301      	adds	r3, #1
 8003628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Init+0x196>
 800363a:	2301      	movs	r3, #1
 800363c:	e022      	b.n	8003684 <HAL_I2C_Init+0x1dc>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <HAL_I2C_Init+0x1bc>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1e58      	subs	r0, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	440b      	add	r3, r1
 8003654:	fbb0 f3f3 	udiv	r3, r0, r3
 8003658:	3301      	adds	r3, #1
 800365a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003662:	e00f      	b.n	8003684 <HAL_I2C_Init+0x1dc>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1e58      	subs	r0, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	0099      	lsls	r1, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	fbb0 f3f3 	udiv	r3, r0, r3
 800367a:	3301      	adds	r3, #1
 800367c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	6809      	ldr	r1, [r1, #0]
 8003688:	4313      	orrs	r3, r2
 800368a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69da      	ldr	r2, [r3, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6911      	ldr	r1, [r2, #16]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68d2      	ldr	r2, [r2, #12]
 80036be:	4311      	orrs	r1, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	000186a0 	.word	0x000186a0
 8003720:	001e847f 	.word	0x001e847f
 8003724:	003d08ff 	.word	0x003d08ff
 8003728:	431bde83 	.word	0x431bde83
 800372c:	10624dd3 	.word	0x10624dd3

08003730 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003742:	2b80      	cmp	r3, #128	@ 0x80
 8003744:	d103      	bne.n	800374e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  }
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	461a      	mov	r2, r3
 8003768:	460b      	mov	r3, r1
 800376a:	817b      	strh	r3, [r7, #10]
 800376c:	4613      	mov	r3, r2
 800376e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003770:	f7fe fff6 	bl	8002760 <HAL_GetTick>
 8003774:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b20      	cmp	r3, #32
 8003780:	f040 80e0 	bne.w	8003944 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2319      	movs	r3, #25
 800378a:	2201      	movs	r2, #1
 800378c:	4970      	ldr	r1, [pc, #448]	@ (8003950 <HAL_I2C_Master_Transmit+0x1f4>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f002 f8fe 	bl	8005990 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	e0d3      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_I2C_Master_Transmit+0x50>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0cc      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d007      	beq.n	80037d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0201 	orr.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2221      	movs	r2, #33	@ 0x21
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2210      	movs	r2, #16
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	893a      	ldrh	r2, [r7, #8]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a50      	ldr	r2, [pc, #320]	@ (8003954 <HAL_I2C_Master_Transmit+0x1f8>)
 8003812:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003814:	8979      	ldrh	r1, [r7, #10]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f001 fddc 	bl	80053d8 <I2C_MasterRequestWrite>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e08d      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003840:	e066      	b.n	8003910 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	6a39      	ldr	r1, [r7, #32]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f002 f9bc 	bl	8005bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00d      	beq.n	800386e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	2b04      	cmp	r3, #4
 8003858:	d107      	bne.n	800386a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003868:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e06b      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d11b      	bne.n	80038e4 <HAL_I2C_Master_Transmit+0x188>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d017      	beq.n	80038e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	6a39      	ldr	r1, [r7, #32]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f002 f9b3 	bl	8005c54 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d107      	bne.n	800390c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e01a      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d194      	bne.n	8003842 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	00100002 	.word	0x00100002
 8003954:	ffff0000 	.word	0xffff0000

08003958 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	461a      	mov	r2, r3
 8003966:	4603      	mov	r3, r0
 8003968:	817b      	strh	r3, [r7, #10]
 800396a:	460b      	mov	r3, r1
 800396c:	813b      	strh	r3, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003972:	f7fe fef5 	bl	8002760 <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b20      	cmp	r3, #32
 8003982:	f040 80d9 	bne.w	8003b38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2319      	movs	r3, #25
 800398c:	2201      	movs	r2, #1
 800398e:	496d      	ldr	r1, [pc, #436]	@ (8003b44 <HAL_I2C_Mem_Write+0x1ec>)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f001 fffd 	bl	8005990 <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
 800399e:	e0cc      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_I2C_Mem_Write+0x56>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e0c5      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d007      	beq.n	80039d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2221      	movs	r2, #33	@ 0x21
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2240      	movs	r2, #64	@ 0x40
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a4d      	ldr	r2, [pc, #308]	@ (8003b48 <HAL_I2C_Mem_Write+0x1f0>)
 8003a14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a16:	88f8      	ldrh	r0, [r7, #6]
 8003a18:	893a      	ldrh	r2, [r7, #8]
 8003a1a:	8979      	ldrh	r1, [r7, #10]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	4603      	mov	r3, r0
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f001 fd58 	bl	80054dc <I2C_RequestMemoryWrite>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d052      	beq.n	8003ad8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e081      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f002 f8c2 	bl	8005bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d107      	bne.n	8003a5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e06b      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_I2C_Mem_Write+0x180>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d017      	beq.n	8003ad8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1aa      	bne.n	8003a36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f002 f8b5 	bl	8005c54 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d107      	bne.n	8003b08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e016      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	00100002 	.word	0x00100002
 8003b48:	ffff0000 	.word	0xffff0000

08003b4c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	@ 0x28
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	813b      	strh	r3, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b6a:	f7fe fdf9 	bl	8002760 <HAL_GetTick>
 8003b6e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	f040 8136 	bne.w	8003dea <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b7e:	4b9d      	ldr	r3, [pc, #628]	@ (8003df4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	08db      	lsrs	r3, r3, #3
 8003b84:	4a9c      	ldr	r2, [pc, #624]	@ (8003df8 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0a1a      	lsrs	r2, r3, #8
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	009a      	lsls	r2, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d112      	bne.n	8003bca <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e110      	b.n	8003dec <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d0df      	beq.n	8003b98 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_I2C_Mem_Write_DMA+0x9a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e102      	b.n	8003dec <HAL_I2C_Mem_Write_DMA+0x2a0>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d007      	beq.n	8003c0c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2221      	movs	r2, #33	@ 0x21
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2240      	movs	r2, #64	@ 0x40
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a6c      	ldr	r2, [pc, #432]	@ (8003dfc <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003c4e:	897a      	ldrh	r2, [r7, #10]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003c54:	893a      	ldrh	r2, [r7, #8]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a9 	beq.w	8003dc2 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d02a      	beq.n	8003cce <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7c:	4a60      	ldr	r2, [pc, #384]	@ (8003e00 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8003c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c84:	4a5f      	ldr	r2, [pc, #380]	@ (8003e04 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8003c86:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c94:	2200      	movs	r2, #0
 8003c96:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3310      	adds	r3, #16
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbe:	f7fe ff3f 	bl	8002b40 <HAL_DMA_Start_IT>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003cc6:	7efb      	ldrb	r3, [r7, #27]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d166      	bne.n	8003d9a <HAL_I2C_Mem_Write_DMA+0x24e>
 8003ccc:	e013      	b.n	8003cf6 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e07a      	b.n	8003dec <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003cf6:	88f8      	ldrh	r0, [r7, #6]
 8003cf8:	893a      	ldrh	r2, [r7, #8]
 8003cfa:	8979      	ldrh	r1, [r7, #10]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	2323      	movs	r3, #35	@ 0x23
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	4603      	mov	r3, r0
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f001 fbe8 	bl	80054dc <I2C_RequestMemoryWrite>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d022      	beq.n	8003d58 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe ff6a 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d24:	2200      	movs	r2, #0
 8003d26:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d36:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e049      	b.n	8003dec <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d84:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d94:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	e028      	b.n	8003dec <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	f043 0210 	orr.w	r2, r3, #16
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e014      	b.n	8003dec <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
  }
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000004 	.word	0x20000004
 8003df8:	14f8b589 	.word	0x14f8b589
 8003dfc:	ffff0000 	.word	0xffff0000
 8003e00:	08005609 	.word	0x08005609
 8003e04:	080057c7 	.word	0x080057c7

08003e08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d003      	beq.n	8003e40 <HAL_I2C_EV_IRQHandler+0x38>
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b40      	cmp	r3, #64	@ 0x40
 8003e3c:	f040 80c1 	bne.w	8003fc2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <HAL_I2C_EV_IRQHandler+0x6e>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003e60:	d003      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x62>
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003e68:	d101      	bne.n	8003e6e <HAL_I2C_EV_IRQHandler+0x66>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <HAL_I2C_EV_IRQHandler+0x68>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	f000 8132 	beq.w	80040da <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_I2C_EV_IRQHandler+0x92>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	0a5b      	lsrs	r3, r3, #9
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f001 ff8a 	bl	8005da6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fcf4 	bl	8004880 <I2C_Master_SB>
 8003e98:	e092      	b.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	08db      	lsrs	r3, r3, #3
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0xb2>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	0a5b      	lsrs	r3, r3, #9
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fd6a 	bl	800498c <I2C_Master_ADD10>
 8003eb8:	e082      	b.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0xd2>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	0a5b      	lsrs	r3, r3, #9
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fd84 	bl	80049e0 <I2C_Master_ADDR>
 8003ed8:	e072      	b.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03b      	beq.n	8003f5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef4:	f000 80f3 	beq.w	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	09db      	lsrs	r3, r3, #7
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00f      	beq.n	8003f24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	0a9b      	lsrs	r3, r3, #10
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	089b      	lsrs	r3, r3, #2
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f94c 	bl	80041ba <I2C_MasterTransmit_TXE>
 8003f22:	e04d      	b.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	089b      	lsrs	r3, r3, #2
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80d6 	beq.w	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	0a5b      	lsrs	r3, r3, #9
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80cf 	beq.w	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f40:	7bbb      	ldrb	r3, [r7, #14]
 8003f42:	2b21      	cmp	r3, #33	@ 0x21
 8003f44:	d103      	bne.n	8003f4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f9d3 	bl	80042f2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f4c:	e0c7      	b.n	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	f040 80c4 	bne.w	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa41 	bl	80043de <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f5c:	e0bf      	b.n	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f6c:	f000 80b7 	beq.w	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00f      	beq.n	8003f9c <HAL_I2C_EV_IRQHandler+0x194>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	0a9b      	lsrs	r3, r3, #10
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HAL_I2C_EV_IRQHandler+0x194>
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 faba 	bl	800450e <I2C_MasterReceive_RXNE>
 8003f9a:	e011      	b.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 809a 	beq.w	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	0a5b      	lsrs	r3, r3, #9
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8093 	beq.w	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fb70 	bl	800469e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fbe:	e08e      	b.n	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
 8003fc0:	e08d      	b.n	80040de <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e007      	b.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d012      	beq.n	8004016 <HAL_I2C_EV_IRQHandler+0x20e>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	0a5b      	lsrs	r3, r3, #9
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00c      	beq.n	8004016 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800400c:	69b9      	ldr	r1, [r7, #24]
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 ff35 	bl	8004e7e <I2C_Slave_ADDR>
 8004014:	e066      	b.n	80040e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_I2C_EV_IRQHandler+0x22e>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	0a5b      	lsrs	r3, r3, #9
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 ff70 	bl	8004f14 <I2C_Slave_STOPF>
 8004034:	e056      	b.n	80040e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004036:	7bbb      	ldrb	r3, [r7, #14]
 8004038:	2b21      	cmp	r3, #33	@ 0x21
 800403a:	d002      	beq.n	8004042 <HAL_I2C_EV_IRQHandler+0x23a>
 800403c:	7bbb      	ldrb	r3, [r7, #14]
 800403e:	2b29      	cmp	r3, #41	@ 0x29
 8004040:	d125      	bne.n	800408e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	09db      	lsrs	r3, r3, #7
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00f      	beq.n	800406e <HAL_I2C_EV_IRQHandler+0x266>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	0a9b      	lsrs	r3, r3, #10
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_I2C_EV_IRQHandler+0x266>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fe4b 	bl	8004d02 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800406c:	e039      	b.n	80040e2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d033      	beq.n	80040e2 <HAL_I2C_EV_IRQHandler+0x2da>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	0a5b      	lsrs	r3, r3, #9
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d02d      	beq.n	80040e2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fe78 	bl	8004d7c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800408c:	e029      	b.n	80040e2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	099b      	lsrs	r3, r3, #6
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00f      	beq.n	80040ba <HAL_I2C_EV_IRQHandler+0x2b2>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	0a9b      	lsrs	r3, r3, #10
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_I2C_EV_IRQHandler+0x2b2>
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fe83 	bl	8004dbe <I2C_SlaveReceive_RXNE>
 80040b8:	e014      	b.n	80040e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00e      	beq.n	80040e4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	0a5b      	lsrs	r3, r3, #9
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 feb1 	bl	8004e3a <I2C_SlaveReceive_BTF>
 80040d8:	e004      	b.n	80040e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040e2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	70fb      	strb	r3, [r7, #3]
 8004146:	4613      	mov	r3, r2
 8004148:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041d0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d150      	bne.n	8004282 <I2C_MasterTransmit_TXE+0xc8>
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b21      	cmp	r3, #33	@ 0x21
 80041e4:	d14d      	bne.n	8004282 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d01d      	beq.n	8004228 <I2C_MasterTransmit_TXE+0x6e>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d01a      	beq.n	8004228 <I2C_MasterTransmit_TXE+0x6e>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041f8:	d016      	beq.n	8004228 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004208:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2211      	movs	r2, #17
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ff62 	bl	80040ea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004226:	e060      	b.n	80042ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004236:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004246:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b40      	cmp	r3, #64	@ 0x40
 8004260:	d107      	bne.n	8004272 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff ff7d 	bl	800416a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004270:	e03b      	b.n	80042ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ff35 	bl	80040ea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004280:	e033      	b.n	80042ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	2b21      	cmp	r3, #33	@ 0x21
 8004286:	d005      	beq.n	8004294 <I2C_MasterTransmit_TXE+0xda>
 8004288:	7bbb      	ldrb	r3, [r7, #14]
 800428a:	2b40      	cmp	r3, #64	@ 0x40
 800428c:	d12d      	bne.n	80042ea <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b22      	cmp	r3, #34	@ 0x22
 8004292:	d12a      	bne.n	80042ea <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80042ae:	e01c      	b.n	80042ea <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d103      	bne.n	80042c4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f88e 	bl	80043de <I2C_MemoryTransmit_TXE_BTF>
}
 80042c2:	e012      	b.n	80042ea <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042e8:	e7ff      	b.n	80042ea <I2C_MasterTransmit_TXE+0x130>
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b21      	cmp	r3, #33	@ 0x21
 800430a:	d164      	bne.n	80043d6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d012      	beq.n	800433c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800433a:	e04c      	b.n	80043d6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b08      	cmp	r3, #8
 8004340:	d01d      	beq.n	800437e <I2C_MasterTransmit_BTF+0x8c>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b20      	cmp	r3, #32
 8004346:	d01a      	beq.n	800437e <I2C_MasterTransmit_BTF+0x8c>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800434e:	d016      	beq.n	800437e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800435e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2211      	movs	r2, #17
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff feb7 	bl	80040ea <HAL_I2C_MasterTxCpltCallback>
}
 800437c:	e02b      	b.n	80043d6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800438c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b40      	cmp	r3, #64	@ 0x40
 80043b6:	d107      	bne.n	80043c8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fed2 	bl	800416a <HAL_I2C_MemTxCpltCallback>
}
 80043c6:	e006      	b.n	80043d6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fe8a 	bl	80040ea <HAL_I2C_MasterTxCpltCallback>
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d11d      	bne.n	8004432 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d10b      	bne.n	8004416 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004402:	b2da      	uxtb	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004414:	e077      	b.n	8004506 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800441a:	b29b      	uxth	r3, r3
 800441c:	121b      	asrs	r3, r3, #8
 800441e:	b2da      	uxtb	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004430:	e069      	b.n	8004506 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10b      	bne.n	8004452 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443e:	b2da      	uxtb	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004450:	e059      	b.n	8004506 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004456:	2b02      	cmp	r3, #2
 8004458:	d152      	bne.n	8004500 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	2b22      	cmp	r3, #34	@ 0x22
 800445e:	d10d      	bne.n	800447c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800446e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800447a:	e044      	b.n	8004506 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d015      	beq.n	80044b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b21      	cmp	r3, #33	@ 0x21
 800448a:	d112      	bne.n	80044b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	781a      	ldrb	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80044b0:	e029      	b.n	8004506 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d124      	bne.n	8004506 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b21      	cmp	r3, #33	@ 0x21
 80044c0:	d121      	bne.n	8004506 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044d0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fe36 	bl	800416a <HAL_I2C_MemTxCpltCallback>
}
 80044fe:	e002      	b.n	8004506 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff f915 	bl	8003730 <I2C_Flush_DR>
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b22      	cmp	r3, #34	@ 0x22
 8004520:	f040 80b9 	bne.w	8004696 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d921      	bls.n	800457c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b03      	cmp	r3, #3
 8004566:	f040 8096 	bne.w	8004696 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004578:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800457a:	e08c      	b.n	8004696 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	2b02      	cmp	r3, #2
 8004582:	d07f      	beq.n	8004684 <I2C_MasterReceive_RXNE+0x176>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d002      	beq.n	8004590 <I2C_MasterReceive_RXNE+0x82>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d179      	bne.n	8004684 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f001 fba7 	bl	8005ce4 <I2C_WaitOnSTOPRequestThroughIT>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d14c      	bne.n	8004636 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b40      	cmp	r3, #64	@ 0x40
 80045f4:	d10a      	bne.n	800460c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff fdba 	bl	800417e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800460a:	e044      	b.n	8004696 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b08      	cmp	r3, #8
 8004618:	d002      	beq.n	8004620 <I2C_MasterReceive_RXNE+0x112>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b20      	cmp	r3, #32
 800461e:	d103      	bne.n	8004628 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	@ 0x30
 8004626:	e002      	b.n	800462e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2212      	movs	r2, #18
 800462c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff fd65 	bl	80040fe <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004634:	e02f      	b.n	8004696 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004644:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff fd88 	bl	8004192 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004682:	e008      	b.n	8004696 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004692:	605a      	str	r2, [r3, #4]
}
 8004694:	e7ff      	b.n	8004696 <I2C_MasterReceive_RXNE+0x188>
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d11b      	bne.n	80046ee <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80046ec:	e0c4      	b.n	8004878 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d129      	bne.n	800474c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004706:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d00a      	beq.n	8004724 <I2C_MasterReceive_BTF+0x86>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d007      	beq.n	8004724 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004722:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800474a:	e095      	b.n	8004878 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d17d      	bne.n	8004852 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d002      	beq.n	8004762 <I2C_MasterReceive_BTF+0xc4>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b10      	cmp	r3, #16
 8004760:	d108      	bne.n	8004774 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e016      	b.n	80047a2 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b04      	cmp	r3, #4
 8004778:	d002      	beq.n	8004780 <I2C_MasterReceive_BTF+0xe2>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d108      	bne.n	8004792 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e007      	b.n	80047a2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b40      	cmp	r3, #64	@ 0x40
 8004810:	d10a      	bne.n	8004828 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff fcac 	bl	800417e <HAL_I2C_MemRxCpltCallback>
}
 8004826:	e027      	b.n	8004878 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b08      	cmp	r3, #8
 8004834:	d002      	beq.n	800483c <I2C_MasterReceive_BTF+0x19e>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b20      	cmp	r3, #32
 800483a:	d103      	bne.n	8004844 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	@ 0x30
 8004842:	e002      	b.n	800484a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2212      	movs	r2, #18
 8004848:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff fc57 	bl	80040fe <HAL_I2C_MasterRxCpltCallback>
}
 8004850:	e012      	b.n	8004878 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b40      	cmp	r3, #64	@ 0x40
 8004892:	d117      	bne.n	80048c4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048ac:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80048ae:	e067      	b.n	8004980 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	611a      	str	r2, [r3, #16]
}
 80048c2:	e05d      	b.n	8004980 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048cc:	d133      	bne.n	8004936 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b21      	cmp	r3, #33	@ 0x21
 80048d8:	d109      	bne.n	80048ee <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048ea:	611a      	str	r2, [r3, #16]
 80048ec:	e008      	b.n	8004900 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <I2C_Master_SB+0x92>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d108      	bne.n	8004924 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	2b00      	cmp	r3, #0
 8004918:	d032      	beq.n	8004980 <I2C_Master_SB+0x100>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d02d      	beq.n	8004980 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004932:	605a      	str	r2, [r3, #4]
}
 8004934:	e024      	b.n	8004980 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10e      	bne.n	800495c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004942:	b29b      	uxth	r3, r3
 8004944:	11db      	asrs	r3, r3, #7
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f003 0306 	and.w	r3, r3, #6
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f063 030f 	orn	r3, r3, #15
 8004952:	b2da      	uxtb	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	611a      	str	r2, [r3, #16]
}
 800495a:	e011      	b.n	8004980 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004960:	2b01      	cmp	r3, #1
 8004962:	d10d      	bne.n	8004980 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004968:	b29b      	uxth	r3, r3
 800496a:	11db      	asrs	r3, r3, #7
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 0306 	and.w	r3, r3, #6
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f063 030e 	orn	r3, r3, #14
 8004978:	b2da      	uxtb	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	611a      	str	r2, [r3, #16]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004998:	b2da      	uxtb	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d004      	beq.n	80049b2 <I2C_Master_ADD10+0x26>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d108      	bne.n	80049c4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00c      	beq.n	80049d4 <I2C_Master_ADD10+0x48>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049d2:	605a      	str	r2, [r3, #4]
  }
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b091      	sub	sp, #68	@ 0x44
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b22      	cmp	r3, #34	@ 0x22
 8004a08:	f040 8169 	bne.w	8004cde <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10f      	bne.n	8004a34 <I2C_Master_ADDR+0x54>
 8004a14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a18:	2b40      	cmp	r3, #64	@ 0x40
 8004a1a:	d10b      	bne.n	8004a34 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	e160      	b.n	8004cf6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d11d      	bne.n	8004a78 <I2C_Master_ADDR+0x98>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a44:	d118      	bne.n	8004a78 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a46:	2300      	movs	r3, #0
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a76:	e13e      	b.n	8004cf6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d113      	bne.n	8004aaa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a82:	2300      	movs	r3, #0
 8004a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e115      	b.n	8004cd6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f040 808a 	bne.w	8004bca <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004abc:	d137      	bne.n	8004b2e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004acc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004adc:	d113      	bne.n	8004b06 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aec:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aee:	2300      	movs	r3, #0
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	e0e7      	b.n	8004cd6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b06:	2300      	movs	r3, #0
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	623b      	str	r3, [r7, #32]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e0d3      	b.n	8004cd6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d02e      	beq.n	8004b92 <I2C_Master_ADDR+0x1b2>
 8004b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d02b      	beq.n	8004b92 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3c:	2b12      	cmp	r3, #18
 8004b3e:	d102      	bne.n	8004b46 <I2C_Master_ADDR+0x166>
 8004b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d125      	bne.n	8004b92 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d00e      	beq.n	8004b6a <I2C_Master_ADDR+0x18a>
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d00b      	beq.n	8004b6a <I2C_Master_ADDR+0x18a>
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d008      	beq.n	8004b6a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e007      	b.n	8004b7a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b78:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	e0a1      	b.n	8004cd6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	e085      	b.n	8004cd6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d14d      	bne.n	8004c70 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d016      	beq.n	8004c08 <I2C_Master_ADDR+0x228>
 8004bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d013      	beq.n	8004c08 <I2C_Master_ADDR+0x228>
 8004be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d010      	beq.n	8004c08 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e007      	b.n	8004c18 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c16:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c26:	d117      	bne.n	8004c58 <I2C_Master_ADDR+0x278>
 8004c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c2e:	d00b      	beq.n	8004c48 <I2C_Master_ADDR+0x268>
 8004c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d008      	beq.n	8004c48 <I2C_Master_ADDR+0x268>
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d005      	beq.n	8004c48 <I2C_Master_ADDR+0x268>
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d002      	beq.n	8004c48 <I2C_Master_ADDR+0x268>
 8004c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d107      	bne.n	8004c58 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c56:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	e032      	b.n	8004cd6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c7e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c8e:	d117      	bne.n	8004cc0 <I2C_Master_ADDR+0x2e0>
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c96:	d00b      	beq.n	8004cb0 <I2C_Master_ADDR+0x2d0>
 8004c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d008      	beq.n	8004cb0 <I2C_Master_ADDR+0x2d0>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d005      	beq.n	8004cb0 <I2C_Master_ADDR+0x2d0>
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d002      	beq.n	8004cb0 <I2C_Master_ADDR+0x2d0>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d107      	bne.n	8004cc0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cbe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004cdc:	e00b      	b.n	8004cf6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	e7ff      	b.n	8004cf6 <I2C_Master_ADDR+0x316>
 8004cf6:	bf00      	nop
 8004cf8:	3744      	adds	r7, #68	@ 0x44
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d02b      	beq.n	8004d74 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d114      	bne.n	8004d74 <I2C_SlaveTransmit_TXE+0x72>
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b29      	cmp	r3, #41	@ 0x29
 8004d4e:	d111      	bne.n	8004d74 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2221      	movs	r2, #33	@ 0x21
 8004d64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2228      	movs	r2, #40	@ 0x28
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff f9cf 	bl	8004112 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d011      	beq.n	8004db2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	781a      	ldrb	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dcc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d02c      	beq.n	8004e32 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d114      	bne.n	8004e32 <I2C_SlaveReceive_RXNE+0x74>
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e0c:	d111      	bne.n	8004e32 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2222      	movs	r2, #34	@ 0x22
 8004e22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2228      	movs	r2, #40	@ 0x28
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff f97a 	bl	8004126 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d012      	beq.n	8004e72 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e98:	2b28      	cmp	r3, #40	@ 0x28
 8004e9a:	d127      	bne.n	8004eec <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eaa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	09db      	lsrs	r3, r3, #7
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d103      	bne.n	8004ed0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	81bb      	strh	r3, [r7, #12]
 8004ece:	e002      	b.n	8004ed6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004ede:	89ba      	ldrh	r2, [r7, #12]
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff f928 	bl	800413a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004eea:	e00e      	b.n	8004f0a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f34:	2300      	movs	r3, #0
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f70:	d172      	bne.n	8005058 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	2b22      	cmp	r3, #34	@ 0x22
 8004f76:	d002      	beq.n	8004f7e <I2C_Slave_STOPF+0x6a>
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f7c:	d135      	bne.n	8004fea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	f043 0204 	orr.w	r2, r3, #4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fd ffc6 	bl	8002f48 <HAL_DMA_GetState>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d049      	beq.n	8005056 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc6:	4a69      	ldr	r2, [pc, #420]	@ (800516c <I2C_Slave_STOPF+0x258>)
 8004fc8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fd fe0e 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d03d      	beq.n	8005056 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fe8:	e035      	b.n	8005056 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f043 0204 	orr.w	r2, r3, #4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800501c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd ff90 	bl	8002f48 <HAL_DMA_GetState>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d014      	beq.n	8005058 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005032:	4a4e      	ldr	r2, [pc, #312]	@ (800516c <I2C_Slave_STOPF+0x258>)
 8005034:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503a:	4618      	mov	r0, r3
 800503c:	f7fd fdd8 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005050:	4610      	mov	r0, r2
 8005052:	4798      	blx	r3
 8005054:	e000      	b.n	8005058 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005056:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d03e      	beq.n	80050e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b04      	cmp	r3, #4
 800506e:	d112      	bne.n	8005096 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	d112      	bne.n	80050ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	f043 0204 	orr.w	r2, r3, #4
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f843 	bl	8005174 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80050ee:	e039      	b.n	8005164 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80050f4:	d109      	bne.n	800510a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2228      	movs	r2, #40	@ 0x28
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff f80e 	bl	8004126 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b28      	cmp	r3, #40	@ 0x28
 8005114:	d111      	bne.n	800513a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a15      	ldr	r2, [pc, #84]	@ (8005170 <I2C_Slave_STOPF+0x25c>)
 800511a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff f80f 	bl	8004156 <HAL_I2C_ListenCpltCallback>
}
 8005138:	e014      	b.n	8005164 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	2b22      	cmp	r3, #34	@ 0x22
 8005140:	d002      	beq.n	8005148 <I2C_Slave_STOPF+0x234>
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b22      	cmp	r3, #34	@ 0x22
 8005146:	d10d      	bne.n	8005164 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fe ffe1 	bl	8004126 <HAL_I2C_SlaveRxCpltCallback>
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	08005841 	.word	0x08005841
 8005170:	ffff0000 	.word	0xffff0000

08005174 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005182:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800518a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800518c:	7bbb      	ldrb	r3, [r7, #14]
 800518e:	2b10      	cmp	r3, #16
 8005190:	d002      	beq.n	8005198 <I2C_ITError+0x24>
 8005192:	7bbb      	ldrb	r3, [r7, #14]
 8005194:	2b40      	cmp	r3, #64	@ 0x40
 8005196:	d10a      	bne.n	80051ae <I2C_ITError+0x3a>
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b22      	cmp	r3, #34	@ 0x22
 800519c:	d107      	bne.n	80051ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051b4:	2b28      	cmp	r3, #40	@ 0x28
 80051b6:	d107      	bne.n	80051c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2228      	movs	r2, #40	@ 0x28
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051c6:	e015      	b.n	80051f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d6:	d00a      	beq.n	80051ee <I2C_ITError+0x7a>
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	2b60      	cmp	r3, #96	@ 0x60
 80051dc:	d007      	beq.n	80051ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005202:	d162      	bne.n	80052ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005212:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d020      	beq.n	8005264 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005226:	4a6a      	ldr	r2, [pc, #424]	@ (80053d0 <I2C_ITError+0x25c>)
 8005228:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522e:	4618      	mov	r0, r3
 8005230:	f7fd fcde 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 8089 	beq.w	800534e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800525e:	4610      	mov	r0, r2
 8005260:	4798      	blx	r3
 8005262:	e074      	b.n	800534e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	4a59      	ldr	r2, [pc, #356]	@ (80053d0 <I2C_ITError+0x25c>)
 800526a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	4618      	mov	r0, r3
 8005272:	f7fd fcbd 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d068      	beq.n	800534e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005286:	2b40      	cmp	r3, #64	@ 0x40
 8005288:	d10b      	bne.n	80052a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052c4:	4610      	mov	r0, r2
 80052c6:	4798      	blx	r3
 80052c8:	e041      	b.n	800534e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b60      	cmp	r3, #96	@ 0x60
 80052d4:	d125      	bne.n	8005322 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ee:	2b40      	cmp	r3, #64	@ 0x40
 80052f0:	d10b      	bne.n	800530a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fe ff43 	bl	80041a6 <HAL_I2C_AbortCpltCallback>
 8005320:	e015      	b.n	800534e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532c:	2b40      	cmp	r3, #64	@ 0x40
 800532e:	d10b      	bne.n	8005348 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fe ff22 	bl	8004192 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10e      	bne.n	800537c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005392:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b04      	cmp	r3, #4
 800539e:	d113      	bne.n	80053c8 <I2C_ITError+0x254>
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	2b28      	cmp	r3, #40	@ 0x28
 80053a4:	d110      	bne.n	80053c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a0a      	ldr	r2, [pc, #40]	@ (80053d4 <I2C_ITError+0x260>)
 80053aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fe fec7 	bl	8004156 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	08005841 	.word	0x08005841
 80053d4:	ffff0000 	.word	0xffff0000

080053d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	607a      	str	r2, [r7, #4]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	460b      	mov	r3, r1
 80053e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d006      	beq.n	8005402 <I2C_MasterRequestWrite+0x2a>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d003      	beq.n	8005402 <I2C_MasterRequestWrite+0x2a>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005400:	d108      	bne.n	8005414 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e00b      	b.n	800542c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	2b12      	cmp	r3, #18
 800541a:	d107      	bne.n	800542c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800542a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 faa9 	bl	8005990 <I2C_WaitOnFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005452:	d103      	bne.n	800545c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800545a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e035      	b.n	80054cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005468:	d108      	bne.n	800547c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800546a:	897b      	ldrh	r3, [r7, #10]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005478:	611a      	str	r2, [r3, #16]
 800547a:	e01b      	b.n	80054b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800547c:	897b      	ldrh	r3, [r7, #10]
 800547e:	11db      	asrs	r3, r3, #7
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 0306 	and.w	r3, r3, #6
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f063 030f 	orn	r3, r3, #15
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	490e      	ldr	r1, [pc, #56]	@ (80054d4 <I2C_MasterRequestWrite+0xfc>)
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 faf2 	bl	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e010      	b.n	80054cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	4907      	ldr	r1, [pc, #28]	@ (80054d8 <I2C_MasterRequestWrite+0x100>)
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fae2 	bl	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	00010008 	.word	0x00010008
 80054d8:	00010002 	.word	0x00010002

080054dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	4608      	mov	r0, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	461a      	mov	r2, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	817b      	strh	r3, [r7, #10]
 80054ee:	460b      	mov	r3, r1
 80054f0:	813b      	strh	r3, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	2200      	movs	r2, #0
 800550e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fa3c 	bl	8005990 <I2C_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800552c:	d103      	bne.n	8005536 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005534:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e05f      	b.n	80055fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	6a3a      	ldr	r2, [r7, #32]
 800554e:	492d      	ldr	r1, [pc, #180]	@ (8005604 <I2C_RequestMemoryWrite+0x128>)
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fa97 	bl	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e04c      	b.n	80055fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005578:	6a39      	ldr	r1, [r7, #32]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fb22 	bl	8005bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	2b04      	cmp	r3, #4
 800558c:	d107      	bne.n	800559e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800559c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e02b      	b.n	80055fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d105      	bne.n	80055b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055a8:	893b      	ldrh	r3, [r7, #8]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	611a      	str	r2, [r3, #16]
 80055b2:	e021      	b.n	80055f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055b4:	893b      	ldrh	r3, [r7, #8]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c4:	6a39      	ldr	r1, [r7, #32]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fafc 	bl	8005bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d107      	bne.n	80055ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e005      	b.n	80055fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ee:	893b      	ldrh	r3, [r7, #8]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	00010002 	.word	0x00010002

08005608 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005614:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800561c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005624:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800563a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005648:	2200      	movs	r2, #0
 800564a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005658:	2200      	movs	r2, #0
 800565a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800565c:	7cfb      	ldrb	r3, [r7, #19]
 800565e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005662:	2b21      	cmp	r3, #33	@ 0x21
 8005664:	d007      	beq.n	8005676 <I2C_DMAXferCplt+0x6e>
 8005666:	7cfb      	ldrb	r3, [r7, #19]
 8005668:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800566c:	2b22      	cmp	r3, #34	@ 0x22
 800566e:	d131      	bne.n	80056d4 <I2C_DMAXferCplt+0xcc>
 8005670:	7cbb      	ldrb	r3, [r7, #18]
 8005672:	2b20      	cmp	r3, #32
 8005674:	d12e      	bne.n	80056d4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005684:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2200      	movs	r2, #0
 800568a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800568c:	7cfb      	ldrb	r3, [r7, #19]
 800568e:	2b29      	cmp	r3, #41	@ 0x29
 8005690:	d10a      	bne.n	80056a8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2221      	movs	r2, #33	@ 0x21
 8005696:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2228      	movs	r2, #40	@ 0x28
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056a0:	6978      	ldr	r0, [r7, #20]
 80056a2:	f7fe fd36 	bl	8004112 <HAL_I2C_SlaveTxCpltCallback>
 80056a6:	e00c      	b.n	80056c2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80056ac:	d109      	bne.n	80056c2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2222      	movs	r2, #34	@ 0x22
 80056b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2228      	movs	r2, #40	@ 0x28
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056bc:	6978      	ldr	r0, [r7, #20]
 80056be:	f7fe fd32 	bl	8004126 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80056d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80056d2:	e074      	b.n	80057be <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d06e      	beq.n	80057be <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d107      	bne.n	80056fa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056f8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005708:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005710:	d009      	beq.n	8005726 <I2C_DMAXferCplt+0x11e>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b08      	cmp	r3, #8
 8005716:	d006      	beq.n	8005726 <I2C_DMAXferCplt+0x11e>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800571e:	d002      	beq.n	8005726 <I2C_DMAXferCplt+0x11e>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b20      	cmp	r3, #32
 8005724:	d107      	bne.n	8005736 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005734:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005744:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005754:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2200      	movs	r2, #0
 800575a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005764:	6978      	ldr	r0, [r7, #20]
 8005766:	f7fe fd14 	bl	8004192 <HAL_I2C_ErrorCallback>
}
 800576a:	e028      	b.n	80057be <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b40      	cmp	r3, #64	@ 0x40
 800577e:	d10a      	bne.n	8005796 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800578e:	6978      	ldr	r0, [r7, #20]
 8005790:	f7fe fcf5 	bl	800417e <HAL_I2C_MemRxCpltCallback>
}
 8005794:	e013      	b.n	80057be <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d002      	beq.n	80057aa <I2C_DMAXferCplt+0x1a2>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d103      	bne.n	80057b2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2200      	movs	r2, #0
 80057ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80057b0:	e002      	b.n	80057b8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2212      	movs	r2, #18
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80057b8:	6978      	ldr	r0, [r7, #20]
 80057ba:	f7fe fca0 	bl	80040fe <HAL_I2C_MasterRxCpltCallback>
}
 80057be:	bf00      	nop
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e0:	2200      	movs	r2, #0
 80057e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	2200      	movs	r2, #0
 80057f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fd fbb5 	bl	8002f64 <HAL_DMA_GetError>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d01b      	beq.n	8005838 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800580e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	f043 0210 	orr.w	r2, r3, #16
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7fe fcad 	bl	8004192 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005858:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800585a:	4b4b      	ldr	r3, [pc, #300]	@ (8005988 <I2C_DMAAbort+0x148>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	08db      	lsrs	r3, r3, #3
 8005860:	4a4a      	ldr	r2, [pc, #296]	@ (800598c <I2C_DMAAbort+0x14c>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	0a1a      	lsrs	r2, r3, #8
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	00da      	lsls	r2, r3, #3
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	f043 0220 	orr.w	r2, r3, #32
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005886:	e00a      	b.n	800589e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3b01      	subs	r3, #1
 800588c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800589c:	d0ea      	beq.n	8005874 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058aa:	2200      	movs	r2, #0
 80058ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	2200      	movs	r2, #0
 80058bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e0:	2200      	movs	r2, #0
 80058e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	2200      	movs	r2, #0
 80058f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b60      	cmp	r3, #96	@ 0x60
 800590e:	d10e      	bne.n	800592e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2200      	movs	r2, #0
 8005924:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005926:	6978      	ldr	r0, [r7, #20]
 8005928:	f7fe fc3d 	bl	80041a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800592c:	e027      	b.n	800597e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800592e:	7cfb      	ldrb	r3, [r7, #19]
 8005930:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005934:	2b28      	cmp	r3, #40	@ 0x28
 8005936:	d117      	bne.n	8005968 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005956:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2228      	movs	r2, #40	@ 0x28
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005966:	e007      	b.n	8005978 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005978:	6978      	ldr	r0, [r7, #20]
 800597a:	f7fe fc0a 	bl	8004192 <HAL_I2C_ErrorCallback>
}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000004 	.word	0x20000004
 800598c:	14f8b589 	.word	0x14f8b589

08005990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059a0:	e048      	b.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d044      	beq.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059aa:	f7fc fed9 	bl	8002760 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d139      	bne.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d10d      	bne.n	80059e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	43da      	mvns	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4013      	ands	r3, r2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	e00c      	b.n	8005a00 <I2C_WaitOnFlagUntilTimeout+0x70>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	43da      	mvns	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4013      	ands	r3, r2
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d116      	bne.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	f043 0220 	orr.w	r2, r3, #32
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e023      	b.n	8005a7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	0c1b      	lsrs	r3, r3, #16
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d10d      	bne.n	8005a5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	43da      	mvns	r2, r3
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	e00c      	b.n	8005a74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	43da      	mvns	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4013      	ands	r3, r2
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bf0c      	ite	eq
 8005a6c:	2301      	moveq	r3, #1
 8005a6e:	2300      	movne	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d093      	beq.n	80059a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a92:	e071      	b.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aa2:	d123      	bne.n	8005aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005abc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	f043 0204 	orr.w	r2, r3, #4
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e067      	b.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d041      	beq.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af4:	f7fc fe34 	bl	8002760 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d302      	bcc.n	8005b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d136      	bne.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10c      	bne.n	8005b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	43da      	mvns	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bf14      	ite	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	2300      	moveq	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	e00b      	b.n	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	43da      	mvns	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf14      	ite	ne
 8005b40:	2301      	movne	r3, #1
 8005b42:	2300      	moveq	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d016      	beq.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b64:	f043 0220 	orr.w	r2, r3, #32
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e021      	b.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	0c1b      	lsrs	r3, r3, #16
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d10c      	bne.n	8005b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	43da      	mvns	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	bf14      	ite	ne
 8005b94:	2301      	movne	r3, #1
 8005b96:	2300      	moveq	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	e00b      	b.n	8005bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	43da      	mvns	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	bf14      	ite	ne
 8005bae:	2301      	movne	r3, #1
 8005bb0:	2300      	moveq	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f47f af6d 	bne.w	8005a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bd0:	e034      	b.n	8005c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f8b8 	bl	8005d48 <I2C_IsAcknowledgeFailed>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e034      	b.n	8005c4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be8:	d028      	beq.n	8005c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bea:	f7fc fdb9 	bl	8002760 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d11d      	bne.n	8005c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0a:	2b80      	cmp	r3, #128	@ 0x80
 8005c0c:	d016      	beq.n	8005c3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e007      	b.n	8005c4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c46:	2b80      	cmp	r3, #128	@ 0x80
 8005c48:	d1c3      	bne.n	8005bd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c60:	e034      	b.n	8005ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f870 	bl	8005d48 <I2C_IsAcknowledgeFailed>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e034      	b.n	8005cdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d028      	beq.n	8005ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fc fd71 	bl	8002760 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d11d      	bne.n	8005ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d016      	beq.n	8005ccc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e007      	b.n	8005cdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d1c3      	bne.n	8005c62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cf0:	4b13      	ldr	r3, [pc, #76]	@ (8005d40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	08db      	lsrs	r3, r3, #3
 8005cf6:	4a13      	ldr	r2, [pc, #76]	@ (8005d44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	0a1a      	lsrs	r2, r3, #8
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d107      	bne.n	8005d22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	f043 0220 	orr.w	r2, r3, #32
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e008      	b.n	8005d34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d30:	d0e9      	beq.n	8005d06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20000004 	.word	0x20000004
 8005d44:	14f8b589 	.word	0x14f8b589

08005d48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d5e:	d11b      	bne.n	8005d98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d84:	f043 0204 	orr.w	r2, r3, #4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005db6:	d103      	bne.n	8005dc0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dbe:	e007      	b.n	8005dd0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005dc8:	d102      	bne.n	8005dd0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e267      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d075      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005dfa:	4b88      	ldr	r3, [pc, #544]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d00c      	beq.n	8005e20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e06:	4b85      	ldr	r3, [pc, #532]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d112      	bne.n	8005e38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e12:	4b82      	ldr	r3, [pc, #520]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e1e:	d10b      	bne.n	8005e38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e20:	4b7e      	ldr	r3, [pc, #504]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d05b      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x108>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d157      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e242      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e40:	d106      	bne.n	8005e50 <HAL_RCC_OscConfig+0x74>
 8005e42:	4b76      	ldr	r3, [pc, #472]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a75      	ldr	r2, [pc, #468]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e01d      	b.n	8005e8c <HAL_RCC_OscConfig+0xb0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e58:	d10c      	bne.n	8005e74 <HAL_RCC_OscConfig+0x98>
 8005e5a:	4b70      	ldr	r3, [pc, #448]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6f      	ldr	r2, [pc, #444]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	4b6d      	ldr	r3, [pc, #436]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6c      	ldr	r2, [pc, #432]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	e00b      	b.n	8005e8c <HAL_RCC_OscConfig+0xb0>
 8005e74:	4b69      	ldr	r3, [pc, #420]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a68      	ldr	r2, [pc, #416]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b66      	ldr	r3, [pc, #408]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a65      	ldr	r2, [pc, #404]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d013      	beq.n	8005ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fc fc64 	bl	8002760 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fc fc60 	bl	8002760 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b64      	cmp	r3, #100	@ 0x64
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e207      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	4b5b      	ldr	r3, [pc, #364]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f0      	beq.n	8005e9c <HAL_RCC_OscConfig+0xc0>
 8005eba:	e014      	b.n	8005ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fc50 	bl	8002760 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fc fc4c 	bl	8002760 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	@ 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e1f3      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed6:	4b51      	ldr	r3, [pc, #324]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0xe8>
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d063      	beq.n	8005fba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005efe:	4b47      	ldr	r3, [pc, #284]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d11c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0a:	4b44      	ldr	r3, [pc, #272]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d116      	bne.n	8005f44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f16:	4b41      	ldr	r3, [pc, #260]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_RCC_OscConfig+0x152>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d001      	beq.n	8005f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e1c7      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	4937      	ldr	r1, [pc, #220]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f42:	e03a      	b.n	8005fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d020      	beq.n	8005f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f4c:	4b34      	ldr	r3, [pc, #208]	@ (8006020 <HAL_RCC_OscConfig+0x244>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f52:	f7fc fc05 	bl	8002760 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f5a:	f7fc fc01 	bl	8002760 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e1a8      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f0      	beq.n	8005f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f78:	4b28      	ldr	r3, [pc, #160]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4925      	ldr	r1, [pc, #148]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	600b      	str	r3, [r1, #0]
 8005f8c:	e015      	b.n	8005fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f8e:	4b24      	ldr	r3, [pc, #144]	@ (8006020 <HAL_RCC_OscConfig+0x244>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fc fbe4 	bl	8002760 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9c:	f7fc fbe0 	bl	8002760 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e187      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fae:	4b1b      	ldr	r3, [pc, #108]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d036      	beq.n	8006034 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fce:	4b15      	ldr	r3, [pc, #84]	@ (8006024 <HAL_RCC_OscConfig+0x248>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd4:	f7fc fbc4 	bl	8002760 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fdc:	f7fc fbc0 	bl	8002760 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e167      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fee:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <HAL_RCC_OscConfig+0x240>)
 8005ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0x200>
 8005ffa:	e01b      	b.n	8006034 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ffc:	4b09      	ldr	r3, [pc, #36]	@ (8006024 <HAL_RCC_OscConfig+0x248>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006002:	f7fc fbad 	bl	8002760 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006008:	e00e      	b.n	8006028 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800600a:	f7fc fba9 	bl	8002760 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d907      	bls.n	8006028 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e150      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
 800601c:	40023800 	.word	0x40023800
 8006020:	42470000 	.word	0x42470000
 8006024:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006028:	4b88      	ldr	r3, [pc, #544]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 800602a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1ea      	bne.n	800600a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8097 	beq.w	8006170 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006046:	4b81      	ldr	r3, [pc, #516]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10f      	bne.n	8006072 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	4b7d      	ldr	r3, [pc, #500]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	4a7c      	ldr	r2, [pc, #496]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006060:	6413      	str	r3, [r2, #64]	@ 0x40
 8006062:	4b7a      	ldr	r3, [pc, #488]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006072:	4b77      	ldr	r3, [pc, #476]	@ (8006250 <HAL_RCC_OscConfig+0x474>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607a:	2b00      	cmp	r3, #0
 800607c:	d118      	bne.n	80060b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800607e:	4b74      	ldr	r3, [pc, #464]	@ (8006250 <HAL_RCC_OscConfig+0x474>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a73      	ldr	r2, [pc, #460]	@ (8006250 <HAL_RCC_OscConfig+0x474>)
 8006084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608a:	f7fc fb69 	bl	8002760 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006092:	f7fc fb65 	bl	8002760 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e10c      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006250 <HAL_RCC_OscConfig+0x474>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d106      	bne.n	80060c6 <HAL_RCC_OscConfig+0x2ea>
 80060b8:	4b64      	ldr	r3, [pc, #400]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060bc:	4a63      	ldr	r2, [pc, #396]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c4:	e01c      	b.n	8006100 <HAL_RCC_OscConfig+0x324>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCC_OscConfig+0x30c>
 80060ce:	4b5f      	ldr	r3, [pc, #380]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d2:	4a5e      	ldr	r2, [pc, #376]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060d4:	f043 0304 	orr.w	r3, r3, #4
 80060d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060da:	4b5c      	ldr	r3, [pc, #368]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060de:	4a5b      	ldr	r2, [pc, #364]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e6:	e00b      	b.n	8006100 <HAL_RCC_OscConfig+0x324>
 80060e8:	4b58      	ldr	r3, [pc, #352]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ec:	4a57      	ldr	r2, [pc, #348]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060ee:	f023 0301 	bic.w	r3, r3, #1
 80060f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f4:	4b55      	ldr	r3, [pc, #340]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f8:	4a54      	ldr	r2, [pc, #336]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80060fa:	f023 0304 	bic.w	r3, r3, #4
 80060fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d015      	beq.n	8006134 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006108:	f7fc fb2a 	bl	8002760 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610e:	e00a      	b.n	8006126 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006110:	f7fc fb26 	bl	8002760 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800611e:	4293      	cmp	r3, r2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e0cb      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006126:	4b49      	ldr	r3, [pc, #292]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0ee      	beq.n	8006110 <HAL_RCC_OscConfig+0x334>
 8006132:	e014      	b.n	800615e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006134:	f7fc fb14 	bl	8002760 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800613a:	e00a      	b.n	8006152 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613c:	f7fc fb10 	bl	8002760 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e0b5      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006152:	4b3e      	ldr	r3, [pc, #248]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1ee      	bne.n	800613c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d105      	bne.n	8006170 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006164:	4b39      	ldr	r3, [pc, #228]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 8006166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006168:	4a38      	ldr	r2, [pc, #224]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 800616a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800616e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80a1 	beq.w	80062bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800617a:	4b34      	ldr	r3, [pc, #208]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 030c 	and.w	r3, r3, #12
 8006182:	2b08      	cmp	r3, #8
 8006184:	d05c      	beq.n	8006240 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d141      	bne.n	8006212 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618e:	4b31      	ldr	r3, [pc, #196]	@ (8006254 <HAL_RCC_OscConfig+0x478>)
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fc fae4 	bl	8002760 <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619c:	f7fc fae0 	bl	8002760 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e087      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ae:	4b27      	ldr	r3, [pc, #156]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f0      	bne.n	800619c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69da      	ldr	r2, [r3, #28]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	019b      	lsls	r3, r3, #6
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	3b01      	subs	r3, #1
 80061d4:	041b      	lsls	r3, r3, #16
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	061b      	lsls	r3, r3, #24
 80061de:	491b      	ldr	r1, [pc, #108]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <HAL_RCC_OscConfig+0x478>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ea:	f7fc fab9 	bl	8002760 <HAL_GetTick>
 80061ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f0:	e008      	b.n	8006204 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f2:	f7fc fab5 	bl	8002760 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e05c      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006204:	4b11      	ldr	r3, [pc, #68]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f0      	beq.n	80061f2 <HAL_RCC_OscConfig+0x416>
 8006210:	e054      	b.n	80062bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006212:	4b10      	ldr	r3, [pc, #64]	@ (8006254 <HAL_RCC_OscConfig+0x478>)
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006218:	f7fc faa2 	bl	8002760 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006220:	f7fc fa9e 	bl	8002760 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e045      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006232:	4b06      	ldr	r3, [pc, #24]	@ (800624c <HAL_RCC_OscConfig+0x470>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f0      	bne.n	8006220 <HAL_RCC_OscConfig+0x444>
 800623e:	e03d      	b.n	80062bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d107      	bne.n	8006258 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e038      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
 800624c:	40023800 	.word	0x40023800
 8006250:	40007000 	.word	0x40007000
 8006254:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006258:	4b1b      	ldr	r3, [pc, #108]	@ (80062c8 <HAL_RCC_OscConfig+0x4ec>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d028      	beq.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006270:	429a      	cmp	r2, r3
 8006272:	d121      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d11a      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006288:	4013      	ands	r3, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800628e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006290:	4293      	cmp	r3, r2
 8006292:	d111      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	3b01      	subs	r3, #1
 80062a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d107      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40023800 	.word	0x40023800

080062cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0cc      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062e0:	4b68      	ldr	r3, [pc, #416]	@ (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d90c      	bls.n	8006308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ee:	4b65      	ldr	r3, [pc, #404]	@ (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f6:	4b63      	ldr	r3, [pc, #396]	@ (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d001      	beq.n	8006308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e0b8      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d020      	beq.n	8006356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006320:	4b59      	ldr	r3, [pc, #356]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4a58      	ldr	r2, [pc, #352]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800632a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006338:	4b53      	ldr	r3, [pc, #332]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4a52      	ldr	r2, [pc, #328]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006344:	4b50      	ldr	r3, [pc, #320]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	494d      	ldr	r1, [pc, #308]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	4313      	orrs	r3, r2
 8006354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d044      	beq.n	80063ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d107      	bne.n	800637a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	4b47      	ldr	r3, [pc, #284]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d119      	bne.n	80063aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e07f      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d003      	beq.n	800638a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006386:	2b03      	cmp	r3, #3
 8006388:	d107      	bne.n	800639a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638a:	4b3f      	ldr	r3, [pc, #252]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e06f      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639a:	4b3b      	ldr	r3, [pc, #236]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e067      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063aa:	4b37      	ldr	r3, [pc, #220]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f023 0203 	bic.w	r2, r3, #3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	4934      	ldr	r1, [pc, #208]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063bc:	f7fc f9d0 	bl	8002760 <HAL_GetTick>
 80063c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c2:	e00a      	b.n	80063da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c4:	f7fc f9cc 	bl	8002760 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e04f      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063da:	4b2b      	ldr	r3, [pc, #172]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 020c 	and.w	r2, r3, #12
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d1eb      	bne.n	80063c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063ec:	4b25      	ldr	r3, [pc, #148]	@ (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d20c      	bcs.n	8006414 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fa:	4b22      	ldr	r3, [pc, #136]	@ (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006402:	4b20      	ldr	r3, [pc, #128]	@ (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d001      	beq.n	8006414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e032      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006420:	4b19      	ldr	r3, [pc, #100]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4916      	ldr	r1, [pc, #88]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	4313      	orrs	r3, r2
 8006430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800643e:	4b12      	ldr	r3, [pc, #72]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	490e      	ldr	r1, [pc, #56]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	4313      	orrs	r3, r2
 8006450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006452:	f000 f821 	bl	8006498 <HAL_RCC_GetSysClockFreq>
 8006456:	4602      	mov	r2, r0
 8006458:	4b0b      	ldr	r3, [pc, #44]	@ (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	490a      	ldr	r1, [pc, #40]	@ (800648c <HAL_RCC_ClockConfig+0x1c0>)
 8006464:	5ccb      	ldrb	r3, [r1, r3]
 8006466:	fa22 f303 	lsr.w	r3, r2, r3
 800646a:	4a09      	ldr	r2, [pc, #36]	@ (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 800646c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800646e:	4b09      	ldr	r3, [pc, #36]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fc f930 	bl	80026d8 <HAL_InitTick>

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40023c00 	.word	0x40023c00
 8006488:	40023800 	.word	0x40023800
 800648c:	08009c50 	.word	0x08009c50
 8006490:	20000004 	.word	0x20000004
 8006494:	20000008 	.word	0x20000008

08006498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800649c:	b090      	sub	sp, #64	@ 0x40
 800649e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064b0:	4b59      	ldr	r3, [pc, #356]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x180>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 030c 	and.w	r3, r3, #12
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d00d      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x40>
 80064bc:	2b08      	cmp	r3, #8
 80064be:	f200 80a1 	bhi.w	8006604 <HAL_RCC_GetSysClockFreq+0x16c>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_RCC_GetSysClockFreq+0x34>
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d003      	beq.n	80064d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80064ca:	e09b      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064cc:	4b53      	ldr	r3, [pc, #332]	@ (800661c <HAL_RCC_GetSysClockFreq+0x184>)
 80064ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064d0:	e09b      	b.n	800660a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064d2:	4b53      	ldr	r3, [pc, #332]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x188>)
 80064d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064d6:	e098      	b.n	800660a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064d8:	4b4f      	ldr	r3, [pc, #316]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x180>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064e2:	4b4d      	ldr	r3, [pc, #308]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x180>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d028      	beq.n	8006540 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x180>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	099b      	lsrs	r3, r3, #6
 80064f4:	2200      	movs	r2, #0
 80064f6:	623b      	str	r3, [r7, #32]
 80064f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006500:	2100      	movs	r1, #0
 8006502:	4b47      	ldr	r3, [pc, #284]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x188>)
 8006504:	fb03 f201 	mul.w	r2, r3, r1
 8006508:	2300      	movs	r3, #0
 800650a:	fb00 f303 	mul.w	r3, r0, r3
 800650e:	4413      	add	r3, r2
 8006510:	4a43      	ldr	r2, [pc, #268]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x188>)
 8006512:	fba0 1202 	umull	r1, r2, r0, r2
 8006516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006518:	460a      	mov	r2, r1
 800651a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800651c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800651e:	4413      	add	r3, r2
 8006520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006524:	2200      	movs	r2, #0
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	61fa      	str	r2, [r7, #28]
 800652a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800652e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006532:	f7f9 fea5 	bl	8000280 <__aeabi_uldivmod>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4613      	mov	r3, r2
 800653c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800653e:	e053      	b.n	80065e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006540:	4b35      	ldr	r3, [pc, #212]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x180>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	099b      	lsrs	r3, r3, #6
 8006546:	2200      	movs	r2, #0
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	617a      	str	r2, [r7, #20]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006552:	f04f 0b00 	mov.w	fp, #0
 8006556:	4652      	mov	r2, sl
 8006558:	465b      	mov	r3, fp
 800655a:	f04f 0000 	mov.w	r0, #0
 800655e:	f04f 0100 	mov.w	r1, #0
 8006562:	0159      	lsls	r1, r3, #5
 8006564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006568:	0150      	lsls	r0, r2, #5
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	ebb2 080a 	subs.w	r8, r2, sl
 8006572:	eb63 090b 	sbc.w	r9, r3, fp
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006582:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006586:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800658a:	ebb2 0408 	subs.w	r4, r2, r8
 800658e:	eb63 0509 	sbc.w	r5, r3, r9
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	00eb      	lsls	r3, r5, #3
 800659c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065a0:	00e2      	lsls	r2, r4, #3
 80065a2:	4614      	mov	r4, r2
 80065a4:	461d      	mov	r5, r3
 80065a6:	eb14 030a 	adds.w	r3, r4, sl
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	eb45 030b 	adc.w	r3, r5, fp
 80065b0:	607b      	str	r3, [r7, #4]
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065be:	4629      	mov	r1, r5
 80065c0:	028b      	lsls	r3, r1, #10
 80065c2:	4621      	mov	r1, r4
 80065c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065c8:	4621      	mov	r1, r4
 80065ca:	028a      	lsls	r2, r1, #10
 80065cc:	4610      	mov	r0, r2
 80065ce:	4619      	mov	r1, r3
 80065d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d2:	2200      	movs	r2, #0
 80065d4:	60bb      	str	r3, [r7, #8]
 80065d6:	60fa      	str	r2, [r7, #12]
 80065d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065dc:	f7f9 fe50 	bl	8000280 <__aeabi_uldivmod>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4613      	mov	r3, r2
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80065e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x180>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	3301      	adds	r3, #1
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80065f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006600:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006602:	e002      	b.n	800660a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006604:	4b05      	ldr	r3, [pc, #20]	@ (800661c <HAL_RCC_GetSysClockFreq+0x184>)
 8006606:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800660a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800660c:	4618      	mov	r0, r3
 800660e:	3740      	adds	r7, #64	@ 0x40
 8006610:	46bd      	mov	sp, r7
 8006612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006616:	bf00      	nop
 8006618:	40023800 	.word	0x40023800
 800661c:	00f42400 	.word	0x00f42400
 8006620:	017d7840 	.word	0x017d7840

08006624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006628:	4b03      	ldr	r3, [pc, #12]	@ (8006638 <HAL_RCC_GetHCLKFreq+0x14>)
 800662a:	681b      	ldr	r3, [r3, #0]
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000004 	.word	0x20000004

0800663c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006640:	f7ff fff0 	bl	8006624 <HAL_RCC_GetHCLKFreq>
 8006644:	4602      	mov	r2, r0
 8006646:	4b05      	ldr	r3, [pc, #20]	@ (800665c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	0a9b      	lsrs	r3, r3, #10
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	4903      	ldr	r1, [pc, #12]	@ (8006660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006652:	5ccb      	ldrb	r3, [r1, r3]
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006658:	4618      	mov	r0, r3
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40023800 	.word	0x40023800
 8006660:	08009c60 	.word	0x08009c60

08006664 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006688:	2b00      	cmp	r3, #0
 800668a:	d038      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800668c:	4b68      	ldr	r3, [pc, #416]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006692:	f7fc f865 	bl	8002760 <HAL_GetTick>
 8006696:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006698:	e008      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800669a:	f7fc f861 	bl	8002760 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e0bd      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066ac:	4b61      	ldr	r3, [pc, #388]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f0      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	019b      	lsls	r3, r3, #6
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	071b      	lsls	r3, r3, #28
 80066ca:	495a      	ldr	r1, [pc, #360]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066d2:	4b57      	ldr	r3, [pc, #348]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066d8:	f7fc f842 	bl	8002760 <HAL_GetTick>
 80066dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066de:	e008      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066e0:	f7fc f83e 	bl	8002760 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e09a      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066f2:	4b50      	ldr	r3, [pc, #320]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8083 	beq.w	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	4b48      	ldr	r3, [pc, #288]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006714:	4a47      	ldr	r2, [pc, #284]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800671a:	6413      	str	r3, [r2, #64]	@ 0x40
 800671c:	4b45      	ldr	r3, [pc, #276]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800671e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006728:	4b43      	ldr	r3, [pc, #268]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a42      	ldr	r2, [pc, #264]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800672e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006732:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006734:	f7fc f814 	bl	8002760 <HAL_GetTick>
 8006738:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800673a:	e008      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800673c:	f7fc f810 	bl	8002760 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e06c      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800674e:	4b3a      	ldr	r3, [pc, #232]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0f0      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800675a:	4b36      	ldr	r3, [pc, #216]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800675e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006762:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d02f      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x166>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	429a      	cmp	r2, r3
 8006776:	d028      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006778:	4b2e      	ldr	r3, [pc, #184]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006780:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006782:	4b2e      	ldr	r3, [pc, #184]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006784:	2201      	movs	r2, #1
 8006786:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006788:	4b2c      	ldr	r3, [pc, #176]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800678e:	4a29      	ldr	r2, [pc, #164]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006794:	4b27      	ldr	r3, [pc, #156]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b01      	cmp	r3, #1
 800679e:	d114      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067a0:	f7fb ffde 	bl	8002760 <HAL_GetTick>
 80067a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a6:	e00a      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a8:	f7fb ffda 	bl	8002760 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d901      	bls.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e034      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067be:	4b1d      	ldr	r3, [pc, #116]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0ee      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067d6:	d10d      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80067d8:	4b16      	ldr	r3, [pc, #88]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80067e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ec:	4911      	ldr	r1, [pc, #68]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
 80067f2:	e005      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80067f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80067fe:	6093      	str	r3, [r2, #8]
 8006800:	4b0c      	ldr	r3, [pc, #48]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006802:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800680c:	4909      	ldr	r1, [pc, #36]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800680e:	4313      	orrs	r3, r2
 8006810:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	7d1a      	ldrb	r2, [r3, #20]
 8006822:	4b07      	ldr	r3, [pc, #28]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006824:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	42470068 	.word	0x42470068
 8006834:	40023800 	.word	0x40023800
 8006838:	40007000 	.word	0x40007000
 800683c:	42470e40 	.word	0x42470e40
 8006840:	424711e0 	.word	0x424711e0

08006844 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e073      	b.n	800693e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	7f5b      	ldrb	r3, [r3, #29]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d105      	bne.n	800686c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fb fa78 	bl	8001d5c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b10      	cmp	r3, #16
 800687e:	d055      	beq.n	800692c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	22ca      	movs	r2, #202	@ 0xca
 8006886:	625a      	str	r2, [r3, #36]	@ 0x24
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2253      	movs	r2, #83	@ 0x53
 800688e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fbd3 	bl	800703c <RTC_EnterInitMode>
 8006896:	4603      	mov	r3, r0
 8006898:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d12c      	bne.n	80068fa <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80068ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6899      	ldr	r1, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68d2      	ldr	r2, [r2, #12]
 80068da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6919      	ldr	r1, [r3, #16]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	041a      	lsls	r2, r3, #16
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fbda 	bl	80070aa <RTC_ExitInitMode>
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d110      	bne.n	8006922 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800690e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	22ff      	movs	r2, #255	@ 0xff
 8006928:	625a      	str	r2, [r3, #36]	@ 0x24
 800692a:	e001      	b.n	8006930 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d102      	bne.n	800693c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006946:	b590      	push	{r4, r7, lr}
 8006948:	b087      	sub	sp, #28
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	7f1b      	ldrb	r3, [r3, #28]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_RTC_SetTime+0x1c>
 800695e:	2302      	movs	r3, #2
 8006960:	e087      	b.n	8006a72 <HAL_RTC_SetTime+0x12c>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2202      	movs	r2, #2
 800696c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d126      	bne.n	80069c2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2200      	movs	r2, #0
 8006986:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fbb1 	bl	80070f4 <RTC_ByteToBcd2>
 8006992:	4603      	mov	r3, r0
 8006994:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fbaa 	bl	80070f4 <RTC_ByteToBcd2>
 80069a0:	4603      	mov	r3, r0
 80069a2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80069a4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	789b      	ldrb	r3, [r3, #2]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fba2 	bl	80070f4 <RTC_ByteToBcd2>
 80069b0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80069b2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	78db      	ldrb	r3, [r3, #3]
 80069ba:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e018      	b.n	80069f4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069e2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80069e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	78db      	ldrb	r3, [r3, #3]
 80069ee:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069f0:	4313      	orrs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	22ca      	movs	r2, #202	@ 0xca
 80069fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2253      	movs	r2, #83	@ 0x53
 8006a02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fb19 	bl	800703c <RTC_EnterInitMode>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006a0e:	7cfb      	ldrb	r3, [r7, #19]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d120      	bne.n	8006a56 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006a1e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006a22:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6899      	ldr	r1, [r3, #8]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fb2c 	bl	80070aa <RTC_ExitInitMode>
 8006a52:	4603      	mov	r3, r0
 8006a54:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a56:	7cfb      	ldrb	r3, [r7, #19]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	22ff      	movs	r2, #255	@ 0xff
 8006a68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]

  return status;
 8006a70:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd90      	pop	{r4, r7, pc}

08006a7a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b086      	sub	sp, #24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006aac:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	0a1b      	lsrs	r3, r3, #8
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	0d9b      	lsrs	r3, r3, #22
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d11a      	bne.n	8006b2c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fb18 	bl	8007130 <RTC_Bcd2ToByte>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fb0f 	bl	8007130 <RTC_Bcd2ToByte>
 8006b12:	4603      	mov	r3, r0
 8006b14:	461a      	mov	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	789b      	ldrb	r3, [r3, #2]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fb06 	bl	8007130 <RTC_Bcd2ToByte>
 8006b24:	4603      	mov	r3, r0
 8006b26:	461a      	mov	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b36:	b590      	push	{r4, r7, lr}
 8006b38:	b087      	sub	sp, #28
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	7f1b      	ldrb	r3, [r3, #28]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <HAL_RTC_SetDate+0x1c>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e071      	b.n	8006c36 <HAL_RTC_SetDate+0x100>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10e      	bne.n	8006b82 <HAL_RTC_SetDate+0x4c>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	f023 0310 	bic.w	r3, r3, #16
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	330a      	adds	r3, #10
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d11c      	bne.n	8006bc2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	78db      	ldrb	r3, [r3, #3]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fab1 	bl	80070f4 <RTC_ByteToBcd2>
 8006b92:	4603      	mov	r3, r0
 8006b94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 faaa 	bl	80070f4 <RTC_ByteToBcd2>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ba4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	789b      	ldrb	r3, [r3, #2]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 faa2 	bl	80070f4 <RTC_ByteToBcd2>
 8006bb0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006bb2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e00e      	b.n	8006be0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	78db      	ldrb	r3, [r3, #3]
 8006bc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006bce:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006bd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	22ca      	movs	r2, #202	@ 0xca
 8006be6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2253      	movs	r2, #83	@ 0x53
 8006bee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fa23 	bl	800703c <RTC_EnterInitMode>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006bfa:	7cfb      	ldrb	r3, [r7, #19]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10c      	bne.n	8006c1a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c0a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c0e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 fa4a 	bl	80070aa <RTC_ExitInitMode>
 8006c16:	4603      	mov	r3, r0
 8006c18:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006c1a:	7cfb      	ldrb	r3, [r7, #19]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2201      	movs	r2, #1
 8006c24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	22ff      	movs	r2, #255	@ 0xff
 8006c2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	771a      	strb	r2, [r3, #28]

  return status;
 8006c34:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd90      	pop	{r4, r7, pc}

08006c3e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b086      	sub	sp, #24
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	0c1b      	lsrs	r3, r3, #16
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	0a1b      	lsrs	r3, r3, #8
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	f003 031f 	and.w	r3, r3, #31
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	0b5b      	lsrs	r3, r3, #13
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11a      	bne.n	8006cd2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	78db      	ldrb	r3, [r3, #3]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fa45 	bl	8007130 <RTC_Bcd2ToByte>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	785b      	ldrb	r3, [r3, #1]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fa3c 	bl	8007130 <RTC_Bcd2ToByte>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	789b      	ldrb	r3, [r3, #2]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fa33 	bl	8007130 <RTC_Bcd2ToByte>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	461a      	mov	r2, r3
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006cdc:	b590      	push	{r4, r7, lr}
 8006cde:	b089      	sub	sp, #36	@ 0x24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006ce8:	4b9b      	ldr	r3, [pc, #620]	@ (8006f58 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a9b      	ldr	r2, [pc, #620]	@ (8006f5c <HAL_RTC_SetAlarm_IT+0x280>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	0adb      	lsrs	r3, r3, #11
 8006cf4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	7f1b      	ldrb	r3, [r3, #28]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_RTC_SetAlarm_IT+0x36>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e11e      	b.n	8006f50 <HAL_RTC_SetAlarm_IT+0x274>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d137      	bne.n	8006d94 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d102      	bne.n	8006d38 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 f9d9 	bl	80070f4 <RTC_ByteToBcd2>
 8006d42:	4603      	mov	r3, r0
 8006d44:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f9d2 	bl	80070f4 <RTC_ByteToBcd2>
 8006d50:	4603      	mov	r3, r0
 8006d52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006d54:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	789b      	ldrb	r3, [r3, #2]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f9ca 	bl	80070f4 <RTC_ByteToBcd2>
 8006d60:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d62:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	78db      	ldrb	r3, [r3, #3]
 8006d6a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006d6c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f9bc 	bl	80070f4 <RTC_ByteToBcd2>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006d80:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006d88:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	e023      	b.n	8006ddc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006db4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006dba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	78db      	ldrb	r3, [r3, #3]
 8006dc0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006dc2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006dcc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006dd2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	22ca      	movs	r2, #202	@ 0xca
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2253      	movs	r2, #83	@ 0x53
 8006df6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e00:	d142      	bne.n	8006e88 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e10:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006e22:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10b      	bne.n	8006e48 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	22ff      	movs	r2, #255	@ 0xff
 8006e36:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e083      	b.n	8006f50 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0e6      	beq.n	8006e24 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e74:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e84:	609a      	str	r2, [r3, #8]
 8006e86:	e04c      	b.n	8006f22 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006e96:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006ea8:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8006f58 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2b      	ldr	r2, [pc, #172]	@ (8006f5c <HAL_RTC_SetAlarm_IT+0x280>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	0adb      	lsrs	r3, r3, #11
 8006eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10b      	bne.n	8006ee4 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	22ff      	movs	r2, #255	@ 0xff
 8006ed2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e035      	b.n	8006f50 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0e6      	beq.n	8006ec0 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f10:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f20:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006f22:	4b0f      	ldr	r3, [pc, #60]	@ (8006f60 <HAL_RTC_SetAlarm_IT+0x284>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a0e      	ldr	r2, [pc, #56]	@ (8006f60 <HAL_RTC_SetAlarm_IT+0x284>)
 8006f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f2c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f60 <HAL_RTC_SetAlarm_IT+0x284>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	4a0b      	ldr	r2, [pc, #44]	@ (8006f60 <HAL_RTC_SetAlarm_IT+0x284>)
 8006f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f38:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	22ff      	movs	r2, #255	@ 0xff
 8006f40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3724      	adds	r7, #36	@ 0x24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd90      	pop	{r4, r7, pc}
 8006f58:	20000004 	.word	0x20000004
 8006f5c:	10624dd3 	.word	0x10624dd3
 8006f60:	40013c00 	.word	0x40013c00

08006f64 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006fec <HAL_RTC_AlarmIRQHandler+0x88>)
 8006f6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006f72:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d012      	beq.n	8006fa8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006fa0:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fb f87e 	bl	80020a4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d012      	beq.n	8006fdc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006fd4:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f8c8 	bl	800716c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	775a      	strb	r2, [r3, #29]
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40013c00 	.word	0x40013c00

08006ff0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0d      	ldr	r2, [pc, #52]	@ (8007038 <HAL_RTC_WaitForSynchro+0x48>)
 8007002:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007004:	f7fb fbac 	bl	8002760 <HAL_GetTick>
 8007008:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800700a:	e009      	b.n	8007020 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800700c:	f7fb fba8 	bl	8002760 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800701a:	d901      	bls.n	8007020 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e007      	b.n	8007030 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0ee      	beq.n	800700c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	00013f5f 	.word	0x00013f5f

0800703c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d122      	bne.n	80070a0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007068:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800706a:	f7fb fb79 	bl	8002760 <HAL_GetTick>
 800706e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007070:	e00c      	b.n	800708c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007072:	f7fb fb75 	bl	8002760 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007080:	d904      	bls.n	800708c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2204      	movs	r2, #4
 8007086:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d102      	bne.n	80070a0 <RTC_EnterInitMode+0x64>
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d1e8      	bne.n	8007072 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070c4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ff8b 	bl	8006ff0 <HAL_RTC_WaitForSynchro>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2204      	movs	r2, #4
 80070e4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007102:	e005      	b.n	8007110 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	3b0a      	subs	r3, #10
 800710e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b09      	cmp	r3, #9
 8007114:	d8f6      	bhi.n	8007104 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	b2da      	uxtb	r2, r3
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	4313      	orrs	r3, r2
 8007122:	b2db      	uxtb	r3, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	091b      	lsrs	r3, r3, #4
 8007142:	b2db      	uxtb	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	b2da      	uxtb	r2, r3
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	b2db      	uxtb	r3, r3
 800715c:	4413      	add	r3, r2
 800715e:	b2db      	uxtb	r3, r3
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e041      	b.n	8007216 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fb f9d0 	bl	800254c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f000 fe96 	bl	8007ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <HAL_TIM_OC_Start_IT+0x28>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	bf14      	ite	ne
 8007240:	2301      	movne	r3, #1
 8007242:	2300      	moveq	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	e022      	b.n	800728e <HAL_TIM_OC_Start_IT+0x6e>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b04      	cmp	r3, #4
 800724c:	d109      	bne.n	8007262 <HAL_TIM_OC_Start_IT+0x42>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b01      	cmp	r3, #1
 8007258:	bf14      	ite	ne
 800725a:	2301      	movne	r3, #1
 800725c:	2300      	moveq	r3, #0
 800725e:	b2db      	uxtb	r3, r3
 8007260:	e015      	b.n	800728e <HAL_TIM_OC_Start_IT+0x6e>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b08      	cmp	r3, #8
 8007266:	d109      	bne.n	800727c <HAL_TIM_OC_Start_IT+0x5c>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b01      	cmp	r3, #1
 8007272:	bf14      	ite	ne
 8007274:	2301      	movne	r3, #1
 8007276:	2300      	moveq	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	e008      	b.n	800728e <HAL_TIM_OC_Start_IT+0x6e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e0b3      	b.n	80073fe <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <HAL_TIM_OC_Start_IT+0x86>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072a4:	e013      	b.n	80072ce <HAL_TIM_OC_Start_IT+0xae>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d104      	bne.n	80072b6 <HAL_TIM_OC_Start_IT+0x96>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072b4:	e00b      	b.n	80072ce <HAL_TIM_OC_Start_IT+0xae>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_OC_Start_IT+0xa6>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072c4:	e003      	b.n	80072ce <HAL_TIM_OC_Start_IT+0xae>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b0c      	cmp	r3, #12
 80072d2:	d841      	bhi.n	8007358 <HAL_TIM_OC_Start_IT+0x138>
 80072d4:	a201      	add	r2, pc, #4	@ (adr r2, 80072dc <HAL_TIM_OC_Start_IT+0xbc>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	08007311 	.word	0x08007311
 80072e0:	08007359 	.word	0x08007359
 80072e4:	08007359 	.word	0x08007359
 80072e8:	08007359 	.word	0x08007359
 80072ec:	08007323 	.word	0x08007323
 80072f0:	08007359 	.word	0x08007359
 80072f4:	08007359 	.word	0x08007359
 80072f8:	08007359 	.word	0x08007359
 80072fc:	08007335 	.word	0x08007335
 8007300:	08007359 	.word	0x08007359
 8007304:	08007359 	.word	0x08007359
 8007308:	08007359 	.word	0x08007359
 800730c:	08007347 	.word	0x08007347
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0202 	orr.w	r2, r2, #2
 800731e:	60da      	str	r2, [r3, #12]
      break;
 8007320:	e01d      	b.n	800735e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0204 	orr.w	r2, r2, #4
 8007330:	60da      	str	r2, [r3, #12]
      break;
 8007332:	e014      	b.n	800735e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0208 	orr.w	r2, r2, #8
 8007342:	60da      	str	r2, [r3, #12]
      break;
 8007344:	e00b      	b.n	800735e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0210 	orr.w	r2, r2, #16
 8007354:	60da      	str	r2, [r3, #12]
      break;
 8007356:	e002      	b.n	800735e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
      break;
 800735c:	bf00      	nop
  }

  if (status == HAL_OK)
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d14b      	bne.n	80073fc <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2201      	movs	r2, #1
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 ffd1 	bl	8008314 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a24      	ldr	r2, [pc, #144]	@ (8007408 <HAL_TIM_OC_Start_IT+0x1e8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d107      	bne.n	800738c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800738a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1d      	ldr	r2, [pc, #116]	@ (8007408 <HAL_TIM_OC_Start_IT+0x1e8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d018      	beq.n	80073c8 <HAL_TIM_OC_Start_IT+0x1a8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739e:	d013      	beq.n	80073c8 <HAL_TIM_OC_Start_IT+0x1a8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a19      	ldr	r2, [pc, #100]	@ (800740c <HAL_TIM_OC_Start_IT+0x1ec>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00e      	beq.n	80073c8 <HAL_TIM_OC_Start_IT+0x1a8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a18      	ldr	r2, [pc, #96]	@ (8007410 <HAL_TIM_OC_Start_IT+0x1f0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d009      	beq.n	80073c8 <HAL_TIM_OC_Start_IT+0x1a8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a16      	ldr	r2, [pc, #88]	@ (8007414 <HAL_TIM_OC_Start_IT+0x1f4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d004      	beq.n	80073c8 <HAL_TIM_OC_Start_IT+0x1a8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a15      	ldr	r2, [pc, #84]	@ (8007418 <HAL_TIM_OC_Start_IT+0x1f8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d111      	bne.n	80073ec <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b06      	cmp	r3, #6
 80073d8:	d010      	beq.n	80073fc <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0201 	orr.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ea:	e007      	b.n	80073fc <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	40010000 	.word	0x40010000
 800740c:	40000400 	.word	0x40000400
 8007410:	40000800 	.word	0x40000800
 8007414:	40000c00 	.word	0x40000c00
 8007418:	40014000 	.word	0x40014000

0800741c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e041      	b.n	80074b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fb f85a 	bl	80024fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3304      	adds	r3, #4
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f000 fd48 	bl	8007ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d109      	bne.n	80074e4 <HAL_TIM_PWM_Start_IT+0x28>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b01      	cmp	r3, #1
 80074da:	bf14      	ite	ne
 80074dc:	2301      	movne	r3, #1
 80074de:	2300      	moveq	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	e022      	b.n	800752a <HAL_TIM_PWM_Start_IT+0x6e>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d109      	bne.n	80074fe <HAL_TIM_PWM_Start_IT+0x42>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	bf14      	ite	ne
 80074f6:	2301      	movne	r3, #1
 80074f8:	2300      	moveq	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	e015      	b.n	800752a <HAL_TIM_PWM_Start_IT+0x6e>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b08      	cmp	r3, #8
 8007502:	d109      	bne.n	8007518 <HAL_TIM_PWM_Start_IT+0x5c>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	bf14      	ite	ne
 8007510:	2301      	movne	r3, #1
 8007512:	2300      	moveq	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	e008      	b.n	800752a <HAL_TIM_PWM_Start_IT+0x6e>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	bf14      	ite	ne
 8007524:	2301      	movne	r3, #1
 8007526:	2300      	moveq	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e0b3      	b.n	800769a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <HAL_TIM_PWM_Start_IT+0x86>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007540:	e013      	b.n	800756a <HAL_TIM_PWM_Start_IT+0xae>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b04      	cmp	r3, #4
 8007546:	d104      	bne.n	8007552 <HAL_TIM_PWM_Start_IT+0x96>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007550:	e00b      	b.n	800756a <HAL_TIM_PWM_Start_IT+0xae>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b08      	cmp	r3, #8
 8007556:	d104      	bne.n	8007562 <HAL_TIM_PWM_Start_IT+0xa6>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007560:	e003      	b.n	800756a <HAL_TIM_PWM_Start_IT+0xae>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2202      	movs	r2, #2
 8007566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b0c      	cmp	r3, #12
 800756e:	d841      	bhi.n	80075f4 <HAL_TIM_PWM_Start_IT+0x138>
 8007570:	a201      	add	r2, pc, #4	@ (adr r2, 8007578 <HAL_TIM_PWM_Start_IT+0xbc>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	080075ad 	.word	0x080075ad
 800757c:	080075f5 	.word	0x080075f5
 8007580:	080075f5 	.word	0x080075f5
 8007584:	080075f5 	.word	0x080075f5
 8007588:	080075bf 	.word	0x080075bf
 800758c:	080075f5 	.word	0x080075f5
 8007590:	080075f5 	.word	0x080075f5
 8007594:	080075f5 	.word	0x080075f5
 8007598:	080075d1 	.word	0x080075d1
 800759c:	080075f5 	.word	0x080075f5
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	080075f5 	.word	0x080075f5
 80075a8:	080075e3 	.word	0x080075e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0202 	orr.w	r2, r2, #2
 80075ba:	60da      	str	r2, [r3, #12]
      break;
 80075bc:	e01d      	b.n	80075fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0204 	orr.w	r2, r2, #4
 80075cc:	60da      	str	r2, [r3, #12]
      break;
 80075ce:	e014      	b.n	80075fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0208 	orr.w	r2, r2, #8
 80075de:	60da      	str	r2, [r3, #12]
      break;
 80075e0:	e00b      	b.n	80075fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0210 	orr.w	r2, r2, #16
 80075f0:	60da      	str	r2, [r3, #12]
      break;
 80075f2:	e002      	b.n	80075fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	73fb      	strb	r3, [r7, #15]
      break;
 80075f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d14b      	bne.n	8007698 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2201      	movs	r2, #1
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fe83 	bl	8008314 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a24      	ldr	r2, [pc, #144]	@ (80076a4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d107      	bne.n	8007628 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007626:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a1d      	ldr	r2, [pc, #116]	@ (80076a4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d018      	beq.n	8007664 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800763a:	d013      	beq.n	8007664 <HAL_TIM_PWM_Start_IT+0x1a8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a19      	ldr	r2, [pc, #100]	@ (80076a8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00e      	beq.n	8007664 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <HAL_TIM_PWM_Start_IT+0x1f0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a16      	ldr	r2, [pc, #88]	@ (80076b0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_TIM_PWM_Start_IT+0x1a8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a15      	ldr	r2, [pc, #84]	@ (80076b4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d111      	bne.n	8007688 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b06      	cmp	r3, #6
 8007674:	d010      	beq.n	8007698 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0201 	orr.w	r2, r2, #1
 8007684:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007686:	e007      	b.n	8007698 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40010000 	.word	0x40010000
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40014000 	.word	0x40014000

080076b8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b0c      	cmp	r3, #12
 80076ca:	d841      	bhi.n	8007750 <HAL_TIM_PWM_Stop_IT+0x98>
 80076cc:	a201      	add	r2, pc, #4	@ (adr r2, 80076d4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	08007709 	.word	0x08007709
 80076d8:	08007751 	.word	0x08007751
 80076dc:	08007751 	.word	0x08007751
 80076e0:	08007751 	.word	0x08007751
 80076e4:	0800771b 	.word	0x0800771b
 80076e8:	08007751 	.word	0x08007751
 80076ec:	08007751 	.word	0x08007751
 80076f0:	08007751 	.word	0x08007751
 80076f4:	0800772d 	.word	0x0800772d
 80076f8:	08007751 	.word	0x08007751
 80076fc:	08007751 	.word	0x08007751
 8007700:	08007751 	.word	0x08007751
 8007704:	0800773f 	.word	0x0800773f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0202 	bic.w	r2, r2, #2
 8007716:	60da      	str	r2, [r3, #12]
      break;
 8007718:	e01d      	b.n	8007756 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0204 	bic.w	r2, r2, #4
 8007728:	60da      	str	r2, [r3, #12]
      break;
 800772a:	e014      	b.n	8007756 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0208 	bic.w	r2, r2, #8
 800773a:	60da      	str	r2, [r3, #12]
      break;
 800773c:	e00b      	b.n	8007756 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0210 	bic.w	r2, r2, #16
 800774c:	60da      	str	r2, [r3, #12]
      break;
 800774e:	e002      	b.n	8007756 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
      break;
 8007754:	bf00      	nop
  }

  if (status == HAL_OK)
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d157      	bne.n	800780c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2200      	movs	r2, #0
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fdd5 	bl	8008314 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a2a      	ldr	r2, [pc, #168]	@ (8007818 <HAL_TIM_PWM_Stop_IT+0x160>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d117      	bne.n	80077a4 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6a1a      	ldr	r2, [r3, #32]
 800777a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800777e:	4013      	ands	r3, r2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10f      	bne.n	80077a4 <HAL_TIM_PWM_Stop_IT+0xec>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6a1a      	ldr	r2, [r3, #32]
 800778a:	f240 4344 	movw	r3, #1092	@ 0x444
 800778e:	4013      	ands	r3, r2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d107      	bne.n	80077a4 <HAL_TIM_PWM_Stop_IT+0xec>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6a1a      	ldr	r2, [r3, #32]
 80077aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10f      	bne.n	80077d4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d107      	bne.n	80077d4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <HAL_TIM_PWM_Stop_IT+0x12c>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077e2:	e013      	b.n	800780c <HAL_TIM_PWM_Stop_IT+0x154>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d104      	bne.n	80077f4 <HAL_TIM_PWM_Stop_IT+0x13c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077f2:	e00b      	b.n	800780c <HAL_TIM_PWM_Stop_IT+0x154>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d104      	bne.n	8007804 <HAL_TIM_PWM_Stop_IT+0x14c>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007802:	e003      	b.n	800780c <HAL_TIM_PWM_Stop_IT+0x154>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	40010000 	.word	0x40010000

0800781c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e097      	b.n	8007960 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fa fe01 	bl	800244c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6812      	ldr	r2, [r2, #0]
 800785c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007860:	f023 0307 	bic.w	r3, r3, #7
 8007864:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3304      	adds	r3, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f000 fb3d 	bl	8007ef0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789e:	f023 0303 	bic.w	r3, r3, #3
 80078a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	4313      	orrs	r3, r2
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80078bc:	f023 030c 	bic.w	r3, r3, #12
 80078c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	4313      	orrs	r3, r2
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	011a      	lsls	r2, r3, #4
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	031b      	lsls	r3, r3, #12
 80078ec:	4313      	orrs	r3, r2
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80078fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007902:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	4313      	orrs	r3, r2
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007978:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007980:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007988:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007990:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d110      	bne.n	80079ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d102      	bne.n	80079a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800799e:	7b7b      	ldrb	r3, [r7, #13]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d001      	beq.n	80079a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e069      	b.n	8007a7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079b8:	e031      	b.n	8007a1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d110      	bne.n	80079e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d102      	bne.n	80079cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079c6:	7b3b      	ldrb	r3, [r7, #12]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d001      	beq.n	80079d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e055      	b.n	8007a7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079e0:	e01d      	b.n	8007a1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d108      	bne.n	80079fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d105      	bne.n	80079fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079ee:	7b7b      	ldrb	r3, [r7, #13]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d102      	bne.n	80079fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079f4:	7b3b      	ldrb	r3, [r7, #12]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d001      	beq.n	80079fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e03e      	b.n	8007a7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2202      	movs	r2, #2
 8007a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_TIM_Encoder_Start+0xc4>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d008      	beq.n	8007a3c <HAL_TIM_Encoder_Start+0xd4>
 8007a2a:	e00f      	b.n	8007a4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2201      	movs	r2, #1
 8007a32:	2100      	movs	r1, #0
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 fc6d 	bl	8008314 <TIM_CCxChannelCmd>
      break;
 8007a3a:	e016      	b.n	8007a6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2201      	movs	r2, #1
 8007a42:	2104      	movs	r1, #4
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 fc65 	bl	8008314 <TIM_CCxChannelCmd>
      break;
 8007a4a:	e00e      	b.n	8007a6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2201      	movs	r2, #1
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 fc5d 	bl	8008314 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	2104      	movs	r1, #4
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fc56 	bl	8008314 <TIM_CCxChannelCmd>
      break;
 8007a68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d020      	beq.n	8007ae8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01b      	beq.n	8007ae8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0202 	mvn.w	r2, #2
 8007ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f9fa 	bl	8007ec8 <HAL_TIM_IC_CaptureCallback>
 8007ad4:	e005      	b.n	8007ae2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9ec 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7fa fa31 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d020      	beq.n	8007b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01b      	beq.n	8007b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0204 	mvn.w	r2, #4
 8007b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9d4 	bl	8007ec8 <HAL_TIM_IC_CaptureCallback>
 8007b20:	e005      	b.n	8007b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9c6 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7fa fa0b 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d020      	beq.n	8007b80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01b      	beq.n	8007b80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f06f 0208 	mvn.w	r2, #8
 8007b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2204      	movs	r2, #4
 8007b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f9ae 	bl	8007ec8 <HAL_TIM_IC_CaptureCallback>
 8007b6c:	e005      	b.n	8007b7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9a0 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7fa f9e5 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f003 0310 	and.w	r3, r3, #16
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d020      	beq.n	8007bcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01b      	beq.n	8007bcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0210 	mvn.w	r2, #16
 8007b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f988 	bl	8007ec8 <HAL_TIM_IC_CaptureCallback>
 8007bb8:	e005      	b.n	8007bc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f97a 	bl	8007eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7fa f9bf 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00c      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d007      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0201 	mvn.w	r2, #1
 8007be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f958 	bl	8007ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00c      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d007      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fc1e 	bl	8008450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00c      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f952 	bl	8007edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00c      	beq.n	8007c5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d007      	beq.n	8007c5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0220 	mvn.w	r2, #32
 8007c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fbf0 	bl	800843c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c5c:	bf00      	nop
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e048      	b.n	8007d14 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b0c      	cmp	r3, #12
 8007c8e:	d839      	bhi.n	8007d04 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007c90:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007ccd 	.word	0x08007ccd
 8007c9c:	08007d05 	.word	0x08007d05
 8007ca0:	08007d05 	.word	0x08007d05
 8007ca4:	08007d05 	.word	0x08007d05
 8007ca8:	08007cdb 	.word	0x08007cdb
 8007cac:	08007d05 	.word	0x08007d05
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007d05 	.word	0x08007d05
 8007cb8:	08007ce9 	.word	0x08007ce9
 8007cbc:	08007d05 	.word	0x08007d05
 8007cc0:	08007d05 	.word	0x08007d05
 8007cc4:	08007d05 	.word	0x08007d05
 8007cc8:	08007cf7 	.word	0x08007cf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68b9      	ldr	r1, [r7, #8]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f992 	bl	8007ffc <TIM_OC1_SetConfig>
      break;
 8007cd8:	e017      	b.n	8007d0a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f9f1 	bl	80080c8 <TIM_OC2_SetConfig>
      break;
 8007ce6:	e010      	b.n	8007d0a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fa56 	bl	80081a0 <TIM_OC3_SetConfig>
      break;
 8007cf4:	e009      	b.n	8007d0a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fab9 	bl	8008274 <TIM_OC4_SetConfig>
      break;
 8007d02:	e002      	b.n	8007d0a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]
      break;
 8007d08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e0ae      	b.n	8007e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b0c      	cmp	r3, #12
 8007d46:	f200 809f 	bhi.w	8007e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d85 	.word	0x08007d85
 8007d54:	08007e89 	.word	0x08007e89
 8007d58:	08007e89 	.word	0x08007e89
 8007d5c:	08007e89 	.word	0x08007e89
 8007d60:	08007dc5 	.word	0x08007dc5
 8007d64:	08007e89 	.word	0x08007e89
 8007d68:	08007e89 	.word	0x08007e89
 8007d6c:	08007e89 	.word	0x08007e89
 8007d70:	08007e07 	.word	0x08007e07
 8007d74:	08007e89 	.word	0x08007e89
 8007d78:	08007e89 	.word	0x08007e89
 8007d7c:	08007e89 	.word	0x08007e89
 8007d80:	08007e47 	.word	0x08007e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f936 	bl	8007ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0208 	orr.w	r2, r2, #8
 8007d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0204 	bic.w	r2, r2, #4
 8007dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6999      	ldr	r1, [r3, #24]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	691a      	ldr	r2, [r3, #16]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	619a      	str	r2, [r3, #24]
      break;
 8007dc2:	e064      	b.n	8007e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68b9      	ldr	r1, [r7, #8]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f97c 	bl	80080c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699a      	ldr	r2, [r3, #24]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6999      	ldr	r1, [r3, #24]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	021a      	lsls	r2, r3, #8
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	619a      	str	r2, [r3, #24]
      break;
 8007e04:	e043      	b.n	8007e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 f9c7 	bl	80081a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f042 0208 	orr.w	r2, r2, #8
 8007e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69da      	ldr	r2, [r3, #28]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0204 	bic.w	r2, r2, #4
 8007e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69d9      	ldr	r1, [r3, #28]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	691a      	ldr	r2, [r3, #16]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	61da      	str	r2, [r3, #28]
      break;
 8007e44:	e023      	b.n	8007e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68b9      	ldr	r1, [r7, #8]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fa11 	bl	8008274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69da      	ldr	r2, [r3, #28]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69da      	ldr	r2, [r3, #28]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69d9      	ldr	r1, [r3, #28]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	021a      	lsls	r2, r3, #8
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	61da      	str	r2, [r3, #28]
      break;
 8007e86:	e002      	b.n	8007e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a37      	ldr	r2, [pc, #220]	@ (8007fe0 <TIM_Base_SetConfig+0xf0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00f      	beq.n	8007f28 <TIM_Base_SetConfig+0x38>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0e:	d00b      	beq.n	8007f28 <TIM_Base_SetConfig+0x38>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a34      	ldr	r2, [pc, #208]	@ (8007fe4 <TIM_Base_SetConfig+0xf4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d007      	beq.n	8007f28 <TIM_Base_SetConfig+0x38>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a33      	ldr	r2, [pc, #204]	@ (8007fe8 <TIM_Base_SetConfig+0xf8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d003      	beq.n	8007f28 <TIM_Base_SetConfig+0x38>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a32      	ldr	r2, [pc, #200]	@ (8007fec <TIM_Base_SetConfig+0xfc>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d108      	bne.n	8007f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a28      	ldr	r2, [pc, #160]	@ (8007fe0 <TIM_Base_SetConfig+0xf0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d01b      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f48:	d017      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a25      	ldr	r2, [pc, #148]	@ (8007fe4 <TIM_Base_SetConfig+0xf4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d013      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a24      	ldr	r2, [pc, #144]	@ (8007fe8 <TIM_Base_SetConfig+0xf8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00f      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a23      	ldr	r2, [pc, #140]	@ (8007fec <TIM_Base_SetConfig+0xfc>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00b      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a22      	ldr	r2, [pc, #136]	@ (8007ff0 <TIM_Base_SetConfig+0x100>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a21      	ldr	r2, [pc, #132]	@ (8007ff4 <TIM_Base_SetConfig+0x104>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_Base_SetConfig+0x8a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a20      	ldr	r2, [pc, #128]	@ (8007ff8 <TIM_Base_SetConfig+0x108>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d108      	bne.n	8007f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a0c      	ldr	r2, [pc, #48]	@ (8007fe0 <TIM_Base_SetConfig+0xf0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d103      	bne.n	8007fba <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f043 0204 	orr.w	r2, r3, #4
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	601a      	str	r2, [r3, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40000400 	.word	0x40000400
 8007fe8:	40000800 	.word	0x40000800
 8007fec:	40000c00 	.word	0x40000c00
 8007ff0:	40014000 	.word	0x40014000
 8007ff4:	40014400 	.word	0x40014400
 8007ff8:	40014800 	.word	0x40014800

08007ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	f023 0201 	bic.w	r2, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800802a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0303 	bic.w	r3, r3, #3
 8008032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f023 0302 	bic.w	r3, r3, #2
 8008044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1c      	ldr	r2, [pc, #112]	@ (80080c4 <TIM_OC1_SetConfig+0xc8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d10c      	bne.n	8008072 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f023 0308 	bic.w	r3, r3, #8
 800805e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f023 0304 	bic.w	r3, r3, #4
 8008070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a13      	ldr	r2, [pc, #76]	@ (80080c4 <TIM_OC1_SetConfig+0xc8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d111      	bne.n	800809e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	621a      	str	r2, [r3, #32]
}
 80080b8:	bf00      	nop
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	40010000 	.word	0x40010000

080080c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f023 0210 	bic.w	r2, r3, #16
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f023 0320 	bic.w	r3, r3, #32
 8008112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a1e      	ldr	r2, [pc, #120]	@ (800819c <TIM_OC2_SetConfig+0xd4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d10d      	bne.n	8008144 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800812e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	4313      	orrs	r3, r2
 800813a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008142:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a15      	ldr	r2, [pc, #84]	@ (800819c <TIM_OC2_SetConfig+0xd4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d113      	bne.n	8008174 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4313      	orrs	r3, r2
 8008172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000

080081a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0303 	bic.w	r3, r3, #3
 80081d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008270 <TIM_OC3_SetConfig+0xd0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d10d      	bne.n	800821a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a14      	ldr	r2, [pc, #80]	@ (8008270 <TIM_OC3_SetConfig+0xd0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d113      	bne.n	800824a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	621a      	str	r2, [r3, #32]
}
 8008264:	bf00      	nop
 8008266:	371c      	adds	r7, #28
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	40010000 	.word	0x40010000

08008274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	031b      	lsls	r3, r3, #12
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a10      	ldr	r2, [pc, #64]	@ (8008310 <TIM_OC4_SetConfig+0x9c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d109      	bne.n	80082e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	019b      	lsls	r3, r3, #6
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40010000 	.word	0x40010000

08008314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	2201      	movs	r2, #1
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6a1a      	ldr	r2, [r3, #32]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	43db      	mvns	r3, r3
 8008336:	401a      	ands	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a1a      	ldr	r2, [r3, #32]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f003 031f 	and.w	r3, r3, #31
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	fa01 f303 	lsl.w	r3, r1, r3
 800834c:	431a      	orrs	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	621a      	str	r2, [r3, #32]
}
 8008352:	bf00      	nop
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
	...

08008360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008374:	2302      	movs	r3, #2
 8008376:	e050      	b.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800839e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d018      	beq.n	80083ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c4:	d013      	beq.n	80083ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a18      	ldr	r2, [pc, #96]	@ (800842c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00e      	beq.n	80083ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a16      	ldr	r2, [pc, #88]	@ (8008430 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d009      	beq.n	80083ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a15      	ldr	r2, [pc, #84]	@ (8008434 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d004      	beq.n	80083ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a13      	ldr	r2, [pc, #76]	@ (8008438 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d10c      	bne.n	8008408 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	40010000 	.word	0x40010000
 800842c:	40000400 	.word	0x40000400
 8008430:	40000800 	.word	0x40000800
 8008434:	40000c00 	.word	0x40000c00
 8008438:	40014000 	.word	0x40014000

0800843c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <malloc>:
 8008464:	4b02      	ldr	r3, [pc, #8]	@ (8008470 <malloc+0xc>)
 8008466:	4601      	mov	r1, r0
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f000 b825 	b.w	80084b8 <_malloc_r>
 800846e:	bf00      	nop
 8008470:	2000001c 	.word	0x2000001c

08008474 <sbrk_aligned>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	4e0f      	ldr	r6, [pc, #60]	@ (80084b4 <sbrk_aligned+0x40>)
 8008478:	460c      	mov	r4, r1
 800847a:	6831      	ldr	r1, [r6, #0]
 800847c:	4605      	mov	r5, r0
 800847e:	b911      	cbnz	r1, 8008486 <sbrk_aligned+0x12>
 8008480:	f000 fa1c 	bl	80088bc <_sbrk_r>
 8008484:	6030      	str	r0, [r6, #0]
 8008486:	4621      	mov	r1, r4
 8008488:	4628      	mov	r0, r5
 800848a:	f000 fa17 	bl	80088bc <_sbrk_r>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	d103      	bne.n	800849a <sbrk_aligned+0x26>
 8008492:	f04f 34ff 	mov.w	r4, #4294967295
 8008496:	4620      	mov	r0, r4
 8008498:	bd70      	pop	{r4, r5, r6, pc}
 800849a:	1cc4      	adds	r4, r0, #3
 800849c:	f024 0403 	bic.w	r4, r4, #3
 80084a0:	42a0      	cmp	r0, r4
 80084a2:	d0f8      	beq.n	8008496 <sbrk_aligned+0x22>
 80084a4:	1a21      	subs	r1, r4, r0
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 fa08 	bl	80088bc <_sbrk_r>
 80084ac:	3001      	adds	r0, #1
 80084ae:	d1f2      	bne.n	8008496 <sbrk_aligned+0x22>
 80084b0:	e7ef      	b.n	8008492 <sbrk_aligned+0x1e>
 80084b2:	bf00      	nop
 80084b4:	20000354 	.word	0x20000354

080084b8 <_malloc_r>:
 80084b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084bc:	1ccd      	adds	r5, r1, #3
 80084be:	f025 0503 	bic.w	r5, r5, #3
 80084c2:	3508      	adds	r5, #8
 80084c4:	2d0c      	cmp	r5, #12
 80084c6:	bf38      	it	cc
 80084c8:	250c      	movcc	r5, #12
 80084ca:	2d00      	cmp	r5, #0
 80084cc:	4606      	mov	r6, r0
 80084ce:	db01      	blt.n	80084d4 <_malloc_r+0x1c>
 80084d0:	42a9      	cmp	r1, r5
 80084d2:	d904      	bls.n	80084de <_malloc_r+0x26>
 80084d4:	230c      	movs	r3, #12
 80084d6:	6033      	str	r3, [r6, #0]
 80084d8:	2000      	movs	r0, #0
 80084da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085b4 <_malloc_r+0xfc>
 80084e2:	f000 f869 	bl	80085b8 <__malloc_lock>
 80084e6:	f8d8 3000 	ldr.w	r3, [r8]
 80084ea:	461c      	mov	r4, r3
 80084ec:	bb44      	cbnz	r4, 8008540 <_malloc_r+0x88>
 80084ee:	4629      	mov	r1, r5
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff ffbf 	bl	8008474 <sbrk_aligned>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	4604      	mov	r4, r0
 80084fa:	d158      	bne.n	80085ae <_malloc_r+0xf6>
 80084fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008500:	4627      	mov	r7, r4
 8008502:	2f00      	cmp	r7, #0
 8008504:	d143      	bne.n	800858e <_malloc_r+0xd6>
 8008506:	2c00      	cmp	r4, #0
 8008508:	d04b      	beq.n	80085a2 <_malloc_r+0xea>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	4639      	mov	r1, r7
 800850e:	4630      	mov	r0, r6
 8008510:	eb04 0903 	add.w	r9, r4, r3
 8008514:	f000 f9d2 	bl	80088bc <_sbrk_r>
 8008518:	4581      	cmp	r9, r0
 800851a:	d142      	bne.n	80085a2 <_malloc_r+0xea>
 800851c:	6821      	ldr	r1, [r4, #0]
 800851e:	1a6d      	subs	r5, r5, r1
 8008520:	4629      	mov	r1, r5
 8008522:	4630      	mov	r0, r6
 8008524:	f7ff ffa6 	bl	8008474 <sbrk_aligned>
 8008528:	3001      	adds	r0, #1
 800852a:	d03a      	beq.n	80085a2 <_malloc_r+0xea>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	442b      	add	r3, r5
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	f8d8 3000 	ldr.w	r3, [r8]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	bb62      	cbnz	r2, 8008594 <_malloc_r+0xdc>
 800853a:	f8c8 7000 	str.w	r7, [r8]
 800853e:	e00f      	b.n	8008560 <_malloc_r+0xa8>
 8008540:	6822      	ldr	r2, [r4, #0]
 8008542:	1b52      	subs	r2, r2, r5
 8008544:	d420      	bmi.n	8008588 <_malloc_r+0xd0>
 8008546:	2a0b      	cmp	r2, #11
 8008548:	d917      	bls.n	800857a <_malloc_r+0xc2>
 800854a:	1961      	adds	r1, r4, r5
 800854c:	42a3      	cmp	r3, r4
 800854e:	6025      	str	r5, [r4, #0]
 8008550:	bf18      	it	ne
 8008552:	6059      	strne	r1, [r3, #4]
 8008554:	6863      	ldr	r3, [r4, #4]
 8008556:	bf08      	it	eq
 8008558:	f8c8 1000 	streq.w	r1, [r8]
 800855c:	5162      	str	r2, [r4, r5]
 800855e:	604b      	str	r3, [r1, #4]
 8008560:	4630      	mov	r0, r6
 8008562:	f000 f82f 	bl	80085c4 <__malloc_unlock>
 8008566:	f104 000b 	add.w	r0, r4, #11
 800856a:	1d23      	adds	r3, r4, #4
 800856c:	f020 0007 	bic.w	r0, r0, #7
 8008570:	1ac2      	subs	r2, r0, r3
 8008572:	bf1c      	itt	ne
 8008574:	1a1b      	subne	r3, r3, r0
 8008576:	50a3      	strne	r3, [r4, r2]
 8008578:	e7af      	b.n	80084da <_malloc_r+0x22>
 800857a:	6862      	ldr	r2, [r4, #4]
 800857c:	42a3      	cmp	r3, r4
 800857e:	bf0c      	ite	eq
 8008580:	f8c8 2000 	streq.w	r2, [r8]
 8008584:	605a      	strne	r2, [r3, #4]
 8008586:	e7eb      	b.n	8008560 <_malloc_r+0xa8>
 8008588:	4623      	mov	r3, r4
 800858a:	6864      	ldr	r4, [r4, #4]
 800858c:	e7ae      	b.n	80084ec <_malloc_r+0x34>
 800858e:	463c      	mov	r4, r7
 8008590:	687f      	ldr	r7, [r7, #4]
 8008592:	e7b6      	b.n	8008502 <_malloc_r+0x4a>
 8008594:	461a      	mov	r2, r3
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	42a3      	cmp	r3, r4
 800859a:	d1fb      	bne.n	8008594 <_malloc_r+0xdc>
 800859c:	2300      	movs	r3, #0
 800859e:	6053      	str	r3, [r2, #4]
 80085a0:	e7de      	b.n	8008560 <_malloc_r+0xa8>
 80085a2:	230c      	movs	r3, #12
 80085a4:	6033      	str	r3, [r6, #0]
 80085a6:	4630      	mov	r0, r6
 80085a8:	f000 f80c 	bl	80085c4 <__malloc_unlock>
 80085ac:	e794      	b.n	80084d8 <_malloc_r+0x20>
 80085ae:	6005      	str	r5, [r0, #0]
 80085b0:	e7d6      	b.n	8008560 <_malloc_r+0xa8>
 80085b2:	bf00      	nop
 80085b4:	20000358 	.word	0x20000358

080085b8 <__malloc_lock>:
 80085b8:	4801      	ldr	r0, [pc, #4]	@ (80085c0 <__malloc_lock+0x8>)
 80085ba:	f000 b9cc 	b.w	8008956 <__retarget_lock_acquire_recursive>
 80085be:	bf00      	nop
 80085c0:	2000049c 	.word	0x2000049c

080085c4 <__malloc_unlock>:
 80085c4:	4801      	ldr	r0, [pc, #4]	@ (80085cc <__malloc_unlock+0x8>)
 80085c6:	f000 b9c7 	b.w	8008958 <__retarget_lock_release_recursive>
 80085ca:	bf00      	nop
 80085cc:	2000049c 	.word	0x2000049c

080085d0 <std>:
 80085d0:	2300      	movs	r3, #0
 80085d2:	b510      	push	{r4, lr}
 80085d4:	4604      	mov	r4, r0
 80085d6:	e9c0 3300 	strd	r3, r3, [r0]
 80085da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085de:	6083      	str	r3, [r0, #8]
 80085e0:	8181      	strh	r1, [r0, #12]
 80085e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80085e4:	81c2      	strh	r2, [r0, #14]
 80085e6:	6183      	str	r3, [r0, #24]
 80085e8:	4619      	mov	r1, r3
 80085ea:	2208      	movs	r2, #8
 80085ec:	305c      	adds	r0, #92	@ 0x5c
 80085ee:	f000 f928 	bl	8008842 <memset>
 80085f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008628 <std+0x58>)
 80085f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80085f6:	4b0d      	ldr	r3, [pc, #52]	@ (800862c <std+0x5c>)
 80085f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008630 <std+0x60>)
 80085fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <std+0x64>)
 8008600:	6323      	str	r3, [r4, #48]	@ 0x30
 8008602:	4b0d      	ldr	r3, [pc, #52]	@ (8008638 <std+0x68>)
 8008604:	6224      	str	r4, [r4, #32]
 8008606:	429c      	cmp	r4, r3
 8008608:	d006      	beq.n	8008618 <std+0x48>
 800860a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800860e:	4294      	cmp	r4, r2
 8008610:	d002      	beq.n	8008618 <std+0x48>
 8008612:	33d0      	adds	r3, #208	@ 0xd0
 8008614:	429c      	cmp	r4, r3
 8008616:	d105      	bne.n	8008624 <std+0x54>
 8008618:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800861c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008620:	f000 b998 	b.w	8008954 <__retarget_lock_init_recursive>
 8008624:	bd10      	pop	{r4, pc}
 8008626:	bf00      	nop
 8008628:	080087bd 	.word	0x080087bd
 800862c:	080087df 	.word	0x080087df
 8008630:	08008817 	.word	0x08008817
 8008634:	0800883b 	.word	0x0800883b
 8008638:	2000035c 	.word	0x2000035c

0800863c <stdio_exit_handler>:
 800863c:	4a02      	ldr	r2, [pc, #8]	@ (8008648 <stdio_exit_handler+0xc>)
 800863e:	4903      	ldr	r1, [pc, #12]	@ (800864c <stdio_exit_handler+0x10>)
 8008640:	4803      	ldr	r0, [pc, #12]	@ (8008650 <stdio_exit_handler+0x14>)
 8008642:	f000 b869 	b.w	8008718 <_fwalk_sglue>
 8008646:	bf00      	nop
 8008648:	20000010 	.word	0x20000010
 800864c:	08009345 	.word	0x08009345
 8008650:	20000020 	.word	0x20000020

08008654 <cleanup_stdio>:
 8008654:	6841      	ldr	r1, [r0, #4]
 8008656:	4b0c      	ldr	r3, [pc, #48]	@ (8008688 <cleanup_stdio+0x34>)
 8008658:	4299      	cmp	r1, r3
 800865a:	b510      	push	{r4, lr}
 800865c:	4604      	mov	r4, r0
 800865e:	d001      	beq.n	8008664 <cleanup_stdio+0x10>
 8008660:	f000 fe70 	bl	8009344 <_fflush_r>
 8008664:	68a1      	ldr	r1, [r4, #8]
 8008666:	4b09      	ldr	r3, [pc, #36]	@ (800868c <cleanup_stdio+0x38>)
 8008668:	4299      	cmp	r1, r3
 800866a:	d002      	beq.n	8008672 <cleanup_stdio+0x1e>
 800866c:	4620      	mov	r0, r4
 800866e:	f000 fe69 	bl	8009344 <_fflush_r>
 8008672:	68e1      	ldr	r1, [r4, #12]
 8008674:	4b06      	ldr	r3, [pc, #24]	@ (8008690 <cleanup_stdio+0x3c>)
 8008676:	4299      	cmp	r1, r3
 8008678:	d004      	beq.n	8008684 <cleanup_stdio+0x30>
 800867a:	4620      	mov	r0, r4
 800867c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008680:	f000 be60 	b.w	8009344 <_fflush_r>
 8008684:	bd10      	pop	{r4, pc}
 8008686:	bf00      	nop
 8008688:	2000035c 	.word	0x2000035c
 800868c:	200003c4 	.word	0x200003c4
 8008690:	2000042c 	.word	0x2000042c

08008694 <global_stdio_init.part.0>:
 8008694:	b510      	push	{r4, lr}
 8008696:	4b0b      	ldr	r3, [pc, #44]	@ (80086c4 <global_stdio_init.part.0+0x30>)
 8008698:	4c0b      	ldr	r4, [pc, #44]	@ (80086c8 <global_stdio_init.part.0+0x34>)
 800869a:	4a0c      	ldr	r2, [pc, #48]	@ (80086cc <global_stdio_init.part.0+0x38>)
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	4620      	mov	r0, r4
 80086a0:	2200      	movs	r2, #0
 80086a2:	2104      	movs	r1, #4
 80086a4:	f7ff ff94 	bl	80085d0 <std>
 80086a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086ac:	2201      	movs	r2, #1
 80086ae:	2109      	movs	r1, #9
 80086b0:	f7ff ff8e 	bl	80085d0 <std>
 80086b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086b8:	2202      	movs	r2, #2
 80086ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086be:	2112      	movs	r1, #18
 80086c0:	f7ff bf86 	b.w	80085d0 <std>
 80086c4:	20000494 	.word	0x20000494
 80086c8:	2000035c 	.word	0x2000035c
 80086cc:	0800863d 	.word	0x0800863d

080086d0 <__sfp_lock_acquire>:
 80086d0:	4801      	ldr	r0, [pc, #4]	@ (80086d8 <__sfp_lock_acquire+0x8>)
 80086d2:	f000 b940 	b.w	8008956 <__retarget_lock_acquire_recursive>
 80086d6:	bf00      	nop
 80086d8:	2000049d 	.word	0x2000049d

080086dc <__sfp_lock_release>:
 80086dc:	4801      	ldr	r0, [pc, #4]	@ (80086e4 <__sfp_lock_release+0x8>)
 80086de:	f000 b93b 	b.w	8008958 <__retarget_lock_release_recursive>
 80086e2:	bf00      	nop
 80086e4:	2000049d 	.word	0x2000049d

080086e8 <__sinit>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	4604      	mov	r4, r0
 80086ec:	f7ff fff0 	bl	80086d0 <__sfp_lock_acquire>
 80086f0:	6a23      	ldr	r3, [r4, #32]
 80086f2:	b11b      	cbz	r3, 80086fc <__sinit+0x14>
 80086f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f8:	f7ff bff0 	b.w	80086dc <__sfp_lock_release>
 80086fc:	4b04      	ldr	r3, [pc, #16]	@ (8008710 <__sinit+0x28>)
 80086fe:	6223      	str	r3, [r4, #32]
 8008700:	4b04      	ldr	r3, [pc, #16]	@ (8008714 <__sinit+0x2c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1f5      	bne.n	80086f4 <__sinit+0xc>
 8008708:	f7ff ffc4 	bl	8008694 <global_stdio_init.part.0>
 800870c:	e7f2      	b.n	80086f4 <__sinit+0xc>
 800870e:	bf00      	nop
 8008710:	08008655 	.word	0x08008655
 8008714:	20000494 	.word	0x20000494

08008718 <_fwalk_sglue>:
 8008718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800871c:	4607      	mov	r7, r0
 800871e:	4688      	mov	r8, r1
 8008720:	4614      	mov	r4, r2
 8008722:	2600      	movs	r6, #0
 8008724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008728:	f1b9 0901 	subs.w	r9, r9, #1
 800872c:	d505      	bpl.n	800873a <_fwalk_sglue+0x22>
 800872e:	6824      	ldr	r4, [r4, #0]
 8008730:	2c00      	cmp	r4, #0
 8008732:	d1f7      	bne.n	8008724 <_fwalk_sglue+0xc>
 8008734:	4630      	mov	r0, r6
 8008736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d907      	bls.n	8008750 <_fwalk_sglue+0x38>
 8008740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008744:	3301      	adds	r3, #1
 8008746:	d003      	beq.n	8008750 <_fwalk_sglue+0x38>
 8008748:	4629      	mov	r1, r5
 800874a:	4638      	mov	r0, r7
 800874c:	47c0      	blx	r8
 800874e:	4306      	orrs	r6, r0
 8008750:	3568      	adds	r5, #104	@ 0x68
 8008752:	e7e9      	b.n	8008728 <_fwalk_sglue+0x10>

08008754 <iprintf>:
 8008754:	b40f      	push	{r0, r1, r2, r3}
 8008756:	b507      	push	{r0, r1, r2, lr}
 8008758:	4906      	ldr	r1, [pc, #24]	@ (8008774 <iprintf+0x20>)
 800875a:	ab04      	add	r3, sp, #16
 800875c:	6808      	ldr	r0, [r1, #0]
 800875e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008762:	6881      	ldr	r1, [r0, #8]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	f000 fac5 	bl	8008cf4 <_vfiprintf_r>
 800876a:	b003      	add	sp, #12
 800876c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008770:	b004      	add	sp, #16
 8008772:	4770      	bx	lr
 8008774:	2000001c 	.word	0x2000001c

08008778 <siprintf>:
 8008778:	b40e      	push	{r1, r2, r3}
 800877a:	b510      	push	{r4, lr}
 800877c:	b09d      	sub	sp, #116	@ 0x74
 800877e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008780:	9002      	str	r0, [sp, #8]
 8008782:	9006      	str	r0, [sp, #24]
 8008784:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008788:	480a      	ldr	r0, [pc, #40]	@ (80087b4 <siprintf+0x3c>)
 800878a:	9107      	str	r1, [sp, #28]
 800878c:	9104      	str	r1, [sp, #16]
 800878e:	490a      	ldr	r1, [pc, #40]	@ (80087b8 <siprintf+0x40>)
 8008790:	f853 2b04 	ldr.w	r2, [r3], #4
 8008794:	9105      	str	r1, [sp, #20]
 8008796:	2400      	movs	r4, #0
 8008798:	a902      	add	r1, sp, #8
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80087a0:	f000 f982 	bl	8008aa8 <_svfiprintf_r>
 80087a4:	9b02      	ldr	r3, [sp, #8]
 80087a6:	701c      	strb	r4, [r3, #0]
 80087a8:	b01d      	add	sp, #116	@ 0x74
 80087aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ae:	b003      	add	sp, #12
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	2000001c 	.word	0x2000001c
 80087b8:	ffff0208 	.word	0xffff0208

080087bc <__sread>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	460c      	mov	r4, r1
 80087c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c4:	f000 f868 	bl	8008898 <_read_r>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	bfab      	itete	ge
 80087cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087ce:	89a3      	ldrhlt	r3, [r4, #12]
 80087d0:	181b      	addge	r3, r3, r0
 80087d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087d6:	bfac      	ite	ge
 80087d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087da:	81a3      	strhlt	r3, [r4, #12]
 80087dc:	bd10      	pop	{r4, pc}

080087de <__swrite>:
 80087de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e2:	461f      	mov	r7, r3
 80087e4:	898b      	ldrh	r3, [r1, #12]
 80087e6:	05db      	lsls	r3, r3, #23
 80087e8:	4605      	mov	r5, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	4616      	mov	r6, r2
 80087ee:	d505      	bpl.n	80087fc <__swrite+0x1e>
 80087f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f4:	2302      	movs	r3, #2
 80087f6:	2200      	movs	r2, #0
 80087f8:	f000 f83c 	bl	8008874 <_lseek_r>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	4632      	mov	r2, r6
 800880a:	463b      	mov	r3, r7
 800880c:	4628      	mov	r0, r5
 800880e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008812:	f000 b863 	b.w	80088dc <_write_r>

08008816 <__sseek>:
 8008816:	b510      	push	{r4, lr}
 8008818:	460c      	mov	r4, r1
 800881a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881e:	f000 f829 	bl	8008874 <_lseek_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	bf15      	itete	ne
 8008828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800882a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800882e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008832:	81a3      	strheq	r3, [r4, #12]
 8008834:	bf18      	it	ne
 8008836:	81a3      	strhne	r3, [r4, #12]
 8008838:	bd10      	pop	{r4, pc}

0800883a <__sclose>:
 800883a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883e:	f000 b809 	b.w	8008854 <_close_r>

08008842 <memset>:
 8008842:	4402      	add	r2, r0
 8008844:	4603      	mov	r3, r0
 8008846:	4293      	cmp	r3, r2
 8008848:	d100      	bne.n	800884c <memset+0xa>
 800884a:	4770      	bx	lr
 800884c:	f803 1b01 	strb.w	r1, [r3], #1
 8008850:	e7f9      	b.n	8008846 <memset+0x4>
	...

08008854 <_close_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d06      	ldr	r5, [pc, #24]	@ (8008870 <_close_r+0x1c>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	f7f9 fc69 	bl	8002136 <_close>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_close_r+0x1a>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_close_r+0x1a>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	20000498 	.word	0x20000498

08008874 <_lseek_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d07      	ldr	r5, [pc, #28]	@ (8008894 <_lseek_r+0x20>)
 8008878:	4604      	mov	r4, r0
 800887a:	4608      	mov	r0, r1
 800887c:	4611      	mov	r1, r2
 800887e:	2200      	movs	r2, #0
 8008880:	602a      	str	r2, [r5, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	f7f9 fc7e 	bl	8002184 <_lseek>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_lseek_r+0x1e>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_lseek_r+0x1e>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	20000498 	.word	0x20000498

08008898 <_read_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d07      	ldr	r5, [pc, #28]	@ (80088b8 <_read_r+0x20>)
 800889c:	4604      	mov	r4, r0
 800889e:	4608      	mov	r0, r1
 80088a0:	4611      	mov	r1, r2
 80088a2:	2200      	movs	r2, #0
 80088a4:	602a      	str	r2, [r5, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f7f9 fc0c 	bl	80020c4 <_read>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d102      	bne.n	80088b6 <_read_r+0x1e>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	b103      	cbz	r3, 80088b6 <_read_r+0x1e>
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	20000498 	.word	0x20000498

080088bc <_sbrk_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d06      	ldr	r5, [pc, #24]	@ (80088d8 <_sbrk_r+0x1c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	f7f9 fc6a 	bl	80021a0 <_sbrk>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_sbrk_r+0x1a>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_sbrk_r+0x1a>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20000498 	.word	0x20000498

080088dc <_write_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4d07      	ldr	r5, [pc, #28]	@ (80088fc <_write_r+0x20>)
 80088e0:	4604      	mov	r4, r0
 80088e2:	4608      	mov	r0, r1
 80088e4:	4611      	mov	r1, r2
 80088e6:	2200      	movs	r2, #0
 80088e8:	602a      	str	r2, [r5, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f7f9 fc07 	bl	80020fe <_write>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_write_r+0x1e>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_write_r+0x1e>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	20000498 	.word	0x20000498

08008900 <__errno>:
 8008900:	4b01      	ldr	r3, [pc, #4]	@ (8008908 <__errno+0x8>)
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	2000001c 	.word	0x2000001c

0800890c <__libc_init_array>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	4d0d      	ldr	r5, [pc, #52]	@ (8008944 <__libc_init_array+0x38>)
 8008910:	4c0d      	ldr	r4, [pc, #52]	@ (8008948 <__libc_init_array+0x3c>)
 8008912:	1b64      	subs	r4, r4, r5
 8008914:	10a4      	asrs	r4, r4, #2
 8008916:	2600      	movs	r6, #0
 8008918:	42a6      	cmp	r6, r4
 800891a:	d109      	bne.n	8008930 <__libc_init_array+0x24>
 800891c:	4d0b      	ldr	r5, [pc, #44]	@ (800894c <__libc_init_array+0x40>)
 800891e:	4c0c      	ldr	r4, [pc, #48]	@ (8008950 <__libc_init_array+0x44>)
 8008920:	f000 feae 	bl	8009680 <_init>
 8008924:	1b64      	subs	r4, r4, r5
 8008926:	10a4      	asrs	r4, r4, #2
 8008928:	2600      	movs	r6, #0
 800892a:	42a6      	cmp	r6, r4
 800892c:	d105      	bne.n	800893a <__libc_init_array+0x2e>
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	f855 3b04 	ldr.w	r3, [r5], #4
 8008934:	4798      	blx	r3
 8008936:	3601      	adds	r6, #1
 8008938:	e7ee      	b.n	8008918 <__libc_init_array+0xc>
 800893a:	f855 3b04 	ldr.w	r3, [r5], #4
 800893e:	4798      	blx	r3
 8008940:	3601      	adds	r6, #1
 8008942:	e7f2      	b.n	800892a <__libc_init_array+0x1e>
 8008944:	08009cac 	.word	0x08009cac
 8008948:	08009cac 	.word	0x08009cac
 800894c:	08009cac 	.word	0x08009cac
 8008950:	08009cb0 	.word	0x08009cb0

08008954 <__retarget_lock_init_recursive>:
 8008954:	4770      	bx	lr

08008956 <__retarget_lock_acquire_recursive>:
 8008956:	4770      	bx	lr

08008958 <__retarget_lock_release_recursive>:
 8008958:	4770      	bx	lr
	...

0800895c <_free_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4605      	mov	r5, r0
 8008960:	2900      	cmp	r1, #0
 8008962:	d041      	beq.n	80089e8 <_free_r+0x8c>
 8008964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008968:	1f0c      	subs	r4, r1, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	bfb8      	it	lt
 800896e:	18e4      	addlt	r4, r4, r3
 8008970:	f7ff fe22 	bl	80085b8 <__malloc_lock>
 8008974:	4a1d      	ldr	r2, [pc, #116]	@ (80089ec <_free_r+0x90>)
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	b933      	cbnz	r3, 8008988 <_free_r+0x2c>
 800897a:	6063      	str	r3, [r4, #4]
 800897c:	6014      	str	r4, [r2, #0]
 800897e:	4628      	mov	r0, r5
 8008980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008984:	f7ff be1e 	b.w	80085c4 <__malloc_unlock>
 8008988:	42a3      	cmp	r3, r4
 800898a:	d908      	bls.n	800899e <_free_r+0x42>
 800898c:	6820      	ldr	r0, [r4, #0]
 800898e:	1821      	adds	r1, r4, r0
 8008990:	428b      	cmp	r3, r1
 8008992:	bf01      	itttt	eq
 8008994:	6819      	ldreq	r1, [r3, #0]
 8008996:	685b      	ldreq	r3, [r3, #4]
 8008998:	1809      	addeq	r1, r1, r0
 800899a:	6021      	streq	r1, [r4, #0]
 800899c:	e7ed      	b.n	800897a <_free_r+0x1e>
 800899e:	461a      	mov	r2, r3
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	b10b      	cbz	r3, 80089a8 <_free_r+0x4c>
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	d9fa      	bls.n	800899e <_free_r+0x42>
 80089a8:	6811      	ldr	r1, [r2, #0]
 80089aa:	1850      	adds	r0, r2, r1
 80089ac:	42a0      	cmp	r0, r4
 80089ae:	d10b      	bne.n	80089c8 <_free_r+0x6c>
 80089b0:	6820      	ldr	r0, [r4, #0]
 80089b2:	4401      	add	r1, r0
 80089b4:	1850      	adds	r0, r2, r1
 80089b6:	4283      	cmp	r3, r0
 80089b8:	6011      	str	r1, [r2, #0]
 80089ba:	d1e0      	bne.n	800897e <_free_r+0x22>
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	6053      	str	r3, [r2, #4]
 80089c2:	4408      	add	r0, r1
 80089c4:	6010      	str	r0, [r2, #0]
 80089c6:	e7da      	b.n	800897e <_free_r+0x22>
 80089c8:	d902      	bls.n	80089d0 <_free_r+0x74>
 80089ca:	230c      	movs	r3, #12
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	e7d6      	b.n	800897e <_free_r+0x22>
 80089d0:	6820      	ldr	r0, [r4, #0]
 80089d2:	1821      	adds	r1, r4, r0
 80089d4:	428b      	cmp	r3, r1
 80089d6:	bf04      	itt	eq
 80089d8:	6819      	ldreq	r1, [r3, #0]
 80089da:	685b      	ldreq	r3, [r3, #4]
 80089dc:	6063      	str	r3, [r4, #4]
 80089de:	bf04      	itt	eq
 80089e0:	1809      	addeq	r1, r1, r0
 80089e2:	6021      	streq	r1, [r4, #0]
 80089e4:	6054      	str	r4, [r2, #4]
 80089e6:	e7ca      	b.n	800897e <_free_r+0x22>
 80089e8:	bd38      	pop	{r3, r4, r5, pc}
 80089ea:	bf00      	nop
 80089ec:	20000358 	.word	0x20000358

080089f0 <__ssputs_r>:
 80089f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	688e      	ldr	r6, [r1, #8]
 80089f6:	461f      	mov	r7, r3
 80089f8:	42be      	cmp	r6, r7
 80089fa:	680b      	ldr	r3, [r1, #0]
 80089fc:	4682      	mov	sl, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	4690      	mov	r8, r2
 8008a02:	d82d      	bhi.n	8008a60 <__ssputs_r+0x70>
 8008a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a0c:	d026      	beq.n	8008a5c <__ssputs_r+0x6c>
 8008a0e:	6965      	ldr	r5, [r4, #20]
 8008a10:	6909      	ldr	r1, [r1, #16]
 8008a12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a16:	eba3 0901 	sub.w	r9, r3, r1
 8008a1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a1e:	1c7b      	adds	r3, r7, #1
 8008a20:	444b      	add	r3, r9
 8008a22:	106d      	asrs	r5, r5, #1
 8008a24:	429d      	cmp	r5, r3
 8008a26:	bf38      	it	cc
 8008a28:	461d      	movcc	r5, r3
 8008a2a:	0553      	lsls	r3, r2, #21
 8008a2c:	d527      	bpl.n	8008a7e <__ssputs_r+0x8e>
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7ff fd42 	bl	80084b8 <_malloc_r>
 8008a34:	4606      	mov	r6, r0
 8008a36:	b360      	cbz	r0, 8008a92 <__ssputs_r+0xa2>
 8008a38:	6921      	ldr	r1, [r4, #16]
 8008a3a:	464a      	mov	r2, r9
 8008a3c:	f000 fd58 	bl	80094f0 <memcpy>
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a4a:	81a3      	strh	r3, [r4, #12]
 8008a4c:	6126      	str	r6, [r4, #16]
 8008a4e:	6165      	str	r5, [r4, #20]
 8008a50:	444e      	add	r6, r9
 8008a52:	eba5 0509 	sub.w	r5, r5, r9
 8008a56:	6026      	str	r6, [r4, #0]
 8008a58:	60a5      	str	r5, [r4, #8]
 8008a5a:	463e      	mov	r6, r7
 8008a5c:	42be      	cmp	r6, r7
 8008a5e:	d900      	bls.n	8008a62 <__ssputs_r+0x72>
 8008a60:	463e      	mov	r6, r7
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	4632      	mov	r2, r6
 8008a66:	4641      	mov	r1, r8
 8008a68:	f000 fd28 	bl	80094bc <memmove>
 8008a6c:	68a3      	ldr	r3, [r4, #8]
 8008a6e:	1b9b      	subs	r3, r3, r6
 8008a70:	60a3      	str	r3, [r4, #8]
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	4433      	add	r3, r6
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	2000      	movs	r0, #0
 8008a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7e:	462a      	mov	r2, r5
 8008a80:	f000 fd44 	bl	800950c <_realloc_r>
 8008a84:	4606      	mov	r6, r0
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d1e0      	bne.n	8008a4c <__ssputs_r+0x5c>
 8008a8a:	6921      	ldr	r1, [r4, #16]
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	f7ff ff65 	bl	800895c <_free_r>
 8008a92:	230c      	movs	r3, #12
 8008a94:	f8ca 3000 	str.w	r3, [sl]
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a9e:	81a3      	strh	r3, [r4, #12]
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	e7e9      	b.n	8008a7a <__ssputs_r+0x8a>
	...

08008aa8 <_svfiprintf_r>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	4698      	mov	r8, r3
 8008aae:	898b      	ldrh	r3, [r1, #12]
 8008ab0:	061b      	lsls	r3, r3, #24
 8008ab2:	b09d      	sub	sp, #116	@ 0x74
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	460d      	mov	r5, r1
 8008ab8:	4614      	mov	r4, r2
 8008aba:	d510      	bpl.n	8008ade <_svfiprintf_r+0x36>
 8008abc:	690b      	ldr	r3, [r1, #16]
 8008abe:	b973      	cbnz	r3, 8008ade <_svfiprintf_r+0x36>
 8008ac0:	2140      	movs	r1, #64	@ 0x40
 8008ac2:	f7ff fcf9 	bl	80084b8 <_malloc_r>
 8008ac6:	6028      	str	r0, [r5, #0]
 8008ac8:	6128      	str	r0, [r5, #16]
 8008aca:	b930      	cbnz	r0, 8008ada <_svfiprintf_r+0x32>
 8008acc:	230c      	movs	r3, #12
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad4:	b01d      	add	sp, #116	@ 0x74
 8008ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ada:	2340      	movs	r3, #64	@ 0x40
 8008adc:	616b      	str	r3, [r5, #20]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae2:	2320      	movs	r3, #32
 8008ae4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aec:	2330      	movs	r3, #48	@ 0x30
 8008aee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c8c <_svfiprintf_r+0x1e4>
 8008af2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008af6:	f04f 0901 	mov.w	r9, #1
 8008afa:	4623      	mov	r3, r4
 8008afc:	469a      	mov	sl, r3
 8008afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b02:	b10a      	cbz	r2, 8008b08 <_svfiprintf_r+0x60>
 8008b04:	2a25      	cmp	r2, #37	@ 0x25
 8008b06:	d1f9      	bne.n	8008afc <_svfiprintf_r+0x54>
 8008b08:	ebba 0b04 	subs.w	fp, sl, r4
 8008b0c:	d00b      	beq.n	8008b26 <_svfiprintf_r+0x7e>
 8008b0e:	465b      	mov	r3, fp
 8008b10:	4622      	mov	r2, r4
 8008b12:	4629      	mov	r1, r5
 8008b14:	4638      	mov	r0, r7
 8008b16:	f7ff ff6b 	bl	80089f0 <__ssputs_r>
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f000 80a7 	beq.w	8008c6e <_svfiprintf_r+0x1c6>
 8008b20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b22:	445a      	add	r2, fp
 8008b24:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b26:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 809f 	beq.w	8008c6e <_svfiprintf_r+0x1c6>
 8008b30:	2300      	movs	r3, #0
 8008b32:	f04f 32ff 	mov.w	r2, #4294967295
 8008b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b3a:	f10a 0a01 	add.w	sl, sl, #1
 8008b3e:	9304      	str	r3, [sp, #16]
 8008b40:	9307      	str	r3, [sp, #28]
 8008b42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b46:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b48:	4654      	mov	r4, sl
 8008b4a:	2205      	movs	r2, #5
 8008b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b50:	484e      	ldr	r0, [pc, #312]	@ (8008c8c <_svfiprintf_r+0x1e4>)
 8008b52:	f7f7 fb45 	bl	80001e0 <memchr>
 8008b56:	9a04      	ldr	r2, [sp, #16]
 8008b58:	b9d8      	cbnz	r0, 8008b92 <_svfiprintf_r+0xea>
 8008b5a:	06d0      	lsls	r0, r2, #27
 8008b5c:	bf44      	itt	mi
 8008b5e:	2320      	movmi	r3, #32
 8008b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b64:	0711      	lsls	r1, r2, #28
 8008b66:	bf44      	itt	mi
 8008b68:	232b      	movmi	r3, #43	@ 0x2b
 8008b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b74:	d015      	beq.n	8008ba2 <_svfiprintf_r+0xfa>
 8008b76:	9a07      	ldr	r2, [sp, #28]
 8008b78:	4654      	mov	r4, sl
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	f04f 0c0a 	mov.w	ip, #10
 8008b80:	4621      	mov	r1, r4
 8008b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b86:	3b30      	subs	r3, #48	@ 0x30
 8008b88:	2b09      	cmp	r3, #9
 8008b8a:	d94b      	bls.n	8008c24 <_svfiprintf_r+0x17c>
 8008b8c:	b1b0      	cbz	r0, 8008bbc <_svfiprintf_r+0x114>
 8008b8e:	9207      	str	r2, [sp, #28]
 8008b90:	e014      	b.n	8008bbc <_svfiprintf_r+0x114>
 8008b92:	eba0 0308 	sub.w	r3, r0, r8
 8008b96:	fa09 f303 	lsl.w	r3, r9, r3
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	46a2      	mov	sl, r4
 8008ba0:	e7d2      	b.n	8008b48 <_svfiprintf_r+0xa0>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	1d19      	adds	r1, r3, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	9103      	str	r1, [sp, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bfbb      	ittet	lt
 8008bae:	425b      	neglt	r3, r3
 8008bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb4:	9307      	strge	r3, [sp, #28]
 8008bb6:	9307      	strlt	r3, [sp, #28]
 8008bb8:	bfb8      	it	lt
 8008bba:	9204      	strlt	r2, [sp, #16]
 8008bbc:	7823      	ldrb	r3, [r4, #0]
 8008bbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bc0:	d10a      	bne.n	8008bd8 <_svfiprintf_r+0x130>
 8008bc2:	7863      	ldrb	r3, [r4, #1]
 8008bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bc6:	d132      	bne.n	8008c2e <_svfiprintf_r+0x186>
 8008bc8:	9b03      	ldr	r3, [sp, #12]
 8008bca:	1d1a      	adds	r2, r3, #4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	9203      	str	r2, [sp, #12]
 8008bd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bd4:	3402      	adds	r4, #2
 8008bd6:	9305      	str	r3, [sp, #20]
 8008bd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c9c <_svfiprintf_r+0x1f4>
 8008bdc:	7821      	ldrb	r1, [r4, #0]
 8008bde:	2203      	movs	r2, #3
 8008be0:	4650      	mov	r0, sl
 8008be2:	f7f7 fafd 	bl	80001e0 <memchr>
 8008be6:	b138      	cbz	r0, 8008bf8 <_svfiprintf_r+0x150>
 8008be8:	9b04      	ldr	r3, [sp, #16]
 8008bea:	eba0 000a 	sub.w	r0, r0, sl
 8008bee:	2240      	movs	r2, #64	@ 0x40
 8008bf0:	4082      	lsls	r2, r0
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	3401      	adds	r4, #1
 8008bf6:	9304      	str	r3, [sp, #16]
 8008bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfc:	4824      	ldr	r0, [pc, #144]	@ (8008c90 <_svfiprintf_r+0x1e8>)
 8008bfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c02:	2206      	movs	r2, #6
 8008c04:	f7f7 faec 	bl	80001e0 <memchr>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d036      	beq.n	8008c7a <_svfiprintf_r+0x1d2>
 8008c0c:	4b21      	ldr	r3, [pc, #132]	@ (8008c94 <_svfiprintf_r+0x1ec>)
 8008c0e:	bb1b      	cbnz	r3, 8008c58 <_svfiprintf_r+0x1b0>
 8008c10:	9b03      	ldr	r3, [sp, #12]
 8008c12:	3307      	adds	r3, #7
 8008c14:	f023 0307 	bic.w	r3, r3, #7
 8008c18:	3308      	adds	r3, #8
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1e:	4433      	add	r3, r6
 8008c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c22:	e76a      	b.n	8008afa <_svfiprintf_r+0x52>
 8008c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c28:	460c      	mov	r4, r1
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	e7a8      	b.n	8008b80 <_svfiprintf_r+0xd8>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	3401      	adds	r4, #1
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	4619      	mov	r1, r3
 8008c36:	f04f 0c0a 	mov.w	ip, #10
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c40:	3a30      	subs	r2, #48	@ 0x30
 8008c42:	2a09      	cmp	r2, #9
 8008c44:	d903      	bls.n	8008c4e <_svfiprintf_r+0x1a6>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0c6      	beq.n	8008bd8 <_svfiprintf_r+0x130>
 8008c4a:	9105      	str	r1, [sp, #20]
 8008c4c:	e7c4      	b.n	8008bd8 <_svfiprintf_r+0x130>
 8008c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c52:	4604      	mov	r4, r0
 8008c54:	2301      	movs	r3, #1
 8008c56:	e7f0      	b.n	8008c3a <_svfiprintf_r+0x192>
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c98 <_svfiprintf_r+0x1f0>)
 8008c60:	a904      	add	r1, sp, #16
 8008c62:	4638      	mov	r0, r7
 8008c64:	f3af 8000 	nop.w
 8008c68:	1c42      	adds	r2, r0, #1
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	d1d6      	bne.n	8008c1c <_svfiprintf_r+0x174>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	065b      	lsls	r3, r3, #25
 8008c72:	f53f af2d 	bmi.w	8008ad0 <_svfiprintf_r+0x28>
 8008c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c78:	e72c      	b.n	8008ad4 <_svfiprintf_r+0x2c>
 8008c7a:	ab03      	add	r3, sp, #12
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4b05      	ldr	r3, [pc, #20]	@ (8008c98 <_svfiprintf_r+0x1f0>)
 8008c82:	a904      	add	r1, sp, #16
 8008c84:	4638      	mov	r0, r7
 8008c86:	f000 f9bb 	bl	8009000 <_printf_i>
 8008c8a:	e7ed      	b.n	8008c68 <_svfiprintf_r+0x1c0>
 8008c8c:	08009c70 	.word	0x08009c70
 8008c90:	08009c7a 	.word	0x08009c7a
 8008c94:	00000000 	.word	0x00000000
 8008c98:	080089f1 	.word	0x080089f1
 8008c9c:	08009c76 	.word	0x08009c76

08008ca0 <__sfputc_r>:
 8008ca0:	6893      	ldr	r3, [r2, #8]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	b410      	push	{r4}
 8008ca8:	6093      	str	r3, [r2, #8]
 8008caa:	da08      	bge.n	8008cbe <__sfputc_r+0x1e>
 8008cac:	6994      	ldr	r4, [r2, #24]
 8008cae:	42a3      	cmp	r3, r4
 8008cb0:	db01      	blt.n	8008cb6 <__sfputc_r+0x16>
 8008cb2:	290a      	cmp	r1, #10
 8008cb4:	d103      	bne.n	8008cbe <__sfputc_r+0x1e>
 8008cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cba:	f000 bb6b 	b.w	8009394 <__swbuf_r>
 8008cbe:	6813      	ldr	r3, [r2, #0]
 8008cc0:	1c58      	adds	r0, r3, #1
 8008cc2:	6010      	str	r0, [r2, #0]
 8008cc4:	7019      	strb	r1, [r3, #0]
 8008cc6:	4608      	mov	r0, r1
 8008cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <__sfputs_r>:
 8008cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	460f      	mov	r7, r1
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	18d5      	adds	r5, r2, r3
 8008cd8:	42ac      	cmp	r4, r5
 8008cda:	d101      	bne.n	8008ce0 <__sfputs_r+0x12>
 8008cdc:	2000      	movs	r0, #0
 8008cde:	e007      	b.n	8008cf0 <__sfputs_r+0x22>
 8008ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce4:	463a      	mov	r2, r7
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7ff ffda 	bl	8008ca0 <__sfputc_r>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d1f3      	bne.n	8008cd8 <__sfputs_r+0xa>
 8008cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cf4 <_vfiprintf_r>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	b09d      	sub	sp, #116	@ 0x74
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	4698      	mov	r8, r3
 8008d00:	4606      	mov	r6, r0
 8008d02:	b118      	cbz	r0, 8008d0c <_vfiprintf_r+0x18>
 8008d04:	6a03      	ldr	r3, [r0, #32]
 8008d06:	b90b      	cbnz	r3, 8008d0c <_vfiprintf_r+0x18>
 8008d08:	f7ff fcee 	bl	80086e8 <__sinit>
 8008d0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d0e:	07d9      	lsls	r1, r3, #31
 8008d10:	d405      	bmi.n	8008d1e <_vfiprintf_r+0x2a>
 8008d12:	89ab      	ldrh	r3, [r5, #12]
 8008d14:	059a      	lsls	r2, r3, #22
 8008d16:	d402      	bmi.n	8008d1e <_vfiprintf_r+0x2a>
 8008d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d1a:	f7ff fe1c 	bl	8008956 <__retarget_lock_acquire_recursive>
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	071b      	lsls	r3, r3, #28
 8008d22:	d501      	bpl.n	8008d28 <_vfiprintf_r+0x34>
 8008d24:	692b      	ldr	r3, [r5, #16]
 8008d26:	b99b      	cbnz	r3, 8008d50 <_vfiprintf_r+0x5c>
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f000 fb70 	bl	8009410 <__swsetup_r>
 8008d30:	b170      	cbz	r0, 8008d50 <_vfiprintf_r+0x5c>
 8008d32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d34:	07dc      	lsls	r4, r3, #31
 8008d36:	d504      	bpl.n	8008d42 <_vfiprintf_r+0x4e>
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	b01d      	add	sp, #116	@ 0x74
 8008d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d42:	89ab      	ldrh	r3, [r5, #12]
 8008d44:	0598      	lsls	r0, r3, #22
 8008d46:	d4f7      	bmi.n	8008d38 <_vfiprintf_r+0x44>
 8008d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d4a:	f7ff fe05 	bl	8008958 <__retarget_lock_release_recursive>
 8008d4e:	e7f3      	b.n	8008d38 <_vfiprintf_r+0x44>
 8008d50:	2300      	movs	r3, #0
 8008d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d54:	2320      	movs	r3, #32
 8008d56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d5e:	2330      	movs	r3, #48	@ 0x30
 8008d60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f10 <_vfiprintf_r+0x21c>
 8008d64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d68:	f04f 0901 	mov.w	r9, #1
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	469a      	mov	sl, r3
 8008d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d74:	b10a      	cbz	r2, 8008d7a <_vfiprintf_r+0x86>
 8008d76:	2a25      	cmp	r2, #37	@ 0x25
 8008d78:	d1f9      	bne.n	8008d6e <_vfiprintf_r+0x7a>
 8008d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d7e:	d00b      	beq.n	8008d98 <_vfiprintf_r+0xa4>
 8008d80:	465b      	mov	r3, fp
 8008d82:	4622      	mov	r2, r4
 8008d84:	4629      	mov	r1, r5
 8008d86:	4630      	mov	r0, r6
 8008d88:	f7ff ffa1 	bl	8008cce <__sfputs_r>
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	f000 80a7 	beq.w	8008ee0 <_vfiprintf_r+0x1ec>
 8008d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d94:	445a      	add	r2, fp
 8008d96:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d98:	f89a 3000 	ldrb.w	r3, [sl]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 809f 	beq.w	8008ee0 <_vfiprintf_r+0x1ec>
 8008da2:	2300      	movs	r3, #0
 8008da4:	f04f 32ff 	mov.w	r2, #4294967295
 8008da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dac:	f10a 0a01 	add.w	sl, sl, #1
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	9307      	str	r3, [sp, #28]
 8008db4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008db8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dba:	4654      	mov	r4, sl
 8008dbc:	2205      	movs	r2, #5
 8008dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc2:	4853      	ldr	r0, [pc, #332]	@ (8008f10 <_vfiprintf_r+0x21c>)
 8008dc4:	f7f7 fa0c 	bl	80001e0 <memchr>
 8008dc8:	9a04      	ldr	r2, [sp, #16]
 8008dca:	b9d8      	cbnz	r0, 8008e04 <_vfiprintf_r+0x110>
 8008dcc:	06d1      	lsls	r1, r2, #27
 8008dce:	bf44      	itt	mi
 8008dd0:	2320      	movmi	r3, #32
 8008dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd6:	0713      	lsls	r3, r2, #28
 8008dd8:	bf44      	itt	mi
 8008dda:	232b      	movmi	r3, #43	@ 0x2b
 8008ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de0:	f89a 3000 	ldrb.w	r3, [sl]
 8008de4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008de6:	d015      	beq.n	8008e14 <_vfiprintf_r+0x120>
 8008de8:	9a07      	ldr	r2, [sp, #28]
 8008dea:	4654      	mov	r4, sl
 8008dec:	2000      	movs	r0, #0
 8008dee:	f04f 0c0a 	mov.w	ip, #10
 8008df2:	4621      	mov	r1, r4
 8008df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df8:	3b30      	subs	r3, #48	@ 0x30
 8008dfa:	2b09      	cmp	r3, #9
 8008dfc:	d94b      	bls.n	8008e96 <_vfiprintf_r+0x1a2>
 8008dfe:	b1b0      	cbz	r0, 8008e2e <_vfiprintf_r+0x13a>
 8008e00:	9207      	str	r2, [sp, #28]
 8008e02:	e014      	b.n	8008e2e <_vfiprintf_r+0x13a>
 8008e04:	eba0 0308 	sub.w	r3, r0, r8
 8008e08:	fa09 f303 	lsl.w	r3, r9, r3
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	9304      	str	r3, [sp, #16]
 8008e10:	46a2      	mov	sl, r4
 8008e12:	e7d2      	b.n	8008dba <_vfiprintf_r+0xc6>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	1d19      	adds	r1, r3, #4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	9103      	str	r1, [sp, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bfbb      	ittet	lt
 8008e20:	425b      	neglt	r3, r3
 8008e22:	f042 0202 	orrlt.w	r2, r2, #2
 8008e26:	9307      	strge	r3, [sp, #28]
 8008e28:	9307      	strlt	r3, [sp, #28]
 8008e2a:	bfb8      	it	lt
 8008e2c:	9204      	strlt	r2, [sp, #16]
 8008e2e:	7823      	ldrb	r3, [r4, #0]
 8008e30:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e32:	d10a      	bne.n	8008e4a <_vfiprintf_r+0x156>
 8008e34:	7863      	ldrb	r3, [r4, #1]
 8008e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e38:	d132      	bne.n	8008ea0 <_vfiprintf_r+0x1ac>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	1d1a      	adds	r2, r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	9203      	str	r2, [sp, #12]
 8008e42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e46:	3402      	adds	r4, #2
 8008e48:	9305      	str	r3, [sp, #20]
 8008e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f20 <_vfiprintf_r+0x22c>
 8008e4e:	7821      	ldrb	r1, [r4, #0]
 8008e50:	2203      	movs	r2, #3
 8008e52:	4650      	mov	r0, sl
 8008e54:	f7f7 f9c4 	bl	80001e0 <memchr>
 8008e58:	b138      	cbz	r0, 8008e6a <_vfiprintf_r+0x176>
 8008e5a:	9b04      	ldr	r3, [sp, #16]
 8008e5c:	eba0 000a 	sub.w	r0, r0, sl
 8008e60:	2240      	movs	r2, #64	@ 0x40
 8008e62:	4082      	lsls	r2, r0
 8008e64:	4313      	orrs	r3, r2
 8008e66:	3401      	adds	r4, #1
 8008e68:	9304      	str	r3, [sp, #16]
 8008e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e6e:	4829      	ldr	r0, [pc, #164]	@ (8008f14 <_vfiprintf_r+0x220>)
 8008e70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e74:	2206      	movs	r2, #6
 8008e76:	f7f7 f9b3 	bl	80001e0 <memchr>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d03f      	beq.n	8008efe <_vfiprintf_r+0x20a>
 8008e7e:	4b26      	ldr	r3, [pc, #152]	@ (8008f18 <_vfiprintf_r+0x224>)
 8008e80:	bb1b      	cbnz	r3, 8008eca <_vfiprintf_r+0x1d6>
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	3307      	adds	r3, #7
 8008e86:	f023 0307 	bic.w	r3, r3, #7
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	9303      	str	r3, [sp, #12]
 8008e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e90:	443b      	add	r3, r7
 8008e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e94:	e76a      	b.n	8008d6c <_vfiprintf_r+0x78>
 8008e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	e7a8      	b.n	8008df2 <_vfiprintf_r+0xfe>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	3401      	adds	r4, #1
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	f04f 0c0a 	mov.w	ip, #10
 8008eac:	4620      	mov	r0, r4
 8008eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb2:	3a30      	subs	r2, #48	@ 0x30
 8008eb4:	2a09      	cmp	r2, #9
 8008eb6:	d903      	bls.n	8008ec0 <_vfiprintf_r+0x1cc>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0c6      	beq.n	8008e4a <_vfiprintf_r+0x156>
 8008ebc:	9105      	str	r1, [sp, #20]
 8008ebe:	e7c4      	b.n	8008e4a <_vfiprintf_r+0x156>
 8008ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e7f0      	b.n	8008eac <_vfiprintf_r+0x1b8>
 8008eca:	ab03      	add	r3, sp, #12
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	462a      	mov	r2, r5
 8008ed0:	4b12      	ldr	r3, [pc, #72]	@ (8008f1c <_vfiprintf_r+0x228>)
 8008ed2:	a904      	add	r1, sp, #16
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f3af 8000 	nop.w
 8008eda:	4607      	mov	r7, r0
 8008edc:	1c78      	adds	r0, r7, #1
 8008ede:	d1d6      	bne.n	8008e8e <_vfiprintf_r+0x19a>
 8008ee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ee2:	07d9      	lsls	r1, r3, #31
 8008ee4:	d405      	bmi.n	8008ef2 <_vfiprintf_r+0x1fe>
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	059a      	lsls	r2, r3, #22
 8008eea:	d402      	bmi.n	8008ef2 <_vfiprintf_r+0x1fe>
 8008eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eee:	f7ff fd33 	bl	8008958 <__retarget_lock_release_recursive>
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	065b      	lsls	r3, r3, #25
 8008ef6:	f53f af1f 	bmi.w	8008d38 <_vfiprintf_r+0x44>
 8008efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008efc:	e71e      	b.n	8008d3c <_vfiprintf_r+0x48>
 8008efe:	ab03      	add	r3, sp, #12
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	462a      	mov	r2, r5
 8008f04:	4b05      	ldr	r3, [pc, #20]	@ (8008f1c <_vfiprintf_r+0x228>)
 8008f06:	a904      	add	r1, sp, #16
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f000 f879 	bl	8009000 <_printf_i>
 8008f0e:	e7e4      	b.n	8008eda <_vfiprintf_r+0x1e6>
 8008f10:	08009c70 	.word	0x08009c70
 8008f14:	08009c7a 	.word	0x08009c7a
 8008f18:	00000000 	.word	0x00000000
 8008f1c:	08008ccf 	.word	0x08008ccf
 8008f20:	08009c76 	.word	0x08009c76

08008f24 <_printf_common>:
 8008f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f28:	4616      	mov	r6, r2
 8008f2a:	4698      	mov	r8, r3
 8008f2c:	688a      	ldr	r2, [r1, #8]
 8008f2e:	690b      	ldr	r3, [r1, #16]
 8008f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	bfb8      	it	lt
 8008f38:	4613      	movlt	r3, r2
 8008f3a:	6033      	str	r3, [r6, #0]
 8008f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f40:	4607      	mov	r7, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	b10a      	cbz	r2, 8008f4a <_printf_common+0x26>
 8008f46:	3301      	adds	r3, #1
 8008f48:	6033      	str	r3, [r6, #0]
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	0699      	lsls	r1, r3, #26
 8008f4e:	bf42      	ittt	mi
 8008f50:	6833      	ldrmi	r3, [r6, #0]
 8008f52:	3302      	addmi	r3, #2
 8008f54:	6033      	strmi	r3, [r6, #0]
 8008f56:	6825      	ldr	r5, [r4, #0]
 8008f58:	f015 0506 	ands.w	r5, r5, #6
 8008f5c:	d106      	bne.n	8008f6c <_printf_common+0x48>
 8008f5e:	f104 0a19 	add.w	sl, r4, #25
 8008f62:	68e3      	ldr	r3, [r4, #12]
 8008f64:	6832      	ldr	r2, [r6, #0]
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	dc26      	bgt.n	8008fba <_printf_common+0x96>
 8008f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f70:	6822      	ldr	r2, [r4, #0]
 8008f72:	3b00      	subs	r3, #0
 8008f74:	bf18      	it	ne
 8008f76:	2301      	movne	r3, #1
 8008f78:	0692      	lsls	r2, r2, #26
 8008f7a:	d42b      	bmi.n	8008fd4 <_printf_common+0xb0>
 8008f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f80:	4641      	mov	r1, r8
 8008f82:	4638      	mov	r0, r7
 8008f84:	47c8      	blx	r9
 8008f86:	3001      	adds	r0, #1
 8008f88:	d01e      	beq.n	8008fc8 <_printf_common+0xa4>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	6922      	ldr	r2, [r4, #16]
 8008f8e:	f003 0306 	and.w	r3, r3, #6
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	bf02      	ittt	eq
 8008f96:	68e5      	ldreq	r5, [r4, #12]
 8008f98:	6833      	ldreq	r3, [r6, #0]
 8008f9a:	1aed      	subeq	r5, r5, r3
 8008f9c:	68a3      	ldr	r3, [r4, #8]
 8008f9e:	bf0c      	ite	eq
 8008fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa4:	2500      	movne	r5, #0
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	bfc4      	itt	gt
 8008faa:	1a9b      	subgt	r3, r3, r2
 8008fac:	18ed      	addgt	r5, r5, r3
 8008fae:	2600      	movs	r6, #0
 8008fb0:	341a      	adds	r4, #26
 8008fb2:	42b5      	cmp	r5, r6
 8008fb4:	d11a      	bne.n	8008fec <_printf_common+0xc8>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e008      	b.n	8008fcc <_printf_common+0xa8>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	4641      	mov	r1, r8
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	47c8      	blx	r9
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d103      	bne.n	8008fd0 <_printf_common+0xac>
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	e7c6      	b.n	8008f62 <_printf_common+0x3e>
 8008fd4:	18e1      	adds	r1, r4, r3
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	2030      	movs	r0, #48	@ 0x30
 8008fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fde:	4422      	add	r2, r4
 8008fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fe8:	3302      	adds	r3, #2
 8008fea:	e7c7      	b.n	8008f7c <_printf_common+0x58>
 8008fec:	2301      	movs	r3, #1
 8008fee:	4622      	mov	r2, r4
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	47c8      	blx	r9
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	d0e6      	beq.n	8008fc8 <_printf_common+0xa4>
 8008ffa:	3601      	adds	r6, #1
 8008ffc:	e7d9      	b.n	8008fb2 <_printf_common+0x8e>
	...

08009000 <_printf_i>:
 8009000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	7e0f      	ldrb	r7, [r1, #24]
 8009006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009008:	2f78      	cmp	r7, #120	@ 0x78
 800900a:	4691      	mov	r9, r2
 800900c:	4680      	mov	r8, r0
 800900e:	460c      	mov	r4, r1
 8009010:	469a      	mov	sl, r3
 8009012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009016:	d807      	bhi.n	8009028 <_printf_i+0x28>
 8009018:	2f62      	cmp	r7, #98	@ 0x62
 800901a:	d80a      	bhi.n	8009032 <_printf_i+0x32>
 800901c:	2f00      	cmp	r7, #0
 800901e:	f000 80d1 	beq.w	80091c4 <_printf_i+0x1c4>
 8009022:	2f58      	cmp	r7, #88	@ 0x58
 8009024:	f000 80b8 	beq.w	8009198 <_printf_i+0x198>
 8009028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800902c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009030:	e03a      	b.n	80090a8 <_printf_i+0xa8>
 8009032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009036:	2b15      	cmp	r3, #21
 8009038:	d8f6      	bhi.n	8009028 <_printf_i+0x28>
 800903a:	a101      	add	r1, pc, #4	@ (adr r1, 8009040 <_printf_i+0x40>)
 800903c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009040:	08009099 	.word	0x08009099
 8009044:	080090ad 	.word	0x080090ad
 8009048:	08009029 	.word	0x08009029
 800904c:	08009029 	.word	0x08009029
 8009050:	08009029 	.word	0x08009029
 8009054:	08009029 	.word	0x08009029
 8009058:	080090ad 	.word	0x080090ad
 800905c:	08009029 	.word	0x08009029
 8009060:	08009029 	.word	0x08009029
 8009064:	08009029 	.word	0x08009029
 8009068:	08009029 	.word	0x08009029
 800906c:	080091ab 	.word	0x080091ab
 8009070:	080090d7 	.word	0x080090d7
 8009074:	08009165 	.word	0x08009165
 8009078:	08009029 	.word	0x08009029
 800907c:	08009029 	.word	0x08009029
 8009080:	080091cd 	.word	0x080091cd
 8009084:	08009029 	.word	0x08009029
 8009088:	080090d7 	.word	0x080090d7
 800908c:	08009029 	.word	0x08009029
 8009090:	08009029 	.word	0x08009029
 8009094:	0800916d 	.word	0x0800916d
 8009098:	6833      	ldr	r3, [r6, #0]
 800909a:	1d1a      	adds	r2, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6032      	str	r2, [r6, #0]
 80090a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090a8:	2301      	movs	r3, #1
 80090aa:	e09c      	b.n	80091e6 <_printf_i+0x1e6>
 80090ac:	6833      	ldr	r3, [r6, #0]
 80090ae:	6820      	ldr	r0, [r4, #0]
 80090b0:	1d19      	adds	r1, r3, #4
 80090b2:	6031      	str	r1, [r6, #0]
 80090b4:	0606      	lsls	r6, r0, #24
 80090b6:	d501      	bpl.n	80090bc <_printf_i+0xbc>
 80090b8:	681d      	ldr	r5, [r3, #0]
 80090ba:	e003      	b.n	80090c4 <_printf_i+0xc4>
 80090bc:	0645      	lsls	r5, r0, #25
 80090be:	d5fb      	bpl.n	80090b8 <_printf_i+0xb8>
 80090c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090c4:	2d00      	cmp	r5, #0
 80090c6:	da03      	bge.n	80090d0 <_printf_i+0xd0>
 80090c8:	232d      	movs	r3, #45	@ 0x2d
 80090ca:	426d      	negs	r5, r5
 80090cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090d0:	4858      	ldr	r0, [pc, #352]	@ (8009234 <_printf_i+0x234>)
 80090d2:	230a      	movs	r3, #10
 80090d4:	e011      	b.n	80090fa <_printf_i+0xfa>
 80090d6:	6821      	ldr	r1, [r4, #0]
 80090d8:	6833      	ldr	r3, [r6, #0]
 80090da:	0608      	lsls	r0, r1, #24
 80090dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80090e0:	d402      	bmi.n	80090e8 <_printf_i+0xe8>
 80090e2:	0649      	lsls	r1, r1, #25
 80090e4:	bf48      	it	mi
 80090e6:	b2ad      	uxthmi	r5, r5
 80090e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80090ea:	4852      	ldr	r0, [pc, #328]	@ (8009234 <_printf_i+0x234>)
 80090ec:	6033      	str	r3, [r6, #0]
 80090ee:	bf14      	ite	ne
 80090f0:	230a      	movne	r3, #10
 80090f2:	2308      	moveq	r3, #8
 80090f4:	2100      	movs	r1, #0
 80090f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090fa:	6866      	ldr	r6, [r4, #4]
 80090fc:	60a6      	str	r6, [r4, #8]
 80090fe:	2e00      	cmp	r6, #0
 8009100:	db05      	blt.n	800910e <_printf_i+0x10e>
 8009102:	6821      	ldr	r1, [r4, #0]
 8009104:	432e      	orrs	r6, r5
 8009106:	f021 0104 	bic.w	r1, r1, #4
 800910a:	6021      	str	r1, [r4, #0]
 800910c:	d04b      	beq.n	80091a6 <_printf_i+0x1a6>
 800910e:	4616      	mov	r6, r2
 8009110:	fbb5 f1f3 	udiv	r1, r5, r3
 8009114:	fb03 5711 	mls	r7, r3, r1, r5
 8009118:	5dc7      	ldrb	r7, [r0, r7]
 800911a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800911e:	462f      	mov	r7, r5
 8009120:	42bb      	cmp	r3, r7
 8009122:	460d      	mov	r5, r1
 8009124:	d9f4      	bls.n	8009110 <_printf_i+0x110>
 8009126:	2b08      	cmp	r3, #8
 8009128:	d10b      	bne.n	8009142 <_printf_i+0x142>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	07df      	lsls	r7, r3, #31
 800912e:	d508      	bpl.n	8009142 <_printf_i+0x142>
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	6861      	ldr	r1, [r4, #4]
 8009134:	4299      	cmp	r1, r3
 8009136:	bfde      	ittt	le
 8009138:	2330      	movle	r3, #48	@ 0x30
 800913a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800913e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009142:	1b92      	subs	r2, r2, r6
 8009144:	6122      	str	r2, [r4, #16]
 8009146:	f8cd a000 	str.w	sl, [sp]
 800914a:	464b      	mov	r3, r9
 800914c:	aa03      	add	r2, sp, #12
 800914e:	4621      	mov	r1, r4
 8009150:	4640      	mov	r0, r8
 8009152:	f7ff fee7 	bl	8008f24 <_printf_common>
 8009156:	3001      	adds	r0, #1
 8009158:	d14a      	bne.n	80091f0 <_printf_i+0x1f0>
 800915a:	f04f 30ff 	mov.w	r0, #4294967295
 800915e:	b004      	add	sp, #16
 8009160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	f043 0320 	orr.w	r3, r3, #32
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	4832      	ldr	r0, [pc, #200]	@ (8009238 <_printf_i+0x238>)
 800916e:	2778      	movs	r7, #120	@ 0x78
 8009170:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	6831      	ldr	r1, [r6, #0]
 8009178:	061f      	lsls	r7, r3, #24
 800917a:	f851 5b04 	ldr.w	r5, [r1], #4
 800917e:	d402      	bmi.n	8009186 <_printf_i+0x186>
 8009180:	065f      	lsls	r7, r3, #25
 8009182:	bf48      	it	mi
 8009184:	b2ad      	uxthmi	r5, r5
 8009186:	6031      	str	r1, [r6, #0]
 8009188:	07d9      	lsls	r1, r3, #31
 800918a:	bf44      	itt	mi
 800918c:	f043 0320 	orrmi.w	r3, r3, #32
 8009190:	6023      	strmi	r3, [r4, #0]
 8009192:	b11d      	cbz	r5, 800919c <_printf_i+0x19c>
 8009194:	2310      	movs	r3, #16
 8009196:	e7ad      	b.n	80090f4 <_printf_i+0xf4>
 8009198:	4826      	ldr	r0, [pc, #152]	@ (8009234 <_printf_i+0x234>)
 800919a:	e7e9      	b.n	8009170 <_printf_i+0x170>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	f023 0320 	bic.w	r3, r3, #32
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	e7f6      	b.n	8009194 <_printf_i+0x194>
 80091a6:	4616      	mov	r6, r2
 80091a8:	e7bd      	b.n	8009126 <_printf_i+0x126>
 80091aa:	6833      	ldr	r3, [r6, #0]
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	6961      	ldr	r1, [r4, #20]
 80091b0:	1d18      	adds	r0, r3, #4
 80091b2:	6030      	str	r0, [r6, #0]
 80091b4:	062e      	lsls	r6, r5, #24
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	d501      	bpl.n	80091be <_printf_i+0x1be>
 80091ba:	6019      	str	r1, [r3, #0]
 80091bc:	e002      	b.n	80091c4 <_printf_i+0x1c4>
 80091be:	0668      	lsls	r0, r5, #25
 80091c0:	d5fb      	bpl.n	80091ba <_printf_i+0x1ba>
 80091c2:	8019      	strh	r1, [r3, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	6123      	str	r3, [r4, #16]
 80091c8:	4616      	mov	r6, r2
 80091ca:	e7bc      	b.n	8009146 <_printf_i+0x146>
 80091cc:	6833      	ldr	r3, [r6, #0]
 80091ce:	1d1a      	adds	r2, r3, #4
 80091d0:	6032      	str	r2, [r6, #0]
 80091d2:	681e      	ldr	r6, [r3, #0]
 80091d4:	6862      	ldr	r2, [r4, #4]
 80091d6:	2100      	movs	r1, #0
 80091d8:	4630      	mov	r0, r6
 80091da:	f7f7 f801 	bl	80001e0 <memchr>
 80091de:	b108      	cbz	r0, 80091e4 <_printf_i+0x1e4>
 80091e0:	1b80      	subs	r0, r0, r6
 80091e2:	6060      	str	r0, [r4, #4]
 80091e4:	6863      	ldr	r3, [r4, #4]
 80091e6:	6123      	str	r3, [r4, #16]
 80091e8:	2300      	movs	r3, #0
 80091ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091ee:	e7aa      	b.n	8009146 <_printf_i+0x146>
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	4632      	mov	r2, r6
 80091f4:	4649      	mov	r1, r9
 80091f6:	4640      	mov	r0, r8
 80091f8:	47d0      	blx	sl
 80091fa:	3001      	adds	r0, #1
 80091fc:	d0ad      	beq.n	800915a <_printf_i+0x15a>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	079b      	lsls	r3, r3, #30
 8009202:	d413      	bmi.n	800922c <_printf_i+0x22c>
 8009204:	68e0      	ldr	r0, [r4, #12]
 8009206:	9b03      	ldr	r3, [sp, #12]
 8009208:	4298      	cmp	r0, r3
 800920a:	bfb8      	it	lt
 800920c:	4618      	movlt	r0, r3
 800920e:	e7a6      	b.n	800915e <_printf_i+0x15e>
 8009210:	2301      	movs	r3, #1
 8009212:	4632      	mov	r2, r6
 8009214:	4649      	mov	r1, r9
 8009216:	4640      	mov	r0, r8
 8009218:	47d0      	blx	sl
 800921a:	3001      	adds	r0, #1
 800921c:	d09d      	beq.n	800915a <_printf_i+0x15a>
 800921e:	3501      	adds	r5, #1
 8009220:	68e3      	ldr	r3, [r4, #12]
 8009222:	9903      	ldr	r1, [sp, #12]
 8009224:	1a5b      	subs	r3, r3, r1
 8009226:	42ab      	cmp	r3, r5
 8009228:	dcf2      	bgt.n	8009210 <_printf_i+0x210>
 800922a:	e7eb      	b.n	8009204 <_printf_i+0x204>
 800922c:	2500      	movs	r5, #0
 800922e:	f104 0619 	add.w	r6, r4, #25
 8009232:	e7f5      	b.n	8009220 <_printf_i+0x220>
 8009234:	08009c81 	.word	0x08009c81
 8009238:	08009c92 	.word	0x08009c92

0800923c <__sflush_r>:
 800923c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009244:	0716      	lsls	r6, r2, #28
 8009246:	4605      	mov	r5, r0
 8009248:	460c      	mov	r4, r1
 800924a:	d454      	bmi.n	80092f6 <__sflush_r+0xba>
 800924c:	684b      	ldr	r3, [r1, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	dc02      	bgt.n	8009258 <__sflush_r+0x1c>
 8009252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009254:	2b00      	cmp	r3, #0
 8009256:	dd48      	ble.n	80092ea <__sflush_r+0xae>
 8009258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800925a:	2e00      	cmp	r6, #0
 800925c:	d045      	beq.n	80092ea <__sflush_r+0xae>
 800925e:	2300      	movs	r3, #0
 8009260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009264:	682f      	ldr	r7, [r5, #0]
 8009266:	6a21      	ldr	r1, [r4, #32]
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	d030      	beq.n	80092ce <__sflush_r+0x92>
 800926c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	0759      	lsls	r1, r3, #29
 8009272:	d505      	bpl.n	8009280 <__sflush_r+0x44>
 8009274:	6863      	ldr	r3, [r4, #4]
 8009276:	1ad2      	subs	r2, r2, r3
 8009278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800927a:	b10b      	cbz	r3, 8009280 <__sflush_r+0x44>
 800927c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800927e:	1ad2      	subs	r2, r2, r3
 8009280:	2300      	movs	r3, #0
 8009282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009284:	6a21      	ldr	r1, [r4, #32]
 8009286:	4628      	mov	r0, r5
 8009288:	47b0      	blx	r6
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	d106      	bne.n	800929e <__sflush_r+0x62>
 8009290:	6829      	ldr	r1, [r5, #0]
 8009292:	291d      	cmp	r1, #29
 8009294:	d82b      	bhi.n	80092ee <__sflush_r+0xb2>
 8009296:	4a2a      	ldr	r2, [pc, #168]	@ (8009340 <__sflush_r+0x104>)
 8009298:	40ca      	lsrs	r2, r1
 800929a:	07d6      	lsls	r6, r2, #31
 800929c:	d527      	bpl.n	80092ee <__sflush_r+0xb2>
 800929e:	2200      	movs	r2, #0
 80092a0:	6062      	str	r2, [r4, #4]
 80092a2:	04d9      	lsls	r1, r3, #19
 80092a4:	6922      	ldr	r2, [r4, #16]
 80092a6:	6022      	str	r2, [r4, #0]
 80092a8:	d504      	bpl.n	80092b4 <__sflush_r+0x78>
 80092aa:	1c42      	adds	r2, r0, #1
 80092ac:	d101      	bne.n	80092b2 <__sflush_r+0x76>
 80092ae:	682b      	ldr	r3, [r5, #0]
 80092b0:	b903      	cbnz	r3, 80092b4 <__sflush_r+0x78>
 80092b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80092b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092b6:	602f      	str	r7, [r5, #0]
 80092b8:	b1b9      	cbz	r1, 80092ea <__sflush_r+0xae>
 80092ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092be:	4299      	cmp	r1, r3
 80092c0:	d002      	beq.n	80092c8 <__sflush_r+0x8c>
 80092c2:	4628      	mov	r0, r5
 80092c4:	f7ff fb4a 	bl	800895c <_free_r>
 80092c8:	2300      	movs	r3, #0
 80092ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80092cc:	e00d      	b.n	80092ea <__sflush_r+0xae>
 80092ce:	2301      	movs	r3, #1
 80092d0:	4628      	mov	r0, r5
 80092d2:	47b0      	blx	r6
 80092d4:	4602      	mov	r2, r0
 80092d6:	1c50      	adds	r0, r2, #1
 80092d8:	d1c9      	bne.n	800926e <__sflush_r+0x32>
 80092da:	682b      	ldr	r3, [r5, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0c6      	beq.n	800926e <__sflush_r+0x32>
 80092e0:	2b1d      	cmp	r3, #29
 80092e2:	d001      	beq.n	80092e8 <__sflush_r+0xac>
 80092e4:	2b16      	cmp	r3, #22
 80092e6:	d11e      	bne.n	8009326 <__sflush_r+0xea>
 80092e8:	602f      	str	r7, [r5, #0]
 80092ea:	2000      	movs	r0, #0
 80092ec:	e022      	b.n	8009334 <__sflush_r+0xf8>
 80092ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092f2:	b21b      	sxth	r3, r3
 80092f4:	e01b      	b.n	800932e <__sflush_r+0xf2>
 80092f6:	690f      	ldr	r7, [r1, #16]
 80092f8:	2f00      	cmp	r7, #0
 80092fa:	d0f6      	beq.n	80092ea <__sflush_r+0xae>
 80092fc:	0793      	lsls	r3, r2, #30
 80092fe:	680e      	ldr	r6, [r1, #0]
 8009300:	bf08      	it	eq
 8009302:	694b      	ldreq	r3, [r1, #20]
 8009304:	600f      	str	r7, [r1, #0]
 8009306:	bf18      	it	ne
 8009308:	2300      	movne	r3, #0
 800930a:	eba6 0807 	sub.w	r8, r6, r7
 800930e:	608b      	str	r3, [r1, #8]
 8009310:	f1b8 0f00 	cmp.w	r8, #0
 8009314:	dde9      	ble.n	80092ea <__sflush_r+0xae>
 8009316:	6a21      	ldr	r1, [r4, #32]
 8009318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800931a:	4643      	mov	r3, r8
 800931c:	463a      	mov	r2, r7
 800931e:	4628      	mov	r0, r5
 8009320:	47b0      	blx	r6
 8009322:	2800      	cmp	r0, #0
 8009324:	dc08      	bgt.n	8009338 <__sflush_r+0xfc>
 8009326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	f04f 30ff 	mov.w	r0, #4294967295
 8009334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009338:	4407      	add	r7, r0
 800933a:	eba8 0800 	sub.w	r8, r8, r0
 800933e:	e7e7      	b.n	8009310 <__sflush_r+0xd4>
 8009340:	20400001 	.word	0x20400001

08009344 <_fflush_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	690b      	ldr	r3, [r1, #16]
 8009348:	4605      	mov	r5, r0
 800934a:	460c      	mov	r4, r1
 800934c:	b913      	cbnz	r3, 8009354 <_fflush_r+0x10>
 800934e:	2500      	movs	r5, #0
 8009350:	4628      	mov	r0, r5
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	b118      	cbz	r0, 800935e <_fflush_r+0x1a>
 8009356:	6a03      	ldr	r3, [r0, #32]
 8009358:	b90b      	cbnz	r3, 800935e <_fflush_r+0x1a>
 800935a:	f7ff f9c5 	bl	80086e8 <__sinit>
 800935e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0f3      	beq.n	800934e <_fflush_r+0xa>
 8009366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009368:	07d0      	lsls	r0, r2, #31
 800936a:	d404      	bmi.n	8009376 <_fflush_r+0x32>
 800936c:	0599      	lsls	r1, r3, #22
 800936e:	d402      	bmi.n	8009376 <_fflush_r+0x32>
 8009370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009372:	f7ff faf0 	bl	8008956 <__retarget_lock_acquire_recursive>
 8009376:	4628      	mov	r0, r5
 8009378:	4621      	mov	r1, r4
 800937a:	f7ff ff5f 	bl	800923c <__sflush_r>
 800937e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009380:	07da      	lsls	r2, r3, #31
 8009382:	4605      	mov	r5, r0
 8009384:	d4e4      	bmi.n	8009350 <_fflush_r+0xc>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	059b      	lsls	r3, r3, #22
 800938a:	d4e1      	bmi.n	8009350 <_fflush_r+0xc>
 800938c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800938e:	f7ff fae3 	bl	8008958 <__retarget_lock_release_recursive>
 8009392:	e7dd      	b.n	8009350 <_fflush_r+0xc>

08009394 <__swbuf_r>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	460e      	mov	r6, r1
 8009398:	4614      	mov	r4, r2
 800939a:	4605      	mov	r5, r0
 800939c:	b118      	cbz	r0, 80093a6 <__swbuf_r+0x12>
 800939e:	6a03      	ldr	r3, [r0, #32]
 80093a0:	b90b      	cbnz	r3, 80093a6 <__swbuf_r+0x12>
 80093a2:	f7ff f9a1 	bl	80086e8 <__sinit>
 80093a6:	69a3      	ldr	r3, [r4, #24]
 80093a8:	60a3      	str	r3, [r4, #8]
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	071a      	lsls	r2, r3, #28
 80093ae:	d501      	bpl.n	80093b4 <__swbuf_r+0x20>
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	b943      	cbnz	r3, 80093c6 <__swbuf_r+0x32>
 80093b4:	4621      	mov	r1, r4
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 f82a 	bl	8009410 <__swsetup_r>
 80093bc:	b118      	cbz	r0, 80093c6 <__swbuf_r+0x32>
 80093be:	f04f 37ff 	mov.w	r7, #4294967295
 80093c2:	4638      	mov	r0, r7
 80093c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	6922      	ldr	r2, [r4, #16]
 80093ca:	1a98      	subs	r0, r3, r2
 80093cc:	6963      	ldr	r3, [r4, #20]
 80093ce:	b2f6      	uxtb	r6, r6
 80093d0:	4283      	cmp	r3, r0
 80093d2:	4637      	mov	r7, r6
 80093d4:	dc05      	bgt.n	80093e2 <__swbuf_r+0x4e>
 80093d6:	4621      	mov	r1, r4
 80093d8:	4628      	mov	r0, r5
 80093da:	f7ff ffb3 	bl	8009344 <_fflush_r>
 80093de:	2800      	cmp	r0, #0
 80093e0:	d1ed      	bne.n	80093be <__swbuf_r+0x2a>
 80093e2:	68a3      	ldr	r3, [r4, #8]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	60a3      	str	r3, [r4, #8]
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	6022      	str	r2, [r4, #0]
 80093ee:	701e      	strb	r6, [r3, #0]
 80093f0:	6962      	ldr	r2, [r4, #20]
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d004      	beq.n	8009402 <__swbuf_r+0x6e>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	07db      	lsls	r3, r3, #31
 80093fc:	d5e1      	bpl.n	80093c2 <__swbuf_r+0x2e>
 80093fe:	2e0a      	cmp	r6, #10
 8009400:	d1df      	bne.n	80093c2 <__swbuf_r+0x2e>
 8009402:	4621      	mov	r1, r4
 8009404:	4628      	mov	r0, r5
 8009406:	f7ff ff9d 	bl	8009344 <_fflush_r>
 800940a:	2800      	cmp	r0, #0
 800940c:	d0d9      	beq.n	80093c2 <__swbuf_r+0x2e>
 800940e:	e7d6      	b.n	80093be <__swbuf_r+0x2a>

08009410 <__swsetup_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4b29      	ldr	r3, [pc, #164]	@ (80094b8 <__swsetup_r+0xa8>)
 8009414:	4605      	mov	r5, r0
 8009416:	6818      	ldr	r0, [r3, #0]
 8009418:	460c      	mov	r4, r1
 800941a:	b118      	cbz	r0, 8009424 <__swsetup_r+0x14>
 800941c:	6a03      	ldr	r3, [r0, #32]
 800941e:	b90b      	cbnz	r3, 8009424 <__swsetup_r+0x14>
 8009420:	f7ff f962 	bl	80086e8 <__sinit>
 8009424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009428:	0719      	lsls	r1, r3, #28
 800942a:	d422      	bmi.n	8009472 <__swsetup_r+0x62>
 800942c:	06da      	lsls	r2, r3, #27
 800942e:	d407      	bmi.n	8009440 <__swsetup_r+0x30>
 8009430:	2209      	movs	r2, #9
 8009432:	602a      	str	r2, [r5, #0]
 8009434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	f04f 30ff 	mov.w	r0, #4294967295
 800943e:	e033      	b.n	80094a8 <__swsetup_r+0x98>
 8009440:	0758      	lsls	r0, r3, #29
 8009442:	d512      	bpl.n	800946a <__swsetup_r+0x5a>
 8009444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009446:	b141      	cbz	r1, 800945a <__swsetup_r+0x4a>
 8009448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800944c:	4299      	cmp	r1, r3
 800944e:	d002      	beq.n	8009456 <__swsetup_r+0x46>
 8009450:	4628      	mov	r0, r5
 8009452:	f7ff fa83 	bl	800895c <_free_r>
 8009456:	2300      	movs	r3, #0
 8009458:	6363      	str	r3, [r4, #52]	@ 0x34
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009460:	81a3      	strh	r3, [r4, #12]
 8009462:	2300      	movs	r3, #0
 8009464:	6063      	str	r3, [r4, #4]
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	f043 0308 	orr.w	r3, r3, #8
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	b94b      	cbnz	r3, 800948a <__swsetup_r+0x7a>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800947c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009480:	d003      	beq.n	800948a <__swsetup_r+0x7a>
 8009482:	4621      	mov	r1, r4
 8009484:	4628      	mov	r0, r5
 8009486:	f000 f895 	bl	80095b4 <__smakebuf_r>
 800948a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948e:	f013 0201 	ands.w	r2, r3, #1
 8009492:	d00a      	beq.n	80094aa <__swsetup_r+0x9a>
 8009494:	2200      	movs	r2, #0
 8009496:	60a2      	str	r2, [r4, #8]
 8009498:	6962      	ldr	r2, [r4, #20]
 800949a:	4252      	negs	r2, r2
 800949c:	61a2      	str	r2, [r4, #24]
 800949e:	6922      	ldr	r2, [r4, #16]
 80094a0:	b942      	cbnz	r2, 80094b4 <__swsetup_r+0xa4>
 80094a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094a6:	d1c5      	bne.n	8009434 <__swsetup_r+0x24>
 80094a8:	bd38      	pop	{r3, r4, r5, pc}
 80094aa:	0799      	lsls	r1, r3, #30
 80094ac:	bf58      	it	pl
 80094ae:	6962      	ldrpl	r2, [r4, #20]
 80094b0:	60a2      	str	r2, [r4, #8]
 80094b2:	e7f4      	b.n	800949e <__swsetup_r+0x8e>
 80094b4:	2000      	movs	r0, #0
 80094b6:	e7f7      	b.n	80094a8 <__swsetup_r+0x98>
 80094b8:	2000001c 	.word	0x2000001c

080094bc <memmove>:
 80094bc:	4288      	cmp	r0, r1
 80094be:	b510      	push	{r4, lr}
 80094c0:	eb01 0402 	add.w	r4, r1, r2
 80094c4:	d902      	bls.n	80094cc <memmove+0x10>
 80094c6:	4284      	cmp	r4, r0
 80094c8:	4623      	mov	r3, r4
 80094ca:	d807      	bhi.n	80094dc <memmove+0x20>
 80094cc:	1e43      	subs	r3, r0, #1
 80094ce:	42a1      	cmp	r1, r4
 80094d0:	d008      	beq.n	80094e4 <memmove+0x28>
 80094d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094da:	e7f8      	b.n	80094ce <memmove+0x12>
 80094dc:	4402      	add	r2, r0
 80094de:	4601      	mov	r1, r0
 80094e0:	428a      	cmp	r2, r1
 80094e2:	d100      	bne.n	80094e6 <memmove+0x2a>
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ee:	e7f7      	b.n	80094e0 <memmove+0x24>

080094f0 <memcpy>:
 80094f0:	440a      	add	r2, r1
 80094f2:	4291      	cmp	r1, r2
 80094f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094f8:	d100      	bne.n	80094fc <memcpy+0xc>
 80094fa:	4770      	bx	lr
 80094fc:	b510      	push	{r4, lr}
 80094fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009506:	4291      	cmp	r1, r2
 8009508:	d1f9      	bne.n	80094fe <memcpy+0xe>
 800950a:	bd10      	pop	{r4, pc}

0800950c <_realloc_r>:
 800950c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009510:	4607      	mov	r7, r0
 8009512:	4614      	mov	r4, r2
 8009514:	460d      	mov	r5, r1
 8009516:	b921      	cbnz	r1, 8009522 <_realloc_r+0x16>
 8009518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800951c:	4611      	mov	r1, r2
 800951e:	f7fe bfcb 	b.w	80084b8 <_malloc_r>
 8009522:	b92a      	cbnz	r2, 8009530 <_realloc_r+0x24>
 8009524:	f7ff fa1a 	bl	800895c <_free_r>
 8009528:	4625      	mov	r5, r4
 800952a:	4628      	mov	r0, r5
 800952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009530:	f000 f89e 	bl	8009670 <_malloc_usable_size_r>
 8009534:	4284      	cmp	r4, r0
 8009536:	4606      	mov	r6, r0
 8009538:	d802      	bhi.n	8009540 <_realloc_r+0x34>
 800953a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800953e:	d8f4      	bhi.n	800952a <_realloc_r+0x1e>
 8009540:	4621      	mov	r1, r4
 8009542:	4638      	mov	r0, r7
 8009544:	f7fe ffb8 	bl	80084b8 <_malloc_r>
 8009548:	4680      	mov	r8, r0
 800954a:	b908      	cbnz	r0, 8009550 <_realloc_r+0x44>
 800954c:	4645      	mov	r5, r8
 800954e:	e7ec      	b.n	800952a <_realloc_r+0x1e>
 8009550:	42b4      	cmp	r4, r6
 8009552:	4622      	mov	r2, r4
 8009554:	4629      	mov	r1, r5
 8009556:	bf28      	it	cs
 8009558:	4632      	movcs	r2, r6
 800955a:	f7ff ffc9 	bl	80094f0 <memcpy>
 800955e:	4629      	mov	r1, r5
 8009560:	4638      	mov	r0, r7
 8009562:	f7ff f9fb 	bl	800895c <_free_r>
 8009566:	e7f1      	b.n	800954c <_realloc_r+0x40>

08009568 <__swhatbuf_r>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	460c      	mov	r4, r1
 800956c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009570:	2900      	cmp	r1, #0
 8009572:	b096      	sub	sp, #88	@ 0x58
 8009574:	4615      	mov	r5, r2
 8009576:	461e      	mov	r6, r3
 8009578:	da0d      	bge.n	8009596 <__swhatbuf_r+0x2e>
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009580:	f04f 0100 	mov.w	r1, #0
 8009584:	bf14      	ite	ne
 8009586:	2340      	movne	r3, #64	@ 0x40
 8009588:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800958c:	2000      	movs	r0, #0
 800958e:	6031      	str	r1, [r6, #0]
 8009590:	602b      	str	r3, [r5, #0]
 8009592:	b016      	add	sp, #88	@ 0x58
 8009594:	bd70      	pop	{r4, r5, r6, pc}
 8009596:	466a      	mov	r2, sp
 8009598:	f000 f848 	bl	800962c <_fstat_r>
 800959c:	2800      	cmp	r0, #0
 800959e:	dbec      	blt.n	800957a <__swhatbuf_r+0x12>
 80095a0:	9901      	ldr	r1, [sp, #4]
 80095a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80095a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095aa:	4259      	negs	r1, r3
 80095ac:	4159      	adcs	r1, r3
 80095ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095b2:	e7eb      	b.n	800958c <__swhatbuf_r+0x24>

080095b4 <__smakebuf_r>:
 80095b4:	898b      	ldrh	r3, [r1, #12]
 80095b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095b8:	079d      	lsls	r5, r3, #30
 80095ba:	4606      	mov	r6, r0
 80095bc:	460c      	mov	r4, r1
 80095be:	d507      	bpl.n	80095d0 <__smakebuf_r+0x1c>
 80095c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	6123      	str	r3, [r4, #16]
 80095c8:	2301      	movs	r3, #1
 80095ca:	6163      	str	r3, [r4, #20]
 80095cc:	b003      	add	sp, #12
 80095ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d0:	ab01      	add	r3, sp, #4
 80095d2:	466a      	mov	r2, sp
 80095d4:	f7ff ffc8 	bl	8009568 <__swhatbuf_r>
 80095d8:	9f00      	ldr	r7, [sp, #0]
 80095da:	4605      	mov	r5, r0
 80095dc:	4639      	mov	r1, r7
 80095de:	4630      	mov	r0, r6
 80095e0:	f7fe ff6a 	bl	80084b8 <_malloc_r>
 80095e4:	b948      	cbnz	r0, 80095fa <__smakebuf_r+0x46>
 80095e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ea:	059a      	lsls	r2, r3, #22
 80095ec:	d4ee      	bmi.n	80095cc <__smakebuf_r+0x18>
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	f043 0302 	orr.w	r3, r3, #2
 80095f6:	81a3      	strh	r3, [r4, #12]
 80095f8:	e7e2      	b.n	80095c0 <__smakebuf_r+0xc>
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	6020      	str	r0, [r4, #0]
 80095fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	9b01      	ldr	r3, [sp, #4]
 8009606:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800960a:	b15b      	cbz	r3, 8009624 <__smakebuf_r+0x70>
 800960c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009610:	4630      	mov	r0, r6
 8009612:	f000 f81d 	bl	8009650 <_isatty_r>
 8009616:	b128      	cbz	r0, 8009624 <__smakebuf_r+0x70>
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	f023 0303 	bic.w	r3, r3, #3
 800961e:	f043 0301 	orr.w	r3, r3, #1
 8009622:	81a3      	strh	r3, [r4, #12]
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	431d      	orrs	r5, r3
 8009628:	81a5      	strh	r5, [r4, #12]
 800962a:	e7cf      	b.n	80095cc <__smakebuf_r+0x18>

0800962c <_fstat_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d07      	ldr	r5, [pc, #28]	@ (800964c <_fstat_r+0x20>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f7f8 fd88 	bl	800214e <_fstat>
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	d102      	bne.n	8009648 <_fstat_r+0x1c>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	b103      	cbz	r3, 8009648 <_fstat_r+0x1c>
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	bd38      	pop	{r3, r4, r5, pc}
 800964a:	bf00      	nop
 800964c:	20000498 	.word	0x20000498

08009650 <_isatty_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d06      	ldr	r5, [pc, #24]	@ (800966c <_isatty_r+0x1c>)
 8009654:	2300      	movs	r3, #0
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	602b      	str	r3, [r5, #0]
 800965c:	f7f8 fd87 	bl	800216e <_isatty>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_isatty_r+0x1a>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_isatty_r+0x1a>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	20000498 	.word	0x20000498

08009670 <_malloc_usable_size_r>:
 8009670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009674:	1f18      	subs	r0, r3, #4
 8009676:	2b00      	cmp	r3, #0
 8009678:	bfbc      	itt	lt
 800967a:	580b      	ldrlt	r3, [r1, r0]
 800967c:	18c0      	addlt	r0, r0, r3
 800967e:	4770      	bx	lr

08009680 <_init>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr

0800968c <_fini>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr
