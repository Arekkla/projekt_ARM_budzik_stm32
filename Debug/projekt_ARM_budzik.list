
projekt_ARM_budzik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f2c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  080090cc  080090cc  0000a0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  0000b068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a0  080096a0  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096a4  080096a4  0000a6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080096a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000068  08009710  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08009710  0000b448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e73  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003358  00000000  00000000  0001df0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00021268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e45  00000000  00000000  000224f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005f0d  00000000  00000000  00023335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017efd  00000000  00000000  00029242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975bc  00000000  00000000  0004113f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d86fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  000d8740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ddc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080090b4 	.word	0x080090b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080090b4 	.word	0x080090b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4604      	mov	r4, r0
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4623      	mov	r3, r4
 80005bc:	80fb      	strh	r3, [r7, #6]
 80005be:	4603      	mov	r3, r0
 80005c0:	80bb      	strh	r3, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	70fb      	strb	r3, [r7, #3]
 80005c6:	4613      	mov	r3, r2
 80005c8:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 80005ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80005d0:	f300 8100 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80005da:	f300 80fb 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005de:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80005e2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	440b      	add	r3, r1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f340 80ef 	ble.w	80007d4 <GFX_draw_char+0x228>
 80005f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	4413      	add	r3, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	f340 80e6 	ble.w	80007d4 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e0aa      	b.n	8000764 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	441a      	add	r2, r3
 8000616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061a:	4413      	add	r3, r2
 800061c:	4a6f      	ldr	r2, [pc, #444]	@ (80007dc <GFX_draw_char+0x230>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000622:	2307      	movs	r3, #7
 8000624:	73bb      	strb	r3, [r7, #14]
 8000626:	e092      	b.n	800074e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d040      	beq.n	80006b4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000632:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000636:	2b01      	cmp	r3, #1
 8000638:	d116      	bne.n	8000668 <GFX_draw_char+0xbc>
 800063a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800063e:	2b01      	cmp	r3, #1
 8000640:	d112      	bne.n	8000668 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000646:	b29a      	uxth	r2, r3
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4413      	add	r3, r2
 800064c:	b29b      	uxth	r3, r3
 800064e:	b218      	sxth	r0, r3
 8000650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000654:	b29a      	uxth	r2, r3
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	b29b      	uxth	r3, r3
 800065c:	b21b      	sxth	r3, r3
 800065e:	883a      	ldrh	r2, [r7, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f000 f9f7 	bl	8000a54 <SSD1306_draw_pixel>
 8000666:	e069      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066c:	b29a      	uxth	r2, r3
 800066e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000672:	b29b      	uxth	r3, r3
 8000674:	fb12 f303 	smulbb	r3, r2, r3
 8000678:	b29a      	uxth	r2, r3
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	b218      	sxth	r0, r3
 8000682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000686:	b29a      	uxth	r2, r3
 8000688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800068c:	b29b      	uxth	r3, r3
 800068e:	fb12 f303 	smulbb	r3, r2, r3
 8000692:	b29a      	uxth	r2, r3
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	b29b      	uxth	r3, r3
 800069a:	b219      	sxth	r1, r3
 800069c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006a6:	b21c      	sxth	r4, r3
 80006a8:	883b      	ldrh	r3, [r7, #0]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4623      	mov	r3, r4
 80006ae:	f000 f8d0 	bl	8000852 <GFX_draw_fill_rect>
 80006b2:	e043      	b.n	800073c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 80006b4:	8c3a      	ldrh	r2, [r7, #32]
 80006b6:	883b      	ldrh	r3, [r7, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d03f      	beq.n	800073c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 80006bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d116      	bne.n	80006f2 <GFX_draw_char+0x146>
 80006c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d112      	bne.n	80006f2 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80006cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b218      	sxth	r0, r3
 80006da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	88bb      	ldrh	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	8c3a      	ldrh	r2, [r7, #32]
 80006ea:	4619      	mov	r1, r3
 80006ec:	f000 f9b2 	bl	8000a54 <SSD1306_draw_pixel>
 80006f0:	e024      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80006f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	fb12 f303 	smulbb	r3, r2, r3
 8000702:	b29a      	uxth	r2, r3
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4413      	add	r3, r2
 8000708:	b29b      	uxth	r3, r3
 800070a:	b218      	sxth	r0, r3
 800070c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000710:	b29a      	uxth	r2, r3
 8000712:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000716:	b29b      	uxth	r3, r3
 8000718:	fb12 f303 	smulbb	r3, r2, r3
 800071c:	b29a      	uxth	r2, r3
 800071e:	88bb      	ldrh	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	b219      	sxth	r1, r3
 8000726:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800072a:	b21a      	sxth	r2, r3
 800072c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000730:	b21c      	sxth	r4, r3
 8000732:	8c3b      	ldrh	r3, [r7, #32]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	4623      	mov	r3, r4
 8000738:	f000 f88b 	bl	8000852 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800073c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	73bb      	strb	r3, [r7, #14]
 8000748:	7b7b      	ldrb	r3, [r7, #13]
 800074a:	085b      	lsrs	r3, r3, #1
 800074c:	737b      	strb	r3, [r7, #13]
 800074e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000752:	2b00      	cmp	r3, #0
 8000754:	f6bf af68 	bge.w	8000628 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000768:	2b04      	cmp	r3, #4
 800076a:	f77f af50 	ble.w	800060e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800076e:	8c3a      	ldrh	r2, [r7, #32]
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d02f      	beq.n	80007d6 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000776:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10e      	bne.n	800079c <GFX_draw_char+0x1f0>
 800077e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10a      	bne.n	800079c <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	3305      	adds	r3, #5
 800078a:	b29b      	uxth	r3, r3
 800078c:	b218      	sxth	r0, r3
 800078e:	8c3b      	ldrh	r3, [r7, #32]
 8000790:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000794:	2208      	movs	r2, #8
 8000796:	f000 fad3 	bl	8000d40 <SSD1306_draw_fast_vline>
 800079a:	e01c      	b.n	80007d6 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800079c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	0092      	lsls	r2, r2, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	4413      	add	r3, r2
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	b218      	sxth	r0, r3
 80007b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007bc:	b29b      	uxth	r3, r3
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b21c      	sxth	r4, r3
 80007c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007c8:	8c3b      	ldrh	r3, [r7, #32]
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4623      	mov	r3, r4
 80007ce:	f000 f840 	bl	8000852 <GFX_draw_fill_rect>
 80007d2:	e000      	b.n	80007d6 <GFX_draw_char+0x22a>
		return;
 80007d4:	bf00      	nop
		}
	}
}
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	08009134 	.word	0x08009134

080007e0 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af04      	add	r7, sp, #16
 80007e6:	60ba      	str	r2, [r7, #8]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	81fb      	strh	r3, [r7, #14]
 80007ee:	460b      	mov	r3, r1
 80007f0:	81bb      	strh	r3, [r7, #12]
 80007f2:	4613      	mov	r3, r2
 80007f4:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]
	while(*c)
 80007fa:	e021      	b.n	8000840 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	4413      	add	r3, r2
 8000804:	b29b      	uxth	r3, r3
 8000806:	b218      	sxth	r0, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	88fc      	ldrh	r4, [r7, #6]
 800080e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000812:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4623      	mov	r3, r4
 8000824:	f7ff fec2 	bl	80005ac <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000828:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800082c:	461a      	mov	r2, r3
 800082e:	00d2      	lsls	r2, r2, #3
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b2da      	uxtb	r2, r3
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	4413      	add	r3, r2
 8000838:	75fb      	strb	r3, [r7, #23]
		c++;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3301      	adds	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1d9      	bne.n	80007fc <GFX_draw_string+0x1c>
	}
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	371c      	adds	r7, #28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}

08000852 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000852:	b590      	push	{r4, r7, lr}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	4604      	mov	r4, r0
 800085a:	4608      	mov	r0, r1
 800085c:	4611      	mov	r1, r2
 800085e:	461a      	mov	r2, r3
 8000860:	4623      	mov	r3, r4
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4603      	mov	r3, r0
 8000866:	80bb      	strh	r3, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
 800086c:	4613      	mov	r3, r2
 800086e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	e00e      	b.n	8000894 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000876:	8c3b      	ldrh	r3, [r7, #32]
 8000878:	f9b7 2000 	ldrsh.w	r2, [r7]
 800087c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000880:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000884:	f000 fa5c 	bl	8000d40 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8000888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088c:	b29b      	uxth	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b29b      	uxth	r3, r3
 8000892:	81fb      	strh	r3, [r7, #14]
 8000894:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000898:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800089c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a0:	440b      	add	r3, r1
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbe7      	blt.n	8000876 <GFX_draw_fill_rect+0x24>
	}
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af04      	add	r7, sp, #16
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	2178      	movs	r1, #120	@ 0x78
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <platform_write+0x34>)
 80008d6:	f002 ff0d 	bl	80036f4 <HAL_I2C_Mem_Write>
	return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000008c 	.word	0x2000008c

080008e8 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	88bb      	ldrh	r3, [r7, #4]
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	2178      	movs	r1, #120	@ 0x78
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <platform_write_dma+0x30>)
 800090a:	f002 ffed 	bl	80038e8 <HAL_I2C_Mem_Write_DMA>
	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000008c 	.word	0x2000008c

0800091c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ffbf 	bl	80008b0 <platform_write>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <SSD1306_init>:

bool SSD1306_init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8000942:	2302      	movs	r3, #2
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	238f      	movs	r3, #143	@ 0x8f
 8000948:	71bb      	strb	r3, [r7, #6]
 800094a:	2302      	movs	r3, #2
 800094c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800094e:	4b40      	ldr	r3, [pc, #256]	@ (8000a50 <SSD1306_init+0x114>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10d      	bne.n	8000972 <SSD1306_init+0x36>
 8000956:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800095a:	f007 fa9d 	bl	8007e98 <malloc>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b3b      	ldr	r3, [pc, #236]	@ (8000a50 <SSD1306_init+0x114>)
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	4b3a      	ldr	r3, [pc, #232]	@ (8000a50 <SSD1306_init+0x114>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <SSD1306_init+0x36>
  {
    return false;
 800096e:	2300      	movs	r3, #0
 8000970:	e06a      	b.n	8000a48 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 8000972:	f000 f947 	bl	8000c04 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000976:	20ae      	movs	r0, #174	@ 0xae
 8000978:	f7ff ffd0 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 800097c:	20d5      	movs	r0, #213	@ 0xd5
 800097e:	f7ff ffcd 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 8000982:	20e0      	movs	r0, #224	@ 0xe0
 8000984:	f7ff ffca 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8000988:	20a8      	movs	r0, #168	@ 0xa8
 800098a:	f7ff ffc7 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 800098e:	203f      	movs	r0, #63	@ 0x3f
 8000990:	f7ff ffc4 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 8000994:	20d3      	movs	r0, #211	@ 0xd3
 8000996:	f7ff ffc1 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ffbe 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80009a0:	2040      	movs	r0, #64	@ 0x40
 80009a2:	f7ff ffbb 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80009a6:	208d      	movs	r0, #141	@ 0x8d
 80009a8:	f7ff ffb8 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80009ac:	797b      	ldrb	r3, [r7, #5]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d101      	bne.n	80009b6 <SSD1306_init+0x7a>
 80009b2:	2310      	movs	r3, #16
 80009b4:	e000      	b.n	80009b8 <SSD1306_init+0x7c>
 80009b6:	2314      	movs	r3, #20
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffaf 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80009be:	2020      	movs	r0, #32
 80009c0:	f7ff ffac 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff ffa9 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80009ca:	20b0      	movs	r0, #176	@ 0xb0
 80009cc:	f7ff ffa6 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80009d0:	20c8      	movs	r0, #200	@ 0xc8
 80009d2:	f7ff ffa3 	bl	800091c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80009d6:	2312      	movs	r3, #18
 80009d8:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80009da:	797b      	ldrb	r3, [r7, #5]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d101      	bne.n	80009e4 <SSD1306_init+0xa8>
 80009e0:	239f      	movs	r3, #159	@ 0x9f
 80009e2:	e000      	b.n	80009e6 <SSD1306_init+0xaa>
 80009e4:	23cf      	movs	r3, #207	@ 0xcf
 80009e6:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 80009e8:	20da      	movs	r0, #218	@ 0xda
 80009ea:	f7ff ff97 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff93 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 80009f6:	2081      	movs	r0, #129	@ 0x81
 80009f8:	f7ff ff90 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff8c 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000a04:	20d9      	movs	r0, #217	@ 0xd9
 8000a06:	f7ff ff89 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000a0a:	797b      	ldrb	r3, [r7, #5]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <SSD1306_init+0xd8>
 8000a10:	2322      	movs	r3, #34	@ 0x22
 8000a12:	e000      	b.n	8000a16 <SSD1306_init+0xda>
 8000a14:	23f1      	movs	r3, #241	@ 0xf1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff80 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8000a1c:	20db      	movs	r0, #219	@ 0xdb
 8000a1e:	f7ff ff7d 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8000a22:	2040      	movs	r0, #64	@ 0x40
 8000a24:	f7ff ff7a 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000a28:	20a4      	movs	r0, #164	@ 0xa4
 8000a2a:	f7ff ff77 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8000a2e:	20a6      	movs	r0, #166	@ 0xa6
 8000a30:	f7ff ff74 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000a34:	202e      	movs	r0, #46	@ 0x2e
 8000a36:	f7ff ff71 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8000a3a:	20af      	movs	r0, #175	@ 0xaf
 8000a3c:	f7ff ff6e 	bl	800091c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fb17 	bl	8001074 <SSD1306_set_rotation>
  return true;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000084 	.word	0x20000084

08000a54 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8000a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f2c0 80c4 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a76:	f300 80bf 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f2c0 80ba 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a88:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a8a:	f300 80b5 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 8000a8e:	f000 fb01 	bl	8001094 <SSD1306_get_rotation>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d023      	beq.n	8000ae0 <SSD1306_draw_pixel+0x8c>
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	dc33      	bgt.n	8000b04 <SSD1306_draw_pixel+0xb0>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d002      	beq.n	8000aa6 <SSD1306_draw_pixel+0x52>
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d012      	beq.n	8000aca <SSD1306_draw_pixel+0x76>
 8000aa4:	e02e      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	4053      	eors	r3, r2
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	80bb      	strh	r3, [r7, #4]
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	4053      	eors	r3, r2
 8000abc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	80fb      	strh	r3, [r7, #6]
				break;
 8000ac8:	e01c      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	80bb      	strh	r3, [r7, #4]
				break;
 8000ade:	e011      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	4053      	eors	r3, r2
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4053      	eors	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
 8000af0:	88fa      	ldrh	r2, [r7, #6]
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	4053      	eors	r3, r2
 8000af6:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	80bb      	strh	r3, [r7, #4]
				break;
 8000b02:	bf00      	nop
		}

		switch (color)
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d051      	beq.n	8000bae <SSD1306_draw_pixel+0x15a>
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	dc74      	bgt.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d026      	beq.n	8000b60 <SSD1306_draw_pixel+0x10c>
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d170      	bne.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8000b16:	4b3a      	ldr	r3, [pc, #232]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da00      	bge.n	8000b28 <SSD1306_draw_pixel+0xd4>
 8000b26:	3307      	adds	r3, #7
 8000b28:	10db      	asrs	r3, r3, #3
 8000b2a:	b218      	sxth	r0, r3
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	440b      	add	r3, r1
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b25c      	sxtb	r4, r3
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b52:	4602      	mov	r2, r0
 8000b54:	01d2      	lsls	r2, r2, #7
 8000b56:	440a      	add	r2, r1
 8000b58:	4413      	add	r3, r2
 8000b5a:	b2e2      	uxtb	r2, r4
 8000b5c:	701a      	strb	r2, [r3, #0]
				break;
 8000b5e:	e04b      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8000b60:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <SSD1306_draw_pixel+0x11e>
 8000b70:	3307      	adds	r3, #7
 8000b72:	10db      	asrs	r3, r3, #3
 8000b74:	b218      	sxth	r0, r3
 8000b76:	4603      	mov	r3, r0
 8000b78:	01db      	lsls	r3, r3, #7
 8000b7a:	440b      	add	r3, r1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	4013      	ands	r3, r2
 8000b96:	b25c      	sxtb	r4, r3
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	01d2      	lsls	r2, r2, #7
 8000ba4:	440a      	add	r2, r1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2e2      	uxtb	r2, r4
 8000baa:	701a      	strb	r2, [r3, #0]
				break;
 8000bac:	e024      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da00      	bge.n	8000bc0 <SSD1306_draw_pixel+0x16c>
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	10db      	asrs	r3, r3, #3
 8000bc2:	b218      	sxth	r0, r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	440b      	add	r3, r1
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	4053      	eors	r3, r2
 8000be0:	b25c      	sxtb	r4, r3
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bea:	4602      	mov	r2, r0
 8000bec:	01d2      	lsls	r2, r2, #7
 8000bee:	440a      	add	r2, r1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2e2      	uxtb	r2, r4
 8000bf4:	701a      	strb	r2, [r3, #0]
				break;
 8000bf6:	bf00      	nop
		}
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	20000084 	.word	0x20000084

08000c04 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <SSD1306_display_clear+0x18>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f007 fb2f 	bl	8008276 <memset>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000084 	.word	0x20000084

08000c20 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000c20:	b490      	push	{r4, r7}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4604      	mov	r4, r0
 8000c28:	4608      	mov	r0, r1
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4623      	mov	r3, r4
 8000c30:	80fb      	strh	r3, [r7, #6]
 8000c32:	4603      	mov	r3, r0
 8000c34:	80bb      	strh	r3, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8000c3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db75      	blt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c4c:	dc71      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8000c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da06      	bge.n	8000c64 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	807b      	strh	r3, [r7, #2]
			x = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8000c64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2b80      	cmp	r3, #128	@ 0x80
 8000c70:	dd04      	ble.n	8000c7c <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8000c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dd56      	ble.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <SSD1306_draw_fast_hline_internal+0x11c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da00      	bge.n	8000c92 <SSD1306_draw_fast_hline_internal+0x72>
 8000c90:	3307      	adds	r3, #7
 8000c92:	10db      	asrs	r3, r3, #3
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	01d9      	lsls	r1, r3, #7
 8000c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8000cb0:	883b      	ldrh	r3, [r7, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d034      	beq.n	8000d20 <SSD1306_draw_fast_hline_internal+0x100>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	dc3b      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d013      	beq.n	8000ce6 <SSD1306_draw_fast_hline_internal+0xc6>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d137      	bne.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
			{
				case SSD1306_WHITE:
					while (w--)
 8000cc2:	e007      	b.n	8000cd4 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60fa      	str	r2, [r7, #12]
 8000cca:	7819      	ldrb	r1, [r3, #0]
 8000ccc:	7afa      	ldrb	r2, [r7, #11]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	3a01      	subs	r2, #1
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	807a      	strh	r2, [r7, #2]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1ef      	bne.n	8000cc4 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000ce4:	e025      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_BLACK:
					mask = ~mask;
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000cec:	e007      	b.n	8000cfe <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60fa      	str	r2, [r7, #12]
 8000cf4:	7819      	ldrb	r1, [r3, #0]
 8000cf6:	7afa      	ldrb	r2, [r7, #11]
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	3a01      	subs	r2, #1
 8000d06:	b292      	uxth	r2, r2
 8000d08:	807a      	strh	r2, [r7, #2]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1ef      	bne.n	8000cee <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8000d0e:	e010      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60fa      	str	r2, [r7, #12]
 8000d16:	7819      	ldrb	r1, [r3, #0]
 8000d18:	7afa      	ldrb	r2, [r7, #11]
 8000d1a:	404a      	eors	r2, r1
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	3a01      	subs	r2, #1
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	807a      	strh	r2, [r7, #2]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ef      	bne.n	8000d10 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8000d30:	bf00      	nop
			}
		}
	}
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc90      	pop	{r4, r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000084 	.word	0x20000084

08000d40 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4604      	mov	r4, r0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4623      	mov	r3, r4
 8000d50:	80fb      	strh	r3, [r7, #6]
 8000d52:	4603      	mov	r3, r0
 8000d54:	80bb      	strh	r3, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8000d62:	f000 f997 	bl	8001094 <SSD1306_get_rotation>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d033      	beq.n	8000dd4 <SSD1306_draw_fast_vline+0x94>
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	dc45      	bgt.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d002      	beq.n	8000d7a <SSD1306_draw_fast_vline+0x3a>
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d01b      	beq.n	8000db0 <SSD1306_draw_fast_vline+0x70>
 8000d78:	e040      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8000d7e:	88fa      	ldrh	r2, [r7, #6]
 8000d80:	88bb      	ldrh	r3, [r7, #4]
 8000d82:	4053      	eors	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	88ba      	ldrh	r2, [r7, #4]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4053      	eors	r3, r2
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	88fa      	ldrh	r2, [r7, #6]
 8000d90:	88bb      	ldrh	r3, [r7, #4]
 8000d92:	4053      	eors	r3, r2
 8000d94:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	80fb      	strh	r3, [r7, #6]
  			break;
 8000dae:	e025      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000dba:	88bb      	ldrh	r3, [r7, #4]
 8000dbc:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dd2:	e013      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000dd8:	88fa      	ldrh	r2, [r7, #6]
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	4053      	eors	r3, r2
 8000dde:	80fb      	strh	r3, [r7, #6]
 8000de0:	88ba      	ldrh	r2, [r7, #4]
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	4053      	eors	r3, r2
 8000de6:	80bb      	strh	r3, [r7, #4]
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	4053      	eors	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dfa:	bf00      	nop
	}

	if (bSwap)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d009      	beq.n	8000e16 <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8000e02:	883b      	ldrh	r3, [r7, #0]
 8000e04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e10:	f7ff ff06 	bl	8000c20 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8000e14:	e008      	b.n	8000e28 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e24:	f000 f804 	bl	8000e30 <SSD1306_draw_fast_vline_internal>
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}

08000e30 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f2c0 80dc 	blt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5e:	f300 80d7 	bgt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
	{
		// X coord in bounds?
		if (__y < 0)
 8000e62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da06      	bge.n	8000e78 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000e78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e80:	4413      	add	r3, r2
 8000e82:	2b40      	cmp	r3, #64	@ 0x40
 8000e84:	dd04      	ble.n	8000e90 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000e90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f340 80bb 	ble.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	737b      	strb	r3, [r7, #13]
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800101c <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	7b7a      	ldrb	r2, [r7, #13]
 8000ea8:	08d2      	lsrs	r2, r2, #3
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	01d1      	lsls	r1, r2, #7
 8000eae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000eb2:	440a      	add	r2, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d041      	beq.n	8000f4a <SSD1306_draw_fast_vline_internal+0x11a>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f1c3 0308 	rsb	r3, r3, #8
 8000ecc:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4a53      	ldr	r2, [pc, #332]	@ (8001020 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000ed8:	7dfa      	ldrb	r2, [r7, #23]
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d20b      	bcs.n	8000ef8 <SSD1306_draw_fast_vline_internal+0xc8>
				{
					mask &= (0XFF >> (mod - h));
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	22ff      	movs	r2, #255	@ 0xff
 8000ee8:	fa42 f303 	asr.w	r3, r2, r3
 8000eec:	b25a      	sxtb	r2, r3
 8000eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d01a      	beq.n	8000f34 <SSD1306_draw_fast_vline_internal+0x104>
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	dc20      	bgt.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d009      	beq.n	8000f1a <SSD1306_draw_fast_vline_internal+0xea>
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d11c      	bne.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	701a      	strb	r2, [r3, #0]
						break;
 8000f18:	e014      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	701a      	strb	r2, [r3, #0]
						break;
 8000f32:	e007      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	701a      	strb	r2, [r3, #0]
						break;
 8000f42:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	3380      	adds	r3, #128	@ 0x80
 8000f48:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000f4a:	7dfa      	ldrb	r2, [r7, #23]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d35e      	bcc.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
			{
				// More to go?
				h -= mod;
 8000f52:	7dfa      	ldrb	r2, [r7, #23]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	d925      	bls.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
				{
					if (color == SSD1306_INVERSE)
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d10f      	bne.n	8000f86 <SSD1306_draw_fast_vline_internal+0x156>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3380      	adds	r3, #128	@ 0x80
 8000f76:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d8f0      	bhi.n	8000f66 <SSD1306_draw_fast_vline_internal+0x136>
 8000f84:	e012      	b.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000f86:	883b      	ldrh	r3, [r7, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SSD1306_draw_fast_vline_internal+0x160>
 8000f8c:	23ff      	movs	r3, #255	@ 0xff
 8000f8e:	e000      	b.n	8000f92 <SSD1306_draw_fast_vline_internal+0x162>
 8000f90:	2300      	movs	r3, #0
 8000f92:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	7b3a      	ldrb	r2, [r7, #12]
 8000f98:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3380      	adds	r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	3b08      	subs	r3, #8
 8000fa4:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d8f3      	bhi.n	8000f94 <SSD1306_draw_fast_vline_internal+0x164>
					}
				}

				if (h)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d02e      	beq.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <SSD1306_draw_fast_vline_internal+0x1f4>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000fc4:	883b      	ldrh	r3, [r7, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d01a      	beq.n	8001000 <SSD1306_draw_fast_vline_internal+0x1d0>
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	dc20      	bgt.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <SSD1306_draw_fast_vline_internal+0x1b6>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d11c      	bne.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	701a      	strb	r2, [r3, #0]
							break;
 8000fe4:	e014      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25a      	sxtb	r2, r3
 8000fec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	701a      	strb	r2, [r3, #0]
							break;
 8000ffe:	e007      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	4053      	eors	r3, r2
 8001008:	b2da      	uxtb	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	701a      	strb	r2, [r3, #0]
							break;
 800100e:	bf00      	nop
					}
				}
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bc90      	pop	{r4, r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000084 	.word	0x20000084
 8001020:	08009634 	.word	0x08009634
 8001024:	0800963c 	.word	0x0800963c

08001028 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 800102e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001032:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001034:	2022      	movs	r0, #34	@ 0x22
 8001036:	f7ff fc71 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc6e 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001040:	20ff      	movs	r0, #255	@ 0xff
 8001042:	f7ff fc6b 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8001046:	2021      	movs	r0, #33	@ 0x21
 8001048:	f7ff fc68 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fc65 	bl	800091c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001052:	207f      	movs	r0, #127	@ 0x7f
 8001054:	f7ff fc62 	bl	800091c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SSD1306_display_repaint+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	88fa      	ldrh	r2, [r7, #6]
 800105e:	4619      	mov	r1, r3
 8001060:	2040      	movs	r0, #64	@ 0x40
 8001062:	f7ff fc41 	bl	80008e8 <platform_write_dma>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000084 	.word	0x20000084

08001074 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 800107e:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <SSD1306_set_rotation+0x1c>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	7013      	strb	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000088 	.word	0x20000088

08001094 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return rotation;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <SSD1306_get_rotation+0x14>)
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000088 	.word	0x20000088

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_DMA_Init+0x4c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <MX_DMA_Init+0x4c>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <MX_DMA_Init+0x4c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200c      	movs	r0, #12
 80010d4:	f001 fb03 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010d8:	200c      	movs	r0, #12
 80010da:	f001 fb1c 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	200f      	movs	r0, #15
 80010e4:	f001 fafb 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f001 fb14 	bl	8002716 <HAL_NVIC_EnableIRQ>

}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a42      	ldr	r2, [pc, #264]	@ (8001224 <MX_GPIO_Init+0x128>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a3b      	ldr	r2, [pc, #236]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a34      	ldr	r2, [pc, #208]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <MX_GPIO_Init+0x128>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b2e      	ldr	r3, [pc, #184]	@ (8001224 <MX_GPIO_Init+0x128>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a2d      	ldr	r2, [pc, #180]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a26      	ldr	r2, [pc, #152]	@ (8001224 <MX_GPIO_Init+0x128>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_GPIO_Init+0x128>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80011a4:	4820      	ldr	r0, [pc, #128]	@ (8001228 <MX_GPIO_Init+0x12c>)
 80011a6:	f002 f801 	bl	80031ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC1_BTN_Pin */
  GPIO_InitStruct.Pin = ENC1_BTN_Pin;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC1_BTN_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	481b      	ldr	r0, [pc, #108]	@ (800122c <MX_GPIO_Init+0x130>)
 80011c0:	f001 fe70 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4815      	ldr	r0, [pc, #84]	@ (8001230 <MX_GPIO_Init+0x134>)
 80011da:	f001 fe63 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80011de:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <MX_GPIO_Init+0x12c>)
 80011f8:	f001 fe54 	bl	8002ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2006      	movs	r0, #6
 8001202:	f001 fa6c 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001206:	2006      	movs	r0, #6
 8001208:	f001 fa85 	bl	8002716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2007      	movs	r0, #7
 8001212:	f001 fa64 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001216:	2007      	movs	r0, #7
 8001218:	f001 fa7d 	bl	8002716 <HAL_NVIC_EnableIRQ>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40020800 	.word	0x40020800
 8001230:	40020000 	.word	0x40020000

08001234 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	@ (8001288 <MX_I2C1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001240:	4a12      	ldr	r2, [pc, #72]	@ (800128c <MX_I2C1_Init+0x58>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001252:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <MX_I2C1_Init+0x50>)
 8001272:	f001 ffe7 	bl	8003244 <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f000 fc34 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000008c 	.word	0x2000008c
 8001288:	40005400 	.word	0x40005400
 800128c:	00061a80 	.word	0x00061a80

08001290 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_I2C3_Init+0x50>)
 8001296:	4a13      	ldr	r2, [pc, #76]	@ (80012e4 <MX_I2C3_Init+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_I2C3_Init+0x50>)
 800129c:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <MX_I2C3_Init+0x58>)
 800129e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_I2C3_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <MX_I2C3_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <MX_I2C3_Init+0x50>)
 80012ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <MX_I2C3_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_I2C3_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <MX_I2C3_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <MX_I2C3_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_I2C3_Init+0x50>)
 80012ce:	f001 ffb9 	bl	8003244 <HAL_I2C_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012d8:	f000 fc06 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000e0 	.word	0x200000e0
 80012e4:	40005c00 	.word	0x40005c00
 80012e8:	00061a80 	.word	0x00061a80

080012ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	@ 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a78      	ldr	r2, [pc, #480]	@ (80014ec <HAL_I2C_MspInit+0x200>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d162      	bne.n	80013d4 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	4b77      	ldr	r3, [pc, #476]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a76      	ldr	r2, [pc, #472]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b74      	ldr	r3, [pc, #464]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_I2C_SCL_Pin|OLED_I2C_SDA_Pin;
 800132a:	23c0      	movs	r3, #192	@ 0xc0
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132e:	2312      	movs	r3, #18
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133a:	2304      	movs	r3, #4
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	486b      	ldr	r0, [pc, #428]	@ (80014f4 <HAL_I2C_MspInit+0x208>)
 8001346:	f001 fdad 	bl	8002ea4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	4b68      	ldr	r3, [pc, #416]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a67      	ldr	r2, [pc, #412]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 8001354:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b65      	ldr	r3, [pc, #404]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001366:	4b64      	ldr	r3, [pc, #400]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 8001368:	4a64      	ldr	r2, [pc, #400]	@ (80014fc <HAL_I2C_MspInit+0x210>)
 800136a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800136c:	4b62      	ldr	r3, [pc, #392]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001372:	4b61      	ldr	r3, [pc, #388]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 8001374:	2240      	movs	r2, #64	@ 0x40
 8001376:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001378:	4b5f      	ldr	r3, [pc, #380]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800137e:	4b5e      	ldr	r3, [pc, #376]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 8001380:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001384:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001386:	4b5c      	ldr	r3, [pc, #368]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800138c:	4b5a      	ldr	r3, [pc, #360]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001392:	4b59      	ldr	r3, [pc, #356]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001398:	4b57      	ldr	r3, [pc, #348]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 800139a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800139e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a0:	4b55      	ldr	r3, [pc, #340]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80013a6:	4854      	ldr	r0, [pc, #336]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 80013a8:	f001 f9d0 	bl	800274c <HAL_DMA_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80013b2:	f000 fb99 	bl	8001ae8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 80013ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80013bc:	4a4e      	ldr	r2, [pc, #312]	@ (80014f8 <HAL_I2C_MspInit+0x20c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	201f      	movs	r0, #31
 80013c8:	f001 f989 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013cc:	201f      	movs	r0, #31
 80013ce:	f001 f9a2 	bl	8002716 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80013d2:	e087      	b.n	80014e4 <HAL_I2C_MspInit+0x1f8>
  else if(i2cHandle->Instance==I2C3)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a49      	ldr	r2, [pc, #292]	@ (8001500 <HAL_I2C_MspInit+0x214>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	f040 8082 	bne.w	80014e4 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	4b42      	ldr	r3, [pc, #264]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	4a41      	ldr	r2, [pc, #260]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f0:	4b3f      	ldr	r3, [pc, #252]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4b3b      	ldr	r3, [pc, #236]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001404:	4a3a      	ldr	r2, [pc, #232]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6313      	str	r3, [r2, #48]	@ 0x30
 800140c:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141e:	2312      	movs	r3, #18
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800142a:	2304      	movs	r3, #4
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4833      	ldr	r0, [pc, #204]	@ (8001504 <HAL_I2C_MspInit+0x218>)
 8001436:	f001 fd35 	bl	8002ea4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800143a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001440:	2312      	movs	r3, #18
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800144c:	2304      	movs	r3, #4
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	482c      	ldr	r0, [pc, #176]	@ (8001508 <HAL_I2C_MspInit+0x21c>)
 8001458:	f001 fd24 	bl	8002ea4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 8001466:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800146a:	6413      	str	r3, [r2, #64]	@ 0x40
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_I2C_MspInit+0x204>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <HAL_I2C_MspInit+0x220>)
 800147a:	4a25      	ldr	r2, [pc, #148]	@ (8001510 <HAL_I2C_MspInit+0x224>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <HAL_I2C_MspInit+0x220>)
 8001480:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001484:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <HAL_I2C_MspInit+0x220>)
 8001488:	2240      	movs	r2, #64	@ 0x40
 800148a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <HAL_I2C_MspInit+0x220>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <HAL_I2C_MspInit+0x220>)
 8001494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001498:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149a:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <HAL_I2C_MspInit+0x220>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <HAL_I2C_MspInit+0x220>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_I2C_MspInit+0x220>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <HAL_I2C_MspInit+0x220>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b2:	4b16      	ldr	r3, [pc, #88]	@ (800150c <HAL_I2C_MspInit+0x220>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80014b8:	4814      	ldr	r0, [pc, #80]	@ (800150c <HAL_I2C_MspInit+0x220>)
 80014ba:	f001 f947 	bl	800274c <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_I2C_MspInit+0x1dc>
      Error_Handler();
 80014c4:	f000 fb10 	bl	8001ae8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a10      	ldr	r2, [pc, #64]	@ (800150c <HAL_I2C_MspInit+0x220>)
 80014cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ce:	4a0f      	ldr	r2, [pc, #60]	@ (800150c <HAL_I2C_MspInit+0x220>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2048      	movs	r0, #72	@ 0x48
 80014da:	f001 f900 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80014de:	2048      	movs	r0, #72	@ 0x48
 80014e0:	f001 f919 	bl	8002716 <HAL_NVIC_EnableIRQ>
}
 80014e4:	bf00      	nop
 80014e6:	3730      	adds	r7, #48	@ 0x30
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40005400 	.word	0x40005400
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020400 	.word	0x40020400
 80014f8:	20000134 	.word	0x20000134
 80014fc:	40026028 	.word	0x40026028
 8001500:	40005c00 	.word	0x40005c00
 8001504:	40020800 	.word	0x40020800
 8001508:	40020000 	.word	0x40020000
 800150c:	20000194 	.word	0x20000194
 8001510:	40026070 	.word	0x40026070

08001514 <lcd_send_internal>:
#include "lcd_i2c.h"

static I2C_HandleTypeDef *lcd_i2c;

void lcd_send_internal(uint8_t data, uint8_t rs) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af02      	add	r7, sp, #8
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	4613      	mov	r3, r2
 8001522:	71bb      	strb	r3, [r7, #6]
    uint8_t high_nibble = data & 0xF0;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f023 030f 	bic.w	r3, r3, #15
 800152a:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble  = (data << 4) & 0xF0;
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	73bb      	strb	r3, [r7, #14]
    uint8_t data_arr[4];

    data_arr[0] = high_nibble | rs | LCD_BACKLIGHT | LCD_ENABLE;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	4313      	orrs	r3, r2
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f043 030c 	orr.w	r3, r3, #12
 800153e:	b2db      	uxtb	r3, r3
 8001540:	723b      	strb	r3, [r7, #8]
    data_arr[1] = high_nibble | rs | LCD_BACKLIGHT;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	4313      	orrs	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	b2db      	uxtb	r3, r3
 8001550:	727b      	strb	r3, [r7, #9]
    data_arr[2] = low_nibble | rs | LCD_BACKLIGHT | LCD_ENABLE;
 8001552:	7bba      	ldrb	r2, [r7, #14]
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	4313      	orrs	r3, r2
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f043 030c 	orr.w	r3, r3, #12
 800155e:	b2db      	uxtb	r3, r3
 8001560:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = low_nibble | rs | LCD_BACKLIGHT;
 8001562:	7bba      	ldrb	r2, [r7, #14]
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	4313      	orrs	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	b2db      	uxtb	r3, r3
 8001570:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd_i2c, LCD_ADDR, data_arr, 4, HAL_MAX_DELAY);
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <lcd_send_internal+0x7c>)
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	f107 0208 	add.w	r2, r7, #8
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2304      	movs	r3, #4
 8001582:	214e      	movs	r1, #78	@ 0x4e
 8001584:	f001 ffb8 	bl	80034f8 <HAL_I2C_Master_Transmit>
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001f4 	.word	0x200001f4

08001594 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
    lcd_send_internal(cmd, 0x00);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ffb6 	bl	8001514 <lcd_send_internal>
    HAL_Delay(2);
 80015a8:	2002      	movs	r0, #2
 80015aa:	f000 ff99 	bl	80024e0 <HAL_Delay>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
    lcd_send_internal(data, LCD_REGISTER_SEL);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2101      	movs	r1, #1
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ffa5 	bl	8001514 <lcd_send_internal>
    HAL_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 ff88 	bl	80024e0 <HAL_Delay>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <lcd_put_cursor>:
void lcd_clear(void) {
    lcd_send_cmd(0x01);
    HAL_Delay(2);
}

void lcd_put_cursor(uint8_t row, uint8_t col) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
    switch (row) {
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d819      	bhi.n	8001626 <lcd_put_cursor+0x4e>
 80015f2:	a201      	add	r2, pc, #4	@ (adr r2, 80015f8 <lcd_put_cursor+0x20>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001609 	.word	0x08001609
 80015fc:	0800160f 	.word	0x0800160f
 8001600:	08001617 	.word	0x08001617
 8001604:	0800161f 	.word	0x0800161f
        case 0: addr = 0x00 + col; break;
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e00b      	b.n	8001626 <lcd_put_cursor+0x4e>
        case 1: addr = 0x40 + col; break;
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	3340      	adds	r3, #64	@ 0x40
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e007      	b.n	8001626 <lcd_put_cursor+0x4e>
        case 2: addr = 0x14 + col; break;
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	3314      	adds	r3, #20
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e003      	b.n	8001626 <lcd_put_cursor+0x4e>
        case 3: addr = 0x54 + col; break;
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	3354      	adds	r3, #84	@ 0x54
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	bf00      	nop
    }
    lcd_send_cmd(0x80 | addr);
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ffb0 	bl	8001594 <lcd_send_cmd>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <lcd_send_string>:

void lcd_send_string(char *str) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001644:	e007      	b.n	8001656 <lcd_send_string+0x1a>
        lcd_send_data((uint8_t)(*str));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ffb3 	bl	80015b6 <lcd_send_data>
        str++;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f3      	bne.n	8001646 <lcd_send_string+0xa>
    }
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <lcd_init>:

void lcd_init(I2C_HandleTypeDef *hi2c) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    lcd_i2c = hi2c;
 8001670:	4a18      	ldr	r2, [pc, #96]	@ (80016d4 <lcd_init+0x6c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8001676:	2032      	movs	r0, #50	@ 0x32
 8001678:	f000 ff32 	bl	80024e0 <HAL_Delay>

    lcd_send_cmd(0x30);
 800167c:	2030      	movs	r0, #48	@ 0x30
 800167e:	f7ff ff89 	bl	8001594 <lcd_send_cmd>
    HAL_Delay(5);
 8001682:	2005      	movs	r0, #5
 8001684:	f000 ff2c 	bl	80024e0 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001688:	2030      	movs	r0, #48	@ 0x30
 800168a:	f7ff ff83 	bl	8001594 <lcd_send_cmd>
    HAL_Delay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f000 ff26 	bl	80024e0 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001694:	2030      	movs	r0, #48	@ 0x30
 8001696:	f7ff ff7d 	bl	8001594 <lcd_send_cmd>
    HAL_Delay(10);
 800169a:	200a      	movs	r0, #10
 800169c:	f000 ff20 	bl	80024e0 <HAL_Delay>
    lcd_send_cmd(0x20); // Tryb 4-bitowy
 80016a0:	2020      	movs	r0, #32
 80016a2:	f7ff ff77 	bl	8001594 <lcd_send_cmd>

    lcd_send_cmd(0x28); // 4-bit, 2-linie, 5x8 font
 80016a6:	2028      	movs	r0, #40	@ 0x28
 80016a8:	f7ff ff74 	bl	8001594 <lcd_send_cmd>
    lcd_send_cmd(0x08); // Display off
 80016ac:	2008      	movs	r0, #8
 80016ae:	f7ff ff71 	bl	8001594 <lcd_send_cmd>
    lcd_send_cmd(0x01); // Clear
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff ff6e 	bl	8001594 <lcd_send_cmd>
    HAL_Delay(2);
 80016b8:	2002      	movs	r0, #2
 80016ba:	f000 ff11 	bl	80024e0 <HAL_Delay>
    lcd_send_cmd(0x06); // Entry mode
 80016be:	2006      	movs	r0, #6
 80016c0:	f7ff ff68 	bl	8001594 <lcd_send_cmd>
    lcd_send_cmd(0x0C); // Display on, cursor off, blink off
 80016c4:	200c      	movs	r0, #12
 80016c6:	f7ff ff65 	bl	8001594 <lcd_send_cmd>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001f4 	.word	0x200001f4

080016d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80016f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00b      	beq.n	8001718 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001700:	e000      	b.n	8001704 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001702:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001704:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f9      	beq.n	8001702 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800170e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ffd1 	bl	80016d8 <ITM_SendChar>
	return ch;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f000 fe59 	bl	80023fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f845 	bl	80017d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f7ff fcd5 	bl	80010fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001752:	f7ff fcab 	bl	80010ac <MX_DMA_Init>
  MX_I2C1_Init();
 8001756:	f7ff fd6d 	bl	8001234 <MX_I2C1_Init>
  MX_TIM1_Init();
 800175a:	f000 fca5 	bl	80020a8 <MX_TIM1_Init>
  MX_RTC_Init();
 800175e:	f000 f9ef 	bl	8001b40 <MX_RTC_Init>
  MX_TIM3_Init();
 8001762:	f000 fcfd 	bl	8002160 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001766:	f7ff fd93 	bl	8001290 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  OLED_init();
 800176a:	f000 f9c3 	bl	8001af4 <OLED_init>

  lcd_init(&hi2c3);
 800176e:	4815      	ldr	r0, [pc, #84]	@ (80017c4 <main+0x84>)
 8001770:	f7ff ff7a 	bl	8001668 <lcd_init>
  lcd_put_cursor(0, 0);
 8001774:	2100      	movs	r1, #0
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff ff2e 	bl	80015d8 <lcd_put_cursor>
  lcd_send_string("Hello STM32!");
 800177c:	4812      	ldr	r0, [pc, #72]	@ (80017c8 <main+0x88>)
 800177e:	f7ff ff5d 	bl	800163c <lcd_send_string>
  lcd_put_cursor(1, 0);
 8001782:	2100      	movs	r1, #0
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff ff27 	bl	80015d8 <lcd_put_cursor>
  lcd_send_string("LCD 4x20 I2C");
 800178a:	4810      	ldr	r0, [pc, #64]	@ (80017cc <main+0x8c>)
 800178c:	f7ff ff56 	bl	800163c <lcd_send_string>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	480e      	ldr	r0, [pc, #56]	@ (80017d0 <main+0x90>)
 8001798:	f005 f83d 	bl	8006816 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);  // Musi być po GetTime()
 800179c:	463b      	mov	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	4619      	mov	r1, r3
 80017a2:	480b      	ldr	r0, [pc, #44]	@ (80017d0 <main+0x90>)
 80017a4:	f005 f919 	bl	80069da <HAL_RTC_GetDate>
	  printf("Czas: %02d:%02d:%02d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80017a8:	793b      	ldrb	r3, [r7, #4]
 80017aa:	4619      	mov	r1, r3
 80017ac:	797b      	ldrb	r3, [r7, #5]
 80017ae:	461a      	mov	r2, r3
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	4808      	ldr	r0, [pc, #32]	@ (80017d4 <main+0x94>)
 80017b4:	f006 fce8 	bl	8008188 <iprintf>


//	  LCD_Locate(0, 1);
//	  LCD_String("Arkadiusz");

	  ENCODER1_update();
 80017b8:	f000 f926 	bl	8001a08 <ENCODER1_update>
	  OLED_update_time();
 80017bc:	f000 f86c 	bl	8001898 <OLED_update_time>
  {
 80017c0:	bf00      	nop
 80017c2:	e7e5      	b.n	8001790 <main+0x50>
 80017c4:	200000e0 	.word	0x200000e0
 80017c8:	080090cc 	.word	0x080090cc
 80017cc:	080090dc 	.word	0x080090dc
 80017d0:	20000240 	.word	0x20000240
 80017d4:	080090ec 	.word	0x080090ec

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b094      	sub	sp, #80	@ 0x50
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	2230      	movs	r2, #48	@ 0x30
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f006 fd45 	bl	8008276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <SystemClock_Config+0xb8>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	4a22      	ldr	r2, [pc, #136]	@ (8001890 <SystemClock_Config+0xb8>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800180a:	6413      	str	r3, [r2, #64]	@ 0x40
 800180c:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <SystemClock_Config+0xb8>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <SystemClock_Config+0xbc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	@ (8001894 <SystemClock_Config+0xbc>)
 8001822:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <SystemClock_Config+0xbc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001834:	230a      	movs	r3, #10
 8001836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001838:	2301      	movs	r3, #1
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183c:	2310      	movs	r3, #16
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001840:	2301      	movs	r3, #1
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4618      	mov	r0, r3
 800184e:	f004 f993 	bl	8005b78 <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001858:	f000 f946 	bl	8001ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
 800185e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f004 fbf6 	bl	8006068 <HAL_RCC_ClockConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001882:	f000 f931 	bl	8001ae8 <Error_Handler>
  }
}
 8001886:	bf00      	nop
 8001888:	3750      	adds	r7, #80	@ 0x50
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000

08001898 <OLED_update_time>:

/* USER CODE BEGIN 4 */

void OLED_update_time(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

    OLED_print("Ustaw godzin\313", 0, OLED_ROW_1, 1);
 800189c:	2301      	movs	r3, #1
 800189e:	2238      	movs	r2, #56	@ 0x38
 80018a0:	2100      	movs	r1, #0
 80018a2:	484b      	ldr	r0, [pc, #300]	@ (80019d0 <OLED_update_time+0x138>)
 80018a4:	f000 f92c 	bl	8001b00 <OLED_print>

    if(selection_mode != SELECTION_NONE) {
 80018a8:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <OLED_update_time+0x13c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d055      	beq.n	800195c <OLED_update_time+0xc4>

    	if(selection_mode == SELECTION_HOUR) {
 80018b0:	4b48      	ldr	r3, [pc, #288]	@ (80019d4 <OLED_update_time+0x13c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d128      	bne.n	800190a <OLED_update_time+0x72>

    		if(cursor_cnt < 60) {
 80018b8:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <OLED_update_time+0x140>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80018be:	d80f      	bhi.n	80018e0 <OLED_update_time+0x48>
    			sprintf(time_hour_str, "%s%d", selected_hour < 10 ? "0" : "", selected_hour);
 80018c0:	4b46      	ldr	r3, [pc, #280]	@ (80019dc <OLED_update_time+0x144>)
 80018c2:	f993 3000 	ldrsb.w	r3, [r3]
 80018c6:	2b09      	cmp	r3, #9
 80018c8:	dc01      	bgt.n	80018ce <OLED_update_time+0x36>
 80018ca:	4a45      	ldr	r2, [pc, #276]	@ (80019e0 <OLED_update_time+0x148>)
 80018cc:	e000      	b.n	80018d0 <OLED_update_time+0x38>
 80018ce:	4a45      	ldr	r2, [pc, #276]	@ (80019e4 <OLED_update_time+0x14c>)
 80018d0:	4b42      	ldr	r3, [pc, #264]	@ (80019dc <OLED_update_time+0x144>)
 80018d2:	f993 3000 	ldrsb.w	r3, [r3]
 80018d6:	4944      	ldr	r1, [pc, #272]	@ (80019e8 <OLED_update_time+0x150>)
 80018d8:	4844      	ldr	r0, [pc, #272]	@ (80019ec <OLED_update_time+0x154>)
 80018da:	f006 fc67 	bl	80081ac <siprintf>
 80018de:	e004      	b.n	80018ea <OLED_update_time+0x52>
    		} else {
    			sprintf(time_hour_str, "%s", "  ");
 80018e0:	4a43      	ldr	r2, [pc, #268]	@ (80019f0 <OLED_update_time+0x158>)
 80018e2:	4944      	ldr	r1, [pc, #272]	@ (80019f4 <OLED_update_time+0x15c>)
 80018e4:	4841      	ldr	r0, [pc, #260]	@ (80019ec <OLED_update_time+0x154>)
 80018e6:	f006 fc61 	bl	80081ac <siprintf>
    		}
    		sprintf(time_minute_str, "%s%d", selected_minutes < 10 ? "0" : "", selected_minutes);
 80018ea:	4b43      	ldr	r3, [pc, #268]	@ (80019f8 <OLED_update_time+0x160>)
 80018ec:	f993 3000 	ldrsb.w	r3, [r3]
 80018f0:	2b09      	cmp	r3, #9
 80018f2:	dc01      	bgt.n	80018f8 <OLED_update_time+0x60>
 80018f4:	4a3a      	ldr	r2, [pc, #232]	@ (80019e0 <OLED_update_time+0x148>)
 80018f6:	e000      	b.n	80018fa <OLED_update_time+0x62>
 80018f8:	4a3a      	ldr	r2, [pc, #232]	@ (80019e4 <OLED_update_time+0x14c>)
 80018fa:	4b3f      	ldr	r3, [pc, #252]	@ (80019f8 <OLED_update_time+0x160>)
 80018fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001900:	4939      	ldr	r1, [pc, #228]	@ (80019e8 <OLED_update_time+0x150>)
 8001902:	483e      	ldr	r0, [pc, #248]	@ (80019fc <OLED_update_time+0x164>)
 8001904:	f006 fc52 	bl	80081ac <siprintf>
 8001908:	e046      	b.n	8001998 <OLED_update_time+0x100>

    	} else {

    		if(cursor_cnt < 60) {
 800190a:	4b33      	ldr	r3, [pc, #204]	@ (80019d8 <OLED_update_time+0x140>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001910:	d80f      	bhi.n	8001932 <OLED_update_time+0x9a>
        		sprintf(time_minute_str, "%s%d", selected_minutes < 10 ? "0" : "", selected_minutes);
 8001912:	4b39      	ldr	r3, [pc, #228]	@ (80019f8 <OLED_update_time+0x160>)
 8001914:	f993 3000 	ldrsb.w	r3, [r3]
 8001918:	2b09      	cmp	r3, #9
 800191a:	dc01      	bgt.n	8001920 <OLED_update_time+0x88>
 800191c:	4a30      	ldr	r2, [pc, #192]	@ (80019e0 <OLED_update_time+0x148>)
 800191e:	e000      	b.n	8001922 <OLED_update_time+0x8a>
 8001920:	4a30      	ldr	r2, [pc, #192]	@ (80019e4 <OLED_update_time+0x14c>)
 8001922:	4b35      	ldr	r3, [pc, #212]	@ (80019f8 <OLED_update_time+0x160>)
 8001924:	f993 3000 	ldrsb.w	r3, [r3]
 8001928:	492f      	ldr	r1, [pc, #188]	@ (80019e8 <OLED_update_time+0x150>)
 800192a:	4834      	ldr	r0, [pc, #208]	@ (80019fc <OLED_update_time+0x164>)
 800192c:	f006 fc3e 	bl	80081ac <siprintf>
 8001930:	e004      	b.n	800193c <OLED_update_time+0xa4>
			} else {
				sprintf(time_minute_str, "%s", "  ");
 8001932:	4a2f      	ldr	r2, [pc, #188]	@ (80019f0 <OLED_update_time+0x158>)
 8001934:	492f      	ldr	r1, [pc, #188]	@ (80019f4 <OLED_update_time+0x15c>)
 8001936:	4831      	ldr	r0, [pc, #196]	@ (80019fc <OLED_update_time+0x164>)
 8001938:	f006 fc38 	bl	80081ac <siprintf>
			}
    		sprintf(time_hour_str, "%s%d", selected_hour < 10 ? "0" : "", selected_hour);
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <OLED_update_time+0x144>)
 800193e:	f993 3000 	ldrsb.w	r3, [r3]
 8001942:	2b09      	cmp	r3, #9
 8001944:	dc01      	bgt.n	800194a <OLED_update_time+0xb2>
 8001946:	4a26      	ldr	r2, [pc, #152]	@ (80019e0 <OLED_update_time+0x148>)
 8001948:	e000      	b.n	800194c <OLED_update_time+0xb4>
 800194a:	4a26      	ldr	r2, [pc, #152]	@ (80019e4 <OLED_update_time+0x14c>)
 800194c:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <OLED_update_time+0x144>)
 800194e:	f993 3000 	ldrsb.w	r3, [r3]
 8001952:	4925      	ldr	r1, [pc, #148]	@ (80019e8 <OLED_update_time+0x150>)
 8001954:	4825      	ldr	r0, [pc, #148]	@ (80019ec <OLED_update_time+0x154>)
 8001956:	f006 fc29 	bl	80081ac <siprintf>
 800195a:	e01d      	b.n	8001998 <OLED_update_time+0x100>
    	}

    } else {
		sprintf(time_hour_str, "%s%d", selected_hour < 10 ? "0" : "", selected_hour);
 800195c:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <OLED_update_time+0x144>)
 800195e:	f993 3000 	ldrsb.w	r3, [r3]
 8001962:	2b09      	cmp	r3, #9
 8001964:	dc01      	bgt.n	800196a <OLED_update_time+0xd2>
 8001966:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <OLED_update_time+0x148>)
 8001968:	e000      	b.n	800196c <OLED_update_time+0xd4>
 800196a:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <OLED_update_time+0x14c>)
 800196c:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <OLED_update_time+0x144>)
 800196e:	f993 3000 	ldrsb.w	r3, [r3]
 8001972:	491d      	ldr	r1, [pc, #116]	@ (80019e8 <OLED_update_time+0x150>)
 8001974:	481d      	ldr	r0, [pc, #116]	@ (80019ec <OLED_update_time+0x154>)
 8001976:	f006 fc19 	bl	80081ac <siprintf>
		sprintf(time_minute_str, "%s%d", selected_minutes < 10 ? "0" : "", selected_minutes);
 800197a:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <OLED_update_time+0x160>)
 800197c:	f993 3000 	ldrsb.w	r3, [r3]
 8001980:	2b09      	cmp	r3, #9
 8001982:	dc01      	bgt.n	8001988 <OLED_update_time+0xf0>
 8001984:	4a16      	ldr	r2, [pc, #88]	@ (80019e0 <OLED_update_time+0x148>)
 8001986:	e000      	b.n	800198a <OLED_update_time+0xf2>
 8001988:	4a16      	ldr	r2, [pc, #88]	@ (80019e4 <OLED_update_time+0x14c>)
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <OLED_update_time+0x160>)
 800198c:	f993 3000 	ldrsb.w	r3, [r3]
 8001990:	4915      	ldr	r1, [pc, #84]	@ (80019e8 <OLED_update_time+0x150>)
 8001992:	481a      	ldr	r0, [pc, #104]	@ (80019fc <OLED_update_time+0x164>)
 8001994:	f006 fc0a 	bl	80081ac <siprintf>
    }

    if(cursor_cnt > 70) cursor_cnt = 0;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <OLED_update_time+0x140>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b46      	cmp	r3, #70	@ 0x46
 800199e:	d903      	bls.n	80019a8 <OLED_update_time+0x110>
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <OLED_update_time+0x140>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	e005      	b.n	80019b4 <OLED_update_time+0x11c>
    else cursor_cnt++;
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <OLED_update_time+0x140>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <OLED_update_time+0x140>)
 80019b2:	801a      	strh	r2, [r3, #0]

	sprintf(time_str, "%s:%s", time_hour_str, time_minute_str);
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <OLED_update_time+0x164>)
 80019b6:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <OLED_update_time+0x154>)
 80019b8:	4911      	ldr	r1, [pc, #68]	@ (8001a00 <OLED_update_time+0x168>)
 80019ba:	4812      	ldr	r0, [pc, #72]	@ (8001a04 <OLED_update_time+0x16c>)
 80019bc:	f006 fbf6 	bl	80081ac <siprintf>
	OLED_print(time_str, 0, OLED_ROW_5, 2);
 80019c0:	2302      	movs	r3, #2
 80019c2:	2218      	movs	r2, #24
 80019c4:	2100      	movs	r1, #0
 80019c6:	480f      	ldr	r0, [pc, #60]	@ (8001a04 <OLED_update_time+0x16c>)
 80019c8:	f000 f89a 	bl	8001b00 <OLED_print>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	08009104 	.word	0x08009104
 80019d4:	2000023c 	.word	0x2000023c
 80019d8:	200001fa 	.word	0x200001fa
 80019dc:	200001f8 	.word	0x200001f8
 80019e0:	08009114 	.word	0x08009114
 80019e4:	08009118 	.word	0x08009118
 80019e8:	0800911c 	.word	0x0800911c
 80019ec:	2000021c 	.word	0x2000021c
 80019f0:	08009124 	.word	0x08009124
 80019f4:	08009128 	.word	0x08009128
 80019f8:	200001f9 	.word	0x200001f9
 80019fc:	2000022c 	.word	0x2000022c
 8001a00:	0800912c 	.word	0x0800912c
 8001a04:	200001fc 	.word	0x200001fc

08001a08 <ENCODER1_update>:


void ENCODER1_update(void) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
	static uint16_t last_cnt = 0;
	int diff = htim1.Instance->CNT - last_cnt;
 8001a0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <ENCODER1_update+0xcc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	4a30      	ldr	r2, [pc, #192]	@ (8001ad8 <ENCODER1_update+0xd0>)
 8001a16:	8812      	ldrh	r2, [r2, #0]
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	607b      	str	r3, [r7, #4]

	if(diff >= 4 || diff <= -4) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	dc03      	bgt.n	8001a2a <ENCODER1_update+0x22>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f113 0f03 	cmn.w	r3, #3
 8001a28:	da4d      	bge.n	8001ac6 <ENCODER1_update+0xbe>
		diff /= 4;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da00      	bge.n	8001a32 <ENCODER1_update+0x2a>
 8001a30:	3303      	adds	r3, #3
 8001a32:	109b      	asrs	r3, r3, #2
 8001a34:	607b      	str	r3, [r7, #4]

		switch(selection_mode) {
 8001a36:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <ENCODER1_update+0xd4>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <ENCODER1_update+0x3c>
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d01c      	beq.n	8001a7c <ENCODER1_update+0x74>
				selected_minutes += (int8_t)diff;

				if(selected_minutes > 59) selected_minutes = 0;
				if (selected_minutes < 0) selected_minutes = 59;
			default:
				break;
 8001a42:	e039      	b.n	8001ab8 <ENCODER1_update+0xb0>
				selected_hour += (int8_t)diff;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <ENCODER1_update+0xd8>)
 8001a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	b25a      	sxtb	r2, r3
 8001a56:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <ENCODER1_update+0xd8>)
 8001a58:	701a      	strb	r2, [r3, #0]
				if(selected_hour > 23) selected_hour = 0;
 8001a5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <ENCODER1_update+0xd8>)
 8001a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a60:	2b17      	cmp	r3, #23
 8001a62:	dd02      	ble.n	8001a6a <ENCODER1_update+0x62>
 8001a64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <ENCODER1_update+0xd8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
				if (selected_hour < 0) selected_hour = 23;
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <ENCODER1_update+0xd8>)
 8001a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da1f      	bge.n	8001ab4 <ENCODER1_update+0xac>
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <ENCODER1_update+0xd8>)
 8001a76:	2217      	movs	r2, #23
 8001a78:	701a      	strb	r2, [r3, #0]
				break;
 8001a7a:	e01b      	b.n	8001ab4 <ENCODER1_update+0xac>
				selected_minutes += (int8_t)diff;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <ENCODER1_update+0xdc>)
 8001a82:	f993 3000 	ldrsb.w	r3, [r3]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <ENCODER1_update+0xdc>)
 8001a90:	701a      	strb	r2, [r3, #0]
				if(selected_minutes > 59) selected_minutes = 0;
 8001a92:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <ENCODER1_update+0xdc>)
 8001a94:	f993 3000 	ldrsb.w	r3, [r3]
 8001a98:	2b3b      	cmp	r3, #59	@ 0x3b
 8001a9a:	dd02      	ble.n	8001aa2 <ENCODER1_update+0x9a>
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <ENCODER1_update+0xdc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
				if (selected_minutes < 0) selected_minutes = 59;
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <ENCODER1_update+0xdc>)
 8001aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da05      	bge.n	8001ab8 <ENCODER1_update+0xb0>
 8001aac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <ENCODER1_update+0xdc>)
 8001aae:	223b      	movs	r2, #59	@ 0x3b
 8001ab0:	701a      	strb	r2, [r3, #0]
				break;
 8001ab2:	e001      	b.n	8001ab8 <ENCODER1_update+0xb0>
				break;
 8001ab4:	bf00      	nop
 8001ab6:	e000      	b.n	8001aba <ENCODER1_update+0xb2>
				break;
 8001ab8:	bf00      	nop
		}

		last_cnt = htim1.Instance->CNT;
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <ENCODER1_update+0xcc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <ENCODER1_update+0xd0>)
 8001ac4:	801a      	strh	r2, [r3, #0]
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000268 	.word	0x20000268
 8001ad8:	2000023e 	.word	0x2000023e
 8001adc:	2000023c 	.word	0x2000023c
 8001ae0:	200001f8 	.word	0x200001f8
 8001ae4:	200001f9 	.word	0x200001f9

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <Error_Handler+0x8>

08001af4 <OLED_init>:
 */


#include "oled.h"

void OLED_init(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	SSD1306_init();
 8001af8:	f7fe ff20 	bl	800093c <SSD1306_init>
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <OLED_print>:


void OLED_print(char *str, uint16_t x, uint16_t y, uint8_t size) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af04      	add	r7, sp, #16
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	817b      	strh	r3, [r7, #10]
 8001b12:	460b      	mov	r3, r1
 8001b14:	813b      	strh	r3, [r7, #8]
 8001b16:	4613      	mov	r3, r2
 8001b18:	71fb      	strb	r3, [r7, #7]
	GFX_draw_string(x, y, str, WHITE, BLACK, size, size);
 8001b1a:	8978      	ldrh	r0, [r7, #10]
 8001b1c:	8939      	ldrh	r1, [r7, #8]
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	79fa      	ldrb	r2, [r7, #7]
 8001b22:	9202      	str	r2, [sp, #8]
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	2300      	movs	r3, #0
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	f7fe fe57 	bl	80007e0 <GFX_draw_string>
	SSD1306_display_repaint();
 8001b32:	f7ff fa79 	bl	8001028 <SSD1306_display_repaint>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b090      	sub	sp, #64	@ 0x40
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	__HAL_RCC_BACKUPRESET_FORCE();
 8001b46:	4b45      	ldr	r3, [pc, #276]	@ (8001c5c <MX_RTC_Init+0x11c>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_BACKUPRESET_RELEASE();
 8001b4c:	4b43      	ldr	r3, [pc, #268]	@ (8001c5c <MX_RTC_Init+0x11c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]


  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001b66:	463b      	mov	r3, r7
 8001b68:	2228      	movs	r2, #40	@ 0x28
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f006 fb82 	bl	8008276 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b72:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001b74:	4a3b      	ldr	r2, [pc, #236]	@ (8001c64 <MX_RTC_Init+0x124>)
 8001b76:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b78:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b7e:	4b38      	ldr	r3, [pc, #224]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001b80:	227f      	movs	r2, #127	@ 0x7f
 8001b82:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b84:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001b86:	22ff      	movs	r2, #255	@ 0xff
 8001b88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b8a:	4b35      	ldr	r3, [pc, #212]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b90:	4b33      	ldr	r3, [pc, #204]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b96:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b9c:	4830      	ldr	r0, [pc, #192]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001b9e:	f004 fd1f 	bl	80065e0 <HAL_RTC_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001ba8:	f7ff ff9e 	bl	8001ae8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 8001bac:	2319      	movs	r3, #25
 8001bae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4824      	ldr	r0, [pc, #144]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001bd0:	f004 fd87 	bl	80066e2 <HAL_RTC_SetTime>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8001bda:	f7ff ff85 	bl	8001ae8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001bde:	2305      	movs	r3, #5
 8001be0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JUNE;
 8001be4:	2306      	movs	r3, #6
 8001be6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x20;
 8001bea:	2320      	movs	r3, #32
 8001bec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x25;
 8001bf0:	2325      	movs	r3, #37	@ 0x25
 8001bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4818      	ldr	r0, [pc, #96]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001c00:	f004 fe67 	bl	80068d2 <HAL_RTC_SetDate>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001c0a:	f7ff ff6d 	bl	8001ae8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 8001c0e:	2319      	movs	r3, #25
 8001c10:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001c16:	2310      	movs	r3, #16
 8001c18:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x20;
 8001c32:	2320      	movs	r3, #32
 8001c34:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2201      	movs	r2, #1
 8001c42:	4619      	mov	r1, r3
 8001c44:	4806      	ldr	r0, [pc, #24]	@ (8001c60 <MX_RTC_Init+0x120>)
 8001c46:	f004 ff17 	bl	8006a78 <HAL_RTC_SetAlarm_IT>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001c50:	f7ff ff4a 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	3740      	adds	r7, #64	@ 0x40
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	42470e40 	.word	0x42470e40
 8001c60:	20000240 	.word	0x20000240
 8001c64:	40002800 	.word	0x40002800

08001c68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a10      	ldr	r2, [pc, #64]	@ (8001cc8 <HAL_RTC_MspInit+0x60>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d119      	bne.n	8001cc0 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c94:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 fbb0 	bl	8006400 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ca6:	f7ff ff1f 	bl	8001ae8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001caa:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <HAL_RTC_MspInit+0x64>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2029      	movs	r0, #41	@ 0x29
 8001cb6:	f000 fd12 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cba:	2029      	movs	r0, #41	@ 0x29
 8001cbc:	f000 fd2b 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40002800 	.word	0x40002800
 8001ccc:	42470e3c 	.word	0x42470e3c

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a0f      	ldr	r2, [pc, #60]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <NMI_Handler+0x4>

08001d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <MemManage_Handler+0x4>

08001d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d76:	f000 fb93 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f001 fa46 	bl	8003214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_BTN_Pin);
 8001d90:	2002      	movs	r0, #2
 8001d92:	f001 fa3f 	bl	8003214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <DMA1_Stream1_IRQHandler+0x10>)
 8001da2:	f000 fdfb 	bl	800299c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000134 	.word	0x20000134

08001db0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <DMA1_Stream4_IRQHandler+0x10>)
 8001db6:	f000 fdf1 	bl	800299c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000194 	.word	0x20000194

08001dc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dca:	f005 fbdb 	bl	8007584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000268 	.word	0x20000268

08001dd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <TIM3_IRQHandler+0x10>)
 8001dde:	f005 fbd1 	bl	8007584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200002b0 	.word	0x200002b0

08001dec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <I2C1_EV_IRQHandler+0x10>)
 8001df2:	f001 fed7 	bl	8003ba4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000008c 	.word	0x2000008c

08001e00 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e04:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <RTC_Alarm_IRQHandler+0x10>)
 8001e06:	f004 ff7b 	bl	8006d00 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000240 	.word	0x20000240

08001e14 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <I2C3_EV_IRQHandler+0x10>)
 8001e1a:	f001 fec3 	bl	8003ba4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200000e0 	.word	0x200000e0

08001e28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d104      	bne.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8001e3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e3e:	4804      	ldr	r0, [pc, #16]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e40:	f001 f9cd 	bl	80031de <HAL_GPIO_TogglePin>
    }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	40020c00 	.word	0x40020c00

08001e54 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d120      	bne.n	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7f1b      	ldrb	r3, [r3, #28]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d11c      	bne.n	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>

    	if(buzzer_cnt < 5) {
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d805      	bhi.n	8001e84 <HAL_TIM_PWM_PulseFinishedCallback+0x30>
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 8001e78:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001e80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e82:	e003      	b.n	8001e8c <HAL_TIM_PWM_PulseFinishedCallback+0x38>

    	} else {
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001e84:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	635a      	str	r2, [r3, #52]	@ 0x34
    	}

    	buzzer_cnt = buzzer_cnt <= 6 ? buzzer_cnt + 1 : 0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d805      	bhi.n	8001ea2 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 8001e96:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	e000      	b.n	8001ea4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8001ea6:	7013      	strb	r3, [r2, #0]
    }
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	20000260 	.word	0x20000260
 8001ebc:	200002b0 	.word	0x200002b0

08001ec0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
    if (pin == ENC1_BTN_Pin)
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d116      	bne.n	8001efe <HAL_GPIO_EXTI_Callback+0x3e>
    {
    	switch(selection_mode) {
 8001ed0:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x26>
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	dc10      	bgt.n	8001efe <HAL_GPIO_EXTI_Callback+0x3e>
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_EXTI_Callback+0x2e>
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d008      	beq.n	8001ef6 <HAL_GPIO_EXTI_Callback+0x36>
 8001ee4:	e00b      	b.n	8001efe <HAL_GPIO_EXTI_Callback+0x3e>
    		case SELECTION_NONE:
    			selection_mode = SELECTION_HOUR;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
    			break;
 8001eec:	e007      	b.n	8001efe <HAL_GPIO_EXTI_Callback+0x3e>
    		case SELECTION_HOUR:
    			selection_mode = SELECTION_MINUTE;
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
				break;
 8001ef4:	e003      	b.n	8001efe <HAL_GPIO_EXTI_Callback+0x3e>
    		case SELECTION_MINUTE:
    			selection_mode = SELECTION_NONE;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ef8:	2202      	movs	r2, #2
 8001efa:	701a      	strb	r2, [r3, #0]
				break;
 8001efc:	bf00      	nop
    	}
    }
    if(pin == USER_BTN_Pin) {
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d102      	bne.n	8001f0a <HAL_GPIO_EXTI_Callback+0x4a>
    	BUZZER_set_enable(false);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f000 fa37 	bl	8002378 <BUZZER_set_enable>
    }
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000023c 	.word	0x2000023c

08001f18 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001f20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <HAL_RTC_AlarmAEventCallback+0x20>)
 8001f26:	f001 f95a 	bl	80031de <HAL_GPIO_TogglePin>

	BUZZER_set_enable(true);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f000 fa24 	bl	8002378 <BUZZER_set_enable>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40020c00 	.word	0x40020c00

08001f3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e00a      	b.n	8001f64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f4e:	f3af 8000 	nop.w
 8001f52:	4601      	mov	r1, r0
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	60ba      	str	r2, [r7, #8]
 8001f5a:	b2ca      	uxtb	r2, r1
 8001f5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dbf0      	blt.n	8001f4e <_read+0x12>
  }

  return len;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e009      	b.n	8001f9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	60ba      	str	r2, [r7, #8]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fbc8 	bl	8001726 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dbf1      	blt.n	8001f88 <_write+0x12>
  }
  return len;
 8001fa4:	687b      	ldr	r3, [r7, #4]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_close>:

int _close(int file)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fd6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_isatty>:

int _isatty(int file)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002020:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002048:	f006 f974 	bl	8008334 <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20020000 	.word	0x20020000
 8002078:	00000400 	.word	0x00000400
 800207c:	20000264 	.word	0x20000264
 8002080:	20000448 	.word	0x20000448

08002084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <SystemInit+0x20>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	4a05      	ldr	r2, [pc, #20]	@ (80020a4 <SystemInit+0x20>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	@ 0x30
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	2224      	movs	r2, #36	@ 0x24
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f006 f8dd 	bl	8008276 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020c4:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <MX_TIM1_Init+0xb0>)
 80020c6:	4a25      	ldr	r2, [pc, #148]	@ (800215c <MX_TIM1_Init+0xb4>)
 80020c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020ca:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <MX_TIM1_Init+0xb0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d0:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <MX_TIM1_Init+0xb0>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020d6:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <MX_TIM1_Init+0xb0>)
 80020d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <MX_TIM1_Init+0xb0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <MX_TIM1_Init+0xb0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <MX_TIM1_Init+0xb0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020f8:	2301      	movs	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002108:	2301      	movs	r3, #1
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	4619      	mov	r1, r3
 800211a:	480f      	ldr	r0, [pc, #60]	@ (8002158 <MX_TIM1_Init+0xb0>)
 800211c:	f005 f8fe 	bl	800731c <HAL_TIM_Encoder_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002126:	f7ff fcdf 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4808      	ldr	r0, [pc, #32]	@ (8002158 <MX_TIM1_Init+0xb0>)
 8002138:	f005 fe2c 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002142:	f7ff fcd1 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002146:	213c      	movs	r1, #60	@ 0x3c
 8002148:	4803      	ldr	r0, [pc, #12]	@ (8002158 <MX_TIM1_Init+0xb0>)
 800214a:	f005 f98d 	bl	8007468 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	3730      	adds	r7, #48	@ 0x30
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000268 	.word	0x20000268
 800215c:	40010000 	.word	0x40010000

08002160 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002166:	f107 0320 	add.w	r3, r7, #32
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	611a      	str	r2, [r3, #16]
 800217e:	615a      	str	r2, [r3, #20]
 8002180:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <MX_TIM3_Init+0xac>)
 8002184:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <MX_TIM3_Init+0xb0>)
 8002186:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8002188:	4b20      	ldr	r3, [pc, #128]	@ (800220c <MX_TIM3_Init+0xac>)
 800218a:	2220      	movs	r2, #32
 800218c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <MX_TIM3_Init+0xac>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <MX_TIM3_Init+0xac>)
 8002196:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800219a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <MX_TIM3_Init+0xac>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <MX_TIM3_Init+0xac>)
 80021a4:	2280      	movs	r2, #128	@ 0x80
 80021a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021a8:	4818      	ldr	r0, [pc, #96]	@ (800220c <MX_TIM3_Init+0xac>)
 80021aa:	f004 feb7 	bl	8006f1c <HAL_TIM_PWM_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80021b4:	f7ff fc98 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021c0:	f107 0320 	add.w	r3, r7, #32
 80021c4:	4619      	mov	r1, r3
 80021c6:	4811      	ldr	r0, [pc, #68]	@ (800220c <MX_TIM3_Init+0xac>)
 80021c8:	f005 fde4 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021d2:	f7ff fc89 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d6:	2360      	movs	r3, #96	@ 0x60
 80021d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80021da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80021de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	4619      	mov	r1, r3
 80021ee:	4807      	ldr	r0, [pc, #28]	@ (800220c <MX_TIM3_Init+0xac>)
 80021f0:	f005 fab8 	bl	8007764 <HAL_TIM_PWM_ConfigChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80021fa:	f7ff fc75 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021fe:	4803      	ldr	r0, [pc, #12]	@ (800220c <MX_TIM3_Init+0xac>)
 8002200:	f000 f880 	bl	8002304 <HAL_TIM_MspPostInit>

}
 8002204:	bf00      	nop
 8002206:	3728      	adds	r7, #40	@ 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200002b0 	.word	0x200002b0
 8002210:	40000400 	.word	0x40000400

08002214 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	@ 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1d      	ldr	r2, [pc, #116]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d134      	bne.n	80022a0 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x98>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a1b      	ldr	r2, [pc, #108]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x98>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x98>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x98>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x98>)
 800225c:	f043 0310 	orr.w	r3, r3, #16
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x98>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CLK_Pin|ENC1_DATA_Pin;
 800226e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002280:	2301      	movs	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4619      	mov	r1, r3
 800228a:	4809      	ldr	r0, [pc, #36]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0x9c>)
 800228c:	f000 fe0a 	bl	8002ea4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2019      	movs	r0, #25
 8002296:	f000 fa22 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800229a:	2019      	movs	r0, #25
 800229c:	f000 fa3b 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	@ 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40010000 	.word	0x40010000
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0e      	ldr	r2, [pc, #56]	@ (80022fc <HAL_TIM_PWM_MspInit+0x48>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d115      	bne.n	80022f2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <HAL_TIM_PWM_MspInit+0x4c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002300 <HAL_TIM_PWM_MspInit+0x4c>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <HAL_TIM_PWM_MspInit+0x4c>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	201d      	movs	r0, #29
 80022e8:	f000 f9f9 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022ec:	201d      	movs	r0, #29
 80022ee:	f000 fa12 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40000400 	.word	0x40000400
 8002300:	40023800 	.word	0x40023800

08002304 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a12      	ldr	r2, [pc, #72]	@ (800236c <HAL_TIM_MspPostInit+0x68>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d11d      	bne.n	8002362 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <HAL_TIM_MspPostInit+0x6c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a10      	ldr	r2, [pc, #64]	@ (8002370 <HAL_TIM_MspPostInit+0x6c>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <HAL_TIM_MspPostInit+0x6c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_TIM3_PWM_Pin;
 8002342:	2340      	movs	r3, #64	@ 0x40
 8002344:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002352:	2302      	movs	r3, #2
 8002354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_TIM3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	@ (8002374 <HAL_TIM_MspPostInit+0x70>)
 800235e:	f000 fda1 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40000400 	.word	0x40000400
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000

08002378 <BUZZER_set_enable>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void BUZZER_set_enable(bool enable) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
	if(enable) {
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <BUZZER_set_enable+0x1a>
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002388:	2100      	movs	r1, #0
 800238a:	4806      	ldr	r0, [pc, #24]	@ (80023a4 <BUZZER_set_enable+0x2c>)
 800238c:	f004 fe16 	bl	8006fbc <HAL_TIM_PWM_Start_IT>
	} else {
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
	}
}
 8002390:	e003      	b.n	800239a <BUZZER_set_enable+0x22>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8002392:	2100      	movs	r1, #0
 8002394:	4803      	ldr	r0, [pc, #12]	@ (80023a4 <BUZZER_set_enable+0x2c>)
 8002396:	f004 ff0f 	bl	80071b8 <HAL_TIM_PWM_Stop_IT>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200002b0 	.word	0x200002b0

080023a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ac:	f7ff fe6a 	bl	8002084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b0:	480c      	ldr	r0, [pc, #48]	@ (80023e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023b2:	490d      	ldr	r1, [pc, #52]	@ (80023e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023b4:	4a0d      	ldr	r2, [pc, #52]	@ (80023ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b8:	e002      	b.n	80023c0 <LoopCopyDataInit>

080023ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023be:	3304      	adds	r3, #4

080023c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c4:	d3f9      	bcc.n	80023ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c6:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023c8:	4c0a      	ldr	r4, [pc, #40]	@ (80023f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023cc:	e001      	b.n	80023d2 <LoopFillZerobss>

080023ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d0:	3204      	adds	r2, #4

080023d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d4:	d3fb      	bcc.n	80023ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d6:	f005 ffb3 	bl	8008340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023da:	f7ff f9b1 	bl	8001740 <main>
  bx  lr    
 80023de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80023ec:	080096a8 	.word	0x080096a8
  ldr r2, =_sbss
 80023f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80023f4:	20000448 	.word	0x20000448

080023f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f8:	e7fe      	b.n	80023f8 <ADC_IRQHandler>
	...

080023fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002400:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0d      	ldr	r2, [pc, #52]	@ (800243c <HAL_Init+0x40>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800240a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <HAL_Init+0x40>)
 8002412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002418:	4b08      	ldr	r3, [pc, #32]	@ (800243c <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a07      	ldr	r2, [pc, #28]	@ (800243c <HAL_Init+0x40>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002424:	2003      	movs	r0, #3
 8002426:	f000 f94f 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242a:	200f      	movs	r0, #15
 800242c:	f000 f808 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002430:	f7ff fc4e 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002448:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <HAL_InitTick+0x54>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <HAL_InitTick+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f967 	bl	8002732 <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00e      	b.n	800248c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d80a      	bhi.n	800248a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f000 f92f 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4a06      	ldr	r2, [pc, #24]	@ (800249c <HAL_InitTick+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000000 	.word	0x20000000
 8002498:	20000008 	.word	0x20000008
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	@ (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000008 	.word	0x20000008
 80024c4:	200002f8 	.word	0x200002f8

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	@ (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200002f8 	.word	0x200002f8

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008

08002528 <__NVIC_SetPriorityGrouping>:
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	@ (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff3e 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff8e 	bl	800261c <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5d 	bl	80025c8 <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff31 	bl	800258c <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa2 	bl	8002684 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff feb6 	bl	80024c8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e099      	b.n	800289c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002788:	e00f      	b.n	80027aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278a:	f7ff fe9d 	bl	80024c8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b05      	cmp	r3, #5
 8002796:	d908      	bls.n	80027aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2203      	movs	r2, #3
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e078      	b.n	800289c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e8      	bne.n	800278a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4b38      	ldr	r3, [pc, #224]	@ (80028a4 <HAL_DMA_Init+0x158>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	2b04      	cmp	r3, #4
 8002802:	d107      	bne.n	8002814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	4313      	orrs	r3, r2
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0307 	bic.w	r3, r3, #7
 800282a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	2b04      	cmp	r3, #4
 800283c:	d117      	bne.n	800286e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 faab 	bl	8002dac <DMA_CheckFifoParam>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2240      	movs	r2, #64	@ 0x40
 8002860:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800286a:	2301      	movs	r3, #1
 800286c:	e016      	b.n	800289c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fa62 	bl	8002d40 <DMA_CalcBaseAndBitshift>
 800287c:	4603      	mov	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	223f      	movs	r2, #63	@ 0x3f
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	f010803f 	.word	0xf010803f

080028a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_DMA_Start_IT+0x26>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e040      	b.n	8002950 <HAL_DMA_Start_IT+0xa8>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d12f      	bne.n	8002942 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f9f4 	bl	8002ce4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002900:	223f      	movs	r2, #63	@ 0x3f
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0216 	orr.w	r2, r2, #22
 8002916:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0208 	orr.w	r2, r2, #8
 800292e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e005      	b.n	800294e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800294a:	2302      	movs	r3, #2
 800294c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800294e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d004      	beq.n	8002976 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2280      	movs	r2, #128	@ 0x80
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00c      	b.n	8002990 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2205      	movs	r2, #5
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029a8:	4b8e      	ldr	r3, [pc, #568]	@ (8002be4 <HAL_DMA_IRQHandler+0x248>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a8e      	ldr	r2, [pc, #568]	@ (8002be8 <HAL_DMA_IRQHandler+0x24c>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0a9b      	lsrs	r3, r3, #10
 80029b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	2208      	movs	r2, #8
 80029c8:	409a      	lsls	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0204 	bic.w	r2, r2, #4
 80029ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f4:	2208      	movs	r2, #8
 80029f6:	409a      	lsls	r2, r3
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d012      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a36:	f043 0202 	orr.w	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	2204      	movs	r2, #4
 8002a44:	409a      	lsls	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a60:	2204      	movs	r2, #4
 8002a62:	409a      	lsls	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	2210      	movs	r2, #16
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d043      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d03c      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a96:	2210      	movs	r2, #16
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d018      	beq.n	8002ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d108      	bne.n	8002acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d024      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
 8002aca:	e01f      	b.n	8002b0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01b      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
 8002adc:	e016      	b.n	8002b0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0208 	bic.w	r2, r2, #8
 8002afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	2220      	movs	r2, #32
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 808f 	beq.w	8002c3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8087 	beq.w	8002c3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	2220      	movs	r2, #32
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b05      	cmp	r3, #5
 8002b44:	d136      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0216 	bic.w	r2, r2, #22
 8002b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_DMA_IRQHandler+0x1da>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0208 	bic.w	r2, r2, #8
 8002b84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	223f      	movs	r2, #63	@ 0x3f
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d07e      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
        }
        return;
 8002bb2:	e079      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01d      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d031      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
 8002be0:	e02c      	b.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
 8002be2:	bf00      	nop
 8002be4:	20000000 	.word	0x20000000
 8002be8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d023      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
 8002bfc:	e01e      	b.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10f      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0210 	bic.w	r2, r2, #16
 8002c1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d032      	beq.n	8002caa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d022      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2205      	movs	r2, #5
 8002c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d307      	bcc.n	8002c84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f2      	bne.n	8002c68 <HAL_DMA_IRQHandler+0x2cc>
 8002c82:	e000      	b.n	8002c86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
 8002ca6:	e000      	b.n	8002caa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ca8:	bf00      	nop
    }
  }
}
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cbe:	b2db      	uxtb	r3, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b40      	cmp	r3, #64	@ 0x40
 8002d10:	d108      	bne.n	8002d24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d22:	e007      	b.n	8002d34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	3b10      	subs	r3, #16
 8002d50:	4a14      	ldr	r2, [pc, #80]	@ (8002da4 <DMA_CalcBaseAndBitshift+0x64>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d5a:	4a13      	ldr	r2, [pc, #76]	@ (8002da8 <DMA_CalcBaseAndBitshift+0x68>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d909      	bls.n	8002d82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	1d1a      	adds	r2, r3, #4
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d80:	e007      	b.n	8002d92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	aaaaaaab 	.word	0xaaaaaaab
 8002da8:	0800965c 	.word	0x0800965c

08002dac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11f      	bne.n	8002e06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d856      	bhi.n	8002e7a <DMA_CheckFifoParam+0xce>
 8002dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd4 <DMA_CheckFifoParam+0x28>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002df7 	.word	0x08002df7
 8002ddc:	08002de5 	.word	0x08002de5
 8002de0:	08002e7b 	.word	0x08002e7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d046      	beq.n	8002e7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df4:	e043      	b.n	8002e7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dfe:	d140      	bne.n	8002e82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e04:	e03d      	b.n	8002e82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e0e:	d121      	bne.n	8002e54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d837      	bhi.n	8002e86 <DMA_CheckFifoParam+0xda>
 8002e16:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <DMA_CheckFifoParam+0x70>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e33 	.word	0x08002e33
 8002e24:	08002e2d 	.word	0x08002e2d
 8002e28:	08002e45 	.word	0x08002e45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e30:	e030      	b.n	8002e94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d025      	beq.n	8002e8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e42:	e022      	b.n	8002e8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e4c:	d11f      	bne.n	8002e8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e52:	e01c      	b.n	8002e8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d903      	bls.n	8002e62 <DMA_CheckFifoParam+0xb6>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d003      	beq.n	8002e68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e60:	e018      	b.n	8002e94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      break;
 8002e66:	e015      	b.n	8002e94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00e      	beq.n	8002e92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      break;
 8002e78:	e00b      	b.n	8002e92 <DMA_CheckFifoParam+0xe6>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e00a      	b.n	8002e94 <DMA_CheckFifoParam+0xe8>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e008      	b.n	8002e94 <DMA_CheckFifoParam+0xe8>
      break;
 8002e82:	bf00      	nop
 8002e84:	e006      	b.n	8002e94 <DMA_CheckFifoParam+0xe8>
      break;
 8002e86:	bf00      	nop
 8002e88:	e004      	b.n	8002e94 <DMA_CheckFifoParam+0xe8>
      break;
 8002e8a:	bf00      	nop
 8002e8c:	e002      	b.n	8002e94 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e8e:	bf00      	nop
 8002e90:	e000      	b.n	8002e94 <DMA_CheckFifoParam+0xe8>
      break;
 8002e92:	bf00      	nop
    }
  } 
  
  return status; 
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e159      	b.n	8003174 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f040 8148 	bne.w	800316e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d005      	beq.n	8002ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d130      	bne.n	8002f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2203      	movs	r2, #3
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 0201 	and.w	r2, r3, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d017      	beq.n	8002f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d123      	bne.n	8002fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	08da      	lsrs	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	69b9      	ldr	r1, [r7, #24]
 8002fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0203 	and.w	r2, r3, #3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a2 	beq.w	800316e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b57      	ldr	r3, [pc, #348]	@ (800318c <HAL_GPIO_Init+0x2e8>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	4a56      	ldr	r2, [pc, #344]	@ (800318c <HAL_GPIO_Init+0x2e8>)
 8003034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003038:	6453      	str	r3, [r2, #68]	@ 0x44
 800303a:	4b54      	ldr	r3, [pc, #336]	@ (800318c <HAL_GPIO_Init+0x2e8>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003046:	4a52      	ldr	r2, [pc, #328]	@ (8003190 <HAL_GPIO_Init+0x2ec>)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	220f      	movs	r2, #15
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a49      	ldr	r2, [pc, #292]	@ (8003194 <HAL_GPIO_Init+0x2f0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d019      	beq.n	80030a6 <HAL_GPIO_Init+0x202>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a48      	ldr	r2, [pc, #288]	@ (8003198 <HAL_GPIO_Init+0x2f4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_GPIO_Init+0x1fe>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a47      	ldr	r2, [pc, #284]	@ (800319c <HAL_GPIO_Init+0x2f8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00d      	beq.n	800309e <HAL_GPIO_Init+0x1fa>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a46      	ldr	r2, [pc, #280]	@ (80031a0 <HAL_GPIO_Init+0x2fc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <HAL_GPIO_Init+0x1f6>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a45      	ldr	r2, [pc, #276]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_GPIO_Init+0x1f2>
 8003092:	2304      	movs	r3, #4
 8003094:	e008      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 8003096:	2307      	movs	r3, #7
 8003098:	e006      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 800309a:	2303      	movs	r3, #3
 800309c:	e004      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 800309e:	2302      	movs	r3, #2
 80030a0:	e002      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 80030a6:	2300      	movs	r3, #0
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	f002 0203 	and.w	r2, r2, #3
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	4093      	lsls	r3, r2
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b8:	4935      	ldr	r1, [pc, #212]	@ (8003190 <HAL_GPIO_Init+0x2ec>)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c6:	4b38      	ldr	r3, [pc, #224]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ea:	4a2f      	ldr	r2, [pc, #188]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f0:	4b2d      	ldr	r3, [pc, #180]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003114:	4a24      	ldr	r2, [pc, #144]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800311a:	4b23      	ldr	r3, [pc, #140]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800313e:	4a1a      	ldr	r2, [pc, #104]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003144:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003168:	4a0f      	ldr	r2, [pc, #60]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3301      	adds	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b0f      	cmp	r3, #15
 8003178:	f67f aea2 	bls.w	8002ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3724      	adds	r7, #36	@ 0x24
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40013800 	.word	0x40013800
 8003194:	40020000 	.word	0x40020000
 8003198:	40020400 	.word	0x40020400
 800319c:	40020800 	.word	0x40020800
 80031a0:	40020c00 	.word	0x40020c00
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40013c00 	.word	0x40013c00

080031ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
 80031b8:	4613      	mov	r3, r2
 80031ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031bc:	787b      	ldrb	r3, [r7, #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031c8:	e003      	b.n	80031d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ca:	887b      	ldrh	r3, [r7, #2]
 80031cc:	041a      	lsls	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	619a      	str	r2, [r3, #24]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031f0:	887a      	ldrh	r2, [r7, #2]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4013      	ands	r3, r2
 80031f6:	041a      	lsls	r2, r3, #16
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43d9      	mvns	r1, r3
 80031fc:	887b      	ldrh	r3, [r7, #2]
 80031fe:	400b      	ands	r3, r1
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	619a      	str	r2, [r3, #24]
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800321e:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d006      	beq.n	8003238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800322a:	4a05      	ldr	r2, [pc, #20]	@ (8003240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fe44 	bl	8001ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40013c00 	.word	0x40013c00

08003244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e12b      	b.n	80034ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe f83e 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2224      	movs	r2, #36	@ 0x24
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003296:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a8:	f003 f896 	bl	80063d8 <HAL_RCC_GetPCLK1Freq>
 80032ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4a81      	ldr	r2, [pc, #516]	@ (80034b8 <HAL_I2C_Init+0x274>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d807      	bhi.n	80032c8 <HAL_I2C_Init+0x84>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a80      	ldr	r2, [pc, #512]	@ (80034bc <HAL_I2C_Init+0x278>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	bf94      	ite	ls
 80032c0:	2301      	movls	r3, #1
 80032c2:	2300      	movhi	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e006      	b.n	80032d6 <HAL_I2C_Init+0x92>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a7d      	ldr	r2, [pc, #500]	@ (80034c0 <HAL_I2C_Init+0x27c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	bf94      	ite	ls
 80032d0:	2301      	movls	r3, #1
 80032d2:	2300      	movhi	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0e7      	b.n	80034ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a78      	ldr	r2, [pc, #480]	@ (80034c4 <HAL_I2C_Init+0x280>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	0c9b      	lsrs	r3, r3, #18
 80032e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4a6a      	ldr	r2, [pc, #424]	@ (80034b8 <HAL_I2C_Init+0x274>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d802      	bhi.n	8003318 <HAL_I2C_Init+0xd4>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	3301      	adds	r3, #1
 8003316:	e009      	b.n	800332c <HAL_I2C_Init+0xe8>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	4a69      	ldr	r2, [pc, #420]	@ (80034c8 <HAL_I2C_Init+0x284>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	3301      	adds	r3, #1
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	430b      	orrs	r3, r1
 8003332:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800333e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	495c      	ldr	r1, [pc, #368]	@ (80034b8 <HAL_I2C_Init+0x274>)
 8003348:	428b      	cmp	r3, r1
 800334a:	d819      	bhi.n	8003380 <HAL_I2C_Init+0x13c>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1e59      	subs	r1, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fbb1 f3f3 	udiv	r3, r1, r3
 800335a:	1c59      	adds	r1, r3, #1
 800335c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003360:	400b      	ands	r3, r1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_I2C_Init+0x138>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1e59      	subs	r1, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	fbb1 f3f3 	udiv	r3, r1, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337a:	e051      	b.n	8003420 <HAL_I2C_Init+0x1dc>
 800337c:	2304      	movs	r3, #4
 800337e:	e04f      	b.n	8003420 <HAL_I2C_Init+0x1dc>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d111      	bne.n	80033ac <HAL_I2C_Init+0x168>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1e58      	subs	r0, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	440b      	add	r3, r1
 8003396:	fbb0 f3f3 	udiv	r3, r0, r3
 800339a:	3301      	adds	r3, #1
 800339c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e012      	b.n	80033d2 <HAL_I2C_Init+0x18e>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	0099      	lsls	r1, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Init+0x196>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <HAL_I2C_Init+0x1dc>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10e      	bne.n	8003400 <HAL_I2C_Init+0x1bc>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1e58      	subs	r0, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	460b      	mov	r3, r1
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	440b      	add	r3, r1
 80033f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f4:	3301      	adds	r3, #1
 80033f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033fe:	e00f      	b.n	8003420 <HAL_I2C_Init+0x1dc>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e58      	subs	r0, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	0099      	lsls	r1, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	6809      	ldr	r1, [r1, #0]
 8003424:	4313      	orrs	r3, r2
 8003426:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800344e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6911      	ldr	r1, [r2, #16]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68d2      	ldr	r2, [r2, #12]
 800345a:	4311      	orrs	r1, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	000186a0 	.word	0x000186a0
 80034bc:	001e847f 	.word	0x001e847f
 80034c0:	003d08ff 	.word	0x003d08ff
 80034c4:	431bde83 	.word	0x431bde83
 80034c8:	10624dd3 	.word	0x10624dd3

080034cc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034de:	2b80      	cmp	r3, #128	@ 0x80
 80034e0:	d103      	bne.n	80034ea <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]
  }
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	461a      	mov	r2, r3
 8003504:	460b      	mov	r3, r1
 8003506:	817b      	strh	r3, [r7, #10]
 8003508:	4613      	mov	r3, r2
 800350a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800350c:	f7fe ffdc 	bl	80024c8 <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b20      	cmp	r3, #32
 800351c:	f040 80e0 	bne.w	80036e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2319      	movs	r3, #25
 8003526:	2201      	movs	r2, #1
 8003528:	4970      	ldr	r1, [pc, #448]	@ (80036ec <HAL_I2C_Master_Transmit+0x1f4>)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f002 f8fe 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	e0d3      	b.n	80036e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_I2C_Master_Transmit+0x50>
 8003544:	2302      	movs	r3, #2
 8003546:	e0cc      	b.n	80036e2 <HAL_I2C_Master_Transmit+0x1ea>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d007      	beq.n	800356e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800357c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2221      	movs	r2, #33	@ 0x21
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2210      	movs	r2, #16
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	893a      	ldrh	r2, [r7, #8]
 800359e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4a50      	ldr	r2, [pc, #320]	@ (80036f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80035ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035b0:	8979      	ldrh	r1, [r7, #10]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	6a3a      	ldr	r2, [r7, #32]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f001 fddc 	bl	8005174 <I2C_MasterRequestWrite>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e08d      	b.n	80036e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035dc:	e066      	b.n	80036ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6a39      	ldr	r1, [r7, #32]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f002 f9bc 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d107      	bne.n	8003606 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003604:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e06b      	b.n	80036e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	781a      	ldrb	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b04      	cmp	r3, #4
 8003646:	d11b      	bne.n	8003680 <HAL_I2C_Master_Transmit+0x188>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d017      	beq.n	8003680 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	6a39      	ldr	r1, [r7, #32]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f002 f9b3 	bl	80059f0 <I2C_WaitOnBTFFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	2b04      	cmp	r3, #4
 8003696:	d107      	bne.n	80036a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e01a      	b.n	80036e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d194      	bne.n	80035de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	00100002 	.word	0x00100002
 80036f0:	ffff0000 	.word	0xffff0000

080036f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	461a      	mov	r2, r3
 8003702:	4603      	mov	r3, r0
 8003704:	817b      	strh	r3, [r7, #10]
 8003706:	460b      	mov	r3, r1
 8003708:	813b      	strh	r3, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800370e:	f7fe fedb 	bl	80024c8 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	f040 80d9 	bne.w	80038d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2319      	movs	r3, #25
 8003728:	2201      	movs	r2, #1
 800372a:	496d      	ldr	r1, [pc, #436]	@ (80038e0 <HAL_I2C_Mem_Write+0x1ec>)
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f001 fffd 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	e0cc      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_I2C_Mem_Write+0x56>
 8003746:	2302      	movs	r3, #2
 8003748:	e0c5      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d007      	beq.n	8003770 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2221      	movs	r2, #33	@ 0x21
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2240      	movs	r2, #64	@ 0x40
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a4d      	ldr	r2, [pc, #308]	@ (80038e4 <HAL_I2C_Mem_Write+0x1f0>)
 80037b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037b2:	88f8      	ldrh	r0, [r7, #6]
 80037b4:	893a      	ldrh	r2, [r7, #8]
 80037b6:	8979      	ldrh	r1, [r7, #10]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4603      	mov	r3, r0
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f001 fd58 	bl	8005278 <I2C_RequestMemoryWrite>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d052      	beq.n	8003874 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e081      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f002 f8c2 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d107      	bne.n	80037fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06b      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d11b      	bne.n	8003874 <HAL_I2C_Mem_Write+0x180>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d017      	beq.n	8003874 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1aa      	bne.n	80037d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f002 f8b5 	bl	80059f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	2b04      	cmp	r3, #4
 8003892:	d107      	bne.n	80038a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e016      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000

080038e8 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	460b      	mov	r3, r1
 80038fc:	813b      	strh	r3, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003906:	f7fe fddf 	bl	80024c8 <HAL_GetTick>
 800390a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	f040 8136 	bne.w	8003b86 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800391a:	4b9d      	ldr	r3, [pc, #628]	@ (8003b90 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	4a9c      	ldr	r2, [pc, #624]	@ (8003b94 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0a1a      	lsrs	r2, r3, #8
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009a      	lsls	r2, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	3b01      	subs	r3, #1
 8003938:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d112      	bne.n	8003966 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
 8003964:	e110      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d0df      	beq.n	8003934 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_I2C_Mem_Write_DMA+0x9a>
 800397e:	2302      	movs	r3, #2
 8003980:	e102      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d007      	beq.n	80039a8 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2221      	movs	r2, #33	@ 0x21
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2240      	movs	r2, #64	@ 0x40
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80039d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b98 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80039e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80039ea:	897a      	ldrh	r2, [r7, #10]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80039f0:	893a      	ldrh	r2, [r7, #8]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80a9 	beq.w	8003b5e <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02a      	beq.n	8003a6a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a18:	4a60      	ldr	r2, [pc, #384]	@ (8003b9c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8003a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a20:	4a5f      	ldr	r2, [pc, #380]	@ (8003ba0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8003a22:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	2200      	movs	r2, #0
 8003a2a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	2200      	movs	r2, #0
 8003a32:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a38:	2200      	movs	r2, #0
 8003a3a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a40:	2200      	movs	r2, #0
 8003a42:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3310      	adds	r3, #16
 8003a54:	461a      	mov	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5a:	f7fe ff25 	bl	80028a8 <HAL_DMA_Start_IT>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003a62:	7efb      	ldrb	r3, [r7, #27]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d166      	bne.n	8003b36 <HAL_I2C_Mem_Write_DMA+0x24e>
 8003a68:	e013      	b.n	8003a92 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07a      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003a92:	88f8      	ldrh	r0, [r7, #6]
 8003a94:	893a      	ldrh	r2, [r7, #8]
 8003a96:	8979      	ldrh	r1, [r7, #10]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	2323      	movs	r3, #35	@ 0x23
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f001 fbe8 	bl	8005278 <I2C_RequestMemoryWrite>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d022      	beq.n	8003af4 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe ff50 	bl	8002958 <HAL_DMA_Abort_IT>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e049      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b20:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b30:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e028      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	f043 0210 	orr.w	r2, r3, #16
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e014      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000000 	.word	0x20000000
 8003b94:	14f8b589 	.word	0x14f8b589
 8003b98:	ffff0000 	.word	0xffff0000
 8003b9c:	080053a5 	.word	0x080053a5
 8003ba0:	08005563 	.word	0x08005563

08003ba4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d003      	beq.n	8003bdc <HAL_I2C_EV_IRQHandler+0x38>
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b40      	cmp	r3, #64	@ 0x40
 8003bd8:	f040 80c1 	bne.w	8003d5e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_I2C_EV_IRQHandler+0x6e>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003bfc:	d003      	beq.n	8003c06 <HAL_I2C_EV_IRQHandler+0x62>
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c04:	d101      	bne.n	8003c0a <HAL_I2C_EV_IRQHandler+0x66>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x68>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f000 8132 	beq.w	8003e76 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <HAL_I2C_EV_IRQHandler+0x92>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	0a5b      	lsrs	r3, r3, #9
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f001 ff8a 	bl	8005b42 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fcf4 	bl	800461c <I2C_Master_SB>
 8003c34:	e092      	b.n	8003d5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_I2C_EV_IRQHandler+0xb2>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	0a5b      	lsrs	r3, r3, #9
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fd6a 	bl	8004728 <I2C_Master_ADD10>
 8003c54:	e082      	b.n	8003d5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_I2C_EV_IRQHandler+0xd2>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	0a5b      	lsrs	r3, r3, #9
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fd84 	bl	800477c <I2C_Master_ADDR>
 8003c74:	e072      	b.n	8003d5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d03b      	beq.n	8003cfa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c90:	f000 80f3 	beq.w	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	09db      	lsrs	r3, r3, #7
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00f      	beq.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	0a9b      	lsrs	r3, r3, #10
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f94c 	bl	8003f56 <I2C_MasterTransmit_TXE>
 8003cbe:	e04d      	b.n	8003d5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80d6 	beq.w	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	0a5b      	lsrs	r3, r3, #9
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80cf 	beq.w	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cdc:	7bbb      	ldrb	r3, [r7, #14]
 8003cde:	2b21      	cmp	r3, #33	@ 0x21
 8003ce0:	d103      	bne.n	8003cea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f9d3 	bl	800408e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce8:	e0c7      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b40      	cmp	r3, #64	@ 0x40
 8003cee:	f040 80c4 	bne.w	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa41 	bl	800417a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cf8:	e0bf      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d08:	f000 80b7 	beq.w	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	099b      	lsrs	r3, r3, #6
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00f      	beq.n	8003d38 <HAL_I2C_EV_IRQHandler+0x194>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	0a9b      	lsrs	r3, r3, #10
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_I2C_EV_IRQHandler+0x194>
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d103      	bne.n	8003d38 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 faba 	bl	80042aa <I2C_MasterReceive_RXNE>
 8003d36:	e011      	b.n	8003d5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 809a 	beq.w	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	0a5b      	lsrs	r3, r3, #9
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8093 	beq.w	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fb70 	bl	800443a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d5a:	e08e      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d5c:	e08d      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e007      	b.n	8003d80 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <HAL_I2C_EV_IRQHandler+0x20e>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	0a5b      	lsrs	r3, r3, #9
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00c      	beq.n	8003db2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 ff35 	bl	8004c1a <I2C_Slave_ADDR>
 8003db0:	e066      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_I2C_EV_IRQHandler+0x22e>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	0a5b      	lsrs	r3, r3, #9
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 ff70 	bl	8004cb0 <I2C_Slave_STOPF>
 8003dd0:	e056      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003dd2:	7bbb      	ldrb	r3, [r7, #14]
 8003dd4:	2b21      	cmp	r3, #33	@ 0x21
 8003dd6:	d002      	beq.n	8003dde <HAL_I2C_EV_IRQHandler+0x23a>
 8003dd8:	7bbb      	ldrb	r3, [r7, #14]
 8003dda:	2b29      	cmp	r3, #41	@ 0x29
 8003ddc:	d125      	bne.n	8003e2a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	09db      	lsrs	r3, r3, #7
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00f      	beq.n	8003e0a <HAL_I2C_EV_IRQHandler+0x266>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	0a9b      	lsrs	r3, r3, #10
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_I2C_EV_IRQHandler+0x266>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fe4b 	bl	8004a9e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e08:	e039      	b.n	8003e7e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d033      	beq.n	8003e7e <HAL_I2C_EV_IRQHandler+0x2da>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	0a5b      	lsrs	r3, r3, #9
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02d      	beq.n	8003e7e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fe78 	bl	8004b18 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e28:	e029      	b.n	8003e7e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00f      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	0a9b      	lsrs	r3, r3, #10
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fe83 	bl	8004b5a <I2C_SlaveReceive_RXNE>
 8003e54:	e014      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	0a5b      	lsrs	r3, r3, #9
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 feb1 	bl	8004bd6 <I2C_SlaveReceive_BTF>
 8003e74:	e004      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e7e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	70fb      	strb	r3, [r7, #3]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f6c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d150      	bne.n	800401e <I2C_MasterTransmit_TXE+0xc8>
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b21      	cmp	r3, #33	@ 0x21
 8003f80:	d14d      	bne.n	800401e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d01d      	beq.n	8003fc4 <I2C_MasterTransmit_TXE+0x6e>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d01a      	beq.n	8003fc4 <I2C_MasterTransmit_TXE+0x6e>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f94:	d016      	beq.n	8003fc4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fa4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2211      	movs	r2, #17
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff ff62 	bl	8003e86 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fc2:	e060      	b.n	8004086 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fd2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b40      	cmp	r3, #64	@ 0x40
 8003ffc:	d107      	bne.n	800400e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff7d 	bl	8003f06 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800400c:	e03b      	b.n	8004086 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ff35 	bl	8003e86 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800401c:	e033      	b.n	8004086 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	2b21      	cmp	r3, #33	@ 0x21
 8004022:	d005      	beq.n	8004030 <I2C_MasterTransmit_TXE+0xda>
 8004024:	7bbb      	ldrb	r3, [r7, #14]
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	d12d      	bne.n	8004086 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b22      	cmp	r3, #34	@ 0x22
 800402e:	d12a      	bne.n	8004086 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d108      	bne.n	800404c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004048:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800404a:	e01c      	b.n	8004086 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b40      	cmp	r3, #64	@ 0x40
 8004056:	d103      	bne.n	8004060 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f88e 	bl	800417a <I2C_MemoryTransmit_TXE_BTF>
}
 800405e:	e012      	b.n	8004086 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004084:	e7ff      	b.n	8004086 <I2C_MasterTransmit_TXE+0x130>
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b21      	cmp	r3, #33	@ 0x21
 80040a6:	d164      	bne.n	8004172 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d012      	beq.n	80040d8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	781a      	ldrb	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80040d6:	e04c      	b.n	8004172 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d01d      	beq.n	800411a <I2C_MasterTransmit_BTF+0x8c>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d01a      	beq.n	800411a <I2C_MasterTransmit_BTF+0x8c>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040ea:	d016      	beq.n	800411a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040fa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2211      	movs	r2, #17
 8004100:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff feb7 	bl	8003e86 <HAL_I2C_MasterTxCpltCallback>
}
 8004118:	e02b      	b.n	8004172 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004128:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004138:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b40      	cmp	r3, #64	@ 0x40
 8004152:	d107      	bne.n	8004164 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fed2 	bl	8003f06 <HAL_I2C_MemTxCpltCallback>
}
 8004162:	e006      	b.n	8004172 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fe8a 	bl	8003e86 <HAL_I2C_MasterTxCpltCallback>
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004188:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d10b      	bne.n	80041b2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80041b0:	e077      	b.n	80042a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	121b      	asrs	r3, r3, #8
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041cc:	e069      	b.n	80042a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10b      	bne.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041ec:	e059      	b.n	80042a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d152      	bne.n	800429c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b22      	cmp	r3, #34	@ 0x22
 80041fa:	d10d      	bne.n	8004218 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800420a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004216:	e044      	b.n	80042a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d015      	beq.n	800424e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	2b21      	cmp	r3, #33	@ 0x21
 8004226:	d112      	bne.n	800424e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	781a      	ldrb	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800424c:	e029      	b.n	80042a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d124      	bne.n	80042a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b21      	cmp	r3, #33	@ 0x21
 800425c:	d121      	bne.n	80042a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800426c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fe36 	bl	8003f06 <HAL_I2C_MemTxCpltCallback>
}
 800429a:	e002      	b.n	80042a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff f915 	bl	80034cc <I2C_Flush_DR>
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b22      	cmp	r3, #34	@ 0x22
 80042bc:	f040 80b9 	bne.w	8004432 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d921      	bls.n	8004318 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b03      	cmp	r3, #3
 8004302:	f040 8096 	bne.w	8004432 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004314:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004316:	e08c      	b.n	8004432 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	2b02      	cmp	r3, #2
 800431e:	d07f      	beq.n	8004420 <I2C_MasterReceive_RXNE+0x176>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d002      	beq.n	800432c <I2C_MasterReceive_RXNE+0x82>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d179      	bne.n	8004420 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f001 fba7 	bl	8005a80 <I2C_WaitOnSTOPRequestThroughIT>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d14c      	bne.n	80043d2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004346:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004356:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	d10a      	bne.n	80043a8 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fdba 	bl	8003f1a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043a6:	e044      	b.n	8004432 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d002      	beq.n	80043bc <I2C_MasterReceive_RXNE+0x112>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d103      	bne.n	80043c4 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80043c2:	e002      	b.n	80043ca <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2212      	movs	r2, #18
 80043c8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fd65 	bl	8003e9a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043d0:	e02f      	b.n	8004432 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043e0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fd88 	bl	8003f2e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800441e:	e008      	b.n	8004432 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442e:	605a      	str	r2, [r3, #4]
}
 8004430:	e7ff      	b.n	8004432 <I2C_MasterReceive_RXNE+0x188>
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b04      	cmp	r3, #4
 8004450:	d11b      	bne.n	800448a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004460:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004488:	e0c4      	b.n	8004614 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b03      	cmp	r3, #3
 8004492:	d129      	bne.n	80044e8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d00a      	beq.n	80044c0 <I2C_MasterReceive_BTF+0x86>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d007      	beq.n	80044c0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80044e6:	e095      	b.n	8004614 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d17d      	bne.n	80045ee <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d002      	beq.n	80044fe <I2C_MasterReceive_BTF+0xc4>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d108      	bne.n	8004510 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e016      	b.n	800453e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b04      	cmp	r3, #4
 8004514:	d002      	beq.n	800451c <I2C_MasterReceive_BTF+0xe2>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d108      	bne.n	800452e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e007      	b.n	800453e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004598:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b40      	cmp	r3, #64	@ 0x40
 80045ac:	d10a      	bne.n	80045c4 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff fcac 	bl	8003f1a <HAL_I2C_MemRxCpltCallback>
}
 80045c2:	e027      	b.n	8004614 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d002      	beq.n	80045d8 <I2C_MasterReceive_BTF+0x19e>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d103      	bne.n	80045e0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80045de:	e002      	b.n	80045e6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2212      	movs	r2, #18
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fc57 	bl	8003e9a <HAL_I2C_MasterRxCpltCallback>
}
 80045ec:	e012      	b.n	8004614 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d117      	bne.n	8004660 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004648:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800464a:	e067      	b.n	800471c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]
}
 800465e:	e05d      	b.n	800471c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004668:	d133      	bne.n	80046d2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b21      	cmp	r3, #33	@ 0x21
 8004674:	d109      	bne.n	800468a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004686:	611a      	str	r2, [r3, #16]
 8004688:	e008      	b.n	800469c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	b2da      	uxtb	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <I2C_Master_SB+0x92>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d108      	bne.n	80046c0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d032      	beq.n	800471c <I2C_Master_SB+0x100>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d02d      	beq.n	800471c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ce:	605a      	str	r2, [r3, #4]
}
 80046d0:	e024      	b.n	800471c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10e      	bne.n	80046f8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	b29b      	uxth	r3, r3
 80046e0:	11db      	asrs	r3, r3, #7
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0306 	and.w	r3, r3, #6
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f063 030f 	orn	r3, r3, #15
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	611a      	str	r2, [r3, #16]
}
 80046f6:	e011      	b.n	800471c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10d      	bne.n	800471c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004704:	b29b      	uxth	r3, r3
 8004706:	11db      	asrs	r3, r3, #7
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 0306 	and.w	r3, r3, #6
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f063 030e 	orn	r3, r3, #14
 8004714:	b2da      	uxtb	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004734:	b2da      	uxtb	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <I2C_Master_ADD10+0x26>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d108      	bne.n	8004760 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <I2C_Master_ADD10+0x48>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800476e:	605a      	str	r2, [r3, #4]
  }
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800477c:	b480      	push	{r7}
 800477e:	b091      	sub	sp, #68	@ 0x44
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800478a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b22      	cmp	r3, #34	@ 0x22
 80047a4:	f040 8169 	bne.w	8004a7a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10f      	bne.n	80047d0 <I2C_Master_ADDR+0x54>
 80047b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80047b4:	2b40      	cmp	r3, #64	@ 0x40
 80047b6:	d10b      	bne.n	80047d0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b8:	2300      	movs	r3, #0
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80047cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ce:	e160      	b.n	8004a92 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d11d      	bne.n	8004814 <I2C_Master_ADDR+0x98>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80047e0:	d118      	bne.n	8004814 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e2:	2300      	movs	r3, #0
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004806:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	651a      	str	r2, [r3, #80]	@ 0x50
 8004812:	e13e      	b.n	8004a92 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d113      	bne.n	8004846 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481e:	2300      	movs	r3, #0
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e115      	b.n	8004a72 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	f040 808a 	bne.w	8004966 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004854:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004858:	d137      	bne.n	80048ca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004868:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004878:	d113      	bne.n	80048a2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004888:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	e0e7      	b.n	8004a72 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a2:	2300      	movs	r3, #0
 80048a4:	623b      	str	r3, [r7, #32]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e0d3      	b.n	8004a72 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d02e      	beq.n	800492e <I2C_Master_ADDR+0x1b2>
 80048d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d02b      	beq.n	800492e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d8:	2b12      	cmp	r3, #18
 80048da:	d102      	bne.n	80048e2 <I2C_Master_ADDR+0x166>
 80048dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d125      	bne.n	800492e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d00e      	beq.n	8004906 <I2C_Master_ADDR+0x18a>
 80048e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d00b      	beq.n	8004906 <I2C_Master_ADDR+0x18a>
 80048ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d008      	beq.n	8004906 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e007      	b.n	8004916 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004914:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	e0a1      	b.n	8004a72 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800493c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e085      	b.n	8004a72 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d14d      	bne.n	8004a0c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004972:	2b04      	cmp	r3, #4
 8004974:	d016      	beq.n	80049a4 <I2C_Master_ADDR+0x228>
 8004976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004978:	2b02      	cmp	r3, #2
 800497a:	d013      	beq.n	80049a4 <I2C_Master_ADDR+0x228>
 800497c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497e:	2b10      	cmp	r3, #16
 8004980:	d010      	beq.n	80049a4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004990:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e007      	b.n	80049b4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049b2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c2:	d117      	bne.n	80049f4 <I2C_Master_ADDR+0x278>
 80049c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049ca:	d00b      	beq.n	80049e4 <I2C_Master_ADDR+0x268>
 80049cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d008      	beq.n	80049e4 <I2C_Master_ADDR+0x268>
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d005      	beq.n	80049e4 <I2C_Master_ADDR+0x268>
 80049d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d002      	beq.n	80049e4 <I2C_Master_ADDR+0x268>
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d107      	bne.n	80049f4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049f2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	e032      	b.n	8004a72 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a1a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2a:	d117      	bne.n	8004a5c <I2C_Master_ADDR+0x2e0>
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a32:	d00b      	beq.n	8004a4c <I2C_Master_ADDR+0x2d0>
 8004a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d008      	beq.n	8004a4c <I2C_Master_ADDR+0x2d0>
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d005      	beq.n	8004a4c <I2C_Master_ADDR+0x2d0>
 8004a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d002      	beq.n	8004a4c <I2C_Master_ADDR+0x2d0>
 8004a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d107      	bne.n	8004a5c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a5a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a78:	e00b      	b.n	8004a92 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
}
 8004a90:	e7ff      	b.n	8004a92 <I2C_Master_ADDR+0x316>
 8004a92:	bf00      	nop
 8004a94:	3744      	adds	r7, #68	@ 0x44
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d02b      	beq.n	8004b10 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d114      	bne.n	8004b10 <I2C_SlaveTransmit_TXE+0x72>
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b29      	cmp	r3, #41	@ 0x29
 8004aea:	d111      	bne.n	8004b10 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2221      	movs	r2, #33	@ 0x21
 8004b00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2228      	movs	r2, #40	@ 0x28
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff f9cf 	bl	8003eae <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d011      	beq.n	8004b4e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d02c      	beq.n	8004bce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d114      	bne.n	8004bce <I2C_SlaveReceive_RXNE+0x74>
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ba8:	d111      	bne.n	8004bce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2222      	movs	r2, #34	@ 0x22
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2228      	movs	r2, #40	@ 0x28
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff f97a 	bl	8003ec2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d012      	beq.n	8004c0e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c34:	2b28      	cmp	r3, #40	@ 0x28
 8004c36:	d127      	bne.n	8004c88 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c46:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	089b      	lsrs	r3, r3, #2
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	09db      	lsrs	r3, r3, #7
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	81bb      	strh	r3, [r7, #12]
 8004c6a:	e002      	b.n	8004c72 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c7a:	89ba      	ldrh	r2, [r7, #12]
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff f928 	bl	8003ed6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c86:	e00e      	b.n	8004ca6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cbe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cfc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d0c:	d172      	bne.n	8004df4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b22      	cmp	r3, #34	@ 0x22
 8004d12:	d002      	beq.n	8004d1a <I2C_Slave_STOPF+0x6a>
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d18:	d135      	bne.n	8004d86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	f043 0204 	orr.w	r2, r3, #4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fd ffac 	bl	8002cb0 <HAL_DMA_GetState>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d049      	beq.n	8004df2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	4a69      	ldr	r2, [pc, #420]	@ (8004f08 <I2C_Slave_STOPF+0x258>)
 8004d64:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fd fdf4 	bl	8002958 <HAL_DMA_Abort_IT>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d03d      	beq.n	8004df2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d80:	4610      	mov	r0, r2
 8004d82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d84:	e035      	b.n	8004df2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	f043 0204 	orr.w	r2, r3, #4
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd ff76 	bl	8002cb0 <HAL_DMA_GetState>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d014      	beq.n	8004df4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	4a4e      	ldr	r2, [pc, #312]	@ (8004f08 <I2C_Slave_STOPF+0x258>)
 8004dd0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fd fdbe 	bl	8002958 <HAL_DMA_Abort_IT>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dec:	4610      	mov	r0, r2
 8004dee:	4798      	blx	r3
 8004df0:	e000      	b.n	8004df4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004df2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d03e      	beq.n	8004e7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d112      	bne.n	8004e32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d112      	bne.n	8004e66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	f043 0204 	orr.w	r2, r3, #4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f843 	bl	8004f10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e8a:	e039      	b.n	8004f00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e90:	d109      	bne.n	8004ea6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2228      	movs	r2, #40	@ 0x28
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff f80e 	bl	8003ec2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b28      	cmp	r3, #40	@ 0x28
 8004eb0:	d111      	bne.n	8004ed6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a15      	ldr	r2, [pc, #84]	@ (8004f0c <I2C_Slave_STOPF+0x25c>)
 8004eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff f80f 	bl	8003ef2 <HAL_I2C_ListenCpltCallback>
}
 8004ed4:	e014      	b.n	8004f00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	2b22      	cmp	r3, #34	@ 0x22
 8004edc:	d002      	beq.n	8004ee4 <I2C_Slave_STOPF+0x234>
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2b22      	cmp	r3, #34	@ 0x22
 8004ee2:	d10d      	bne.n	8004f00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fe ffe1 	bl	8003ec2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f00:	bf00      	nop
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	080055dd 	.word	0x080055dd
 8004f0c:	ffff0000 	.word	0xffff0000

08004f10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f28:	7bbb      	ldrb	r3, [r7, #14]
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d002      	beq.n	8004f34 <I2C_ITError+0x24>
 8004f2e:	7bbb      	ldrb	r3, [r7, #14]
 8004f30:	2b40      	cmp	r3, #64	@ 0x40
 8004f32:	d10a      	bne.n	8004f4a <I2C_ITError+0x3a>
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b22      	cmp	r3, #34	@ 0x22
 8004f38:	d107      	bne.n	8004f4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f50:	2b28      	cmp	r3, #40	@ 0x28
 8004f52:	d107      	bne.n	8004f64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2228      	movs	r2, #40	@ 0x28
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f62:	e015      	b.n	8004f90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f72:	d00a      	beq.n	8004f8a <I2C_ITError+0x7a>
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b60      	cmp	r3, #96	@ 0x60
 8004f78:	d007      	beq.n	8004f8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f9e:	d162      	bne.n	8005066 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d020      	beq.n	8005000 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	4a6a      	ldr	r2, [pc, #424]	@ (800516c <I2C_ITError+0x25c>)
 8004fc4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd fcc4 	bl	8002958 <HAL_DMA_Abort_IT>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 8089 	beq.w	80050ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4798      	blx	r3
 8004ffe:	e074      	b.n	80050ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	4a59      	ldr	r2, [pc, #356]	@ (800516c <I2C_ITError+0x25c>)
 8005006:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	4618      	mov	r0, r3
 800500e:	f7fd fca3 	bl	8002958 <HAL_DMA_Abort_IT>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d068      	beq.n	80050ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005022:	2b40      	cmp	r3, #64	@ 0x40
 8005024:	d10b      	bne.n	800503e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0201 	bic.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005060:	4610      	mov	r0, r2
 8005062:	4798      	blx	r3
 8005064:	e041      	b.n	80050ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b60      	cmp	r3, #96	@ 0x60
 8005070:	d125      	bne.n	80050be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508a:	2b40      	cmp	r3, #64	@ 0x40
 800508c:	d10b      	bne.n	80050a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fe ff43 	bl	8003f42 <HAL_I2C_AbortCpltCallback>
 80050bc:	e015      	b.n	80050ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c8:	2b40      	cmp	r3, #64	@ 0x40
 80050ca:	d10b      	bne.n	80050e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fe ff22 	bl	8003f2e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10e      	bne.n	8005118 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800510a:	2b00      	cmp	r3, #0
 800510c:	d104      	bne.n	8005118 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005126:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b04      	cmp	r3, #4
 800513a:	d113      	bne.n	8005164 <I2C_ITError+0x254>
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b28      	cmp	r3, #40	@ 0x28
 8005140:	d110      	bne.n	8005164 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a0a      	ldr	r2, [pc, #40]	@ (8005170 <I2C_ITError+0x260>)
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fe fec7 	bl	8003ef2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	080055dd 	.word	0x080055dd
 8005170:	ffff0000 	.word	0xffff0000

08005174 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af02      	add	r7, sp, #8
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	460b      	mov	r3, r1
 8005182:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005188:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d006      	beq.n	800519e <I2C_MasterRequestWrite+0x2a>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d003      	beq.n	800519e <I2C_MasterRequestWrite+0x2a>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800519c:	d108      	bne.n	80051b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e00b      	b.n	80051c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b4:	2b12      	cmp	r3, #18
 80051b6:	d107      	bne.n	80051c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 faa9 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ee:	d103      	bne.n	80051f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e035      	b.n	8005268 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005204:	d108      	bne.n	8005218 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005214:	611a      	str	r2, [r3, #16]
 8005216:	e01b      	b.n	8005250 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005218:	897b      	ldrh	r3, [r7, #10]
 800521a:	11db      	asrs	r3, r3, #7
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f003 0306 	and.w	r3, r3, #6
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f063 030f 	orn	r3, r3, #15
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	490e      	ldr	r1, [pc, #56]	@ (8005270 <I2C_MasterRequestWrite+0xfc>)
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 faf2 	bl	8005820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e010      	b.n	8005268 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4907      	ldr	r1, [pc, #28]	@ (8005274 <I2C_MasterRequestWrite+0x100>)
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fae2 	bl	8005820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	00010008 	.word	0x00010008
 8005274:	00010002 	.word	0x00010002

08005278 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4603      	mov	r3, r0
 8005288:	817b      	strh	r3, [r7, #10]
 800528a:	460b      	mov	r3, r1
 800528c:	813b      	strh	r3, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fa3c 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c8:	d103      	bne.n	80052d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e05f      	b.n	8005396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052d6:	897b      	ldrh	r3, [r7, #10]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	492d      	ldr	r1, [pc, #180]	@ (80053a0 <I2C_RequestMemoryWrite+0x128>)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fa97 	bl	8005820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e04c      	b.n	8005396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	6a39      	ldr	r1, [r7, #32]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fb22 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	2b04      	cmp	r3, #4
 8005328:	d107      	bne.n	800533a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e02b      	b.n	8005396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005344:	893b      	ldrh	r3, [r7, #8]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	611a      	str	r2, [r3, #16]
 800534e:	e021      	b.n	8005394 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005350:	893b      	ldrh	r3, [r7, #8]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	b29b      	uxth	r3, r3
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005360:	6a39      	ldr	r1, [r7, #32]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fafc 	bl	8005960 <I2C_WaitOnTXEFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	2b04      	cmp	r3, #4
 8005374:	d107      	bne.n	8005386 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e005      	b.n	8005396 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800538a:	893b      	ldrh	r3, [r7, #8]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	00010002 	.word	0x00010002

080053a4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053c0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80053d6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e4:	2200      	movs	r2, #0
 80053e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	2200      	movs	r2, #0
 80053f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80053fe:	2b21      	cmp	r3, #33	@ 0x21
 8005400:	d007      	beq.n	8005412 <I2C_DMAXferCplt+0x6e>
 8005402:	7cfb      	ldrb	r3, [r7, #19]
 8005404:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005408:	2b22      	cmp	r3, #34	@ 0x22
 800540a:	d131      	bne.n	8005470 <I2C_DMAXferCplt+0xcc>
 800540c:	7cbb      	ldrb	r3, [r7, #18]
 800540e:	2b20      	cmp	r3, #32
 8005410:	d12e      	bne.n	8005470 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005420:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	2b29      	cmp	r3, #41	@ 0x29
 800542c:	d10a      	bne.n	8005444 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2221      	movs	r2, #33	@ 0x21
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2228      	movs	r2, #40	@ 0x28
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800543c:	6978      	ldr	r0, [r7, #20]
 800543e:	f7fe fd36 	bl	8003eae <HAL_I2C_SlaveTxCpltCallback>
 8005442:	e00c      	b.n	800545e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	2b2a      	cmp	r3, #42	@ 0x2a
 8005448:	d109      	bne.n	800545e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2222      	movs	r2, #34	@ 0x22
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2228      	movs	r2, #40	@ 0x28
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f7fe fd32 	bl	8003ec2 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800546c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800546e:	e074      	b.n	800555a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d06e      	beq.n	800555a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d107      	bne.n	8005496 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005494:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80054a4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054ac:	d009      	beq.n	80054c2 <I2C_DMAXferCplt+0x11e>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d006      	beq.n	80054c2 <I2C_DMAXferCplt+0x11e>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80054ba:	d002      	beq.n	80054c2 <I2C_DMAXferCplt+0x11e>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d107      	bne.n	80054d2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054d0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054e0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054f0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005500:	6978      	ldr	r0, [r7, #20]
 8005502:	f7fe fd14 	bl	8003f2e <HAL_I2C_ErrorCallback>
}
 8005506:	e028      	b.n	800555a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b40      	cmp	r3, #64	@ 0x40
 800551a:	d10a      	bne.n	8005532 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2200      	movs	r2, #0
 8005528:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800552a:	6978      	ldr	r0, [r7, #20]
 800552c:	f7fe fcf5 	bl	8003f1a <HAL_I2C_MemRxCpltCallback>
}
 8005530:	e013      	b.n	800555a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b08      	cmp	r3, #8
 800553e:	d002      	beq.n	8005546 <I2C_DMAXferCplt+0x1a2>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b20      	cmp	r3, #32
 8005544:	d103      	bne.n	800554e <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	631a      	str	r2, [r3, #48]	@ 0x30
 800554c:	e002      	b.n	8005554 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2212      	movs	r2, #18
 8005552:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005554:	6978      	ldr	r0, [r7, #20]
 8005556:	f7fe fca0 	bl	8003e9a <HAL_I2C_MasterRxCpltCallback>
}
 800555a:	bf00      	nop
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800557c:	2200      	movs	r2, #0
 800557e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	2200      	movs	r2, #0
 800558e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7fd fb9b 	bl	8002ccc <HAL_DMA_GetError>
 8005596:	4603      	mov	r3, r0
 8005598:	2b02      	cmp	r3, #2
 800559a:	d01b      	beq.n	80055d4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055aa:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c6:	f043 0210 	orr.w	r2, r3, #16
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f7fe fcad 	bl	8003f2e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055d4:	bf00      	nop
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005724 <I2C_DMAAbort+0x148>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	08db      	lsrs	r3, r3, #3
 80055fc:	4a4a      	ldr	r2, [pc, #296]	@ (8005728 <I2C_DMAAbort+0x14c>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	0a1a      	lsrs	r2, r3, #8
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	00da      	lsls	r2, r3, #3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005622:	e00a      	b.n	800563a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3b01      	subs	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005638:	d0ea      	beq.n	8005610 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005646:	2200      	movs	r2, #0
 8005648:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005656:	2200      	movs	r2, #0
 8005658:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005668:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2200      	movs	r2, #0
 800566e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567c:	2200      	movs	r2, #0
 800567e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	2200      	movs	r2, #0
 800568e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b60      	cmp	r3, #96	@ 0x60
 80056aa:	d10e      	bne.n	80056ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056c2:	6978      	ldr	r0, [r7, #20]
 80056c4:	f7fe fc3d 	bl	8003f42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056c8:	e027      	b.n	800571a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ca:	7cfb      	ldrb	r3, [r7, #19]
 80056cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056d0:	2b28      	cmp	r3, #40	@ 0x28
 80056d2:	d117      	bne.n	8005704 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2200      	movs	r2, #0
 80056f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2228      	movs	r2, #40	@ 0x28
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005702:	e007      	b.n	8005714 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005714:	6978      	ldr	r0, [r7, #20]
 8005716:	f7fe fc0a 	bl	8003f2e <HAL_I2C_ErrorCallback>
}
 800571a:	bf00      	nop
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000000 	.word	0x20000000
 8005728:	14f8b589 	.word	0x14f8b589

0800572c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	4613      	mov	r3, r2
 800573a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800573c:	e048      	b.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d044      	beq.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005746:	f7fc febf 	bl	80024c8 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d139      	bne.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	0c1b      	lsrs	r3, r3, #16
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d10d      	bne.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	43da      	mvns	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	e00c      	b.n	800579c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	43da      	mvns	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d116      	bne.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e023      	b.n	8005818 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	0c1b      	lsrs	r3, r3, #16
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d10d      	bne.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	43da      	mvns	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4013      	ands	r3, r2
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	e00c      	b.n	8005810 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	43da      	mvns	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4013      	ands	r3, r2
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	429a      	cmp	r2, r3
 8005814:	d093      	beq.n	800573e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800582e:	e071      	b.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800583e:	d123      	bne.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005858:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	f043 0204 	orr.w	r2, r3, #4
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e067      	b.n	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d041      	beq.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005890:	f7fc fe1a 	bl	80024c8 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d136      	bne.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10c      	bne.n	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	43da      	mvns	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bf14      	ite	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	2300      	moveq	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e00b      	b.n	80058e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	43da      	mvns	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4013      	ands	r3, r2
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e021      	b.n	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b01      	cmp	r3, #1
 800591c:	d10c      	bne.n	8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	43da      	mvns	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4013      	ands	r3, r2
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e00b      	b.n	8005950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	43da      	mvns	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4013      	ands	r3, r2
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	f47f af6d 	bne.w	8005830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800596c:	e034      	b.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f8b8 	bl	8005ae4 <I2C_IsAcknowledgeFailed>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e034      	b.n	80059e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d028      	beq.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fc fd9f 	bl	80024c8 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11d      	bne.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a6:	2b80      	cmp	r3, #128	@ 0x80
 80059a8:	d016      	beq.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e007      	b.n	80059e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e2:	2b80      	cmp	r3, #128	@ 0x80
 80059e4:	d1c3      	bne.n	800596e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059fc:	e034      	b.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f870 	bl	8005ae4 <I2C_IsAcknowledgeFailed>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e034      	b.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d028      	beq.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a16:	f7fc fd57 	bl	80024c8 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d302      	bcc.n	8005a2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11d      	bne.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d016      	beq.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a54:	f043 0220 	orr.w	r2, r3, #32
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e007      	b.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d1c3      	bne.n	80059fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a8c:	4b13      	ldr	r3, [pc, #76]	@ (8005adc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	08db      	lsrs	r3, r3, #3
 8005a92:	4a13      	ldr	r2, [pc, #76]	@ (8005ae0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005a94:	fba2 2303 	umull	r2, r3, r2, r3
 8005a98:	0a1a      	lsrs	r2, r3, #8
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e008      	b.n	8005ad0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005acc:	d0e9      	beq.n	8005aa2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	20000000 	.word	0x20000000
 8005ae0:	14f8b589 	.word	0x14f8b589

08005ae4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005afa:	d11b      	bne.n	8005b34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	f043 0204 	orr.w	r2, r3, #4
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005b52:	d103      	bne.n	8005b5c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b5a:	e007      	b.n	8005b6c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005b64:	d102      	bne.n	8005b6c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e267      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d075      	beq.n	8005c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b96:	4b88      	ldr	r3, [pc, #544]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d00c      	beq.n	8005bbc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ba2:	4b85      	ldr	r3, [pc, #532]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005baa:	2b08      	cmp	r3, #8
 8005bac:	d112      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bae:	4b82      	ldr	r3, [pc, #520]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bba:	d10b      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d05b      	beq.n	8005c80 <HAL_RCC_OscConfig+0x108>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d157      	bne.n	8005c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e242      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bdc:	d106      	bne.n	8005bec <HAL_RCC_OscConfig+0x74>
 8005bde:	4b76      	ldr	r3, [pc, #472]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a75      	ldr	r2, [pc, #468]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e01d      	b.n	8005c28 <HAL_RCC_OscConfig+0xb0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCC_OscConfig+0x98>
 8005bf6:	4b70      	ldr	r3, [pc, #448]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6f      	ldr	r2, [pc, #444]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	4b6d      	ldr	r3, [pc, #436]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a6c      	ldr	r2, [pc, #432]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	e00b      	b.n	8005c28 <HAL_RCC_OscConfig+0xb0>
 8005c10:	4b69      	ldr	r3, [pc, #420]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a68      	ldr	r2, [pc, #416]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	4b66      	ldr	r3, [pc, #408]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a65      	ldr	r2, [pc, #404]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d013      	beq.n	8005c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7fc fc4a 	bl	80024c8 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c38:	f7fc fc46 	bl	80024c8 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b64      	cmp	r3, #100	@ 0x64
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e207      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0xc0>
 8005c56:	e014      	b.n	8005c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c58:	f7fc fc36 	bl	80024c8 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c60:	f7fc fc32 	bl	80024c8 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b64      	cmp	r3, #100	@ 0x64
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e1f3      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c72:	4b51      	ldr	r3, [pc, #324]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0xe8>
 8005c7e:	e000      	b.n	8005c82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d063      	beq.n	8005d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00b      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c9a:	4b47      	ldr	r3, [pc, #284]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d11c      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ca6:	4b44      	ldr	r3, [pc, #272]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d116      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cb2:	4b41      	ldr	r3, [pc, #260]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_RCC_OscConfig+0x152>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d001      	beq.n	8005cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e1c7      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cca:	4b3b      	ldr	r3, [pc, #236]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4937      	ldr	r1, [pc, #220]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cde:	e03a      	b.n	8005d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ce8:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <HAL_RCC_OscConfig+0x244>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cee:	f7fc fbeb 	bl	80024c8 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf6:	f7fc fbe7 	bl	80024c8 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e1a8      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d08:	4b2b      	ldr	r3, [pc, #172]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0f0      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d14:	4b28      	ldr	r3, [pc, #160]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4925      	ldr	r1, [pc, #148]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]
 8005d28:	e015      	b.n	8005d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d2a:	4b24      	ldr	r3, [pc, #144]	@ (8005dbc <HAL_RCC_OscConfig+0x244>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fc fbca 	bl	80024c8 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d38:	f7fc fbc6 	bl	80024c8 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e187      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d036      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d016      	beq.n	8005d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d6a:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <HAL_RCC_OscConfig+0x248>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d70:	f7fc fbaa 	bl	80024c8 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d78:	f7fc fba6 	bl	80024c8 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e167      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0f0      	beq.n	8005d78 <HAL_RCC_OscConfig+0x200>
 8005d96:	e01b      	b.n	8005dd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d98:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <HAL_RCC_OscConfig+0x248>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9e:	f7fc fb93 	bl	80024c8 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da4:	e00e      	b.n	8005dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005da6:	f7fc fb8f 	bl	80024c8 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d907      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e150      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	42470000 	.word	0x42470000
 8005dc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc4:	4b88      	ldr	r3, [pc, #544]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ea      	bne.n	8005da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8097 	beq.w	8005f0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dde:	2300      	movs	r3, #0
 8005de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005de2:	4b81      	ldr	r3, [pc, #516]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dee:	2300      	movs	r3, #0
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	4b7d      	ldr	r3, [pc, #500]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	4a7c      	ldr	r2, [pc, #496]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e06:	60bb      	str	r3, [r7, #8]
 8005e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0e:	4b77      	ldr	r3, [pc, #476]	@ (8005fec <HAL_RCC_OscConfig+0x474>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d118      	bne.n	8005e4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e1a:	4b74      	ldr	r3, [pc, #464]	@ (8005fec <HAL_RCC_OscConfig+0x474>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a73      	ldr	r2, [pc, #460]	@ (8005fec <HAL_RCC_OscConfig+0x474>)
 8005e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e26:	f7fc fb4f 	bl	80024c8 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2e:	f7fc fb4b 	bl	80024c8 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e10c      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e40:	4b6a      	ldr	r3, [pc, #424]	@ (8005fec <HAL_RCC_OscConfig+0x474>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0f0      	beq.n	8005e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d106      	bne.n	8005e62 <HAL_RCC_OscConfig+0x2ea>
 8005e54:	4b64      	ldr	r3, [pc, #400]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e58:	4a63      	ldr	r2, [pc, #396]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e60:	e01c      	b.n	8005e9c <HAL_RCC_OscConfig+0x324>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d10c      	bne.n	8005e84 <HAL_RCC_OscConfig+0x30c>
 8005e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e70:	f043 0304 	orr.w	r3, r3, #4
 8005e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e76:	4b5c      	ldr	r3, [pc, #368]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	4a5b      	ldr	r2, [pc, #364]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e82:	e00b      	b.n	8005e9c <HAL_RCC_OscConfig+0x324>
 8005e84:	4b58      	ldr	r3, [pc, #352]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e88:	4a57      	ldr	r2, [pc, #348]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e90:	4b55      	ldr	r3, [pc, #340]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e94:	4a54      	ldr	r2, [pc, #336]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e96:	f023 0304 	bic.w	r3, r3, #4
 8005e9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d015      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fc fb10 	bl	80024c8 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eac:	f7fc fb0c 	bl	80024c8 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e0cb      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec2:	4b49      	ldr	r3, [pc, #292]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0ee      	beq.n	8005eac <HAL_RCC_OscConfig+0x334>
 8005ece:	e014      	b.n	8005efa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed0:	f7fc fafa 	bl	80024c8 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ed6:	e00a      	b.n	8005eee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed8:	f7fc faf6 	bl	80024c8 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e0b5      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eee:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ee      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d105      	bne.n	8005f0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f00:	4b39      	ldr	r3, [pc, #228]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	4a38      	ldr	r2, [pc, #224]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80a1 	beq.w	8006058 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f16:	4b34      	ldr	r3, [pc, #208]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d05c      	beq.n	8005fdc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d141      	bne.n	8005fae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2a:	4b31      	ldr	r3, [pc, #196]	@ (8005ff0 <HAL_RCC_OscConfig+0x478>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f30:	f7fc faca 	bl	80024c8 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f38:	f7fc fac6 	bl	80024c8 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e087      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4a:	4b27      	ldr	r3, [pc, #156]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69da      	ldr	r2, [r3, #28]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	019b      	lsls	r3, r3, #6
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	491b      	ldr	r1, [pc, #108]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff0 <HAL_RCC_OscConfig+0x478>)
 8005f82:	2201      	movs	r2, #1
 8005f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f86:	f7fc fa9f 	bl	80024c8 <HAL_GetTick>
 8005f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8e:	f7fc fa9b 	bl	80024c8 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e05c      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa0:	4b11      	ldr	r3, [pc, #68]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f0      	beq.n	8005f8e <HAL_RCC_OscConfig+0x416>
 8005fac:	e054      	b.n	8006058 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fae:	4b10      	ldr	r3, [pc, #64]	@ (8005ff0 <HAL_RCC_OscConfig+0x478>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb4:	f7fc fa88 	bl	80024c8 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fbc:	f7fc fa84 	bl	80024c8 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e045      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fce:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0x444>
 8005fda:	e03d      	b.n	8006058 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e038      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	40007000 	.word	0x40007000
 8005ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8006064 <HAL_RCC_OscConfig+0x4ec>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d028      	beq.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800600c:	429a      	cmp	r2, r3
 800600e:	d121      	bne.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800601a:	429a      	cmp	r2, r3
 800601c:	d11a      	bne.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006024:	4013      	ands	r3, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800602a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800602c:	4293      	cmp	r3, r2
 800602e:	d111      	bne.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	3b01      	subs	r3, #1
 800603e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006040:	429a      	cmp	r2, r3
 8006042:	d107      	bne.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	40023800 	.word	0x40023800

08006068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0cc      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800607c:	4b68      	ldr	r3, [pc, #416]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d90c      	bls.n	80060a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800608a:	4b65      	ldr	r3, [pc, #404]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006092:	4b63      	ldr	r3, [pc, #396]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d001      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0b8      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d020      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060bc:	4b59      	ldr	r3, [pc, #356]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	4a58      	ldr	r2, [pc, #352]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060d4:	4b53      	ldr	r3, [pc, #332]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	4a52      	ldr	r2, [pc, #328]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e0:	4b50      	ldr	r3, [pc, #320]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	494d      	ldr	r1, [pc, #308]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d044      	beq.n	8006188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d107      	bne.n	8006116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006106:	4b47      	ldr	r3, [pc, #284]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d119      	bne.n	8006146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e07f      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d003      	beq.n	8006126 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006122:	2b03      	cmp	r3, #3
 8006124:	d107      	bne.n	8006136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006126:	4b3f      	ldr	r3, [pc, #252]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e06f      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006136:	4b3b      	ldr	r3, [pc, #236]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e067      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006146:	4b37      	ldr	r3, [pc, #220]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f023 0203 	bic.w	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4934      	ldr	r1, [pc, #208]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006154:	4313      	orrs	r3, r2
 8006156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006158:	f7fc f9b6 	bl	80024c8 <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615e:	e00a      	b.n	8006176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006160:	f7fc f9b2 	bl	80024c8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e04f      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006176:	4b2b      	ldr	r3, [pc, #172]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 020c 	and.w	r2, r3, #12
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	429a      	cmp	r2, r3
 8006186:	d1eb      	bne.n	8006160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006188:	4b25      	ldr	r3, [pc, #148]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d20c      	bcs.n	80061b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006196:	4b22      	ldr	r3, [pc, #136]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619e:	4b20      	ldr	r3, [pc, #128]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d001      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e032      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061bc:	4b19      	ldr	r3, [pc, #100]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	4916      	ldr	r1, [pc, #88]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061da:	4b12      	ldr	r3, [pc, #72]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	490e      	ldr	r1, [pc, #56]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ee:	f000 f821 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 80061f2:	4602      	mov	r2, r0
 80061f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	490a      	ldr	r1, [pc, #40]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 8006200:	5ccb      	ldrb	r3, [r1, r3]
 8006202:	fa22 f303 	lsr.w	r3, r2, r3
 8006206:	4a09      	ldr	r2, [pc, #36]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 8006208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800620a:	4b09      	ldr	r3, [pc, #36]	@ (8006230 <HAL_RCC_ClockConfig+0x1c8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7fc f916 	bl	8002440 <HAL_InitTick>

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40023c00 	.word	0x40023c00
 8006224:	40023800 	.word	0x40023800
 8006228:	08009644 	.word	0x08009644
 800622c:	20000000 	.word	0x20000000
 8006230:	20000004 	.word	0x20000004

08006234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006238:	b090      	sub	sp, #64	@ 0x40
 800623a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800624c:	4b59      	ldr	r3, [pc, #356]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
 8006254:	2b08      	cmp	r3, #8
 8006256:	d00d      	beq.n	8006274 <HAL_RCC_GetSysClockFreq+0x40>
 8006258:	2b08      	cmp	r3, #8
 800625a:	f200 80a1 	bhi.w	80063a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0x34>
 8006262:	2b04      	cmp	r3, #4
 8006264:	d003      	beq.n	800626e <HAL_RCC_GetSysClockFreq+0x3a>
 8006266:	e09b      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006268:	4b53      	ldr	r3, [pc, #332]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800626a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800626c:	e09b      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800626e:	4b53      	ldr	r3, [pc, #332]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x188>)
 8006270:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006272:	e098      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006274:	4b4f      	ldr	r3, [pc, #316]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800627c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800627e:	4b4d      	ldr	r3, [pc, #308]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d028      	beq.n	80062dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800628a:	4b4a      	ldr	r3, [pc, #296]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	099b      	lsrs	r3, r3, #6
 8006290:	2200      	movs	r2, #0
 8006292:	623b      	str	r3, [r7, #32]
 8006294:	627a      	str	r2, [r7, #36]	@ 0x24
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800629c:	2100      	movs	r1, #0
 800629e:	4b47      	ldr	r3, [pc, #284]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x188>)
 80062a0:	fb03 f201 	mul.w	r2, r3, r1
 80062a4:	2300      	movs	r3, #0
 80062a6:	fb00 f303 	mul.w	r3, r0, r3
 80062aa:	4413      	add	r3, r2
 80062ac:	4a43      	ldr	r2, [pc, #268]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x188>)
 80062ae:	fba0 1202 	umull	r1, r2, r0, r2
 80062b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062b4:	460a      	mov	r2, r1
 80062b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80062b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062ba:	4413      	add	r3, r2
 80062bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c0:	2200      	movs	r2, #0
 80062c2:	61bb      	str	r3, [r7, #24]
 80062c4:	61fa      	str	r2, [r7, #28]
 80062c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80062ce:	f7f9 ffd7 	bl	8000280 <__aeabi_uldivmod>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4613      	mov	r3, r2
 80062d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062da:	e053      	b.n	8006384 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062dc:	4b35      	ldr	r3, [pc, #212]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	099b      	lsrs	r3, r3, #6
 80062e2:	2200      	movs	r2, #0
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	617a      	str	r2, [r7, #20]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80062ee:	f04f 0b00 	mov.w	fp, #0
 80062f2:	4652      	mov	r2, sl
 80062f4:	465b      	mov	r3, fp
 80062f6:	f04f 0000 	mov.w	r0, #0
 80062fa:	f04f 0100 	mov.w	r1, #0
 80062fe:	0159      	lsls	r1, r3, #5
 8006300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006304:	0150      	lsls	r0, r2, #5
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	ebb2 080a 	subs.w	r8, r2, sl
 800630e:	eb63 090b 	sbc.w	r9, r3, fp
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800631e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006322:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006326:	ebb2 0408 	subs.w	r4, r2, r8
 800632a:	eb63 0509 	sbc.w	r5, r3, r9
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	00eb      	lsls	r3, r5, #3
 8006338:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800633c:	00e2      	lsls	r2, r4, #3
 800633e:	4614      	mov	r4, r2
 8006340:	461d      	mov	r5, r3
 8006342:	eb14 030a 	adds.w	r3, r4, sl
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	eb45 030b 	adc.w	r3, r5, fp
 800634c:	607b      	str	r3, [r7, #4]
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800635a:	4629      	mov	r1, r5
 800635c:	028b      	lsls	r3, r1, #10
 800635e:	4621      	mov	r1, r4
 8006360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006364:	4621      	mov	r1, r4
 8006366:	028a      	lsls	r2, r1, #10
 8006368:	4610      	mov	r0, r2
 800636a:	4619      	mov	r1, r3
 800636c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636e:	2200      	movs	r2, #0
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	60fa      	str	r2, [r7, #12]
 8006374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006378:	f7f9 ff82 	bl	8000280 <__aeabi_uldivmod>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4613      	mov	r3, r2
 8006382:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006384:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	3301      	adds	r3, #1
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006394:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800639e:	e002      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063a0:	4b05      	ldr	r3, [pc, #20]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80063a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3740      	adds	r7, #64	@ 0x40
 80063ac:	46bd      	mov	sp, r7
 80063ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b2:	bf00      	nop
 80063b4:	40023800 	.word	0x40023800
 80063b8:	00f42400 	.word	0x00f42400
 80063bc:	017d7840 	.word	0x017d7840

080063c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063c4:	4b03      	ldr	r3, [pc, #12]	@ (80063d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063c6:	681b      	ldr	r3, [r3, #0]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000000 	.word	0x20000000

080063d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063dc:	f7ff fff0 	bl	80063c0 <HAL_RCC_GetHCLKFreq>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b05      	ldr	r3, [pc, #20]	@ (80063f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	0a9b      	lsrs	r3, r3, #10
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	4903      	ldr	r1, [pc, #12]	@ (80063fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40023800 	.word	0x40023800
 80063fc:	08009654 	.word	0x08009654

08006400 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d105      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006424:	2b00      	cmp	r3, #0
 8006426:	d038      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006428:	4b68      	ldr	r3, [pc, #416]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800642e:	f7fc f84b 	bl	80024c8 <HAL_GetTick>
 8006432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006436:	f7fc f847 	bl	80024c8 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e0bd      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006448:	4b61      	ldr	r3, [pc, #388]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f0      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	019b      	lsls	r3, r3, #6
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	071b      	lsls	r3, r3, #28
 8006466:	495a      	ldr	r1, [pc, #360]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800646e:	4b57      	ldr	r3, [pc, #348]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006470:	2201      	movs	r2, #1
 8006472:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006474:	f7fc f828 	bl	80024c8 <HAL_GetTick>
 8006478:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800647a:	e008      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800647c:	f7fc f824 	bl	80024c8 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e09a      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800648e:	4b50      	ldr	r3, [pc, #320]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0f0      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8083 	beq.w	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	4b48      	ldr	r3, [pc, #288]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b0:	4a47      	ldr	r2, [pc, #284]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80064b8:	4b45      	ldr	r3, [pc, #276]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064c4:	4b43      	ldr	r3, [pc, #268]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a42      	ldr	r2, [pc, #264]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064d0:	f7fb fffa 	bl	80024c8 <HAL_GetTick>
 80064d4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d8:	f7fb fff6 	bl	80024c8 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e06c      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80064ea:	4b3a      	ldr	r3, [pc, #232]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064f6:	4b36      	ldr	r3, [pc, #216]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064fe:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d02f      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	429a      	cmp	r2, r3
 8006512:	d028      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006514:	4b2e      	ldr	r3, [pc, #184]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800651e:	4b2e      	ldr	r3, [pc, #184]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006524:	4b2c      	ldr	r3, [pc, #176]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800652a:	4a29      	ldr	r2, [pc, #164]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006530:	4b27      	ldr	r3, [pc, #156]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d114      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800653c:	f7fb ffc4 	bl	80024c8 <HAL_GetTick>
 8006540:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006542:	e00a      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006544:	f7fb ffc0 	bl	80024c8 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e034      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655a:	4b1d      	ldr	r3, [pc, #116]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0ee      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800656e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006572:	d10d      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006574:	4b16      	ldr	r3, [pc, #88]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006588:	4911      	ldr	r1, [pc, #68]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800658a:	4313      	orrs	r3, r2
 800658c:	608b      	str	r3, [r1, #8]
 800658e:	e005      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006590:	4b0f      	ldr	r3, [pc, #60]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4a0e      	ldr	r2, [pc, #56]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006596:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800659a:	6093      	str	r3, [r2, #8]
 800659c:	4b0c      	ldr	r3, [pc, #48]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800659e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a8:	4909      	ldr	r1, [pc, #36]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7d1a      	ldrb	r2, [r3, #20]
 80065be:	4b07      	ldr	r3, [pc, #28]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80065c0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	42470068 	.word	0x42470068
 80065d0:	40023800 	.word	0x40023800
 80065d4:	40007000 	.word	0x40007000
 80065d8:	42470e40 	.word	0x42470e40
 80065dc:	424711e0 	.word	0x424711e0

080065e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e073      	b.n	80066da <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	7f5b      	ldrb	r3, [r3, #29]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fb fb30 	bl	8001c68 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b10      	cmp	r3, #16
 800661a:	d055      	beq.n	80066c8 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	22ca      	movs	r2, #202	@ 0xca
 8006622:	625a      	str	r2, [r3, #36]	@ 0x24
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2253      	movs	r2, #83	@ 0x53
 800662a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fbd3 	bl	8006dd8 <RTC_EnterInitMode>
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d12c      	bne.n	8006696 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800664a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800664e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6899      	ldr	r1, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68d2      	ldr	r2, [r2, #12]
 8006676:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6919      	ldr	r1, [r3, #16]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	041a      	lsls	r2, r3, #16
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fbda 	bl	8006e46 <RTC_ExitInitMode>
 8006692:	4603      	mov	r3, r0
 8006694:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d110      	bne.n	80066be <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80066aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	22ff      	movs	r2, #255	@ 0xff
 80066c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80066c6:	e001      	b.n	80066cc <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066e2:	b590      	push	{r4, r7, lr}
 80066e4:	b087      	sub	sp, #28
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	7f1b      	ldrb	r3, [r3, #28]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_RTC_SetTime+0x1c>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e087      	b.n	800680e <HAL_RTC_SetTime+0x12c>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2202      	movs	r2, #2
 8006708:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d126      	bne.n	800675e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2200      	movs	r2, #0
 8006722:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fbb1 	bl	8006e90 <RTC_ByteToBcd2>
 800672e:	4603      	mov	r3, r0
 8006730:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fbaa 	bl	8006e90 <RTC_ByteToBcd2>
 800673c:	4603      	mov	r3, r0
 800673e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006740:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	789b      	ldrb	r3, [r3, #2]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fba2 	bl	8006e90 <RTC_ByteToBcd2>
 800674c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800674e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	78db      	ldrb	r3, [r3, #3]
 8006756:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	e018      	b.n	8006790 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d102      	bne.n	8006772 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800677e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006784:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	78db      	ldrb	r3, [r3, #3]
 800678a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	22ca      	movs	r2, #202	@ 0xca
 8006796:	625a      	str	r2, [r3, #36]	@ 0x24
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2253      	movs	r2, #83	@ 0x53
 800679e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fb19 	bl	8006dd8 <RTC_EnterInitMode>
 80067a6:	4603      	mov	r3, r0
 80067a8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80067aa:	7cfb      	ldrb	r3, [r7, #19]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d120      	bne.n	80067f2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80067ba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80067be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80067ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6899      	ldr	r1, [r3, #8]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	431a      	orrs	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fb2c 	bl	8006e46 <RTC_ExitInitMode>
 80067ee:	4603      	mov	r3, r0
 80067f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80067f2:	7cfb      	ldrb	r3, [r7, #19]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	22ff      	movs	r2, #255	@ 0xff
 8006804:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	771a      	strb	r2, [r3, #28]

  return status;
 800680c:	7cfb      	ldrb	r3, [r7, #19]
}
 800680e:	4618      	mov	r0, r3
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	bd90      	pop	{r4, r7, pc}

08006816 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b086      	sub	sp, #24
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006848:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800684c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006858:	b2da      	uxtb	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006876:	b2da      	uxtb	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	0d9b      	lsrs	r3, r3, #22
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	b2da      	uxtb	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d11a      	bne.n	80068c8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fb18 	bl	8006ecc <RTC_Bcd2ToByte>
 800689c:	4603      	mov	r3, r0
 800689e:	461a      	mov	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fb0f 	bl	8006ecc <RTC_Bcd2ToByte>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	789b      	ldrb	r3, [r3, #2]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fb06 	bl	8006ecc <RTC_Bcd2ToByte>
 80068c0:	4603      	mov	r3, r0
 80068c2:	461a      	mov	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068d2:	b590      	push	{r4, r7, lr}
 80068d4:	b087      	sub	sp, #28
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	7f1b      	ldrb	r3, [r3, #28]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_RTC_SetDate+0x1c>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e071      	b.n	80069d2 <HAL_RTC_SetDate+0x100>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2202      	movs	r2, #2
 80068f8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10e      	bne.n	800691e <HAL_RTC_SetDate+0x4c>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	f023 0310 	bic.w	r3, r3, #16
 8006914:	b2db      	uxtb	r3, r3
 8006916:	330a      	adds	r3, #10
 8006918:	b2da      	uxtb	r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d11c      	bne.n	800695e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	78db      	ldrb	r3, [r3, #3]
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fab1 	bl	8006e90 <RTC_ByteToBcd2>
 800692e:	4603      	mov	r3, r0
 8006930:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 faaa 	bl	8006e90 <RTC_ByteToBcd2>
 800693c:	4603      	mov	r3, r0
 800693e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006940:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	789b      	ldrb	r3, [r3, #2]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 faa2 	bl	8006e90 <RTC_ByteToBcd2>
 800694c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800694e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	e00e      	b.n	800697c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	78db      	ldrb	r3, [r3, #3]
 8006962:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800696a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006970:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	22ca      	movs	r2, #202	@ 0xca
 8006982:	625a      	str	r2, [r3, #36]	@ 0x24
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2253      	movs	r2, #83	@ 0x53
 800698a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fa23 	bl	8006dd8 <RTC_EnterInitMode>
 8006992:	4603      	mov	r3, r0
 8006994:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006996:	7cfb      	ldrb	r3, [r7, #19]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10c      	bne.n	80069b6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80069a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80069aa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fa4a 	bl	8006e46 <RTC_ExitInitMode>
 80069b2:	4603      	mov	r3, r0
 80069b4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80069b6:	7cfb      	ldrb	r3, [r7, #19]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d102      	bne.n	80069c2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	22ff      	movs	r2, #255	@ 0xff
 80069c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]

  return status;
 80069d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd90      	pop	{r4, r7, pc}

080069da <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b086      	sub	sp, #24
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80069f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80069f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	0c1b      	lsrs	r3, r3, #16
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	0a1b      	lsrs	r3, r3, #8
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	0b5b      	lsrs	r3, r3, #13
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11a      	bne.n	8006a6e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	78db      	ldrb	r3, [r3, #3]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fa45 	bl	8006ecc <RTC_Bcd2ToByte>
 8006a42:	4603      	mov	r3, r0
 8006a44:	461a      	mov	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	785b      	ldrb	r3, [r3, #1]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fa3c 	bl	8006ecc <RTC_Bcd2ToByte>
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	789b      	ldrb	r3, [r3, #2]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fa33 	bl	8006ecc <RTC_Bcd2ToByte>
 8006a66:	4603      	mov	r3, r0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b089      	sub	sp, #36	@ 0x24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006a84:	4b9b      	ldr	r3, [pc, #620]	@ (8006cf4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a9b      	ldr	r2, [pc, #620]	@ (8006cf8 <HAL_RTC_SetAlarm_IT+0x280>)
 8006a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8e:	0adb      	lsrs	r3, r3, #11
 8006a90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	7f1b      	ldrb	r3, [r3, #28]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_RTC_SetAlarm_IT+0x36>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e11e      	b.n	8006cec <HAL_RTC_SetAlarm_IT+0x274>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d137      	bne.n	8006b30 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d102      	bne.n	8006ad4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 f9d9 	bl	8006e90 <RTC_ByteToBcd2>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f9d2 	bl	8006e90 <RTC_ByteToBcd2>
 8006aec:	4603      	mov	r3, r0
 8006aee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006af0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	789b      	ldrb	r3, [r3, #2]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f9ca 	bl	8006e90 <RTC_ByteToBcd2>
 8006afc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006afe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	78db      	ldrb	r3, [r3, #3]
 8006b06:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006b08:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 f9bc 	bl	8006e90 <RTC_ByteToBcd2>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006b1c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006b24:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	e023      	b.n	8006b78 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2200      	movs	r2, #0
 8006b42:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006b50:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006b56:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	78db      	ldrb	r3, [r3, #3]
 8006b5c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006b5e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b66:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006b68:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006b6e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006b74:	4313      	orrs	r3, r2
 8006b76:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006b80:	4313      	orrs	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	22ca      	movs	r2, #202	@ 0xca
 8006b8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2253      	movs	r2, #83	@ 0x53
 8006b92:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9c:	d142      	bne.n	8006c24 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bac:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006bbe:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	22ff      	movs	r2, #255	@ 0xff
 8006bd2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e083      	b.n	8006cec <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0e6      	beq.n	8006bc0 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c10:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c20:	609a      	str	r2, [r3, #8]
 8006c22:	e04c      	b.n	8006cbe <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006c32:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006c44:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006c46:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf8 <HAL_RTC_SetAlarm_IT+0x280>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	0adb      	lsrs	r3, r3, #11
 8006c52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	22ff      	movs	r2, #255	@ 0xff
 8006c6e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2203      	movs	r2, #3
 8006c74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e035      	b.n	8006cec <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0e6      	beq.n	8006c5c <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cac:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cbc:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8006cfc <HAL_RTC_SetAlarm_IT+0x284>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8006cfc <HAL_RTC_SetAlarm_IT+0x284>)
 8006cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cc8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006cca:	4b0c      	ldr	r3, [pc, #48]	@ (8006cfc <HAL_RTC_SetAlarm_IT+0x284>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	4a0b      	ldr	r2, [pc, #44]	@ (8006cfc <HAL_RTC_SetAlarm_IT+0x284>)
 8006cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cd4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	22ff      	movs	r2, #255	@ 0xff
 8006cdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3724      	adds	r7, #36	@ 0x24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd90      	pop	{r4, r7, pc}
 8006cf4:	20000000 	.word	0x20000000
 8006cf8:	10624dd3 	.word	0x10624dd3
 8006cfc:	40013c00 	.word	0x40013c00

08006d00 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006d08:	4b1f      	ldr	r3, [pc, #124]	@ (8006d88 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006d0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006d0e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d012      	beq.n	8006d44 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006d3c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fb f8ea 	bl	8001f18 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d012      	beq.n	8006d78 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006d70:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8c8 	bl	8006f08 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	775a      	strb	r2, [r3, #29]
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40013c00 	.word	0x40013c00

08006d8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8006dd4 <HAL_RTC_WaitForSynchro+0x48>)
 8006d9e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006da0:	f7fb fb92 	bl	80024c8 <HAL_GetTick>
 8006da4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006da6:	e009      	b.n	8006dbc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006da8:	f7fb fb8e 	bl	80024c8 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006db6:	d901      	bls.n	8006dbc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e007      	b.n	8006dcc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0ee      	beq.n	8006da8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	00013f5f 	.word	0x00013f5f

08006dd8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d122      	bne.n	8006e3c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e04:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e06:	f7fb fb5f 	bl	80024c8 <HAL_GetTick>
 8006e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006e0c:	e00c      	b.n	8006e28 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e0e:	f7fb fb5b 	bl	80024c8 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e1c:	d904      	bls.n	8006e28 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2204      	movs	r2, #4
 8006e22:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d102      	bne.n	8006e3c <RTC_EnterInitMode+0x64>
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d1e8      	bne.n	8006e0e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e60:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ff8b 	bl	8006d8c <HAL_RTC_WaitForSynchro>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006e9e:	e005      	b.n	8006eac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	3b0a      	subs	r3, #10
 8006eaa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	2b09      	cmp	r3, #9
 8006eb0:	d8f6      	bhi.n	8006ea0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	b2db      	uxtb	r3, r3
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	091b      	lsrs	r3, r3, #4
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	4413      	add	r3, r2
 8006efa:	b2db      	uxtb	r3, r3
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e041      	b.n	8006fb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fb f9b6 	bl	80022b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f000 fce2 	bl	8007924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <HAL_TIM_PWM_Start_IT+0x28>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	bf14      	ite	ne
 8006fdc:	2301      	movne	r3, #1
 8006fde:	2300      	moveq	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e022      	b.n	800702a <HAL_TIM_PWM_Start_IT+0x6e>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d109      	bne.n	8006ffe <HAL_TIM_PWM_Start_IT+0x42>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	bf14      	ite	ne
 8006ff6:	2301      	movne	r3, #1
 8006ff8:	2300      	moveq	r3, #0
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	e015      	b.n	800702a <HAL_TIM_PWM_Start_IT+0x6e>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b08      	cmp	r3, #8
 8007002:	d109      	bne.n	8007018 <HAL_TIM_PWM_Start_IT+0x5c>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	bf14      	ite	ne
 8007010:	2301      	movne	r3, #1
 8007012:	2300      	moveq	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	e008      	b.n	800702a <HAL_TIM_PWM_Start_IT+0x6e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	bf14      	ite	ne
 8007024:	2301      	movne	r3, #1
 8007026:	2300      	moveq	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e0b3      	b.n	800719a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d104      	bne.n	8007042 <HAL_TIM_PWM_Start_IT+0x86>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007040:	e013      	b.n	800706a <HAL_TIM_PWM_Start_IT+0xae>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b04      	cmp	r3, #4
 8007046:	d104      	bne.n	8007052 <HAL_TIM_PWM_Start_IT+0x96>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007050:	e00b      	b.n	800706a <HAL_TIM_PWM_Start_IT+0xae>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b08      	cmp	r3, #8
 8007056:	d104      	bne.n	8007062 <HAL_TIM_PWM_Start_IT+0xa6>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007060:	e003      	b.n	800706a <HAL_TIM_PWM_Start_IT+0xae>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b0c      	cmp	r3, #12
 800706e:	d841      	bhi.n	80070f4 <HAL_TIM_PWM_Start_IT+0x138>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <HAL_TIM_PWM_Start_IT+0xbc>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	080070ad 	.word	0x080070ad
 800707c:	080070f5 	.word	0x080070f5
 8007080:	080070f5 	.word	0x080070f5
 8007084:	080070f5 	.word	0x080070f5
 8007088:	080070bf 	.word	0x080070bf
 800708c:	080070f5 	.word	0x080070f5
 8007090:	080070f5 	.word	0x080070f5
 8007094:	080070f5 	.word	0x080070f5
 8007098:	080070d1 	.word	0x080070d1
 800709c:	080070f5 	.word	0x080070f5
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	080070f5 	.word	0x080070f5
 80070a8:	080070e3 	.word	0x080070e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0202 	orr.w	r2, r2, #2
 80070ba:	60da      	str	r2, [r3, #12]
      break;
 80070bc:	e01d      	b.n	80070fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0204 	orr.w	r2, r2, #4
 80070cc:	60da      	str	r2, [r3, #12]
      break;
 80070ce:	e014      	b.n	80070fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0208 	orr.w	r2, r2, #8
 80070de:	60da      	str	r2, [r3, #12]
      break;
 80070e0:	e00b      	b.n	80070fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0210 	orr.w	r2, r2, #16
 80070f0:	60da      	str	r2, [r3, #12]
      break;
 80070f2:	e002      	b.n	80070fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
      break;
 80070f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d14b      	bne.n	8007198 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2201      	movs	r2, #1
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fe1d 	bl	8007d48 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a24      	ldr	r2, [pc, #144]	@ (80071a4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d107      	bne.n	8007128 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007126:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1d      	ldr	r2, [pc, #116]	@ (80071a4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d018      	beq.n	8007164 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800713a:	d013      	beq.n	8007164 <HAL_TIM_PWM_Start_IT+0x1a8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a19      	ldr	r2, [pc, #100]	@ (80071a8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00e      	beq.n	8007164 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a18      	ldr	r2, [pc, #96]	@ (80071ac <HAL_TIM_PWM_Start_IT+0x1f0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a16      	ldr	r2, [pc, #88]	@ (80071b0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_TIM_PWM_Start_IT+0x1a8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a15      	ldr	r2, [pc, #84]	@ (80071b4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d111      	bne.n	8007188 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b06      	cmp	r3, #6
 8007174:	d010      	beq.n	8007198 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0201 	orr.w	r2, r2, #1
 8007184:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007186:	e007      	b.n	8007198 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0201 	orr.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	40014000 	.word	0x40014000

080071b8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b0c      	cmp	r3, #12
 80071ca:	d841      	bhi.n	8007250 <HAL_TIM_PWM_Stop_IT+0x98>
 80071cc:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	08007209 	.word	0x08007209
 80071d8:	08007251 	.word	0x08007251
 80071dc:	08007251 	.word	0x08007251
 80071e0:	08007251 	.word	0x08007251
 80071e4:	0800721b 	.word	0x0800721b
 80071e8:	08007251 	.word	0x08007251
 80071ec:	08007251 	.word	0x08007251
 80071f0:	08007251 	.word	0x08007251
 80071f4:	0800722d 	.word	0x0800722d
 80071f8:	08007251 	.word	0x08007251
 80071fc:	08007251 	.word	0x08007251
 8007200:	08007251 	.word	0x08007251
 8007204:	0800723f 	.word	0x0800723f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0202 	bic.w	r2, r2, #2
 8007216:	60da      	str	r2, [r3, #12]
      break;
 8007218:	e01d      	b.n	8007256 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0204 	bic.w	r2, r2, #4
 8007228:	60da      	str	r2, [r3, #12]
      break;
 800722a:	e014      	b.n	8007256 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0208 	bic.w	r2, r2, #8
 800723a:	60da      	str	r2, [r3, #12]
      break;
 800723c:	e00b      	b.n	8007256 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0210 	bic.w	r2, r2, #16
 800724c:	60da      	str	r2, [r3, #12]
      break;
 800724e:	e002      	b.n	8007256 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
      break;
 8007254:	bf00      	nop
  }

  if (status == HAL_OK)
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d157      	bne.n	800730c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2200      	movs	r2, #0
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fd6f 	bl	8007d48 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a2a      	ldr	r2, [pc, #168]	@ (8007318 <HAL_TIM_PWM_Stop_IT+0x160>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d117      	bne.n	80072a4 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6a1a      	ldr	r2, [r3, #32]
 800727a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10f      	bne.n	80072a4 <HAL_TIM_PWM_Stop_IT+0xec>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6a1a      	ldr	r2, [r3, #32]
 800728a:	f240 4344 	movw	r3, #1092	@ 0x444
 800728e:	4013      	ands	r3, r2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <HAL_TIM_PWM_Stop_IT+0xec>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a1a      	ldr	r2, [r3, #32]
 80072aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10f      	bne.n	80072d4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6a1a      	ldr	r2, [r3, #32]
 80072ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d107      	bne.n	80072d4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0201 	bic.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d104      	bne.n	80072e4 <HAL_TIM_PWM_Stop_IT+0x12c>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072e2:	e013      	b.n	800730c <HAL_TIM_PWM_Stop_IT+0x154>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d104      	bne.n	80072f4 <HAL_TIM_PWM_Stop_IT+0x13c>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072f2:	e00b      	b.n	800730c <HAL_TIM_PWM_Stop_IT+0x154>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b08      	cmp	r3, #8
 80072f8:	d104      	bne.n	8007304 <HAL_TIM_PWM_Stop_IT+0x14c>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007302:	e003      	b.n	800730c <HAL_TIM_PWM_Stop_IT+0x154>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800730c:	7bfb      	ldrb	r3, [r7, #15]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40010000 	.word	0x40010000

0800731c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e097      	b.n	8007460 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fa ff65 	bl	8002214 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007360:	f023 0307 	bic.w	r3, r3, #7
 8007364:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3304      	adds	r3, #4
 800736e:	4619      	mov	r1, r3
 8007370:	4610      	mov	r0, r2
 8007372:	f000 fad7 	bl	8007924 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800739e:	f023 0303 	bic.w	r3, r3, #3
 80073a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	4313      	orrs	r3, r2
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80073bc:	f023 030c 	bic.w	r3, r3, #12
 80073c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	4313      	orrs	r3, r2
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	011a      	lsls	r2, r3, #4
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	031b      	lsls	r3, r3, #12
 80073ec:	4313      	orrs	r3, r2
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80073fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007402:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	4313      	orrs	r3, r2
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007478:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007480:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007488:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007490:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d110      	bne.n	80074ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d102      	bne.n	80074a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800749e:	7b7b      	ldrb	r3, [r7, #13]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d001      	beq.n	80074a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e069      	b.n	800757c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074b8:	e031      	b.n	800751e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d110      	bne.n	80074e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d102      	bne.n	80074cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074c6:	7b3b      	ldrb	r3, [r7, #12]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d001      	beq.n	80074d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e055      	b.n	800757c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074e0:	e01d      	b.n	800751e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d108      	bne.n	80074fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d105      	bne.n	80074fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074ee:	7b7b      	ldrb	r3, [r7, #13]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d102      	bne.n	80074fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074f4:	7b3b      	ldrb	r3, [r7, #12]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d001      	beq.n	80074fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e03e      	b.n	800757c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2202      	movs	r2, #2
 800750a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_TIM_Encoder_Start+0xc4>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b04      	cmp	r3, #4
 8007528:	d008      	beq.n	800753c <HAL_TIM_Encoder_Start+0xd4>
 800752a:	e00f      	b.n	800754c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2201      	movs	r2, #1
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fc07 	bl	8007d48 <TIM_CCxChannelCmd>
      break;
 800753a:	e016      	b.n	800756a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2201      	movs	r2, #1
 8007542:	2104      	movs	r1, #4
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fbff 	bl	8007d48 <TIM_CCxChannelCmd>
      break;
 800754a:	e00e      	b.n	800756a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2201      	movs	r2, #1
 8007552:	2100      	movs	r1, #0
 8007554:	4618      	mov	r0, r3
 8007556:	f000 fbf7 	bl	8007d48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2201      	movs	r2, #1
 8007560:	2104      	movs	r1, #4
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fbf0 	bl	8007d48 <TIM_CCxChannelCmd>
      break;
 8007568:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f042 0201 	orr.w	r2, r2, #1
 8007578:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d020      	beq.n	80075e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01b      	beq.n	80075e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0202 	mvn.w	r2, #2
 80075b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f994 	bl	80078fc <HAL_TIM_IC_CaptureCallback>
 80075d4:	e005      	b.n	80075e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f986 	bl	80078e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7fa fc39 	bl	8001e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d020      	beq.n	8007634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01b      	beq.n	8007634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f06f 0204 	mvn.w	r2, #4
 8007604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f96e 	bl	80078fc <HAL_TIM_IC_CaptureCallback>
 8007620:	e005      	b.n	800762e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f960 	bl	80078e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7fa fc13 	bl	8001e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d020      	beq.n	8007680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0208 	mvn.w	r2, #8
 8007650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2204      	movs	r2, #4
 8007656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f948 	bl	80078fc <HAL_TIM_IC_CaptureCallback>
 800766c:	e005      	b.n	800767a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f93a 	bl	80078e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7fa fbed 	bl	8001e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	2b00      	cmp	r3, #0
 8007688:	d020      	beq.n	80076cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01b      	beq.n	80076cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0210 	mvn.w	r2, #16
 800769c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2208      	movs	r2, #8
 80076a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f922 	bl	80078fc <HAL_TIM_IC_CaptureCallback>
 80076b8:	e005      	b.n	80076c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f914 	bl	80078e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7fa fbc7 	bl	8001e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00c      	beq.n	80076f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0201 	mvn.w	r2, #1
 80076e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fa fb9c 	bl	8001e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00c      	beq.n	8007714 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800770c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fbb8 	bl	8007e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00c      	beq.n	8007738 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f8ec 	bl	8007910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f003 0320 	and.w	r3, r3, #32
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0220 	mvn.w	r2, #32
 8007754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fb8a 	bl	8007e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800777e:	2302      	movs	r3, #2
 8007780:	e0ae      	b.n	80078e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b0c      	cmp	r3, #12
 800778e:	f200 809f 	bhi.w	80078d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007792:	a201      	add	r2, pc, #4	@ (adr r2, 8007798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077cd 	.word	0x080077cd
 800779c:	080078d1 	.word	0x080078d1
 80077a0:	080078d1 	.word	0x080078d1
 80077a4:	080078d1 	.word	0x080078d1
 80077a8:	0800780d 	.word	0x0800780d
 80077ac:	080078d1 	.word	0x080078d1
 80077b0:	080078d1 	.word	0x080078d1
 80077b4:	080078d1 	.word	0x080078d1
 80077b8:	0800784f 	.word	0x0800784f
 80077bc:	080078d1 	.word	0x080078d1
 80077c0:	080078d1 	.word	0x080078d1
 80077c4:	080078d1 	.word	0x080078d1
 80077c8:	0800788f 	.word	0x0800788f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 f92c 	bl	8007a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0208 	orr.w	r2, r2, #8
 80077e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0204 	bic.w	r2, r2, #4
 80077f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6999      	ldr	r1, [r3, #24]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	619a      	str	r2, [r3, #24]
      break;
 800780a:	e064      	b.n	80078d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f972 	bl	8007afc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6999      	ldr	r1, [r3, #24]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	021a      	lsls	r2, r3, #8
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	619a      	str	r2, [r3, #24]
      break;
 800784c:	e043      	b.n	80078d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	4618      	mov	r0, r3
 8007856:	f000 f9bd 	bl	8007bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 0208 	orr.w	r2, r2, #8
 8007868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0204 	bic.w	r2, r2, #4
 8007878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69d9      	ldr	r1, [r3, #28]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	61da      	str	r2, [r3, #28]
      break;
 800788c:	e023      	b.n	80078d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fa07 	bl	8007ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69da      	ldr	r2, [r3, #28]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69d9      	ldr	r1, [r3, #28]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	021a      	lsls	r2, r3, #8
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	61da      	str	r2, [r3, #28]
      break;
 80078ce:	e002      	b.n	80078d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	75fb      	strb	r3, [r7, #23]
      break;
 80078d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a37      	ldr	r2, [pc, #220]	@ (8007a14 <TIM_Base_SetConfig+0xf0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00f      	beq.n	800795c <TIM_Base_SetConfig+0x38>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007942:	d00b      	beq.n	800795c <TIM_Base_SetConfig+0x38>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a34      	ldr	r2, [pc, #208]	@ (8007a18 <TIM_Base_SetConfig+0xf4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d007      	beq.n	800795c <TIM_Base_SetConfig+0x38>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a33      	ldr	r2, [pc, #204]	@ (8007a1c <TIM_Base_SetConfig+0xf8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d003      	beq.n	800795c <TIM_Base_SetConfig+0x38>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a32      	ldr	r2, [pc, #200]	@ (8007a20 <TIM_Base_SetConfig+0xfc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d108      	bne.n	800796e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a28      	ldr	r2, [pc, #160]	@ (8007a14 <TIM_Base_SetConfig+0xf0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d01b      	beq.n	80079ae <TIM_Base_SetConfig+0x8a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800797c:	d017      	beq.n	80079ae <TIM_Base_SetConfig+0x8a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a25      	ldr	r2, [pc, #148]	@ (8007a18 <TIM_Base_SetConfig+0xf4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <TIM_Base_SetConfig+0x8a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a24      	ldr	r2, [pc, #144]	@ (8007a1c <TIM_Base_SetConfig+0xf8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00f      	beq.n	80079ae <TIM_Base_SetConfig+0x8a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a23      	ldr	r2, [pc, #140]	@ (8007a20 <TIM_Base_SetConfig+0xfc>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00b      	beq.n	80079ae <TIM_Base_SetConfig+0x8a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a22      	ldr	r2, [pc, #136]	@ (8007a24 <TIM_Base_SetConfig+0x100>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <TIM_Base_SetConfig+0x8a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a21      	ldr	r2, [pc, #132]	@ (8007a28 <TIM_Base_SetConfig+0x104>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_Base_SetConfig+0x8a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a20      	ldr	r2, [pc, #128]	@ (8007a2c <TIM_Base_SetConfig+0x108>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d108      	bne.n	80079c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	689a      	ldr	r2, [r3, #8]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007a14 <TIM_Base_SetConfig+0xf0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d103      	bne.n	80079ee <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	691a      	ldr	r2, [r3, #16]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f043 0204 	orr.w	r2, r3, #4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	601a      	str	r2, [r3, #0]
}
 8007a06:	bf00      	nop
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	40000c00 	.word	0x40000c00
 8007a24:	40014000 	.word	0x40014000
 8007a28:	40014400 	.word	0x40014400
 8007a2c:	40014800 	.word	0x40014800

08007a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	f023 0201 	bic.w	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f023 0302 	bic.w	r3, r3, #2
 8007a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a1c      	ldr	r2, [pc, #112]	@ (8007af8 <TIM_OC1_SetConfig+0xc8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d10c      	bne.n	8007aa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f023 0308 	bic.w	r3, r3, #8
 8007a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f023 0304 	bic.w	r3, r3, #4
 8007aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a13      	ldr	r2, [pc, #76]	@ (8007af8 <TIM_OC1_SetConfig+0xc8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d111      	bne.n	8007ad2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	621a      	str	r2, [r3, #32]
}
 8007aec:	bf00      	nop
 8007aee:	371c      	adds	r7, #28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	40010000 	.word	0x40010000

08007afc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	f023 0210 	bic.w	r2, r3, #16
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0320 	bic.w	r3, r3, #32
 8007b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a1e      	ldr	r2, [pc, #120]	@ (8007bd0 <TIM_OC2_SetConfig+0xd4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d10d      	bne.n	8007b78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a15      	ldr	r2, [pc, #84]	@ (8007bd0 <TIM_OC2_SetConfig+0xd4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d113      	bne.n	8007ba8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	621a      	str	r2, [r3, #32]
}
 8007bc2:	bf00      	nop
 8007bc4:	371c      	adds	r7, #28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40010000 	.word	0x40010000

08007bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ca4 <TIM_OC3_SetConfig+0xd0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d10d      	bne.n	8007c4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a14      	ldr	r2, [pc, #80]	@ (8007ca4 <TIM_OC3_SetConfig+0xd0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d113      	bne.n	8007c7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	621a      	str	r2, [r3, #32]
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	40010000 	.word	0x40010000

08007ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	031b      	lsls	r3, r3, #12
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a10      	ldr	r2, [pc, #64]	@ (8007d44 <TIM_OC4_SetConfig+0x9c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d109      	bne.n	8007d1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	019b      	lsls	r3, r3, #6
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	621a      	str	r2, [r3, #32]
}
 8007d36:	bf00      	nop
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	40010000 	.word	0x40010000

08007d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a1a      	ldr	r2, [r3, #32]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	401a      	ands	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a1a      	ldr	r2, [r3, #32]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f003 031f 	and.w	r3, r3, #31
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d80:	431a      	orrs	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
	...

08007d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d101      	bne.n	8007dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e050      	b.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1c      	ldr	r2, [pc, #112]	@ (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d018      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df8:	d013      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a18      	ldr	r2, [pc, #96]	@ (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d00e      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a16      	ldr	r2, [pc, #88]	@ (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d009      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a15      	ldr	r2, [pc, #84]	@ (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d004      	beq.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a13      	ldr	r2, [pc, #76]	@ (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d10c      	bne.n	8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	40000400 	.word	0x40000400
 8007e64:	40000800 	.word	0x40000800
 8007e68:	40000c00 	.word	0x40000c00
 8007e6c:	40014000 	.word	0x40014000

08007e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <malloc>:
 8007e98:	4b02      	ldr	r3, [pc, #8]	@ (8007ea4 <malloc+0xc>)
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	f000 b825 	b.w	8007eec <_malloc_r>
 8007ea2:	bf00      	nop
 8007ea4:	20000018 	.word	0x20000018

08007ea8 <sbrk_aligned>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4e0f      	ldr	r6, [pc, #60]	@ (8007ee8 <sbrk_aligned+0x40>)
 8007eac:	460c      	mov	r4, r1
 8007eae:	6831      	ldr	r1, [r6, #0]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	b911      	cbnz	r1, 8007eba <sbrk_aligned+0x12>
 8007eb4:	f000 fa1c 	bl	80082f0 <_sbrk_r>
 8007eb8:	6030      	str	r0, [r6, #0]
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 fa17 	bl	80082f0 <_sbrk_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d103      	bne.n	8007ece <sbrk_aligned+0x26>
 8007ec6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eca:	4620      	mov	r0, r4
 8007ecc:	bd70      	pop	{r4, r5, r6, pc}
 8007ece:	1cc4      	adds	r4, r0, #3
 8007ed0:	f024 0403 	bic.w	r4, r4, #3
 8007ed4:	42a0      	cmp	r0, r4
 8007ed6:	d0f8      	beq.n	8007eca <sbrk_aligned+0x22>
 8007ed8:	1a21      	subs	r1, r4, r0
 8007eda:	4628      	mov	r0, r5
 8007edc:	f000 fa08 	bl	80082f0 <_sbrk_r>
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d1f2      	bne.n	8007eca <sbrk_aligned+0x22>
 8007ee4:	e7ef      	b.n	8007ec6 <sbrk_aligned+0x1e>
 8007ee6:	bf00      	nop
 8007ee8:	200002fc 	.word	0x200002fc

08007eec <_malloc_r>:
 8007eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	1ccd      	adds	r5, r1, #3
 8007ef2:	f025 0503 	bic.w	r5, r5, #3
 8007ef6:	3508      	adds	r5, #8
 8007ef8:	2d0c      	cmp	r5, #12
 8007efa:	bf38      	it	cc
 8007efc:	250c      	movcc	r5, #12
 8007efe:	2d00      	cmp	r5, #0
 8007f00:	4606      	mov	r6, r0
 8007f02:	db01      	blt.n	8007f08 <_malloc_r+0x1c>
 8007f04:	42a9      	cmp	r1, r5
 8007f06:	d904      	bls.n	8007f12 <_malloc_r+0x26>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	6033      	str	r3, [r6, #0]
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fe8 <_malloc_r+0xfc>
 8007f16:	f000 f869 	bl	8007fec <__malloc_lock>
 8007f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f1e:	461c      	mov	r4, r3
 8007f20:	bb44      	cbnz	r4, 8007f74 <_malloc_r+0x88>
 8007f22:	4629      	mov	r1, r5
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7ff ffbf 	bl	8007ea8 <sbrk_aligned>
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	d158      	bne.n	8007fe2 <_malloc_r+0xf6>
 8007f30:	f8d8 4000 	ldr.w	r4, [r8]
 8007f34:	4627      	mov	r7, r4
 8007f36:	2f00      	cmp	r7, #0
 8007f38:	d143      	bne.n	8007fc2 <_malloc_r+0xd6>
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	d04b      	beq.n	8007fd6 <_malloc_r+0xea>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	4639      	mov	r1, r7
 8007f42:	4630      	mov	r0, r6
 8007f44:	eb04 0903 	add.w	r9, r4, r3
 8007f48:	f000 f9d2 	bl	80082f0 <_sbrk_r>
 8007f4c:	4581      	cmp	r9, r0
 8007f4e:	d142      	bne.n	8007fd6 <_malloc_r+0xea>
 8007f50:	6821      	ldr	r1, [r4, #0]
 8007f52:	1a6d      	subs	r5, r5, r1
 8007f54:	4629      	mov	r1, r5
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff ffa6 	bl	8007ea8 <sbrk_aligned>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d03a      	beq.n	8007fd6 <_malloc_r+0xea>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	442b      	add	r3, r5
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	f8d8 3000 	ldr.w	r3, [r8]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	bb62      	cbnz	r2, 8007fc8 <_malloc_r+0xdc>
 8007f6e:	f8c8 7000 	str.w	r7, [r8]
 8007f72:	e00f      	b.n	8007f94 <_malloc_r+0xa8>
 8007f74:	6822      	ldr	r2, [r4, #0]
 8007f76:	1b52      	subs	r2, r2, r5
 8007f78:	d420      	bmi.n	8007fbc <_malloc_r+0xd0>
 8007f7a:	2a0b      	cmp	r2, #11
 8007f7c:	d917      	bls.n	8007fae <_malloc_r+0xc2>
 8007f7e:	1961      	adds	r1, r4, r5
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	6025      	str	r5, [r4, #0]
 8007f84:	bf18      	it	ne
 8007f86:	6059      	strne	r1, [r3, #4]
 8007f88:	6863      	ldr	r3, [r4, #4]
 8007f8a:	bf08      	it	eq
 8007f8c:	f8c8 1000 	streq.w	r1, [r8]
 8007f90:	5162      	str	r2, [r4, r5]
 8007f92:	604b      	str	r3, [r1, #4]
 8007f94:	4630      	mov	r0, r6
 8007f96:	f000 f82f 	bl	8007ff8 <__malloc_unlock>
 8007f9a:	f104 000b 	add.w	r0, r4, #11
 8007f9e:	1d23      	adds	r3, r4, #4
 8007fa0:	f020 0007 	bic.w	r0, r0, #7
 8007fa4:	1ac2      	subs	r2, r0, r3
 8007fa6:	bf1c      	itt	ne
 8007fa8:	1a1b      	subne	r3, r3, r0
 8007faa:	50a3      	strne	r3, [r4, r2]
 8007fac:	e7af      	b.n	8007f0e <_malloc_r+0x22>
 8007fae:	6862      	ldr	r2, [r4, #4]
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	bf0c      	ite	eq
 8007fb4:	f8c8 2000 	streq.w	r2, [r8]
 8007fb8:	605a      	strne	r2, [r3, #4]
 8007fba:	e7eb      	b.n	8007f94 <_malloc_r+0xa8>
 8007fbc:	4623      	mov	r3, r4
 8007fbe:	6864      	ldr	r4, [r4, #4]
 8007fc0:	e7ae      	b.n	8007f20 <_malloc_r+0x34>
 8007fc2:	463c      	mov	r4, r7
 8007fc4:	687f      	ldr	r7, [r7, #4]
 8007fc6:	e7b6      	b.n	8007f36 <_malloc_r+0x4a>
 8007fc8:	461a      	mov	r2, r3
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	d1fb      	bne.n	8007fc8 <_malloc_r+0xdc>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	6053      	str	r3, [r2, #4]
 8007fd4:	e7de      	b.n	8007f94 <_malloc_r+0xa8>
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	6033      	str	r3, [r6, #0]
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f000 f80c 	bl	8007ff8 <__malloc_unlock>
 8007fe0:	e794      	b.n	8007f0c <_malloc_r+0x20>
 8007fe2:	6005      	str	r5, [r0, #0]
 8007fe4:	e7d6      	b.n	8007f94 <_malloc_r+0xa8>
 8007fe6:	bf00      	nop
 8007fe8:	20000300 	.word	0x20000300

08007fec <__malloc_lock>:
 8007fec:	4801      	ldr	r0, [pc, #4]	@ (8007ff4 <__malloc_lock+0x8>)
 8007fee:	f000 b9cc 	b.w	800838a <__retarget_lock_acquire_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	20000444 	.word	0x20000444

08007ff8 <__malloc_unlock>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	@ (8008000 <__malloc_unlock+0x8>)
 8007ffa:	f000 b9c7 	b.w	800838c <__retarget_lock_release_recursive>
 8007ffe:	bf00      	nop
 8008000:	20000444 	.word	0x20000444

08008004 <std>:
 8008004:	2300      	movs	r3, #0
 8008006:	b510      	push	{r4, lr}
 8008008:	4604      	mov	r4, r0
 800800a:	e9c0 3300 	strd	r3, r3, [r0]
 800800e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008012:	6083      	str	r3, [r0, #8]
 8008014:	8181      	strh	r1, [r0, #12]
 8008016:	6643      	str	r3, [r0, #100]	@ 0x64
 8008018:	81c2      	strh	r2, [r0, #14]
 800801a:	6183      	str	r3, [r0, #24]
 800801c:	4619      	mov	r1, r3
 800801e:	2208      	movs	r2, #8
 8008020:	305c      	adds	r0, #92	@ 0x5c
 8008022:	f000 f928 	bl	8008276 <memset>
 8008026:	4b0d      	ldr	r3, [pc, #52]	@ (800805c <std+0x58>)
 8008028:	6263      	str	r3, [r4, #36]	@ 0x24
 800802a:	4b0d      	ldr	r3, [pc, #52]	@ (8008060 <std+0x5c>)
 800802c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800802e:	4b0d      	ldr	r3, [pc, #52]	@ (8008064 <std+0x60>)
 8008030:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008032:	4b0d      	ldr	r3, [pc, #52]	@ (8008068 <std+0x64>)
 8008034:	6323      	str	r3, [r4, #48]	@ 0x30
 8008036:	4b0d      	ldr	r3, [pc, #52]	@ (800806c <std+0x68>)
 8008038:	6224      	str	r4, [r4, #32]
 800803a:	429c      	cmp	r4, r3
 800803c:	d006      	beq.n	800804c <std+0x48>
 800803e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008042:	4294      	cmp	r4, r2
 8008044:	d002      	beq.n	800804c <std+0x48>
 8008046:	33d0      	adds	r3, #208	@ 0xd0
 8008048:	429c      	cmp	r4, r3
 800804a:	d105      	bne.n	8008058 <std+0x54>
 800804c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008054:	f000 b998 	b.w	8008388 <__retarget_lock_init_recursive>
 8008058:	bd10      	pop	{r4, pc}
 800805a:	bf00      	nop
 800805c:	080081f1 	.word	0x080081f1
 8008060:	08008213 	.word	0x08008213
 8008064:	0800824b 	.word	0x0800824b
 8008068:	0800826f 	.word	0x0800826f
 800806c:	20000304 	.word	0x20000304

08008070 <stdio_exit_handler>:
 8008070:	4a02      	ldr	r2, [pc, #8]	@ (800807c <stdio_exit_handler+0xc>)
 8008072:	4903      	ldr	r1, [pc, #12]	@ (8008080 <stdio_exit_handler+0x10>)
 8008074:	4803      	ldr	r0, [pc, #12]	@ (8008084 <stdio_exit_handler+0x14>)
 8008076:	f000 b869 	b.w	800814c <_fwalk_sglue>
 800807a:	bf00      	nop
 800807c:	2000000c 	.word	0x2000000c
 8008080:	08008d79 	.word	0x08008d79
 8008084:	2000001c 	.word	0x2000001c

08008088 <cleanup_stdio>:
 8008088:	6841      	ldr	r1, [r0, #4]
 800808a:	4b0c      	ldr	r3, [pc, #48]	@ (80080bc <cleanup_stdio+0x34>)
 800808c:	4299      	cmp	r1, r3
 800808e:	b510      	push	{r4, lr}
 8008090:	4604      	mov	r4, r0
 8008092:	d001      	beq.n	8008098 <cleanup_stdio+0x10>
 8008094:	f000 fe70 	bl	8008d78 <_fflush_r>
 8008098:	68a1      	ldr	r1, [r4, #8]
 800809a:	4b09      	ldr	r3, [pc, #36]	@ (80080c0 <cleanup_stdio+0x38>)
 800809c:	4299      	cmp	r1, r3
 800809e:	d002      	beq.n	80080a6 <cleanup_stdio+0x1e>
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fe69 	bl	8008d78 <_fflush_r>
 80080a6:	68e1      	ldr	r1, [r4, #12]
 80080a8:	4b06      	ldr	r3, [pc, #24]	@ (80080c4 <cleanup_stdio+0x3c>)
 80080aa:	4299      	cmp	r1, r3
 80080ac:	d004      	beq.n	80080b8 <cleanup_stdio+0x30>
 80080ae:	4620      	mov	r0, r4
 80080b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080b4:	f000 be60 	b.w	8008d78 <_fflush_r>
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	bf00      	nop
 80080bc:	20000304 	.word	0x20000304
 80080c0:	2000036c 	.word	0x2000036c
 80080c4:	200003d4 	.word	0x200003d4

080080c8 <global_stdio_init.part.0>:
 80080c8:	b510      	push	{r4, lr}
 80080ca:	4b0b      	ldr	r3, [pc, #44]	@ (80080f8 <global_stdio_init.part.0+0x30>)
 80080cc:	4c0b      	ldr	r4, [pc, #44]	@ (80080fc <global_stdio_init.part.0+0x34>)
 80080ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008100 <global_stdio_init.part.0+0x38>)
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	4620      	mov	r0, r4
 80080d4:	2200      	movs	r2, #0
 80080d6:	2104      	movs	r1, #4
 80080d8:	f7ff ff94 	bl	8008004 <std>
 80080dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080e0:	2201      	movs	r2, #1
 80080e2:	2109      	movs	r1, #9
 80080e4:	f7ff ff8e 	bl	8008004 <std>
 80080e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080ec:	2202      	movs	r2, #2
 80080ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f2:	2112      	movs	r1, #18
 80080f4:	f7ff bf86 	b.w	8008004 <std>
 80080f8:	2000043c 	.word	0x2000043c
 80080fc:	20000304 	.word	0x20000304
 8008100:	08008071 	.word	0x08008071

08008104 <__sfp_lock_acquire>:
 8008104:	4801      	ldr	r0, [pc, #4]	@ (800810c <__sfp_lock_acquire+0x8>)
 8008106:	f000 b940 	b.w	800838a <__retarget_lock_acquire_recursive>
 800810a:	bf00      	nop
 800810c:	20000445 	.word	0x20000445

08008110 <__sfp_lock_release>:
 8008110:	4801      	ldr	r0, [pc, #4]	@ (8008118 <__sfp_lock_release+0x8>)
 8008112:	f000 b93b 	b.w	800838c <__retarget_lock_release_recursive>
 8008116:	bf00      	nop
 8008118:	20000445 	.word	0x20000445

0800811c <__sinit>:
 800811c:	b510      	push	{r4, lr}
 800811e:	4604      	mov	r4, r0
 8008120:	f7ff fff0 	bl	8008104 <__sfp_lock_acquire>
 8008124:	6a23      	ldr	r3, [r4, #32]
 8008126:	b11b      	cbz	r3, 8008130 <__sinit+0x14>
 8008128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800812c:	f7ff bff0 	b.w	8008110 <__sfp_lock_release>
 8008130:	4b04      	ldr	r3, [pc, #16]	@ (8008144 <__sinit+0x28>)
 8008132:	6223      	str	r3, [r4, #32]
 8008134:	4b04      	ldr	r3, [pc, #16]	@ (8008148 <__sinit+0x2c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1f5      	bne.n	8008128 <__sinit+0xc>
 800813c:	f7ff ffc4 	bl	80080c8 <global_stdio_init.part.0>
 8008140:	e7f2      	b.n	8008128 <__sinit+0xc>
 8008142:	bf00      	nop
 8008144:	08008089 	.word	0x08008089
 8008148:	2000043c 	.word	0x2000043c

0800814c <_fwalk_sglue>:
 800814c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008150:	4607      	mov	r7, r0
 8008152:	4688      	mov	r8, r1
 8008154:	4614      	mov	r4, r2
 8008156:	2600      	movs	r6, #0
 8008158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800815c:	f1b9 0901 	subs.w	r9, r9, #1
 8008160:	d505      	bpl.n	800816e <_fwalk_sglue+0x22>
 8008162:	6824      	ldr	r4, [r4, #0]
 8008164:	2c00      	cmp	r4, #0
 8008166:	d1f7      	bne.n	8008158 <_fwalk_sglue+0xc>
 8008168:	4630      	mov	r0, r6
 800816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816e:	89ab      	ldrh	r3, [r5, #12]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d907      	bls.n	8008184 <_fwalk_sglue+0x38>
 8008174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008178:	3301      	adds	r3, #1
 800817a:	d003      	beq.n	8008184 <_fwalk_sglue+0x38>
 800817c:	4629      	mov	r1, r5
 800817e:	4638      	mov	r0, r7
 8008180:	47c0      	blx	r8
 8008182:	4306      	orrs	r6, r0
 8008184:	3568      	adds	r5, #104	@ 0x68
 8008186:	e7e9      	b.n	800815c <_fwalk_sglue+0x10>

08008188 <iprintf>:
 8008188:	b40f      	push	{r0, r1, r2, r3}
 800818a:	b507      	push	{r0, r1, r2, lr}
 800818c:	4906      	ldr	r1, [pc, #24]	@ (80081a8 <iprintf+0x20>)
 800818e:	ab04      	add	r3, sp, #16
 8008190:	6808      	ldr	r0, [r1, #0]
 8008192:	f853 2b04 	ldr.w	r2, [r3], #4
 8008196:	6881      	ldr	r1, [r0, #8]
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	f000 fac5 	bl	8008728 <_vfiprintf_r>
 800819e:	b003      	add	sp, #12
 80081a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081a4:	b004      	add	sp, #16
 80081a6:	4770      	bx	lr
 80081a8:	20000018 	.word	0x20000018

080081ac <siprintf>:
 80081ac:	b40e      	push	{r1, r2, r3}
 80081ae:	b510      	push	{r4, lr}
 80081b0:	b09d      	sub	sp, #116	@ 0x74
 80081b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80081b4:	9002      	str	r0, [sp, #8]
 80081b6:	9006      	str	r0, [sp, #24]
 80081b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081bc:	480a      	ldr	r0, [pc, #40]	@ (80081e8 <siprintf+0x3c>)
 80081be:	9107      	str	r1, [sp, #28]
 80081c0:	9104      	str	r1, [sp, #16]
 80081c2:	490a      	ldr	r1, [pc, #40]	@ (80081ec <siprintf+0x40>)
 80081c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c8:	9105      	str	r1, [sp, #20]
 80081ca:	2400      	movs	r4, #0
 80081cc:	a902      	add	r1, sp, #8
 80081ce:	6800      	ldr	r0, [r0, #0]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80081d4:	f000 f982 	bl	80084dc <_svfiprintf_r>
 80081d8:	9b02      	ldr	r3, [sp, #8]
 80081da:	701c      	strb	r4, [r3, #0]
 80081dc:	b01d      	add	sp, #116	@ 0x74
 80081de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e2:	b003      	add	sp, #12
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	20000018 	.word	0x20000018
 80081ec:	ffff0208 	.word	0xffff0208

080081f0 <__sread>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	460c      	mov	r4, r1
 80081f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f8:	f000 f868 	bl	80082cc <_read_r>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	bfab      	itete	ge
 8008200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008202:	89a3      	ldrhlt	r3, [r4, #12]
 8008204:	181b      	addge	r3, r3, r0
 8008206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800820a:	bfac      	ite	ge
 800820c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800820e:	81a3      	strhlt	r3, [r4, #12]
 8008210:	bd10      	pop	{r4, pc}

08008212 <__swrite>:
 8008212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008216:	461f      	mov	r7, r3
 8008218:	898b      	ldrh	r3, [r1, #12]
 800821a:	05db      	lsls	r3, r3, #23
 800821c:	4605      	mov	r5, r0
 800821e:	460c      	mov	r4, r1
 8008220:	4616      	mov	r6, r2
 8008222:	d505      	bpl.n	8008230 <__swrite+0x1e>
 8008224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008228:	2302      	movs	r3, #2
 800822a:	2200      	movs	r2, #0
 800822c:	f000 f83c 	bl	80082a8 <_lseek_r>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	4632      	mov	r2, r6
 800823e:	463b      	mov	r3, r7
 8008240:	4628      	mov	r0, r5
 8008242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008246:	f000 b863 	b.w	8008310 <_write_r>

0800824a <__sseek>:
 800824a:	b510      	push	{r4, lr}
 800824c:	460c      	mov	r4, r1
 800824e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008252:	f000 f829 	bl	80082a8 <_lseek_r>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	bf15      	itete	ne
 800825c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800825e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008266:	81a3      	strheq	r3, [r4, #12]
 8008268:	bf18      	it	ne
 800826a:	81a3      	strhne	r3, [r4, #12]
 800826c:	bd10      	pop	{r4, pc}

0800826e <__sclose>:
 800826e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008272:	f000 b809 	b.w	8008288 <_close_r>

08008276 <memset>:
 8008276:	4402      	add	r2, r0
 8008278:	4603      	mov	r3, r0
 800827a:	4293      	cmp	r3, r2
 800827c:	d100      	bne.n	8008280 <memset+0xa>
 800827e:	4770      	bx	lr
 8008280:	f803 1b01 	strb.w	r1, [r3], #1
 8008284:	e7f9      	b.n	800827a <memset+0x4>
	...

08008288 <_close_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	@ (80082a4 <_close_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7f9 fe8b 	bl	8001fae <_close>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_close_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_close_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20000440 	.word	0x20000440

080082a8 <_lseek_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	@ (80082c8 <_lseek_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7f9 fea0 	bl	8001ffc <_lseek>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_lseek_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_lseek_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	20000440 	.word	0x20000440

080082cc <_read_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d07      	ldr	r5, [pc, #28]	@ (80082ec <_read_r+0x20>)
 80082d0:	4604      	mov	r4, r0
 80082d2:	4608      	mov	r0, r1
 80082d4:	4611      	mov	r1, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	602a      	str	r2, [r5, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	f7f9 fe2e 	bl	8001f3c <_read>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_read_r+0x1e>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_read_r+0x1e>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	20000440 	.word	0x20000440

080082f0 <_sbrk_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d06      	ldr	r5, [pc, #24]	@ (800830c <_sbrk_r+0x1c>)
 80082f4:	2300      	movs	r3, #0
 80082f6:	4604      	mov	r4, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	f7f9 fe8c 	bl	8002018 <_sbrk>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_sbrk_r+0x1a>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_sbrk_r+0x1a>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	20000440 	.word	0x20000440

08008310 <_write_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d07      	ldr	r5, [pc, #28]	@ (8008330 <_write_r+0x20>)
 8008314:	4604      	mov	r4, r0
 8008316:	4608      	mov	r0, r1
 8008318:	4611      	mov	r1, r2
 800831a:	2200      	movs	r2, #0
 800831c:	602a      	str	r2, [r5, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	f7f9 fe29 	bl	8001f76 <_write>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_write_r+0x1e>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_write_r+0x1e>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	20000440 	.word	0x20000440

08008334 <__errno>:
 8008334:	4b01      	ldr	r3, [pc, #4]	@ (800833c <__errno+0x8>)
 8008336:	6818      	ldr	r0, [r3, #0]
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20000018 	.word	0x20000018

08008340 <__libc_init_array>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	4d0d      	ldr	r5, [pc, #52]	@ (8008378 <__libc_init_array+0x38>)
 8008344:	4c0d      	ldr	r4, [pc, #52]	@ (800837c <__libc_init_array+0x3c>)
 8008346:	1b64      	subs	r4, r4, r5
 8008348:	10a4      	asrs	r4, r4, #2
 800834a:	2600      	movs	r6, #0
 800834c:	42a6      	cmp	r6, r4
 800834e:	d109      	bne.n	8008364 <__libc_init_array+0x24>
 8008350:	4d0b      	ldr	r5, [pc, #44]	@ (8008380 <__libc_init_array+0x40>)
 8008352:	4c0c      	ldr	r4, [pc, #48]	@ (8008384 <__libc_init_array+0x44>)
 8008354:	f000 feae 	bl	80090b4 <_init>
 8008358:	1b64      	subs	r4, r4, r5
 800835a:	10a4      	asrs	r4, r4, #2
 800835c:	2600      	movs	r6, #0
 800835e:	42a6      	cmp	r6, r4
 8008360:	d105      	bne.n	800836e <__libc_init_array+0x2e>
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	f855 3b04 	ldr.w	r3, [r5], #4
 8008368:	4798      	blx	r3
 800836a:	3601      	adds	r6, #1
 800836c:	e7ee      	b.n	800834c <__libc_init_array+0xc>
 800836e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008372:	4798      	blx	r3
 8008374:	3601      	adds	r6, #1
 8008376:	e7f2      	b.n	800835e <__libc_init_array+0x1e>
 8008378:	080096a0 	.word	0x080096a0
 800837c:	080096a0 	.word	0x080096a0
 8008380:	080096a0 	.word	0x080096a0
 8008384:	080096a4 	.word	0x080096a4

08008388 <__retarget_lock_init_recursive>:
 8008388:	4770      	bx	lr

0800838a <__retarget_lock_acquire_recursive>:
 800838a:	4770      	bx	lr

0800838c <__retarget_lock_release_recursive>:
 800838c:	4770      	bx	lr
	...

08008390 <_free_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4605      	mov	r5, r0
 8008394:	2900      	cmp	r1, #0
 8008396:	d041      	beq.n	800841c <_free_r+0x8c>
 8008398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800839c:	1f0c      	subs	r4, r1, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bfb8      	it	lt
 80083a2:	18e4      	addlt	r4, r4, r3
 80083a4:	f7ff fe22 	bl	8007fec <__malloc_lock>
 80083a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008420 <_free_r+0x90>)
 80083aa:	6813      	ldr	r3, [r2, #0]
 80083ac:	b933      	cbnz	r3, 80083bc <_free_r+0x2c>
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	6014      	str	r4, [r2, #0]
 80083b2:	4628      	mov	r0, r5
 80083b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083b8:	f7ff be1e 	b.w	8007ff8 <__malloc_unlock>
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d908      	bls.n	80083d2 <_free_r+0x42>
 80083c0:	6820      	ldr	r0, [r4, #0]
 80083c2:	1821      	adds	r1, r4, r0
 80083c4:	428b      	cmp	r3, r1
 80083c6:	bf01      	itttt	eq
 80083c8:	6819      	ldreq	r1, [r3, #0]
 80083ca:	685b      	ldreq	r3, [r3, #4]
 80083cc:	1809      	addeq	r1, r1, r0
 80083ce:	6021      	streq	r1, [r4, #0]
 80083d0:	e7ed      	b.n	80083ae <_free_r+0x1e>
 80083d2:	461a      	mov	r2, r3
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	b10b      	cbz	r3, 80083dc <_free_r+0x4c>
 80083d8:	42a3      	cmp	r3, r4
 80083da:	d9fa      	bls.n	80083d2 <_free_r+0x42>
 80083dc:	6811      	ldr	r1, [r2, #0]
 80083de:	1850      	adds	r0, r2, r1
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d10b      	bne.n	80083fc <_free_r+0x6c>
 80083e4:	6820      	ldr	r0, [r4, #0]
 80083e6:	4401      	add	r1, r0
 80083e8:	1850      	adds	r0, r2, r1
 80083ea:	4283      	cmp	r3, r0
 80083ec:	6011      	str	r1, [r2, #0]
 80083ee:	d1e0      	bne.n	80083b2 <_free_r+0x22>
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	6053      	str	r3, [r2, #4]
 80083f6:	4408      	add	r0, r1
 80083f8:	6010      	str	r0, [r2, #0]
 80083fa:	e7da      	b.n	80083b2 <_free_r+0x22>
 80083fc:	d902      	bls.n	8008404 <_free_r+0x74>
 80083fe:	230c      	movs	r3, #12
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	e7d6      	b.n	80083b2 <_free_r+0x22>
 8008404:	6820      	ldr	r0, [r4, #0]
 8008406:	1821      	adds	r1, r4, r0
 8008408:	428b      	cmp	r3, r1
 800840a:	bf04      	itt	eq
 800840c:	6819      	ldreq	r1, [r3, #0]
 800840e:	685b      	ldreq	r3, [r3, #4]
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	bf04      	itt	eq
 8008414:	1809      	addeq	r1, r1, r0
 8008416:	6021      	streq	r1, [r4, #0]
 8008418:	6054      	str	r4, [r2, #4]
 800841a:	e7ca      	b.n	80083b2 <_free_r+0x22>
 800841c:	bd38      	pop	{r3, r4, r5, pc}
 800841e:	bf00      	nop
 8008420:	20000300 	.word	0x20000300

08008424 <__ssputs_r>:
 8008424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008428:	688e      	ldr	r6, [r1, #8]
 800842a:	461f      	mov	r7, r3
 800842c:	42be      	cmp	r6, r7
 800842e:	680b      	ldr	r3, [r1, #0]
 8008430:	4682      	mov	sl, r0
 8008432:	460c      	mov	r4, r1
 8008434:	4690      	mov	r8, r2
 8008436:	d82d      	bhi.n	8008494 <__ssputs_r+0x70>
 8008438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800843c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008440:	d026      	beq.n	8008490 <__ssputs_r+0x6c>
 8008442:	6965      	ldr	r5, [r4, #20]
 8008444:	6909      	ldr	r1, [r1, #16]
 8008446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800844a:	eba3 0901 	sub.w	r9, r3, r1
 800844e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008452:	1c7b      	adds	r3, r7, #1
 8008454:	444b      	add	r3, r9
 8008456:	106d      	asrs	r5, r5, #1
 8008458:	429d      	cmp	r5, r3
 800845a:	bf38      	it	cc
 800845c:	461d      	movcc	r5, r3
 800845e:	0553      	lsls	r3, r2, #21
 8008460:	d527      	bpl.n	80084b2 <__ssputs_r+0x8e>
 8008462:	4629      	mov	r1, r5
 8008464:	f7ff fd42 	bl	8007eec <_malloc_r>
 8008468:	4606      	mov	r6, r0
 800846a:	b360      	cbz	r0, 80084c6 <__ssputs_r+0xa2>
 800846c:	6921      	ldr	r1, [r4, #16]
 800846e:	464a      	mov	r2, r9
 8008470:	f000 fd58 	bl	8008f24 <memcpy>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800847a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800847e:	81a3      	strh	r3, [r4, #12]
 8008480:	6126      	str	r6, [r4, #16]
 8008482:	6165      	str	r5, [r4, #20]
 8008484:	444e      	add	r6, r9
 8008486:	eba5 0509 	sub.w	r5, r5, r9
 800848a:	6026      	str	r6, [r4, #0]
 800848c:	60a5      	str	r5, [r4, #8]
 800848e:	463e      	mov	r6, r7
 8008490:	42be      	cmp	r6, r7
 8008492:	d900      	bls.n	8008496 <__ssputs_r+0x72>
 8008494:	463e      	mov	r6, r7
 8008496:	6820      	ldr	r0, [r4, #0]
 8008498:	4632      	mov	r2, r6
 800849a:	4641      	mov	r1, r8
 800849c:	f000 fd28 	bl	8008ef0 <memmove>
 80084a0:	68a3      	ldr	r3, [r4, #8]
 80084a2:	1b9b      	subs	r3, r3, r6
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	4433      	add	r3, r6
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	2000      	movs	r0, #0
 80084ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b2:	462a      	mov	r2, r5
 80084b4:	f000 fd44 	bl	8008f40 <_realloc_r>
 80084b8:	4606      	mov	r6, r0
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d1e0      	bne.n	8008480 <__ssputs_r+0x5c>
 80084be:	6921      	ldr	r1, [r4, #16]
 80084c0:	4650      	mov	r0, sl
 80084c2:	f7ff ff65 	bl	8008390 <_free_r>
 80084c6:	230c      	movs	r3, #12
 80084c8:	f8ca 3000 	str.w	r3, [sl]
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084d2:	81a3      	strh	r3, [r4, #12]
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	e7e9      	b.n	80084ae <__ssputs_r+0x8a>
	...

080084dc <_svfiprintf_r>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	4698      	mov	r8, r3
 80084e2:	898b      	ldrh	r3, [r1, #12]
 80084e4:	061b      	lsls	r3, r3, #24
 80084e6:	b09d      	sub	sp, #116	@ 0x74
 80084e8:	4607      	mov	r7, r0
 80084ea:	460d      	mov	r5, r1
 80084ec:	4614      	mov	r4, r2
 80084ee:	d510      	bpl.n	8008512 <_svfiprintf_r+0x36>
 80084f0:	690b      	ldr	r3, [r1, #16]
 80084f2:	b973      	cbnz	r3, 8008512 <_svfiprintf_r+0x36>
 80084f4:	2140      	movs	r1, #64	@ 0x40
 80084f6:	f7ff fcf9 	bl	8007eec <_malloc_r>
 80084fa:	6028      	str	r0, [r5, #0]
 80084fc:	6128      	str	r0, [r5, #16]
 80084fe:	b930      	cbnz	r0, 800850e <_svfiprintf_r+0x32>
 8008500:	230c      	movs	r3, #12
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	f04f 30ff 	mov.w	r0, #4294967295
 8008508:	b01d      	add	sp, #116	@ 0x74
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850e:	2340      	movs	r3, #64	@ 0x40
 8008510:	616b      	str	r3, [r5, #20]
 8008512:	2300      	movs	r3, #0
 8008514:	9309      	str	r3, [sp, #36]	@ 0x24
 8008516:	2320      	movs	r3, #32
 8008518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800851c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008520:	2330      	movs	r3, #48	@ 0x30
 8008522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086c0 <_svfiprintf_r+0x1e4>
 8008526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800852a:	f04f 0901 	mov.w	r9, #1
 800852e:	4623      	mov	r3, r4
 8008530:	469a      	mov	sl, r3
 8008532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008536:	b10a      	cbz	r2, 800853c <_svfiprintf_r+0x60>
 8008538:	2a25      	cmp	r2, #37	@ 0x25
 800853a:	d1f9      	bne.n	8008530 <_svfiprintf_r+0x54>
 800853c:	ebba 0b04 	subs.w	fp, sl, r4
 8008540:	d00b      	beq.n	800855a <_svfiprintf_r+0x7e>
 8008542:	465b      	mov	r3, fp
 8008544:	4622      	mov	r2, r4
 8008546:	4629      	mov	r1, r5
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff ff6b 	bl	8008424 <__ssputs_r>
 800854e:	3001      	adds	r0, #1
 8008550:	f000 80a7 	beq.w	80086a2 <_svfiprintf_r+0x1c6>
 8008554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008556:	445a      	add	r2, fp
 8008558:	9209      	str	r2, [sp, #36]	@ 0x24
 800855a:	f89a 3000 	ldrb.w	r3, [sl]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 809f 	beq.w	80086a2 <_svfiprintf_r+0x1c6>
 8008564:	2300      	movs	r3, #0
 8008566:	f04f 32ff 	mov.w	r2, #4294967295
 800856a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800856e:	f10a 0a01 	add.w	sl, sl, #1
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	9307      	str	r3, [sp, #28]
 8008576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800857a:	931a      	str	r3, [sp, #104]	@ 0x68
 800857c:	4654      	mov	r4, sl
 800857e:	2205      	movs	r2, #5
 8008580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008584:	484e      	ldr	r0, [pc, #312]	@ (80086c0 <_svfiprintf_r+0x1e4>)
 8008586:	f7f7 fe2b 	bl	80001e0 <memchr>
 800858a:	9a04      	ldr	r2, [sp, #16]
 800858c:	b9d8      	cbnz	r0, 80085c6 <_svfiprintf_r+0xea>
 800858e:	06d0      	lsls	r0, r2, #27
 8008590:	bf44      	itt	mi
 8008592:	2320      	movmi	r3, #32
 8008594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008598:	0711      	lsls	r1, r2, #28
 800859a:	bf44      	itt	mi
 800859c:	232b      	movmi	r3, #43	@ 0x2b
 800859e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085a2:	f89a 3000 	ldrb.w	r3, [sl]
 80085a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80085a8:	d015      	beq.n	80085d6 <_svfiprintf_r+0xfa>
 80085aa:	9a07      	ldr	r2, [sp, #28]
 80085ac:	4654      	mov	r4, sl
 80085ae:	2000      	movs	r0, #0
 80085b0:	f04f 0c0a 	mov.w	ip, #10
 80085b4:	4621      	mov	r1, r4
 80085b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ba:	3b30      	subs	r3, #48	@ 0x30
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d94b      	bls.n	8008658 <_svfiprintf_r+0x17c>
 80085c0:	b1b0      	cbz	r0, 80085f0 <_svfiprintf_r+0x114>
 80085c2:	9207      	str	r2, [sp, #28]
 80085c4:	e014      	b.n	80085f0 <_svfiprintf_r+0x114>
 80085c6:	eba0 0308 	sub.w	r3, r0, r8
 80085ca:	fa09 f303 	lsl.w	r3, r9, r3
 80085ce:	4313      	orrs	r3, r2
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	46a2      	mov	sl, r4
 80085d4:	e7d2      	b.n	800857c <_svfiprintf_r+0xa0>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	1d19      	adds	r1, r3, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	9103      	str	r1, [sp, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bfbb      	ittet	lt
 80085e2:	425b      	neglt	r3, r3
 80085e4:	f042 0202 	orrlt.w	r2, r2, #2
 80085e8:	9307      	strge	r3, [sp, #28]
 80085ea:	9307      	strlt	r3, [sp, #28]
 80085ec:	bfb8      	it	lt
 80085ee:	9204      	strlt	r2, [sp, #16]
 80085f0:	7823      	ldrb	r3, [r4, #0]
 80085f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085f4:	d10a      	bne.n	800860c <_svfiprintf_r+0x130>
 80085f6:	7863      	ldrb	r3, [r4, #1]
 80085f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085fa:	d132      	bne.n	8008662 <_svfiprintf_r+0x186>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d1a      	adds	r2, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9203      	str	r2, [sp, #12]
 8008604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008608:	3402      	adds	r4, #2
 800860a:	9305      	str	r3, [sp, #20]
 800860c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086d0 <_svfiprintf_r+0x1f4>
 8008610:	7821      	ldrb	r1, [r4, #0]
 8008612:	2203      	movs	r2, #3
 8008614:	4650      	mov	r0, sl
 8008616:	f7f7 fde3 	bl	80001e0 <memchr>
 800861a:	b138      	cbz	r0, 800862c <_svfiprintf_r+0x150>
 800861c:	9b04      	ldr	r3, [sp, #16]
 800861e:	eba0 000a 	sub.w	r0, r0, sl
 8008622:	2240      	movs	r2, #64	@ 0x40
 8008624:	4082      	lsls	r2, r0
 8008626:	4313      	orrs	r3, r2
 8008628:	3401      	adds	r4, #1
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008630:	4824      	ldr	r0, [pc, #144]	@ (80086c4 <_svfiprintf_r+0x1e8>)
 8008632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008636:	2206      	movs	r2, #6
 8008638:	f7f7 fdd2 	bl	80001e0 <memchr>
 800863c:	2800      	cmp	r0, #0
 800863e:	d036      	beq.n	80086ae <_svfiprintf_r+0x1d2>
 8008640:	4b21      	ldr	r3, [pc, #132]	@ (80086c8 <_svfiprintf_r+0x1ec>)
 8008642:	bb1b      	cbnz	r3, 800868c <_svfiprintf_r+0x1b0>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	3307      	adds	r3, #7
 8008648:	f023 0307 	bic.w	r3, r3, #7
 800864c:	3308      	adds	r3, #8
 800864e:	9303      	str	r3, [sp, #12]
 8008650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008652:	4433      	add	r3, r6
 8008654:	9309      	str	r3, [sp, #36]	@ 0x24
 8008656:	e76a      	b.n	800852e <_svfiprintf_r+0x52>
 8008658:	fb0c 3202 	mla	r2, ip, r2, r3
 800865c:	460c      	mov	r4, r1
 800865e:	2001      	movs	r0, #1
 8008660:	e7a8      	b.n	80085b4 <_svfiprintf_r+0xd8>
 8008662:	2300      	movs	r3, #0
 8008664:	3401      	adds	r4, #1
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	4619      	mov	r1, r3
 800866a:	f04f 0c0a 	mov.w	ip, #10
 800866e:	4620      	mov	r0, r4
 8008670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008674:	3a30      	subs	r2, #48	@ 0x30
 8008676:	2a09      	cmp	r2, #9
 8008678:	d903      	bls.n	8008682 <_svfiprintf_r+0x1a6>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0c6      	beq.n	800860c <_svfiprintf_r+0x130>
 800867e:	9105      	str	r1, [sp, #20]
 8008680:	e7c4      	b.n	800860c <_svfiprintf_r+0x130>
 8008682:	fb0c 2101 	mla	r1, ip, r1, r2
 8008686:	4604      	mov	r4, r0
 8008688:	2301      	movs	r3, #1
 800868a:	e7f0      	b.n	800866e <_svfiprintf_r+0x192>
 800868c:	ab03      	add	r3, sp, #12
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	462a      	mov	r2, r5
 8008692:	4b0e      	ldr	r3, [pc, #56]	@ (80086cc <_svfiprintf_r+0x1f0>)
 8008694:	a904      	add	r1, sp, #16
 8008696:	4638      	mov	r0, r7
 8008698:	f3af 8000 	nop.w
 800869c:	1c42      	adds	r2, r0, #1
 800869e:	4606      	mov	r6, r0
 80086a0:	d1d6      	bne.n	8008650 <_svfiprintf_r+0x174>
 80086a2:	89ab      	ldrh	r3, [r5, #12]
 80086a4:	065b      	lsls	r3, r3, #25
 80086a6:	f53f af2d 	bmi.w	8008504 <_svfiprintf_r+0x28>
 80086aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086ac:	e72c      	b.n	8008508 <_svfiprintf_r+0x2c>
 80086ae:	ab03      	add	r3, sp, #12
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	462a      	mov	r2, r5
 80086b4:	4b05      	ldr	r3, [pc, #20]	@ (80086cc <_svfiprintf_r+0x1f0>)
 80086b6:	a904      	add	r1, sp, #16
 80086b8:	4638      	mov	r0, r7
 80086ba:	f000 f9bb 	bl	8008a34 <_printf_i>
 80086be:	e7ed      	b.n	800869c <_svfiprintf_r+0x1c0>
 80086c0:	08009664 	.word	0x08009664
 80086c4:	0800966e 	.word	0x0800966e
 80086c8:	00000000 	.word	0x00000000
 80086cc:	08008425 	.word	0x08008425
 80086d0:	0800966a 	.word	0x0800966a

080086d4 <__sfputc_r>:
 80086d4:	6893      	ldr	r3, [r2, #8]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	b410      	push	{r4}
 80086dc:	6093      	str	r3, [r2, #8]
 80086de:	da08      	bge.n	80086f2 <__sfputc_r+0x1e>
 80086e0:	6994      	ldr	r4, [r2, #24]
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	db01      	blt.n	80086ea <__sfputc_r+0x16>
 80086e6:	290a      	cmp	r1, #10
 80086e8:	d103      	bne.n	80086f2 <__sfputc_r+0x1e>
 80086ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086ee:	f000 bb6b 	b.w	8008dc8 <__swbuf_r>
 80086f2:	6813      	ldr	r3, [r2, #0]
 80086f4:	1c58      	adds	r0, r3, #1
 80086f6:	6010      	str	r0, [r2, #0]
 80086f8:	7019      	strb	r1, [r3, #0]
 80086fa:	4608      	mov	r0, r1
 80086fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008700:	4770      	bx	lr

08008702 <__sfputs_r>:
 8008702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	4614      	mov	r4, r2
 800870a:	18d5      	adds	r5, r2, r3
 800870c:	42ac      	cmp	r4, r5
 800870e:	d101      	bne.n	8008714 <__sfputs_r+0x12>
 8008710:	2000      	movs	r0, #0
 8008712:	e007      	b.n	8008724 <__sfputs_r+0x22>
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	463a      	mov	r2, r7
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ffda 	bl	80086d4 <__sfputc_r>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d1f3      	bne.n	800870c <__sfputs_r+0xa>
 8008724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008728 <_vfiprintf_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	460d      	mov	r5, r1
 800872e:	b09d      	sub	sp, #116	@ 0x74
 8008730:	4614      	mov	r4, r2
 8008732:	4698      	mov	r8, r3
 8008734:	4606      	mov	r6, r0
 8008736:	b118      	cbz	r0, 8008740 <_vfiprintf_r+0x18>
 8008738:	6a03      	ldr	r3, [r0, #32]
 800873a:	b90b      	cbnz	r3, 8008740 <_vfiprintf_r+0x18>
 800873c:	f7ff fcee 	bl	800811c <__sinit>
 8008740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008742:	07d9      	lsls	r1, r3, #31
 8008744:	d405      	bmi.n	8008752 <_vfiprintf_r+0x2a>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	059a      	lsls	r2, r3, #22
 800874a:	d402      	bmi.n	8008752 <_vfiprintf_r+0x2a>
 800874c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800874e:	f7ff fe1c 	bl	800838a <__retarget_lock_acquire_recursive>
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	071b      	lsls	r3, r3, #28
 8008756:	d501      	bpl.n	800875c <_vfiprintf_r+0x34>
 8008758:	692b      	ldr	r3, [r5, #16]
 800875a:	b99b      	cbnz	r3, 8008784 <_vfiprintf_r+0x5c>
 800875c:	4629      	mov	r1, r5
 800875e:	4630      	mov	r0, r6
 8008760:	f000 fb70 	bl	8008e44 <__swsetup_r>
 8008764:	b170      	cbz	r0, 8008784 <_vfiprintf_r+0x5c>
 8008766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008768:	07dc      	lsls	r4, r3, #31
 800876a:	d504      	bpl.n	8008776 <_vfiprintf_r+0x4e>
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	b01d      	add	sp, #116	@ 0x74
 8008772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	0598      	lsls	r0, r3, #22
 800877a:	d4f7      	bmi.n	800876c <_vfiprintf_r+0x44>
 800877c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800877e:	f7ff fe05 	bl	800838c <__retarget_lock_release_recursive>
 8008782:	e7f3      	b.n	800876c <_vfiprintf_r+0x44>
 8008784:	2300      	movs	r3, #0
 8008786:	9309      	str	r3, [sp, #36]	@ 0x24
 8008788:	2320      	movs	r3, #32
 800878a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800878e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008792:	2330      	movs	r3, #48	@ 0x30
 8008794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008944 <_vfiprintf_r+0x21c>
 8008798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800879c:	f04f 0901 	mov.w	r9, #1
 80087a0:	4623      	mov	r3, r4
 80087a2:	469a      	mov	sl, r3
 80087a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087a8:	b10a      	cbz	r2, 80087ae <_vfiprintf_r+0x86>
 80087aa:	2a25      	cmp	r2, #37	@ 0x25
 80087ac:	d1f9      	bne.n	80087a2 <_vfiprintf_r+0x7a>
 80087ae:	ebba 0b04 	subs.w	fp, sl, r4
 80087b2:	d00b      	beq.n	80087cc <_vfiprintf_r+0xa4>
 80087b4:	465b      	mov	r3, fp
 80087b6:	4622      	mov	r2, r4
 80087b8:	4629      	mov	r1, r5
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff ffa1 	bl	8008702 <__sfputs_r>
 80087c0:	3001      	adds	r0, #1
 80087c2:	f000 80a7 	beq.w	8008914 <_vfiprintf_r+0x1ec>
 80087c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087c8:	445a      	add	r2, fp
 80087ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80087cc:	f89a 3000 	ldrb.w	r3, [sl]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 809f 	beq.w	8008914 <_vfiprintf_r+0x1ec>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f04f 32ff 	mov.w	r2, #4294967295
 80087dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087e0:	f10a 0a01 	add.w	sl, sl, #1
 80087e4:	9304      	str	r3, [sp, #16]
 80087e6:	9307      	str	r3, [sp, #28]
 80087e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80087ee:	4654      	mov	r4, sl
 80087f0:	2205      	movs	r2, #5
 80087f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f6:	4853      	ldr	r0, [pc, #332]	@ (8008944 <_vfiprintf_r+0x21c>)
 80087f8:	f7f7 fcf2 	bl	80001e0 <memchr>
 80087fc:	9a04      	ldr	r2, [sp, #16]
 80087fe:	b9d8      	cbnz	r0, 8008838 <_vfiprintf_r+0x110>
 8008800:	06d1      	lsls	r1, r2, #27
 8008802:	bf44      	itt	mi
 8008804:	2320      	movmi	r3, #32
 8008806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800880a:	0713      	lsls	r3, r2, #28
 800880c:	bf44      	itt	mi
 800880e:	232b      	movmi	r3, #43	@ 0x2b
 8008810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008814:	f89a 3000 	ldrb.w	r3, [sl]
 8008818:	2b2a      	cmp	r3, #42	@ 0x2a
 800881a:	d015      	beq.n	8008848 <_vfiprintf_r+0x120>
 800881c:	9a07      	ldr	r2, [sp, #28]
 800881e:	4654      	mov	r4, sl
 8008820:	2000      	movs	r0, #0
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	4621      	mov	r1, r4
 8008828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800882c:	3b30      	subs	r3, #48	@ 0x30
 800882e:	2b09      	cmp	r3, #9
 8008830:	d94b      	bls.n	80088ca <_vfiprintf_r+0x1a2>
 8008832:	b1b0      	cbz	r0, 8008862 <_vfiprintf_r+0x13a>
 8008834:	9207      	str	r2, [sp, #28]
 8008836:	e014      	b.n	8008862 <_vfiprintf_r+0x13a>
 8008838:	eba0 0308 	sub.w	r3, r0, r8
 800883c:	fa09 f303 	lsl.w	r3, r9, r3
 8008840:	4313      	orrs	r3, r2
 8008842:	9304      	str	r3, [sp, #16]
 8008844:	46a2      	mov	sl, r4
 8008846:	e7d2      	b.n	80087ee <_vfiprintf_r+0xc6>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	1d19      	adds	r1, r3, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	9103      	str	r1, [sp, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	bfbb      	ittet	lt
 8008854:	425b      	neglt	r3, r3
 8008856:	f042 0202 	orrlt.w	r2, r2, #2
 800885a:	9307      	strge	r3, [sp, #28]
 800885c:	9307      	strlt	r3, [sp, #28]
 800885e:	bfb8      	it	lt
 8008860:	9204      	strlt	r2, [sp, #16]
 8008862:	7823      	ldrb	r3, [r4, #0]
 8008864:	2b2e      	cmp	r3, #46	@ 0x2e
 8008866:	d10a      	bne.n	800887e <_vfiprintf_r+0x156>
 8008868:	7863      	ldrb	r3, [r4, #1]
 800886a:	2b2a      	cmp	r3, #42	@ 0x2a
 800886c:	d132      	bne.n	80088d4 <_vfiprintf_r+0x1ac>
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	1d1a      	adds	r2, r3, #4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	9203      	str	r2, [sp, #12]
 8008876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800887a:	3402      	adds	r4, #2
 800887c:	9305      	str	r3, [sp, #20]
 800887e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008954 <_vfiprintf_r+0x22c>
 8008882:	7821      	ldrb	r1, [r4, #0]
 8008884:	2203      	movs	r2, #3
 8008886:	4650      	mov	r0, sl
 8008888:	f7f7 fcaa 	bl	80001e0 <memchr>
 800888c:	b138      	cbz	r0, 800889e <_vfiprintf_r+0x176>
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	eba0 000a 	sub.w	r0, r0, sl
 8008894:	2240      	movs	r2, #64	@ 0x40
 8008896:	4082      	lsls	r2, r0
 8008898:	4313      	orrs	r3, r2
 800889a:	3401      	adds	r4, #1
 800889c:	9304      	str	r3, [sp, #16]
 800889e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a2:	4829      	ldr	r0, [pc, #164]	@ (8008948 <_vfiprintf_r+0x220>)
 80088a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088a8:	2206      	movs	r2, #6
 80088aa:	f7f7 fc99 	bl	80001e0 <memchr>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d03f      	beq.n	8008932 <_vfiprintf_r+0x20a>
 80088b2:	4b26      	ldr	r3, [pc, #152]	@ (800894c <_vfiprintf_r+0x224>)
 80088b4:	bb1b      	cbnz	r3, 80088fe <_vfiprintf_r+0x1d6>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	3307      	adds	r3, #7
 80088ba:	f023 0307 	bic.w	r3, r3, #7
 80088be:	3308      	adds	r3, #8
 80088c0:	9303      	str	r3, [sp, #12]
 80088c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c4:	443b      	add	r3, r7
 80088c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80088c8:	e76a      	b.n	80087a0 <_vfiprintf_r+0x78>
 80088ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80088ce:	460c      	mov	r4, r1
 80088d0:	2001      	movs	r0, #1
 80088d2:	e7a8      	b.n	8008826 <_vfiprintf_r+0xfe>
 80088d4:	2300      	movs	r3, #0
 80088d6:	3401      	adds	r4, #1
 80088d8:	9305      	str	r3, [sp, #20]
 80088da:	4619      	mov	r1, r3
 80088dc:	f04f 0c0a 	mov.w	ip, #10
 80088e0:	4620      	mov	r0, r4
 80088e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e6:	3a30      	subs	r2, #48	@ 0x30
 80088e8:	2a09      	cmp	r2, #9
 80088ea:	d903      	bls.n	80088f4 <_vfiprintf_r+0x1cc>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0c6      	beq.n	800887e <_vfiprintf_r+0x156>
 80088f0:	9105      	str	r1, [sp, #20]
 80088f2:	e7c4      	b.n	800887e <_vfiprintf_r+0x156>
 80088f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f8:	4604      	mov	r4, r0
 80088fa:	2301      	movs	r3, #1
 80088fc:	e7f0      	b.n	80088e0 <_vfiprintf_r+0x1b8>
 80088fe:	ab03      	add	r3, sp, #12
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	462a      	mov	r2, r5
 8008904:	4b12      	ldr	r3, [pc, #72]	@ (8008950 <_vfiprintf_r+0x228>)
 8008906:	a904      	add	r1, sp, #16
 8008908:	4630      	mov	r0, r6
 800890a:	f3af 8000 	nop.w
 800890e:	4607      	mov	r7, r0
 8008910:	1c78      	adds	r0, r7, #1
 8008912:	d1d6      	bne.n	80088c2 <_vfiprintf_r+0x19a>
 8008914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008916:	07d9      	lsls	r1, r3, #31
 8008918:	d405      	bmi.n	8008926 <_vfiprintf_r+0x1fe>
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	059a      	lsls	r2, r3, #22
 800891e:	d402      	bmi.n	8008926 <_vfiprintf_r+0x1fe>
 8008920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008922:	f7ff fd33 	bl	800838c <__retarget_lock_release_recursive>
 8008926:	89ab      	ldrh	r3, [r5, #12]
 8008928:	065b      	lsls	r3, r3, #25
 800892a:	f53f af1f 	bmi.w	800876c <_vfiprintf_r+0x44>
 800892e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008930:	e71e      	b.n	8008770 <_vfiprintf_r+0x48>
 8008932:	ab03      	add	r3, sp, #12
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	462a      	mov	r2, r5
 8008938:	4b05      	ldr	r3, [pc, #20]	@ (8008950 <_vfiprintf_r+0x228>)
 800893a:	a904      	add	r1, sp, #16
 800893c:	4630      	mov	r0, r6
 800893e:	f000 f879 	bl	8008a34 <_printf_i>
 8008942:	e7e4      	b.n	800890e <_vfiprintf_r+0x1e6>
 8008944:	08009664 	.word	0x08009664
 8008948:	0800966e 	.word	0x0800966e
 800894c:	00000000 	.word	0x00000000
 8008950:	08008703 	.word	0x08008703
 8008954:	0800966a 	.word	0x0800966a

08008958 <_printf_common>:
 8008958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	4616      	mov	r6, r2
 800895e:	4698      	mov	r8, r3
 8008960:	688a      	ldr	r2, [r1, #8]
 8008962:	690b      	ldr	r3, [r1, #16]
 8008964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008968:	4293      	cmp	r3, r2
 800896a:	bfb8      	it	lt
 800896c:	4613      	movlt	r3, r2
 800896e:	6033      	str	r3, [r6, #0]
 8008970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008974:	4607      	mov	r7, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b10a      	cbz	r2, 800897e <_printf_common+0x26>
 800897a:	3301      	adds	r3, #1
 800897c:	6033      	str	r3, [r6, #0]
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	0699      	lsls	r1, r3, #26
 8008982:	bf42      	ittt	mi
 8008984:	6833      	ldrmi	r3, [r6, #0]
 8008986:	3302      	addmi	r3, #2
 8008988:	6033      	strmi	r3, [r6, #0]
 800898a:	6825      	ldr	r5, [r4, #0]
 800898c:	f015 0506 	ands.w	r5, r5, #6
 8008990:	d106      	bne.n	80089a0 <_printf_common+0x48>
 8008992:	f104 0a19 	add.w	sl, r4, #25
 8008996:	68e3      	ldr	r3, [r4, #12]
 8008998:	6832      	ldr	r2, [r6, #0]
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	42ab      	cmp	r3, r5
 800899e:	dc26      	bgt.n	80089ee <_printf_common+0x96>
 80089a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089a4:	6822      	ldr	r2, [r4, #0]
 80089a6:	3b00      	subs	r3, #0
 80089a8:	bf18      	it	ne
 80089aa:	2301      	movne	r3, #1
 80089ac:	0692      	lsls	r2, r2, #26
 80089ae:	d42b      	bmi.n	8008a08 <_printf_common+0xb0>
 80089b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089b4:	4641      	mov	r1, r8
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c8      	blx	r9
 80089ba:	3001      	adds	r0, #1
 80089bc:	d01e      	beq.n	80089fc <_printf_common+0xa4>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	6922      	ldr	r2, [r4, #16]
 80089c2:	f003 0306 	and.w	r3, r3, #6
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	bf02      	ittt	eq
 80089ca:	68e5      	ldreq	r5, [r4, #12]
 80089cc:	6833      	ldreq	r3, [r6, #0]
 80089ce:	1aed      	subeq	r5, r5, r3
 80089d0:	68a3      	ldr	r3, [r4, #8]
 80089d2:	bf0c      	ite	eq
 80089d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d8:	2500      	movne	r5, #0
 80089da:	4293      	cmp	r3, r2
 80089dc:	bfc4      	itt	gt
 80089de:	1a9b      	subgt	r3, r3, r2
 80089e0:	18ed      	addgt	r5, r5, r3
 80089e2:	2600      	movs	r6, #0
 80089e4:	341a      	adds	r4, #26
 80089e6:	42b5      	cmp	r5, r6
 80089e8:	d11a      	bne.n	8008a20 <_printf_common+0xc8>
 80089ea:	2000      	movs	r0, #0
 80089ec:	e008      	b.n	8008a00 <_printf_common+0xa8>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4652      	mov	r2, sl
 80089f2:	4641      	mov	r1, r8
 80089f4:	4638      	mov	r0, r7
 80089f6:	47c8      	blx	r9
 80089f8:	3001      	adds	r0, #1
 80089fa:	d103      	bne.n	8008a04 <_printf_common+0xac>
 80089fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a04:	3501      	adds	r5, #1
 8008a06:	e7c6      	b.n	8008996 <_printf_common+0x3e>
 8008a08:	18e1      	adds	r1, r4, r3
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	2030      	movs	r0, #48	@ 0x30
 8008a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a12:	4422      	add	r2, r4
 8008a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	e7c7      	b.n	80089b0 <_printf_common+0x58>
 8008a20:	2301      	movs	r3, #1
 8008a22:	4622      	mov	r2, r4
 8008a24:	4641      	mov	r1, r8
 8008a26:	4638      	mov	r0, r7
 8008a28:	47c8      	blx	r9
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	d0e6      	beq.n	80089fc <_printf_common+0xa4>
 8008a2e:	3601      	adds	r6, #1
 8008a30:	e7d9      	b.n	80089e6 <_printf_common+0x8e>
	...

08008a34 <_printf_i>:
 8008a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a38:	7e0f      	ldrb	r7, [r1, #24]
 8008a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a3c:	2f78      	cmp	r7, #120	@ 0x78
 8008a3e:	4691      	mov	r9, r2
 8008a40:	4680      	mov	r8, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	469a      	mov	sl, r3
 8008a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a4a:	d807      	bhi.n	8008a5c <_printf_i+0x28>
 8008a4c:	2f62      	cmp	r7, #98	@ 0x62
 8008a4e:	d80a      	bhi.n	8008a66 <_printf_i+0x32>
 8008a50:	2f00      	cmp	r7, #0
 8008a52:	f000 80d1 	beq.w	8008bf8 <_printf_i+0x1c4>
 8008a56:	2f58      	cmp	r7, #88	@ 0x58
 8008a58:	f000 80b8 	beq.w	8008bcc <_printf_i+0x198>
 8008a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a64:	e03a      	b.n	8008adc <_printf_i+0xa8>
 8008a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a6a:	2b15      	cmp	r3, #21
 8008a6c:	d8f6      	bhi.n	8008a5c <_printf_i+0x28>
 8008a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8008a74 <_printf_i+0x40>)
 8008a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a74:	08008acd 	.word	0x08008acd
 8008a78:	08008ae1 	.word	0x08008ae1
 8008a7c:	08008a5d 	.word	0x08008a5d
 8008a80:	08008a5d 	.word	0x08008a5d
 8008a84:	08008a5d 	.word	0x08008a5d
 8008a88:	08008a5d 	.word	0x08008a5d
 8008a8c:	08008ae1 	.word	0x08008ae1
 8008a90:	08008a5d 	.word	0x08008a5d
 8008a94:	08008a5d 	.word	0x08008a5d
 8008a98:	08008a5d 	.word	0x08008a5d
 8008a9c:	08008a5d 	.word	0x08008a5d
 8008aa0:	08008bdf 	.word	0x08008bdf
 8008aa4:	08008b0b 	.word	0x08008b0b
 8008aa8:	08008b99 	.word	0x08008b99
 8008aac:	08008a5d 	.word	0x08008a5d
 8008ab0:	08008a5d 	.word	0x08008a5d
 8008ab4:	08008c01 	.word	0x08008c01
 8008ab8:	08008a5d 	.word	0x08008a5d
 8008abc:	08008b0b 	.word	0x08008b0b
 8008ac0:	08008a5d 	.word	0x08008a5d
 8008ac4:	08008a5d 	.word	0x08008a5d
 8008ac8:	08008ba1 	.word	0x08008ba1
 8008acc:	6833      	ldr	r3, [r6, #0]
 8008ace:	1d1a      	adds	r2, r3, #4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6032      	str	r2, [r6, #0]
 8008ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008adc:	2301      	movs	r3, #1
 8008ade:	e09c      	b.n	8008c1a <_printf_i+0x1e6>
 8008ae0:	6833      	ldr	r3, [r6, #0]
 8008ae2:	6820      	ldr	r0, [r4, #0]
 8008ae4:	1d19      	adds	r1, r3, #4
 8008ae6:	6031      	str	r1, [r6, #0]
 8008ae8:	0606      	lsls	r6, r0, #24
 8008aea:	d501      	bpl.n	8008af0 <_printf_i+0xbc>
 8008aec:	681d      	ldr	r5, [r3, #0]
 8008aee:	e003      	b.n	8008af8 <_printf_i+0xc4>
 8008af0:	0645      	lsls	r5, r0, #25
 8008af2:	d5fb      	bpl.n	8008aec <_printf_i+0xb8>
 8008af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008af8:	2d00      	cmp	r5, #0
 8008afa:	da03      	bge.n	8008b04 <_printf_i+0xd0>
 8008afc:	232d      	movs	r3, #45	@ 0x2d
 8008afe:	426d      	negs	r5, r5
 8008b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b04:	4858      	ldr	r0, [pc, #352]	@ (8008c68 <_printf_i+0x234>)
 8008b06:	230a      	movs	r3, #10
 8008b08:	e011      	b.n	8008b2e <_printf_i+0xfa>
 8008b0a:	6821      	ldr	r1, [r4, #0]
 8008b0c:	6833      	ldr	r3, [r6, #0]
 8008b0e:	0608      	lsls	r0, r1, #24
 8008b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b14:	d402      	bmi.n	8008b1c <_printf_i+0xe8>
 8008b16:	0649      	lsls	r1, r1, #25
 8008b18:	bf48      	it	mi
 8008b1a:	b2ad      	uxthmi	r5, r5
 8008b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b1e:	4852      	ldr	r0, [pc, #328]	@ (8008c68 <_printf_i+0x234>)
 8008b20:	6033      	str	r3, [r6, #0]
 8008b22:	bf14      	ite	ne
 8008b24:	230a      	movne	r3, #10
 8008b26:	2308      	moveq	r3, #8
 8008b28:	2100      	movs	r1, #0
 8008b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b2e:	6866      	ldr	r6, [r4, #4]
 8008b30:	60a6      	str	r6, [r4, #8]
 8008b32:	2e00      	cmp	r6, #0
 8008b34:	db05      	blt.n	8008b42 <_printf_i+0x10e>
 8008b36:	6821      	ldr	r1, [r4, #0]
 8008b38:	432e      	orrs	r6, r5
 8008b3a:	f021 0104 	bic.w	r1, r1, #4
 8008b3e:	6021      	str	r1, [r4, #0]
 8008b40:	d04b      	beq.n	8008bda <_printf_i+0x1a6>
 8008b42:	4616      	mov	r6, r2
 8008b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b48:	fb03 5711 	mls	r7, r3, r1, r5
 8008b4c:	5dc7      	ldrb	r7, [r0, r7]
 8008b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b52:	462f      	mov	r7, r5
 8008b54:	42bb      	cmp	r3, r7
 8008b56:	460d      	mov	r5, r1
 8008b58:	d9f4      	bls.n	8008b44 <_printf_i+0x110>
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d10b      	bne.n	8008b76 <_printf_i+0x142>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	07df      	lsls	r7, r3, #31
 8008b62:	d508      	bpl.n	8008b76 <_printf_i+0x142>
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	6861      	ldr	r1, [r4, #4]
 8008b68:	4299      	cmp	r1, r3
 8008b6a:	bfde      	ittt	le
 8008b6c:	2330      	movle	r3, #48	@ 0x30
 8008b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b76:	1b92      	subs	r2, r2, r6
 8008b78:	6122      	str	r2, [r4, #16]
 8008b7a:	f8cd a000 	str.w	sl, [sp]
 8008b7e:	464b      	mov	r3, r9
 8008b80:	aa03      	add	r2, sp, #12
 8008b82:	4621      	mov	r1, r4
 8008b84:	4640      	mov	r0, r8
 8008b86:	f7ff fee7 	bl	8008958 <_printf_common>
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	d14a      	bne.n	8008c24 <_printf_i+0x1f0>
 8008b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b92:	b004      	add	sp, #16
 8008b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	f043 0320 	orr.w	r3, r3, #32
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	4832      	ldr	r0, [pc, #200]	@ (8008c6c <_printf_i+0x238>)
 8008ba2:	2778      	movs	r7, #120	@ 0x78
 8008ba4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	6831      	ldr	r1, [r6, #0]
 8008bac:	061f      	lsls	r7, r3, #24
 8008bae:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bb2:	d402      	bmi.n	8008bba <_printf_i+0x186>
 8008bb4:	065f      	lsls	r7, r3, #25
 8008bb6:	bf48      	it	mi
 8008bb8:	b2ad      	uxthmi	r5, r5
 8008bba:	6031      	str	r1, [r6, #0]
 8008bbc:	07d9      	lsls	r1, r3, #31
 8008bbe:	bf44      	itt	mi
 8008bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8008bc4:	6023      	strmi	r3, [r4, #0]
 8008bc6:	b11d      	cbz	r5, 8008bd0 <_printf_i+0x19c>
 8008bc8:	2310      	movs	r3, #16
 8008bca:	e7ad      	b.n	8008b28 <_printf_i+0xf4>
 8008bcc:	4826      	ldr	r0, [pc, #152]	@ (8008c68 <_printf_i+0x234>)
 8008bce:	e7e9      	b.n	8008ba4 <_printf_i+0x170>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	f023 0320 	bic.w	r3, r3, #32
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	e7f6      	b.n	8008bc8 <_printf_i+0x194>
 8008bda:	4616      	mov	r6, r2
 8008bdc:	e7bd      	b.n	8008b5a <_printf_i+0x126>
 8008bde:	6833      	ldr	r3, [r6, #0]
 8008be0:	6825      	ldr	r5, [r4, #0]
 8008be2:	6961      	ldr	r1, [r4, #20]
 8008be4:	1d18      	adds	r0, r3, #4
 8008be6:	6030      	str	r0, [r6, #0]
 8008be8:	062e      	lsls	r6, r5, #24
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	d501      	bpl.n	8008bf2 <_printf_i+0x1be>
 8008bee:	6019      	str	r1, [r3, #0]
 8008bf0:	e002      	b.n	8008bf8 <_printf_i+0x1c4>
 8008bf2:	0668      	lsls	r0, r5, #25
 8008bf4:	d5fb      	bpl.n	8008bee <_printf_i+0x1ba>
 8008bf6:	8019      	strh	r1, [r3, #0]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	6123      	str	r3, [r4, #16]
 8008bfc:	4616      	mov	r6, r2
 8008bfe:	e7bc      	b.n	8008b7a <_printf_i+0x146>
 8008c00:	6833      	ldr	r3, [r6, #0]
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	6032      	str	r2, [r6, #0]
 8008c06:	681e      	ldr	r6, [r3, #0]
 8008c08:	6862      	ldr	r2, [r4, #4]
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7f7 fae7 	bl	80001e0 <memchr>
 8008c12:	b108      	cbz	r0, 8008c18 <_printf_i+0x1e4>
 8008c14:	1b80      	subs	r0, r0, r6
 8008c16:	6060      	str	r0, [r4, #4]
 8008c18:	6863      	ldr	r3, [r4, #4]
 8008c1a:	6123      	str	r3, [r4, #16]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c22:	e7aa      	b.n	8008b7a <_printf_i+0x146>
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	4632      	mov	r2, r6
 8008c28:	4649      	mov	r1, r9
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	47d0      	blx	sl
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d0ad      	beq.n	8008b8e <_printf_i+0x15a>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	079b      	lsls	r3, r3, #30
 8008c36:	d413      	bmi.n	8008c60 <_printf_i+0x22c>
 8008c38:	68e0      	ldr	r0, [r4, #12]
 8008c3a:	9b03      	ldr	r3, [sp, #12]
 8008c3c:	4298      	cmp	r0, r3
 8008c3e:	bfb8      	it	lt
 8008c40:	4618      	movlt	r0, r3
 8008c42:	e7a6      	b.n	8008b92 <_printf_i+0x15e>
 8008c44:	2301      	movs	r3, #1
 8008c46:	4632      	mov	r2, r6
 8008c48:	4649      	mov	r1, r9
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	47d0      	blx	sl
 8008c4e:	3001      	adds	r0, #1
 8008c50:	d09d      	beq.n	8008b8e <_printf_i+0x15a>
 8008c52:	3501      	adds	r5, #1
 8008c54:	68e3      	ldr	r3, [r4, #12]
 8008c56:	9903      	ldr	r1, [sp, #12]
 8008c58:	1a5b      	subs	r3, r3, r1
 8008c5a:	42ab      	cmp	r3, r5
 8008c5c:	dcf2      	bgt.n	8008c44 <_printf_i+0x210>
 8008c5e:	e7eb      	b.n	8008c38 <_printf_i+0x204>
 8008c60:	2500      	movs	r5, #0
 8008c62:	f104 0619 	add.w	r6, r4, #25
 8008c66:	e7f5      	b.n	8008c54 <_printf_i+0x220>
 8008c68:	08009675 	.word	0x08009675
 8008c6c:	08009686 	.word	0x08009686

08008c70 <__sflush_r>:
 8008c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c78:	0716      	lsls	r6, r2, #28
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	d454      	bmi.n	8008d2a <__sflush_r+0xba>
 8008c80:	684b      	ldr	r3, [r1, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc02      	bgt.n	8008c8c <__sflush_r+0x1c>
 8008c86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dd48      	ble.n	8008d1e <__sflush_r+0xae>
 8008c8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	d045      	beq.n	8008d1e <__sflush_r+0xae>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c98:	682f      	ldr	r7, [r5, #0]
 8008c9a:	6a21      	ldr	r1, [r4, #32]
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	d030      	beq.n	8008d02 <__sflush_r+0x92>
 8008ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	0759      	lsls	r1, r3, #29
 8008ca6:	d505      	bpl.n	8008cb4 <__sflush_r+0x44>
 8008ca8:	6863      	ldr	r3, [r4, #4]
 8008caa:	1ad2      	subs	r2, r2, r3
 8008cac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cae:	b10b      	cbz	r3, 8008cb4 <__sflush_r+0x44>
 8008cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cb2:	1ad2      	subs	r2, r2, r3
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cb8:	6a21      	ldr	r1, [r4, #32]
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b0      	blx	r6
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	d106      	bne.n	8008cd2 <__sflush_r+0x62>
 8008cc4:	6829      	ldr	r1, [r5, #0]
 8008cc6:	291d      	cmp	r1, #29
 8008cc8:	d82b      	bhi.n	8008d22 <__sflush_r+0xb2>
 8008cca:	4a2a      	ldr	r2, [pc, #168]	@ (8008d74 <__sflush_r+0x104>)
 8008ccc:	40ca      	lsrs	r2, r1
 8008cce:	07d6      	lsls	r6, r2, #31
 8008cd0:	d527      	bpl.n	8008d22 <__sflush_r+0xb2>
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	6062      	str	r2, [r4, #4]
 8008cd6:	04d9      	lsls	r1, r3, #19
 8008cd8:	6922      	ldr	r2, [r4, #16]
 8008cda:	6022      	str	r2, [r4, #0]
 8008cdc:	d504      	bpl.n	8008ce8 <__sflush_r+0x78>
 8008cde:	1c42      	adds	r2, r0, #1
 8008ce0:	d101      	bne.n	8008ce6 <__sflush_r+0x76>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b903      	cbnz	r3, 8008ce8 <__sflush_r+0x78>
 8008ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cea:	602f      	str	r7, [r5, #0]
 8008cec:	b1b9      	cbz	r1, 8008d1e <__sflush_r+0xae>
 8008cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	d002      	beq.n	8008cfc <__sflush_r+0x8c>
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f7ff fb4a 	bl	8008390 <_free_r>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d00:	e00d      	b.n	8008d1e <__sflush_r+0xae>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b0      	blx	r6
 8008d08:	4602      	mov	r2, r0
 8008d0a:	1c50      	adds	r0, r2, #1
 8008d0c:	d1c9      	bne.n	8008ca2 <__sflush_r+0x32>
 8008d0e:	682b      	ldr	r3, [r5, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0c6      	beq.n	8008ca2 <__sflush_r+0x32>
 8008d14:	2b1d      	cmp	r3, #29
 8008d16:	d001      	beq.n	8008d1c <__sflush_r+0xac>
 8008d18:	2b16      	cmp	r3, #22
 8008d1a:	d11e      	bne.n	8008d5a <__sflush_r+0xea>
 8008d1c:	602f      	str	r7, [r5, #0]
 8008d1e:	2000      	movs	r0, #0
 8008d20:	e022      	b.n	8008d68 <__sflush_r+0xf8>
 8008d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d26:	b21b      	sxth	r3, r3
 8008d28:	e01b      	b.n	8008d62 <__sflush_r+0xf2>
 8008d2a:	690f      	ldr	r7, [r1, #16]
 8008d2c:	2f00      	cmp	r7, #0
 8008d2e:	d0f6      	beq.n	8008d1e <__sflush_r+0xae>
 8008d30:	0793      	lsls	r3, r2, #30
 8008d32:	680e      	ldr	r6, [r1, #0]
 8008d34:	bf08      	it	eq
 8008d36:	694b      	ldreq	r3, [r1, #20]
 8008d38:	600f      	str	r7, [r1, #0]
 8008d3a:	bf18      	it	ne
 8008d3c:	2300      	movne	r3, #0
 8008d3e:	eba6 0807 	sub.w	r8, r6, r7
 8008d42:	608b      	str	r3, [r1, #8]
 8008d44:	f1b8 0f00 	cmp.w	r8, #0
 8008d48:	dde9      	ble.n	8008d1e <__sflush_r+0xae>
 8008d4a:	6a21      	ldr	r1, [r4, #32]
 8008d4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d4e:	4643      	mov	r3, r8
 8008d50:	463a      	mov	r2, r7
 8008d52:	4628      	mov	r0, r5
 8008d54:	47b0      	blx	r6
 8008d56:	2800      	cmp	r0, #0
 8008d58:	dc08      	bgt.n	8008d6c <__sflush_r+0xfc>
 8008d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6c:	4407      	add	r7, r0
 8008d6e:	eba8 0800 	sub.w	r8, r8, r0
 8008d72:	e7e7      	b.n	8008d44 <__sflush_r+0xd4>
 8008d74:	20400001 	.word	0x20400001

08008d78 <_fflush_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	690b      	ldr	r3, [r1, #16]
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	b913      	cbnz	r3, 8008d88 <_fflush_r+0x10>
 8008d82:	2500      	movs	r5, #0
 8008d84:	4628      	mov	r0, r5
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	b118      	cbz	r0, 8008d92 <_fflush_r+0x1a>
 8008d8a:	6a03      	ldr	r3, [r0, #32]
 8008d8c:	b90b      	cbnz	r3, 8008d92 <_fflush_r+0x1a>
 8008d8e:	f7ff f9c5 	bl	800811c <__sinit>
 8008d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0f3      	beq.n	8008d82 <_fflush_r+0xa>
 8008d9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d9c:	07d0      	lsls	r0, r2, #31
 8008d9e:	d404      	bmi.n	8008daa <_fflush_r+0x32>
 8008da0:	0599      	lsls	r1, r3, #22
 8008da2:	d402      	bmi.n	8008daa <_fflush_r+0x32>
 8008da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008da6:	f7ff faf0 	bl	800838a <__retarget_lock_acquire_recursive>
 8008daa:	4628      	mov	r0, r5
 8008dac:	4621      	mov	r1, r4
 8008dae:	f7ff ff5f 	bl	8008c70 <__sflush_r>
 8008db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008db4:	07da      	lsls	r2, r3, #31
 8008db6:	4605      	mov	r5, r0
 8008db8:	d4e4      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	059b      	lsls	r3, r3, #22
 8008dbe:	d4e1      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dc2:	f7ff fae3 	bl	800838c <__retarget_lock_release_recursive>
 8008dc6:	e7dd      	b.n	8008d84 <_fflush_r+0xc>

08008dc8 <__swbuf_r>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	460e      	mov	r6, r1
 8008dcc:	4614      	mov	r4, r2
 8008dce:	4605      	mov	r5, r0
 8008dd0:	b118      	cbz	r0, 8008dda <__swbuf_r+0x12>
 8008dd2:	6a03      	ldr	r3, [r0, #32]
 8008dd4:	b90b      	cbnz	r3, 8008dda <__swbuf_r+0x12>
 8008dd6:	f7ff f9a1 	bl	800811c <__sinit>
 8008dda:	69a3      	ldr	r3, [r4, #24]
 8008ddc:	60a3      	str	r3, [r4, #8]
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	071a      	lsls	r2, r3, #28
 8008de2:	d501      	bpl.n	8008de8 <__swbuf_r+0x20>
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	b943      	cbnz	r3, 8008dfa <__swbuf_r+0x32>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4628      	mov	r0, r5
 8008dec:	f000 f82a 	bl	8008e44 <__swsetup_r>
 8008df0:	b118      	cbz	r0, 8008dfa <__swbuf_r+0x32>
 8008df2:	f04f 37ff 	mov.w	r7, #4294967295
 8008df6:	4638      	mov	r0, r7
 8008df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	6922      	ldr	r2, [r4, #16]
 8008dfe:	1a98      	subs	r0, r3, r2
 8008e00:	6963      	ldr	r3, [r4, #20]
 8008e02:	b2f6      	uxtb	r6, r6
 8008e04:	4283      	cmp	r3, r0
 8008e06:	4637      	mov	r7, r6
 8008e08:	dc05      	bgt.n	8008e16 <__swbuf_r+0x4e>
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f7ff ffb3 	bl	8008d78 <_fflush_r>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d1ed      	bne.n	8008df2 <__swbuf_r+0x2a>
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	60a3      	str	r3, [r4, #8]
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	6022      	str	r2, [r4, #0]
 8008e22:	701e      	strb	r6, [r3, #0]
 8008e24:	6962      	ldr	r2, [r4, #20]
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d004      	beq.n	8008e36 <__swbuf_r+0x6e>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	07db      	lsls	r3, r3, #31
 8008e30:	d5e1      	bpl.n	8008df6 <__swbuf_r+0x2e>
 8008e32:	2e0a      	cmp	r6, #10
 8008e34:	d1df      	bne.n	8008df6 <__swbuf_r+0x2e>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f7ff ff9d 	bl	8008d78 <_fflush_r>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d0d9      	beq.n	8008df6 <__swbuf_r+0x2e>
 8008e42:	e7d6      	b.n	8008df2 <__swbuf_r+0x2a>

08008e44 <__swsetup_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4b29      	ldr	r3, [pc, #164]	@ (8008eec <__swsetup_r+0xa8>)
 8008e48:	4605      	mov	r5, r0
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	b118      	cbz	r0, 8008e58 <__swsetup_r+0x14>
 8008e50:	6a03      	ldr	r3, [r0, #32]
 8008e52:	b90b      	cbnz	r3, 8008e58 <__swsetup_r+0x14>
 8008e54:	f7ff f962 	bl	800811c <__sinit>
 8008e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5c:	0719      	lsls	r1, r3, #28
 8008e5e:	d422      	bmi.n	8008ea6 <__swsetup_r+0x62>
 8008e60:	06da      	lsls	r2, r3, #27
 8008e62:	d407      	bmi.n	8008e74 <__swsetup_r+0x30>
 8008e64:	2209      	movs	r2, #9
 8008e66:	602a      	str	r2, [r5, #0]
 8008e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	e033      	b.n	8008edc <__swsetup_r+0x98>
 8008e74:	0758      	lsls	r0, r3, #29
 8008e76:	d512      	bpl.n	8008e9e <__swsetup_r+0x5a>
 8008e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e7a:	b141      	cbz	r1, 8008e8e <__swsetup_r+0x4a>
 8008e7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e80:	4299      	cmp	r1, r3
 8008e82:	d002      	beq.n	8008e8a <__swsetup_r+0x46>
 8008e84:	4628      	mov	r0, r5
 8008e86:	f7ff fa83 	bl	8008390 <_free_r>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	2300      	movs	r3, #0
 8008e98:	6063      	str	r3, [r4, #4]
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f043 0308 	orr.w	r3, r3, #8
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	6923      	ldr	r3, [r4, #16]
 8008ea8:	b94b      	cbnz	r3, 8008ebe <__swsetup_r+0x7a>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eb4:	d003      	beq.n	8008ebe <__swsetup_r+0x7a>
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4628      	mov	r0, r5
 8008eba:	f000 f895 	bl	8008fe8 <__smakebuf_r>
 8008ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec2:	f013 0201 	ands.w	r2, r3, #1
 8008ec6:	d00a      	beq.n	8008ede <__swsetup_r+0x9a>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	60a2      	str	r2, [r4, #8]
 8008ecc:	6962      	ldr	r2, [r4, #20]
 8008ece:	4252      	negs	r2, r2
 8008ed0:	61a2      	str	r2, [r4, #24]
 8008ed2:	6922      	ldr	r2, [r4, #16]
 8008ed4:	b942      	cbnz	r2, 8008ee8 <__swsetup_r+0xa4>
 8008ed6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008eda:	d1c5      	bne.n	8008e68 <__swsetup_r+0x24>
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	0799      	lsls	r1, r3, #30
 8008ee0:	bf58      	it	pl
 8008ee2:	6962      	ldrpl	r2, [r4, #20]
 8008ee4:	60a2      	str	r2, [r4, #8]
 8008ee6:	e7f4      	b.n	8008ed2 <__swsetup_r+0x8e>
 8008ee8:	2000      	movs	r0, #0
 8008eea:	e7f7      	b.n	8008edc <__swsetup_r+0x98>
 8008eec:	20000018 	.word	0x20000018

08008ef0 <memmove>:
 8008ef0:	4288      	cmp	r0, r1
 8008ef2:	b510      	push	{r4, lr}
 8008ef4:	eb01 0402 	add.w	r4, r1, r2
 8008ef8:	d902      	bls.n	8008f00 <memmove+0x10>
 8008efa:	4284      	cmp	r4, r0
 8008efc:	4623      	mov	r3, r4
 8008efe:	d807      	bhi.n	8008f10 <memmove+0x20>
 8008f00:	1e43      	subs	r3, r0, #1
 8008f02:	42a1      	cmp	r1, r4
 8008f04:	d008      	beq.n	8008f18 <memmove+0x28>
 8008f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f0e:	e7f8      	b.n	8008f02 <memmove+0x12>
 8008f10:	4402      	add	r2, r0
 8008f12:	4601      	mov	r1, r0
 8008f14:	428a      	cmp	r2, r1
 8008f16:	d100      	bne.n	8008f1a <memmove+0x2a>
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f22:	e7f7      	b.n	8008f14 <memmove+0x24>

08008f24 <memcpy>:
 8008f24:	440a      	add	r2, r1
 8008f26:	4291      	cmp	r1, r2
 8008f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f2c:	d100      	bne.n	8008f30 <memcpy+0xc>
 8008f2e:	4770      	bx	lr
 8008f30:	b510      	push	{r4, lr}
 8008f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f3a:	4291      	cmp	r1, r2
 8008f3c:	d1f9      	bne.n	8008f32 <memcpy+0xe>
 8008f3e:	bd10      	pop	{r4, pc}

08008f40 <_realloc_r>:
 8008f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	4607      	mov	r7, r0
 8008f46:	4614      	mov	r4, r2
 8008f48:	460d      	mov	r5, r1
 8008f4a:	b921      	cbnz	r1, 8008f56 <_realloc_r+0x16>
 8008f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	4611      	mov	r1, r2
 8008f52:	f7fe bfcb 	b.w	8007eec <_malloc_r>
 8008f56:	b92a      	cbnz	r2, 8008f64 <_realloc_r+0x24>
 8008f58:	f7ff fa1a 	bl	8008390 <_free_r>
 8008f5c:	4625      	mov	r5, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f64:	f000 f89e 	bl	80090a4 <_malloc_usable_size_r>
 8008f68:	4284      	cmp	r4, r0
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	d802      	bhi.n	8008f74 <_realloc_r+0x34>
 8008f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f72:	d8f4      	bhi.n	8008f5e <_realloc_r+0x1e>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7fe ffb8 	bl	8007eec <_malloc_r>
 8008f7c:	4680      	mov	r8, r0
 8008f7e:	b908      	cbnz	r0, 8008f84 <_realloc_r+0x44>
 8008f80:	4645      	mov	r5, r8
 8008f82:	e7ec      	b.n	8008f5e <_realloc_r+0x1e>
 8008f84:	42b4      	cmp	r4, r6
 8008f86:	4622      	mov	r2, r4
 8008f88:	4629      	mov	r1, r5
 8008f8a:	bf28      	it	cs
 8008f8c:	4632      	movcs	r2, r6
 8008f8e:	f7ff ffc9 	bl	8008f24 <memcpy>
 8008f92:	4629      	mov	r1, r5
 8008f94:	4638      	mov	r0, r7
 8008f96:	f7ff f9fb 	bl	8008390 <_free_r>
 8008f9a:	e7f1      	b.n	8008f80 <_realloc_r+0x40>

08008f9c <__swhatbuf_r>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	b096      	sub	sp, #88	@ 0x58
 8008fa8:	4615      	mov	r5, r2
 8008faa:	461e      	mov	r6, r3
 8008fac:	da0d      	bge.n	8008fca <__swhatbuf_r+0x2e>
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fb4:	f04f 0100 	mov.w	r1, #0
 8008fb8:	bf14      	ite	ne
 8008fba:	2340      	movne	r3, #64	@ 0x40
 8008fbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	6031      	str	r1, [r6, #0]
 8008fc4:	602b      	str	r3, [r5, #0]
 8008fc6:	b016      	add	sp, #88	@ 0x58
 8008fc8:	bd70      	pop	{r4, r5, r6, pc}
 8008fca:	466a      	mov	r2, sp
 8008fcc:	f000 f848 	bl	8009060 <_fstat_r>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	dbec      	blt.n	8008fae <__swhatbuf_r+0x12>
 8008fd4:	9901      	ldr	r1, [sp, #4]
 8008fd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fde:	4259      	negs	r1, r3
 8008fe0:	4159      	adcs	r1, r3
 8008fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fe6:	e7eb      	b.n	8008fc0 <__swhatbuf_r+0x24>

08008fe8 <__smakebuf_r>:
 8008fe8:	898b      	ldrh	r3, [r1, #12]
 8008fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fec:	079d      	lsls	r5, r3, #30
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	d507      	bpl.n	8009004 <__smakebuf_r+0x1c>
 8008ff4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	6123      	str	r3, [r4, #16]
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	6163      	str	r3, [r4, #20]
 8009000:	b003      	add	sp, #12
 8009002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009004:	ab01      	add	r3, sp, #4
 8009006:	466a      	mov	r2, sp
 8009008:	f7ff ffc8 	bl	8008f9c <__swhatbuf_r>
 800900c:	9f00      	ldr	r7, [sp, #0]
 800900e:	4605      	mov	r5, r0
 8009010:	4639      	mov	r1, r7
 8009012:	4630      	mov	r0, r6
 8009014:	f7fe ff6a 	bl	8007eec <_malloc_r>
 8009018:	b948      	cbnz	r0, 800902e <__smakebuf_r+0x46>
 800901a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901e:	059a      	lsls	r2, r3, #22
 8009020:	d4ee      	bmi.n	8009000 <__smakebuf_r+0x18>
 8009022:	f023 0303 	bic.w	r3, r3, #3
 8009026:	f043 0302 	orr.w	r3, r3, #2
 800902a:	81a3      	strh	r3, [r4, #12]
 800902c:	e7e2      	b.n	8008ff4 <__smakebuf_r+0xc>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	6020      	str	r0, [r4, #0]
 8009032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	9b01      	ldr	r3, [sp, #4]
 800903a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800903e:	b15b      	cbz	r3, 8009058 <__smakebuf_r+0x70>
 8009040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009044:	4630      	mov	r0, r6
 8009046:	f000 f81d 	bl	8009084 <_isatty_r>
 800904a:	b128      	cbz	r0, 8009058 <__smakebuf_r+0x70>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f023 0303 	bic.w	r3, r3, #3
 8009052:	f043 0301 	orr.w	r3, r3, #1
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	431d      	orrs	r5, r3
 800905c:	81a5      	strh	r5, [r4, #12]
 800905e:	e7cf      	b.n	8009000 <__smakebuf_r+0x18>

08009060 <_fstat_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d07      	ldr	r5, [pc, #28]	@ (8009080 <_fstat_r+0x20>)
 8009064:	2300      	movs	r3, #0
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	4611      	mov	r1, r2
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	f7f8 ffaa 	bl	8001fc6 <_fstat>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	d102      	bne.n	800907c <_fstat_r+0x1c>
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	b103      	cbz	r3, 800907c <_fstat_r+0x1c>
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	bf00      	nop
 8009080:	20000440 	.word	0x20000440

08009084 <_isatty_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d06      	ldr	r5, [pc, #24]	@ (80090a0 <_isatty_r+0x1c>)
 8009088:	2300      	movs	r3, #0
 800908a:	4604      	mov	r4, r0
 800908c:	4608      	mov	r0, r1
 800908e:	602b      	str	r3, [r5, #0]
 8009090:	f7f8 ffa9 	bl	8001fe6 <_isatty>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_isatty_r+0x1a>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_isatty_r+0x1a>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	20000440 	.word	0x20000440

080090a4 <_malloc_usable_size_r>:
 80090a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a8:	1f18      	subs	r0, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bfbc      	itt	lt
 80090ae:	580b      	ldrlt	r3, [r1, r0]
 80090b0:	18c0      	addlt	r0, r0, r3
 80090b2:	4770      	bx	lr

080090b4 <_init>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	bf00      	nop
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr

080090c0 <_fini>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr
