
projekt_ARM_budzik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08008264  08008264  00009264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008804  08008804  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008804  08008804  00009804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800880c  0800880c  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800880c  0800880c  0000980c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008810  08008810  00009810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008814  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000068  0800887c  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  0800887c  0000a390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010af9  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6a  00000000  00000000  0001ab91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  0001db00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d00  00000000  00000000  0001ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195fb  00000000  00000000  0001f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016110  00000000  00000000  00038edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ee1  00000000  00000000  0004efeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e7c  00000000  00000000  000e5f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ead8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800824c 	.word	0x0800824c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800824c 	.word	0x0800824c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4604      	mov	r4, r0
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4623      	mov	r3, r4
 80005bc:	80fb      	strh	r3, [r7, #6]
 80005be:	4603      	mov	r3, r0
 80005c0:	80bb      	strh	r3, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	70fb      	strb	r3, [r7, #3]
 80005c6:	4613      	mov	r3, r2
 80005c8:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 80005ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80005d0:	f300 8100 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80005da:	f300 80fb 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005de:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80005e2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	440b      	add	r3, r1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f340 80ef 	ble.w	80007d4 <GFX_draw_char+0x228>
 80005f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	4413      	add	r3, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	f340 80e6 	ble.w	80007d4 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e0aa      	b.n	8000764 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	441a      	add	r2, r3
 8000616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061a:	4413      	add	r3, r2
 800061c:	4a6f      	ldr	r2, [pc, #444]	@ (80007dc <GFX_draw_char+0x230>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000622:	2307      	movs	r3, #7
 8000624:	73bb      	strb	r3, [r7, #14]
 8000626:	e092      	b.n	800074e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d040      	beq.n	80006b4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000632:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000636:	2b01      	cmp	r3, #1
 8000638:	d116      	bne.n	8000668 <GFX_draw_char+0xbc>
 800063a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800063e:	2b01      	cmp	r3, #1
 8000640:	d112      	bne.n	8000668 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000646:	b29a      	uxth	r2, r3
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4413      	add	r3, r2
 800064c:	b29b      	uxth	r3, r3
 800064e:	b218      	sxth	r0, r3
 8000650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000654:	b29a      	uxth	r2, r3
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	b29b      	uxth	r3, r3
 800065c:	b21b      	sxth	r3, r3
 800065e:	883a      	ldrh	r2, [r7, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f000 f9f7 	bl	8000a54 <SSD1306_draw_pixel>
 8000666:	e069      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066c:	b29a      	uxth	r2, r3
 800066e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000672:	b29b      	uxth	r3, r3
 8000674:	fb12 f303 	smulbb	r3, r2, r3
 8000678:	b29a      	uxth	r2, r3
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	b218      	sxth	r0, r3
 8000682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000686:	b29a      	uxth	r2, r3
 8000688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800068c:	b29b      	uxth	r3, r3
 800068e:	fb12 f303 	smulbb	r3, r2, r3
 8000692:	b29a      	uxth	r2, r3
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	b29b      	uxth	r3, r3
 800069a:	b219      	sxth	r1, r3
 800069c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006a6:	b21c      	sxth	r4, r3
 80006a8:	883b      	ldrh	r3, [r7, #0]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4623      	mov	r3, r4
 80006ae:	f000 f8d0 	bl	8000852 <GFX_draw_fill_rect>
 80006b2:	e043      	b.n	800073c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 80006b4:	8c3a      	ldrh	r2, [r7, #32]
 80006b6:	883b      	ldrh	r3, [r7, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d03f      	beq.n	800073c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 80006bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d116      	bne.n	80006f2 <GFX_draw_char+0x146>
 80006c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d112      	bne.n	80006f2 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80006cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b218      	sxth	r0, r3
 80006da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	88bb      	ldrh	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	8c3a      	ldrh	r2, [r7, #32]
 80006ea:	4619      	mov	r1, r3
 80006ec:	f000 f9b2 	bl	8000a54 <SSD1306_draw_pixel>
 80006f0:	e024      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80006f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	fb12 f303 	smulbb	r3, r2, r3
 8000702:	b29a      	uxth	r2, r3
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4413      	add	r3, r2
 8000708:	b29b      	uxth	r3, r3
 800070a:	b218      	sxth	r0, r3
 800070c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000710:	b29a      	uxth	r2, r3
 8000712:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000716:	b29b      	uxth	r3, r3
 8000718:	fb12 f303 	smulbb	r3, r2, r3
 800071c:	b29a      	uxth	r2, r3
 800071e:	88bb      	ldrh	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	b219      	sxth	r1, r3
 8000726:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800072a:	b21a      	sxth	r2, r3
 800072c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000730:	b21c      	sxth	r4, r3
 8000732:	8c3b      	ldrh	r3, [r7, #32]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	4623      	mov	r3, r4
 8000738:	f000 f88b 	bl	8000852 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800073c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	73bb      	strb	r3, [r7, #14]
 8000748:	7b7b      	ldrb	r3, [r7, #13]
 800074a:	085b      	lsrs	r3, r3, #1
 800074c:	737b      	strb	r3, [r7, #13]
 800074e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000752:	2b00      	cmp	r3, #0
 8000754:	f6bf af68 	bge.w	8000628 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000768:	2b04      	cmp	r3, #4
 800076a:	f77f af50 	ble.w	800060e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800076e:	8c3a      	ldrh	r2, [r7, #32]
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d02f      	beq.n	80007d6 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000776:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10e      	bne.n	800079c <GFX_draw_char+0x1f0>
 800077e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10a      	bne.n	800079c <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	3305      	adds	r3, #5
 800078a:	b29b      	uxth	r3, r3
 800078c:	b218      	sxth	r0, r3
 800078e:	8c3b      	ldrh	r3, [r7, #32]
 8000790:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000794:	2208      	movs	r2, #8
 8000796:	f000 fad3 	bl	8000d40 <SSD1306_draw_fast_vline>
 800079a:	e01c      	b.n	80007d6 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800079c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	0092      	lsls	r2, r2, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	4413      	add	r3, r2
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	b218      	sxth	r0, r3
 80007b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007bc:	b29b      	uxth	r3, r3
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b21c      	sxth	r4, r3
 80007c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007c8:	8c3b      	ldrh	r3, [r7, #32]
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4623      	mov	r3, r4
 80007ce:	f000 f840 	bl	8000852 <GFX_draw_fill_rect>
 80007d2:	e000      	b.n	80007d6 <GFX_draw_char+0x22a>
		return;
 80007d4:	bf00      	nop
		}
	}
}
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	080082a0 	.word	0x080082a0

080007e0 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af04      	add	r7, sp, #16
 80007e6:	60ba      	str	r2, [r7, #8]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	81fb      	strh	r3, [r7, #14]
 80007ee:	460b      	mov	r3, r1
 80007f0:	81bb      	strh	r3, [r7, #12]
 80007f2:	4613      	mov	r3, r2
 80007f4:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]
	while(*c)
 80007fa:	e021      	b.n	8000840 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	4413      	add	r3, r2
 8000804:	b29b      	uxth	r3, r3
 8000806:	b218      	sxth	r0, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	88fc      	ldrh	r4, [r7, #6]
 800080e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000812:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4623      	mov	r3, r4
 8000824:	f7ff fec2 	bl	80005ac <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000828:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800082c:	461a      	mov	r2, r3
 800082e:	00d2      	lsls	r2, r2, #3
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b2da      	uxtb	r2, r3
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	4413      	add	r3, r2
 8000838:	75fb      	strb	r3, [r7, #23]
		c++;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3301      	adds	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1d9      	bne.n	80007fc <GFX_draw_string+0x1c>
	}
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	371c      	adds	r7, #28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}

08000852 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000852:	b590      	push	{r4, r7, lr}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	4604      	mov	r4, r0
 800085a:	4608      	mov	r0, r1
 800085c:	4611      	mov	r1, r2
 800085e:	461a      	mov	r2, r3
 8000860:	4623      	mov	r3, r4
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4603      	mov	r3, r0
 8000866:	80bb      	strh	r3, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
 800086c:	4613      	mov	r3, r2
 800086e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	e00e      	b.n	8000894 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000876:	8c3b      	ldrh	r3, [r7, #32]
 8000878:	f9b7 2000 	ldrsh.w	r2, [r7]
 800087c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000880:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000884:	f000 fa5c 	bl	8000d40 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8000888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088c:	b29b      	uxth	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b29b      	uxth	r3, r3
 8000892:	81fb      	strh	r3, [r7, #14]
 8000894:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000898:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800089c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a0:	440b      	add	r3, r1
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbe7      	blt.n	8000876 <GFX_draw_fill_rect+0x24>
	}
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af04      	add	r7, sp, #16
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	2178      	movs	r1, #120	@ 0x78
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <platform_write+0x34>)
 80008d6:	f002 fb6b 	bl	8002fb0 <HAL_I2C_Mem_Write>
	return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000008c 	.word	0x2000008c

080008e8 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	88bb      	ldrh	r3, [r7, #4]
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	2178      	movs	r1, #120	@ 0x78
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <platform_write_dma+0x30>)
 800090a:	f002 fc4b 	bl	80031a4 <HAL_I2C_Mem_Write_DMA>
	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000008c 	.word	0x2000008c

0800091c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ffbf 	bl	80008b0 <platform_write>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <SSD1306_init>:

bool SSD1306_init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8000942:	2302      	movs	r3, #2
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	238f      	movs	r3, #143	@ 0x8f
 8000948:	71bb      	strb	r3, [r7, #6]
 800094a:	2302      	movs	r3, #2
 800094c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800094e:	4b40      	ldr	r3, [pc, #256]	@ (8000a50 <SSD1306_init+0x114>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10d      	bne.n	8000972 <SSD1306_init+0x36>
 8000956:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800095a:	f006 fb69 	bl	8007030 <malloc>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b3b      	ldr	r3, [pc, #236]	@ (8000a50 <SSD1306_init+0x114>)
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	4b3a      	ldr	r3, [pc, #232]	@ (8000a50 <SSD1306_init+0x114>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <SSD1306_init+0x36>
  {
    return false;
 800096e:	2300      	movs	r3, #0
 8000970:	e06a      	b.n	8000a48 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 8000972:	f000 f947 	bl	8000c04 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000976:	20ae      	movs	r0, #174	@ 0xae
 8000978:	f7ff ffd0 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 800097c:	20d5      	movs	r0, #213	@ 0xd5
 800097e:	f7ff ffcd 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 8000982:	20e0      	movs	r0, #224	@ 0xe0
 8000984:	f7ff ffca 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8000988:	20a8      	movs	r0, #168	@ 0xa8
 800098a:	f7ff ffc7 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 800098e:	203f      	movs	r0, #63	@ 0x3f
 8000990:	f7ff ffc4 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 8000994:	20d3      	movs	r0, #211	@ 0xd3
 8000996:	f7ff ffc1 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ffbe 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80009a0:	2040      	movs	r0, #64	@ 0x40
 80009a2:	f7ff ffbb 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80009a6:	208d      	movs	r0, #141	@ 0x8d
 80009a8:	f7ff ffb8 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80009ac:	797b      	ldrb	r3, [r7, #5]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d101      	bne.n	80009b6 <SSD1306_init+0x7a>
 80009b2:	2310      	movs	r3, #16
 80009b4:	e000      	b.n	80009b8 <SSD1306_init+0x7c>
 80009b6:	2314      	movs	r3, #20
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffaf 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80009be:	2020      	movs	r0, #32
 80009c0:	f7ff ffac 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff ffa9 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80009ca:	20b0      	movs	r0, #176	@ 0xb0
 80009cc:	f7ff ffa6 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80009d0:	20c8      	movs	r0, #200	@ 0xc8
 80009d2:	f7ff ffa3 	bl	800091c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80009d6:	2312      	movs	r3, #18
 80009d8:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80009da:	797b      	ldrb	r3, [r7, #5]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d101      	bne.n	80009e4 <SSD1306_init+0xa8>
 80009e0:	239f      	movs	r3, #159	@ 0x9f
 80009e2:	e000      	b.n	80009e6 <SSD1306_init+0xaa>
 80009e4:	23cf      	movs	r3, #207	@ 0xcf
 80009e6:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 80009e8:	20da      	movs	r0, #218	@ 0xda
 80009ea:	f7ff ff97 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff93 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 80009f6:	2081      	movs	r0, #129	@ 0x81
 80009f8:	f7ff ff90 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff8c 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000a04:	20d9      	movs	r0, #217	@ 0xd9
 8000a06:	f7ff ff89 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000a0a:	797b      	ldrb	r3, [r7, #5]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <SSD1306_init+0xd8>
 8000a10:	2322      	movs	r3, #34	@ 0x22
 8000a12:	e000      	b.n	8000a16 <SSD1306_init+0xda>
 8000a14:	23f1      	movs	r3, #241	@ 0xf1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff80 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8000a1c:	20db      	movs	r0, #219	@ 0xdb
 8000a1e:	f7ff ff7d 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8000a22:	2040      	movs	r0, #64	@ 0x40
 8000a24:	f7ff ff7a 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000a28:	20a4      	movs	r0, #164	@ 0xa4
 8000a2a:	f7ff ff77 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8000a2e:	20a6      	movs	r0, #166	@ 0xa6
 8000a30:	f7ff ff74 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000a34:	202e      	movs	r0, #46	@ 0x2e
 8000a36:	f7ff ff71 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8000a3a:	20af      	movs	r0, #175	@ 0xaf
 8000a3c:	f7ff ff6e 	bl	800091c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fb17 	bl	8001074 <SSD1306_set_rotation>
  return true;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000084 	.word	0x20000084

08000a54 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8000a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f2c0 80c4 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a76:	f300 80bf 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f2c0 80ba 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a88:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a8a:	f300 80b5 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 8000a8e:	f000 fb01 	bl	8001094 <SSD1306_get_rotation>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d023      	beq.n	8000ae0 <SSD1306_draw_pixel+0x8c>
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	dc33      	bgt.n	8000b04 <SSD1306_draw_pixel+0xb0>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d002      	beq.n	8000aa6 <SSD1306_draw_pixel+0x52>
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d012      	beq.n	8000aca <SSD1306_draw_pixel+0x76>
 8000aa4:	e02e      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	4053      	eors	r3, r2
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	80bb      	strh	r3, [r7, #4]
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	4053      	eors	r3, r2
 8000abc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	80fb      	strh	r3, [r7, #6]
				break;
 8000ac8:	e01c      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	80bb      	strh	r3, [r7, #4]
				break;
 8000ade:	e011      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	4053      	eors	r3, r2
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4053      	eors	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
 8000af0:	88fa      	ldrh	r2, [r7, #6]
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	4053      	eors	r3, r2
 8000af6:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	80bb      	strh	r3, [r7, #4]
				break;
 8000b02:	bf00      	nop
		}

		switch (color)
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d051      	beq.n	8000bae <SSD1306_draw_pixel+0x15a>
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	dc74      	bgt.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d026      	beq.n	8000b60 <SSD1306_draw_pixel+0x10c>
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d170      	bne.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8000b16:	4b3a      	ldr	r3, [pc, #232]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da00      	bge.n	8000b28 <SSD1306_draw_pixel+0xd4>
 8000b26:	3307      	adds	r3, #7
 8000b28:	10db      	asrs	r3, r3, #3
 8000b2a:	b218      	sxth	r0, r3
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	440b      	add	r3, r1
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b25c      	sxtb	r4, r3
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b52:	4602      	mov	r2, r0
 8000b54:	01d2      	lsls	r2, r2, #7
 8000b56:	440a      	add	r2, r1
 8000b58:	4413      	add	r3, r2
 8000b5a:	b2e2      	uxtb	r2, r4
 8000b5c:	701a      	strb	r2, [r3, #0]
				break;
 8000b5e:	e04b      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8000b60:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <SSD1306_draw_pixel+0x11e>
 8000b70:	3307      	adds	r3, #7
 8000b72:	10db      	asrs	r3, r3, #3
 8000b74:	b218      	sxth	r0, r3
 8000b76:	4603      	mov	r3, r0
 8000b78:	01db      	lsls	r3, r3, #7
 8000b7a:	440b      	add	r3, r1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	4013      	ands	r3, r2
 8000b96:	b25c      	sxtb	r4, r3
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	01d2      	lsls	r2, r2, #7
 8000ba4:	440a      	add	r2, r1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2e2      	uxtb	r2, r4
 8000baa:	701a      	strb	r2, [r3, #0]
				break;
 8000bac:	e024      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da00      	bge.n	8000bc0 <SSD1306_draw_pixel+0x16c>
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	10db      	asrs	r3, r3, #3
 8000bc2:	b218      	sxth	r0, r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	440b      	add	r3, r1
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	4053      	eors	r3, r2
 8000be0:	b25c      	sxtb	r4, r3
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bea:	4602      	mov	r2, r0
 8000bec:	01d2      	lsls	r2, r2, #7
 8000bee:	440a      	add	r2, r1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2e2      	uxtb	r2, r4
 8000bf4:	701a      	strb	r2, [r3, #0]
				break;
 8000bf6:	bf00      	nop
		}
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	20000084 	.word	0x20000084

08000c04 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <SSD1306_display_clear+0x18>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f006 fbfb 	bl	800740e <memset>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000084 	.word	0x20000084

08000c20 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000c20:	b490      	push	{r4, r7}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4604      	mov	r4, r0
 8000c28:	4608      	mov	r0, r1
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4623      	mov	r3, r4
 8000c30:	80fb      	strh	r3, [r7, #6]
 8000c32:	4603      	mov	r3, r0
 8000c34:	80bb      	strh	r3, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8000c3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db75      	blt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c4c:	dc71      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8000c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da06      	bge.n	8000c64 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	807b      	strh	r3, [r7, #2]
			x = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8000c64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2b80      	cmp	r3, #128	@ 0x80
 8000c70:	dd04      	ble.n	8000c7c <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8000c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dd56      	ble.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <SSD1306_draw_fast_hline_internal+0x11c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da00      	bge.n	8000c92 <SSD1306_draw_fast_hline_internal+0x72>
 8000c90:	3307      	adds	r3, #7
 8000c92:	10db      	asrs	r3, r3, #3
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	01d9      	lsls	r1, r3, #7
 8000c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8000cb0:	883b      	ldrh	r3, [r7, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d034      	beq.n	8000d20 <SSD1306_draw_fast_hline_internal+0x100>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	dc3b      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d013      	beq.n	8000ce6 <SSD1306_draw_fast_hline_internal+0xc6>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d137      	bne.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
			{
				case SSD1306_WHITE:
					while (w--)
 8000cc2:	e007      	b.n	8000cd4 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60fa      	str	r2, [r7, #12]
 8000cca:	7819      	ldrb	r1, [r3, #0]
 8000ccc:	7afa      	ldrb	r2, [r7, #11]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	3a01      	subs	r2, #1
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	807a      	strh	r2, [r7, #2]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1ef      	bne.n	8000cc4 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000ce4:	e025      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_BLACK:
					mask = ~mask;
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000cec:	e007      	b.n	8000cfe <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60fa      	str	r2, [r7, #12]
 8000cf4:	7819      	ldrb	r1, [r3, #0]
 8000cf6:	7afa      	ldrb	r2, [r7, #11]
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	3a01      	subs	r2, #1
 8000d06:	b292      	uxth	r2, r2
 8000d08:	807a      	strh	r2, [r7, #2]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1ef      	bne.n	8000cee <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8000d0e:	e010      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60fa      	str	r2, [r7, #12]
 8000d16:	7819      	ldrb	r1, [r3, #0]
 8000d18:	7afa      	ldrb	r2, [r7, #11]
 8000d1a:	404a      	eors	r2, r1
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	3a01      	subs	r2, #1
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	807a      	strh	r2, [r7, #2]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ef      	bne.n	8000d10 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8000d30:	bf00      	nop
			}
		}
	}
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc90      	pop	{r4, r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000084 	.word	0x20000084

08000d40 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4604      	mov	r4, r0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4623      	mov	r3, r4
 8000d50:	80fb      	strh	r3, [r7, #6]
 8000d52:	4603      	mov	r3, r0
 8000d54:	80bb      	strh	r3, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8000d62:	f000 f997 	bl	8001094 <SSD1306_get_rotation>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d033      	beq.n	8000dd4 <SSD1306_draw_fast_vline+0x94>
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	dc45      	bgt.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d002      	beq.n	8000d7a <SSD1306_draw_fast_vline+0x3a>
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d01b      	beq.n	8000db0 <SSD1306_draw_fast_vline+0x70>
 8000d78:	e040      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8000d7e:	88fa      	ldrh	r2, [r7, #6]
 8000d80:	88bb      	ldrh	r3, [r7, #4]
 8000d82:	4053      	eors	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	88ba      	ldrh	r2, [r7, #4]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4053      	eors	r3, r2
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	88fa      	ldrh	r2, [r7, #6]
 8000d90:	88bb      	ldrh	r3, [r7, #4]
 8000d92:	4053      	eors	r3, r2
 8000d94:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	80fb      	strh	r3, [r7, #6]
  			break;
 8000dae:	e025      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000dba:	88bb      	ldrh	r3, [r7, #4]
 8000dbc:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dd2:	e013      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000dd8:	88fa      	ldrh	r2, [r7, #6]
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	4053      	eors	r3, r2
 8000dde:	80fb      	strh	r3, [r7, #6]
 8000de0:	88ba      	ldrh	r2, [r7, #4]
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	4053      	eors	r3, r2
 8000de6:	80bb      	strh	r3, [r7, #4]
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	4053      	eors	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dfa:	bf00      	nop
	}

	if (bSwap)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d009      	beq.n	8000e16 <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8000e02:	883b      	ldrh	r3, [r7, #0]
 8000e04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e10:	f7ff ff06 	bl	8000c20 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8000e14:	e008      	b.n	8000e28 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e24:	f000 f804 	bl	8000e30 <SSD1306_draw_fast_vline_internal>
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}

08000e30 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f2c0 80dc 	blt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5e:	f300 80d7 	bgt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
	{
		// X coord in bounds?
		if (__y < 0)
 8000e62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da06      	bge.n	8000e78 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000e78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e80:	4413      	add	r3, r2
 8000e82:	2b40      	cmp	r3, #64	@ 0x40
 8000e84:	dd04      	ble.n	8000e90 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000e90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f340 80bb 	ble.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	737b      	strb	r3, [r7, #13]
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800101c <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	7b7a      	ldrb	r2, [r7, #13]
 8000ea8:	08d2      	lsrs	r2, r2, #3
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	01d1      	lsls	r1, r2, #7
 8000eae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000eb2:	440a      	add	r2, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d041      	beq.n	8000f4a <SSD1306_draw_fast_vline_internal+0x11a>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f1c3 0308 	rsb	r3, r3, #8
 8000ecc:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4a53      	ldr	r2, [pc, #332]	@ (8001020 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000ed8:	7dfa      	ldrb	r2, [r7, #23]
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d20b      	bcs.n	8000ef8 <SSD1306_draw_fast_vline_internal+0xc8>
				{
					mask &= (0XFF >> (mod - h));
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	22ff      	movs	r2, #255	@ 0xff
 8000ee8:	fa42 f303 	asr.w	r3, r2, r3
 8000eec:	b25a      	sxtb	r2, r3
 8000eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d01a      	beq.n	8000f34 <SSD1306_draw_fast_vline_internal+0x104>
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	dc20      	bgt.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d009      	beq.n	8000f1a <SSD1306_draw_fast_vline_internal+0xea>
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d11c      	bne.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	701a      	strb	r2, [r3, #0]
						break;
 8000f18:	e014      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	701a      	strb	r2, [r3, #0]
						break;
 8000f32:	e007      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	701a      	strb	r2, [r3, #0]
						break;
 8000f42:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	3380      	adds	r3, #128	@ 0x80
 8000f48:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000f4a:	7dfa      	ldrb	r2, [r7, #23]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d35e      	bcc.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
			{
				// More to go?
				h -= mod;
 8000f52:	7dfa      	ldrb	r2, [r7, #23]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	d925      	bls.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
				{
					if (color == SSD1306_INVERSE)
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d10f      	bne.n	8000f86 <SSD1306_draw_fast_vline_internal+0x156>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3380      	adds	r3, #128	@ 0x80
 8000f76:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d8f0      	bhi.n	8000f66 <SSD1306_draw_fast_vline_internal+0x136>
 8000f84:	e012      	b.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000f86:	883b      	ldrh	r3, [r7, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SSD1306_draw_fast_vline_internal+0x160>
 8000f8c:	23ff      	movs	r3, #255	@ 0xff
 8000f8e:	e000      	b.n	8000f92 <SSD1306_draw_fast_vline_internal+0x162>
 8000f90:	2300      	movs	r3, #0
 8000f92:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	7b3a      	ldrb	r2, [r7, #12]
 8000f98:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3380      	adds	r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	3b08      	subs	r3, #8
 8000fa4:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d8f3      	bhi.n	8000f94 <SSD1306_draw_fast_vline_internal+0x164>
					}
				}

				if (h)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d02e      	beq.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <SSD1306_draw_fast_vline_internal+0x1f4>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000fc4:	883b      	ldrh	r3, [r7, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d01a      	beq.n	8001000 <SSD1306_draw_fast_vline_internal+0x1d0>
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	dc20      	bgt.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <SSD1306_draw_fast_vline_internal+0x1b6>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d11c      	bne.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	701a      	strb	r2, [r3, #0]
							break;
 8000fe4:	e014      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25a      	sxtb	r2, r3
 8000fec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	701a      	strb	r2, [r3, #0]
							break;
 8000ffe:	e007      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	4053      	eors	r3, r2
 8001008:	b2da      	uxtb	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	701a      	strb	r2, [r3, #0]
							break;
 800100e:	bf00      	nop
					}
				}
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bc90      	pop	{r4, r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000084 	.word	0x20000084
 8001020:	080087a0 	.word	0x080087a0
 8001024:	080087a8 	.word	0x080087a8

08001028 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 800102e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001032:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001034:	2022      	movs	r0, #34	@ 0x22
 8001036:	f7ff fc71 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc6e 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001040:	20ff      	movs	r0, #255	@ 0xff
 8001042:	f7ff fc6b 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8001046:	2021      	movs	r0, #33	@ 0x21
 8001048:	f7ff fc68 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fc65 	bl	800091c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001052:	207f      	movs	r0, #127	@ 0x7f
 8001054:	f7ff fc62 	bl	800091c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SSD1306_display_repaint+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	88fa      	ldrh	r2, [r7, #6]
 800105e:	4619      	mov	r1, r3
 8001060:	2040      	movs	r0, #64	@ 0x40
 8001062:	f7ff fc41 	bl	80008e8 <platform_write_dma>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000084 	.word	0x20000084

08001074 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 800107e:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <SSD1306_set_rotation+0x1c>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	7013      	strb	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000088 	.word	0x20000088

08001094 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return rotation;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <SSD1306_get_rotation+0x14>)
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000088 	.word	0x20000088

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_DMA_Init+0x3c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <MX_DMA_Init+0x3c>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_DMA_Init+0x3c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200c      	movs	r0, #12
 80010d4:	f001 f85f 	bl	8002196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010d8:	200c      	movs	r0, #12
 80010da:	f001 f878 	bl	80021ce <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a38      	ldr	r2, [pc, #224]	@ (80011ec <MX_GPIO_Init+0x100>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a31      	ldr	r2, [pc, #196]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a2a      	ldr	r2, [pc, #168]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <MX_GPIO_Init+0x100>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <MX_GPIO_Init+0x100>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <MX_GPIO_Init+0x100>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_GPIO_Init+0x100>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001194:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <MX_GPIO_Init+0x104>)
 8001196:	f001 fd65 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC1_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENC1_BUTTON_Pin;
 800119a:	2301      	movs	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC1_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <MX_GPIO_Init+0x108>)
 80011b0:	f001 fbd4 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80011b4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4808      	ldr	r0, [pc, #32]	@ (80011f0 <MX_GPIO_Init+0x104>)
 80011ce:	f001 fbc5 	bl	800295c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2006      	movs	r0, #6
 80011d8:	f000 ffdd 	bl	8002196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011dc:	2006      	movs	r0, #6
 80011de:	f000 fff6 	bl	80021ce <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	@ 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40020800 	.word	0x40020800

080011f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <MX_I2C1_Init+0x50>)
 80011fe:	4a13      	ldr	r2, [pc, #76]	@ (800124c <MX_I2C1_Init+0x54>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001204:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <MX_I2C1_Init+0x58>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001216:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800121a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_I2C1_Init+0x50>)
 8001236:	f001 fd61 	bl	8002cfc <HAL_I2C_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001240:	f000 fa62 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000008c 	.word	0x2000008c
 800124c:	40005400 	.word	0x40005400
 8001250:	00061a80 	.word	0x00061a80

08001254 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a34      	ldr	r2, [pc, #208]	@ (8001344 <HAL_I2C_MspInit+0xf0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d161      	bne.n	800133a <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a32      	ldr	r2, [pc, #200]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_I2C_SCL_Pin|OLED_I2C_SDA_Pin;
 8001292:	23c0      	movs	r3, #192	@ 0xc0
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001296:	2312      	movs	r3, #18
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a2:	2304      	movs	r3, #4
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4827      	ldr	r0, [pc, #156]	@ (800134c <HAL_I2C_MspInit+0xf8>)
 80012ae:	f001 fb55 	bl	800295c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_I2C_MspInit+0xf4>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012d0:	4a20      	ldr	r2, [pc, #128]	@ (8001354 <HAL_I2C_MspInit+0x100>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012da:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012dc:	2240      	movs	r2, #64	@ 0x40
 80012de:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 8001302:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001306:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800130e:	4810      	ldr	r0, [pc, #64]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 8001310:	f000 ff78 	bl	8002204 <HAL_DMA_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800131a:	f000 f9f5 	bl	8001708 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 8001322:	635a      	str	r2, [r3, #52]	@ 0x34
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_I2C_MspInit+0xfc>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201f      	movs	r0, #31
 8001330:	f000 ff31 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001334:	201f      	movs	r0, #31
 8001336:	f000 ff4a 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40005400 	.word	0x40005400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400
 8001350:	200000e0 	.word	0x200000e0
 8001354:	40026028 	.word	0x40026028

08001358 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001360:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001364:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001370:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001374:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001378:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001380:	e000      	b.n	8001384 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001382:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001384:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f9      	beq.n	8001382 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800138e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffd1 	bl	8001358 <ITM_SendChar>
	return ch;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c6:	f000 fd99 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ca:	f000 f815 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ce:	f7ff fe8d 	bl	80010ec <MX_GPIO_Init>
  MX_DMA_Init();
 80013d2:	f7ff fe6b 	bl	80010ac <MX_DMA_Init>
  MX_I2C1_Init();
 80013d6:	f7ff ff0f 	bl	80011f8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80013da:	f000 fbf9 	bl	8001bd0 <MX_TIM1_Init>
  MX_RTC_Init();
 80013de:	f000 f9bf 	bl	8001760 <MX_RTC_Init>
  MX_TIM3_Init();
 80013e2:	f000 fc51 	bl	8001c88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  OLED_init();
 80013e6:	f000 f995 	bl	8001714 <OLED_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ENCODER1_update();
 80013ea:	f000 f91d 	bl	8001628 <ENCODER1_update>
	  OLED_update_time();
 80013ee:	f000 f863 	bl	80014b8 <OLED_update_time>
	  ENCODER1_update();
 80013f2:	bf00      	nop
 80013f4:	e7f9      	b.n	80013ea <main+0x2a>
	...

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	@ 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2230      	movs	r2, #48	@ 0x30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f006 f801 	bl	800740e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <SystemClock_Config+0xb8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a22      	ldr	r2, [pc, #136]	@ (80014b0 <SystemClock_Config+0xb8>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <SystemClock_Config+0xb8>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <SystemClock_Config+0xbc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1c      	ldr	r2, [pc, #112]	@ (80014b4 <SystemClock_Config+0xbc>)
 8001442:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <SystemClock_Config+0xbc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001454:	230a      	movs	r3, #10
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001458:	2301      	movs	r3, #1
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145c:	2310      	movs	r3, #16
 800145e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001460:	2301      	movs	r3, #1
 8001462:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f003 ff5f 	bl	8005330 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001478:	f000 f946 	bl	8001708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f004 f9c2 	bl	8005820 <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014a2:	f000 f931 	bl	8001708 <Error_Handler>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3750      	adds	r7, #80	@ 0x50
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <OLED_update_time>:

/* USER CODE BEGIN 4 */

void OLED_update_time(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

    OLED_print("Ustaw godzin\313", 0, OLED_ROW_1, 1);
 80014bc:	2301      	movs	r3, #1
 80014be:	2238      	movs	r2, #56	@ 0x38
 80014c0:	2100      	movs	r1, #0
 80014c2:	484b      	ldr	r0, [pc, #300]	@ (80015f0 <OLED_update_time+0x138>)
 80014c4:	f000 f92c 	bl	8001720 <OLED_print>

    if(selection_mode != SELECTION_NONE) {
 80014c8:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <OLED_update_time+0x13c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d055      	beq.n	800157c <OLED_update_time+0xc4>

    	if(selection_mode == SELECTION_HOUR) {
 80014d0:	4b48      	ldr	r3, [pc, #288]	@ (80015f4 <OLED_update_time+0x13c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d128      	bne.n	800152a <OLED_update_time+0x72>

    		if(cursor_cnt < 60) {
 80014d8:	4b47      	ldr	r3, [pc, #284]	@ (80015f8 <OLED_update_time+0x140>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	2b3b      	cmp	r3, #59	@ 0x3b
 80014de:	d80f      	bhi.n	8001500 <OLED_update_time+0x48>
    			sprintf(time_hour_str, "%s%d", selected_hour < 10 ? "0" : "", selected_hour);
 80014e0:	4b46      	ldr	r3, [pc, #280]	@ (80015fc <OLED_update_time+0x144>)
 80014e2:	f993 3000 	ldrsb.w	r3, [r3]
 80014e6:	2b09      	cmp	r3, #9
 80014e8:	dc01      	bgt.n	80014ee <OLED_update_time+0x36>
 80014ea:	4a45      	ldr	r2, [pc, #276]	@ (8001600 <OLED_update_time+0x148>)
 80014ec:	e000      	b.n	80014f0 <OLED_update_time+0x38>
 80014ee:	4a45      	ldr	r2, [pc, #276]	@ (8001604 <OLED_update_time+0x14c>)
 80014f0:	4b42      	ldr	r3, [pc, #264]	@ (80015fc <OLED_update_time+0x144>)
 80014f2:	f993 3000 	ldrsb.w	r3, [r3]
 80014f6:	4944      	ldr	r1, [pc, #272]	@ (8001608 <OLED_update_time+0x150>)
 80014f8:	4844      	ldr	r0, [pc, #272]	@ (800160c <OLED_update_time+0x154>)
 80014fa:	f005 ff23 	bl	8007344 <siprintf>
 80014fe:	e004      	b.n	800150a <OLED_update_time+0x52>
    		} else {
    			sprintf(time_hour_str, "%s", "  ");
 8001500:	4a43      	ldr	r2, [pc, #268]	@ (8001610 <OLED_update_time+0x158>)
 8001502:	4944      	ldr	r1, [pc, #272]	@ (8001614 <OLED_update_time+0x15c>)
 8001504:	4841      	ldr	r0, [pc, #260]	@ (800160c <OLED_update_time+0x154>)
 8001506:	f005 ff1d 	bl	8007344 <siprintf>
    		}
    		sprintf(time_minute_str, "%s%d", selected_minutes < 10 ? "0" : "", selected_minutes);
 800150a:	4b43      	ldr	r3, [pc, #268]	@ (8001618 <OLED_update_time+0x160>)
 800150c:	f993 3000 	ldrsb.w	r3, [r3]
 8001510:	2b09      	cmp	r3, #9
 8001512:	dc01      	bgt.n	8001518 <OLED_update_time+0x60>
 8001514:	4a3a      	ldr	r2, [pc, #232]	@ (8001600 <OLED_update_time+0x148>)
 8001516:	e000      	b.n	800151a <OLED_update_time+0x62>
 8001518:	4a3a      	ldr	r2, [pc, #232]	@ (8001604 <OLED_update_time+0x14c>)
 800151a:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <OLED_update_time+0x160>)
 800151c:	f993 3000 	ldrsb.w	r3, [r3]
 8001520:	4939      	ldr	r1, [pc, #228]	@ (8001608 <OLED_update_time+0x150>)
 8001522:	483e      	ldr	r0, [pc, #248]	@ (800161c <OLED_update_time+0x164>)
 8001524:	f005 ff0e 	bl	8007344 <siprintf>
 8001528:	e046      	b.n	80015b8 <OLED_update_time+0x100>

    	} else {

    		if(cursor_cnt < 60) {
 800152a:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <OLED_update_time+0x140>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001530:	d80f      	bhi.n	8001552 <OLED_update_time+0x9a>
        		sprintf(time_minute_str, "%s%d", selected_minutes < 10 ? "0" : "", selected_minutes);
 8001532:	4b39      	ldr	r3, [pc, #228]	@ (8001618 <OLED_update_time+0x160>)
 8001534:	f993 3000 	ldrsb.w	r3, [r3]
 8001538:	2b09      	cmp	r3, #9
 800153a:	dc01      	bgt.n	8001540 <OLED_update_time+0x88>
 800153c:	4a30      	ldr	r2, [pc, #192]	@ (8001600 <OLED_update_time+0x148>)
 800153e:	e000      	b.n	8001542 <OLED_update_time+0x8a>
 8001540:	4a30      	ldr	r2, [pc, #192]	@ (8001604 <OLED_update_time+0x14c>)
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <OLED_update_time+0x160>)
 8001544:	f993 3000 	ldrsb.w	r3, [r3]
 8001548:	492f      	ldr	r1, [pc, #188]	@ (8001608 <OLED_update_time+0x150>)
 800154a:	4834      	ldr	r0, [pc, #208]	@ (800161c <OLED_update_time+0x164>)
 800154c:	f005 fefa 	bl	8007344 <siprintf>
 8001550:	e004      	b.n	800155c <OLED_update_time+0xa4>
			} else {
				sprintf(time_minute_str, "%s", "  ");
 8001552:	4a2f      	ldr	r2, [pc, #188]	@ (8001610 <OLED_update_time+0x158>)
 8001554:	492f      	ldr	r1, [pc, #188]	@ (8001614 <OLED_update_time+0x15c>)
 8001556:	4831      	ldr	r0, [pc, #196]	@ (800161c <OLED_update_time+0x164>)
 8001558:	f005 fef4 	bl	8007344 <siprintf>
			}
    		sprintf(time_hour_str, "%s%d", selected_hour < 10 ? "0" : "", selected_hour);
 800155c:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <OLED_update_time+0x144>)
 800155e:	f993 3000 	ldrsb.w	r3, [r3]
 8001562:	2b09      	cmp	r3, #9
 8001564:	dc01      	bgt.n	800156a <OLED_update_time+0xb2>
 8001566:	4a26      	ldr	r2, [pc, #152]	@ (8001600 <OLED_update_time+0x148>)
 8001568:	e000      	b.n	800156c <OLED_update_time+0xb4>
 800156a:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <OLED_update_time+0x14c>)
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <OLED_update_time+0x144>)
 800156e:	f993 3000 	ldrsb.w	r3, [r3]
 8001572:	4925      	ldr	r1, [pc, #148]	@ (8001608 <OLED_update_time+0x150>)
 8001574:	4825      	ldr	r0, [pc, #148]	@ (800160c <OLED_update_time+0x154>)
 8001576:	f005 fee5 	bl	8007344 <siprintf>
 800157a:	e01d      	b.n	80015b8 <OLED_update_time+0x100>
    	}

    } else {
		sprintf(time_hour_str, "%s%d", selected_hour < 10 ? "0" : "", selected_hour);
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <OLED_update_time+0x144>)
 800157e:	f993 3000 	ldrsb.w	r3, [r3]
 8001582:	2b09      	cmp	r3, #9
 8001584:	dc01      	bgt.n	800158a <OLED_update_time+0xd2>
 8001586:	4a1e      	ldr	r2, [pc, #120]	@ (8001600 <OLED_update_time+0x148>)
 8001588:	e000      	b.n	800158c <OLED_update_time+0xd4>
 800158a:	4a1e      	ldr	r2, [pc, #120]	@ (8001604 <OLED_update_time+0x14c>)
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <OLED_update_time+0x144>)
 800158e:	f993 3000 	ldrsb.w	r3, [r3]
 8001592:	491d      	ldr	r1, [pc, #116]	@ (8001608 <OLED_update_time+0x150>)
 8001594:	481d      	ldr	r0, [pc, #116]	@ (800160c <OLED_update_time+0x154>)
 8001596:	f005 fed5 	bl	8007344 <siprintf>
		sprintf(time_minute_str, "%s%d", selected_minutes < 10 ? "0" : "", selected_minutes);
 800159a:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <OLED_update_time+0x160>)
 800159c:	f993 3000 	ldrsb.w	r3, [r3]
 80015a0:	2b09      	cmp	r3, #9
 80015a2:	dc01      	bgt.n	80015a8 <OLED_update_time+0xf0>
 80015a4:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <OLED_update_time+0x148>)
 80015a6:	e000      	b.n	80015aa <OLED_update_time+0xf2>
 80015a8:	4a16      	ldr	r2, [pc, #88]	@ (8001604 <OLED_update_time+0x14c>)
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <OLED_update_time+0x160>)
 80015ac:	f993 3000 	ldrsb.w	r3, [r3]
 80015b0:	4915      	ldr	r1, [pc, #84]	@ (8001608 <OLED_update_time+0x150>)
 80015b2:	481a      	ldr	r0, [pc, #104]	@ (800161c <OLED_update_time+0x164>)
 80015b4:	f005 fec6 	bl	8007344 <siprintf>
    }

    if(cursor_cnt > 70) cursor_cnt = 0;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <OLED_update_time+0x140>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	2b46      	cmp	r3, #70	@ 0x46
 80015be:	d903      	bls.n	80015c8 <OLED_update_time+0x110>
 80015c0:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <OLED_update_time+0x140>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	e005      	b.n	80015d4 <OLED_update_time+0x11c>
    else cursor_cnt++;
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <OLED_update_time+0x140>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <OLED_update_time+0x140>)
 80015d2:	801a      	strh	r2, [r3, #0]

	sprintf(time_str, "%s:%s", time_hour_str, time_minute_str);
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <OLED_update_time+0x164>)
 80015d6:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <OLED_update_time+0x154>)
 80015d8:	4911      	ldr	r1, [pc, #68]	@ (8001620 <OLED_update_time+0x168>)
 80015da:	4812      	ldr	r0, [pc, #72]	@ (8001624 <OLED_update_time+0x16c>)
 80015dc:	f005 feb2 	bl	8007344 <siprintf>
	OLED_print(time_str, 0, OLED_ROW_5, 2);
 80015e0:	2302      	movs	r3, #2
 80015e2:	2218      	movs	r2, #24
 80015e4:	2100      	movs	r1, #0
 80015e6:	480f      	ldr	r0, [pc, #60]	@ (8001624 <OLED_update_time+0x16c>)
 80015e8:	f000 f89a 	bl	8001720 <OLED_print>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08008264 	.word	0x08008264
 80015f4:	20000184 	.word	0x20000184
 80015f8:	20000142 	.word	0x20000142
 80015fc:	20000140 	.word	0x20000140
 8001600:	08008274 	.word	0x08008274
 8001604:	08008278 	.word	0x08008278
 8001608:	0800827c 	.word	0x0800827c
 800160c:	20000164 	.word	0x20000164
 8001610:	08008284 	.word	0x08008284
 8001614:	08008288 	.word	0x08008288
 8001618:	20000141 	.word	0x20000141
 800161c:	20000174 	.word	0x20000174
 8001620:	0800828c 	.word	0x0800828c
 8001624:	20000144 	.word	0x20000144

08001628 <ENCODER1_update>:


void ENCODER1_update(void) {
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
	static uint16_t last_cnt = 0;
	int diff = htim1.Instance->CNT - last_cnt;
 800162e:	4b31      	ldr	r3, [pc, #196]	@ (80016f4 <ENCODER1_update+0xcc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	4a30      	ldr	r2, [pc, #192]	@ (80016f8 <ENCODER1_update+0xd0>)
 8001636:	8812      	ldrh	r2, [r2, #0]
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	607b      	str	r3, [r7, #4]

	if(diff >= 4 || diff <= -4) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b03      	cmp	r3, #3
 8001640:	dc03      	bgt.n	800164a <ENCODER1_update+0x22>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f113 0f03 	cmn.w	r3, #3
 8001648:	da4d      	bge.n	80016e6 <ENCODER1_update+0xbe>
		diff /= 4;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	da00      	bge.n	8001652 <ENCODER1_update+0x2a>
 8001650:	3303      	adds	r3, #3
 8001652:	109b      	asrs	r3, r3, #2
 8001654:	607b      	str	r3, [r7, #4]

		switch(selection_mode) {
 8001656:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <ENCODER1_update+0xd4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <ENCODER1_update+0x3c>
 800165e:	2b01      	cmp	r3, #1
 8001660:	d01c      	beq.n	800169c <ENCODER1_update+0x74>
				selected_minutes += (int8_t)diff;

				if(selected_minutes > 59) selected_minutes = 0;
				if (selected_minutes < 0) selected_minutes = 59;
			default:
				break;
 8001662:	e039      	b.n	80016d8 <ENCODER1_update+0xb0>
				selected_hour += (int8_t)diff;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <ENCODER1_update+0xd8>)
 800166a:	f993 3000 	ldrsb.w	r3, [r3]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4413      	add	r3, r2
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b25a      	sxtb	r2, r3
 8001676:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <ENCODER1_update+0xd8>)
 8001678:	701a      	strb	r2, [r3, #0]
				if(selected_hour > 23) selected_hour = 0;
 800167a:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <ENCODER1_update+0xd8>)
 800167c:	f993 3000 	ldrsb.w	r3, [r3]
 8001680:	2b17      	cmp	r3, #23
 8001682:	dd02      	ble.n	800168a <ENCODER1_update+0x62>
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <ENCODER1_update+0xd8>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
				if (selected_hour < 0) selected_hour = 23;
 800168a:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <ENCODER1_update+0xd8>)
 800168c:	f993 3000 	ldrsb.w	r3, [r3]
 8001690:	2b00      	cmp	r3, #0
 8001692:	da1f      	bge.n	80016d4 <ENCODER1_update+0xac>
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <ENCODER1_update+0xd8>)
 8001696:	2217      	movs	r2, #23
 8001698:	701a      	strb	r2, [r3, #0]
				break;
 800169a:	e01b      	b.n	80016d4 <ENCODER1_update+0xac>
				selected_minutes += (int8_t)diff;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <ENCODER1_update+0xdc>)
 80016a2:	f993 3000 	ldrsb.w	r3, [r3]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <ENCODER1_update+0xdc>)
 80016b0:	701a      	strb	r2, [r3, #0]
				if(selected_minutes > 59) selected_minutes = 0;
 80016b2:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <ENCODER1_update+0xdc>)
 80016b4:	f993 3000 	ldrsb.w	r3, [r3]
 80016b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80016ba:	dd02      	ble.n	80016c2 <ENCODER1_update+0x9a>
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <ENCODER1_update+0xdc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
				if (selected_minutes < 0) selected_minutes = 59;
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <ENCODER1_update+0xdc>)
 80016c4:	f993 3000 	ldrsb.w	r3, [r3]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da05      	bge.n	80016d8 <ENCODER1_update+0xb0>
 80016cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <ENCODER1_update+0xdc>)
 80016ce:	223b      	movs	r2, #59	@ 0x3b
 80016d0:	701a      	strb	r2, [r3, #0]
				break;
 80016d2:	e001      	b.n	80016d8 <ENCODER1_update+0xb0>
				break;
 80016d4:	bf00      	nop
 80016d6:	e000      	b.n	80016da <ENCODER1_update+0xb2>
				break;
 80016d8:	bf00      	nop
		}

		last_cnt = htim1.Instance->CNT;
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <ENCODER1_update+0xcc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <ENCODER1_update+0xd0>)
 80016e4:	801a      	strh	r2, [r3, #0]
	}
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200001b0 	.word	0x200001b0
 80016f8:	20000186 	.word	0x20000186
 80016fc:	20000184 	.word	0x20000184
 8001700:	20000140 	.word	0x20000140
 8001704:	20000141 	.word	0x20000141

08001708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <Error_Handler+0x8>

08001714 <OLED_init>:
 */


#include "oled.h"

void OLED_init(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	SSD1306_init();
 8001718:	f7ff f910 	bl	800093c <SSD1306_init>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <OLED_print>:


void OLED_print(char *str, uint16_t x, uint16_t y, uint8_t size) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af04      	add	r7, sp, #16
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	817b      	strh	r3, [r7, #10]
 8001732:	460b      	mov	r3, r1
 8001734:	813b      	strh	r3, [r7, #8]
 8001736:	4613      	mov	r3, r2
 8001738:	71fb      	strb	r3, [r7, #7]
	GFX_draw_string(x, y, str, WHITE, BLACK, size, size);
 800173a:	8978      	ldrh	r0, [r7, #10]
 800173c:	8939      	ldrh	r1, [r7, #8]
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	79fa      	ldrb	r2, [r7, #7]
 8001742:	9202      	str	r2, [sp, #8]
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	2300      	movs	r3, #0
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2301      	movs	r3, #1
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	f7ff f847 	bl	80007e0 <GFX_draw_string>
	SSD1306_display_repaint();
 8001752:	f7ff fc69 	bl	8001028 <SSD1306_display_repaint>
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001774:	2300      	movs	r3, #0
 8001776:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001778:	4b24      	ldr	r3, [pc, #144]	@ (800180c <MX_RTC_Init+0xac>)
 800177a:	4a25      	ldr	r2, [pc, #148]	@ (8001810 <MX_RTC_Init+0xb0>)
 800177c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800177e:	4b23      	ldr	r3, [pc, #140]	@ (800180c <MX_RTC_Init+0xac>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001784:	4b21      	ldr	r3, [pc, #132]	@ (800180c <MX_RTC_Init+0xac>)
 8001786:	227f      	movs	r2, #127	@ 0x7f
 8001788:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800178a:	4b20      	ldr	r3, [pc, #128]	@ (800180c <MX_RTC_Init+0xac>)
 800178c:	22ff      	movs	r2, #255	@ 0xff
 800178e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001790:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <MX_RTC_Init+0xac>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001796:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <MX_RTC_Init+0xac>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <MX_RTC_Init+0xac>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017a2:	481a      	ldr	r0, [pc, #104]	@ (800180c <MX_RTC_Init+0xac>)
 80017a4:	f004 faf8 	bl	8005d98 <HAL_RTC_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80017ae:	f7ff ffab 	bl	8001708 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 80017b2:	2318      	movs	r3, #24
 80017b4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x46;
 80017b6:	2346      	movs	r3, #70	@ 0x46
 80017b8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x15;
 80017ba:	2315      	movs	r3, #21
 80017bc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2201      	movs	r2, #1
 80017ca:	4619      	mov	r1, r3
 80017cc:	480f      	ldr	r0, [pc, #60]	@ (800180c <MX_RTC_Init+0xac>)
 80017ce:	f004 fb64 	bl	8005e9a <HAL_RTC_SetTime>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80017d8:	f7ff ff96 	bl	8001708 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80017dc:	2304      	movs	r3, #4
 80017de:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80017e0:	2306      	movs	r3, #6
 80017e2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x19;
 80017e4:	2319      	movs	r3, #25
 80017e6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017ec:	463b      	mov	r3, r7
 80017ee:	2201      	movs	r2, #1
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	@ (800180c <MX_RTC_Init+0xac>)
 80017f4:	f004 fbeb 	bl	8005fce <HAL_RTC_SetDate>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80017fe:	f7ff ff83 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000188 	.word	0x20000188
 8001810:	40002800 	.word	0x40002800

08001814 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a0c      	ldr	r2, [pc, #48]	@ (8001864 <HAL_RTC_MspInit+0x50>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d111      	bne.n	800185c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001838:	2302      	movs	r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800183c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001840:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4618      	mov	r0, r3
 8001848:	f004 f9b6 	bl	8005bb8 <HAL_RCCEx_PeriphCLKConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001852:	f7ff ff59 	bl	8001708 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001856:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <HAL_RTC_MspInit+0x54>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800185c:	bf00      	nop
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40002800 	.word	0x40002800
 8001868:	42470e3c 	.word	0x42470e3c

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <HAL_MspInit+0x4c>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001880:	6453      	str	r3, [r2, #68]	@ 0x44
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_MspInit+0x4c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <HAL_MspInit+0x4c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	@ 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f000 fb45 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}

0800191a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_BUTTON_Pin);
 800191e:	2001      	movs	r0, #1
 8001920:	f001 f9d4 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <DMA1_Stream1_IRQHandler+0x10>)
 800192e:	f000 fd91 	bl	8002454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200000e0 	.word	0x200000e0

0800193c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001942:	f004 feeb 	bl	800671c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200001b0 	.word	0x200001b0

08001950 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <TIM3_IRQHandler+0x10>)
 8001956:	f004 fee1 	bl	800671c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200001f8 	.word	0x200001f8

08001964 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <I2C1_EV_IRQHandler+0x10>)
 800196a:	f001 fd79 	bl	8003460 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000008c 	.word	0x2000008c

08001978 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a05      	ldr	r2, [pc, #20]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d104      	bne.n	8001994 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800198a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800198e:	4804      	ldr	r0, [pc, #16]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001990:	f001 f981 	bl	8002c96 <HAL_GPIO_TogglePin>
    }
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010000 	.word	0x40010000
 80019a0:	40020c00 	.word	0x40020c00

080019a4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d122      	bne.n	80019fc <HAL_TIM_PWM_PulseFinishedCallback+0x58>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7f1b      	ldrb	r3, [r3, #28]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d11e      	bne.n	80019fc <HAL_TIM_PWM_PulseFinishedCallback+0x58>

    	if(buzzer_cnt < 5) {
 80019be:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	dc05      	bgt.n	80019d2 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d0:	e003      	b.n	80019da <HAL_TIM_PWM_PulseFinishedCallback+0x36>

    	} else {
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	@ 0x34
    	}

    	buzzer_cnt = buzzer_cnt <= 6 ? buzzer_cnt + 1 : 0;
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b06      	cmp	r3, #6
 80019e0:	dc03      	bgt.n	80019ea <HAL_TIM_PWM_PulseFinishedCallback+0x46>
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_TIM_PWM_PulseFinishedCallback+0x48>
 80019ea:	2300      	movs	r3, #0
 80019ec:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80019ee:	6013      	str	r3, [r2, #0]

    	printf("Buzzer: %d\n", buzzer_cnt);
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 80019f8:	f005 fc92 	bl	8007320 <iprintf>
    }
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40000400 	.word	0x40000400
 8001a08:	200001a8 	.word	0x200001a8
 8001a0c:	200001f8 	.word	0x200001f8
 8001a10:	08008294 	.word	0x08008294

08001a14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
    if (pin == ENC1_BUTTON_Pin)
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d116      	bne.n	8001a52 <HAL_GPIO_EXTI_Callback+0x3e>
    {
    	switch(selection_mode) {
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_EXTI_Callback+0x26>
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	dc10      	bgt.n	8001a52 <HAL_GPIO_EXTI_Callback+0x3e>
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_EXTI_Callback+0x2e>
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d008      	beq.n	8001a4a <HAL_GPIO_EXTI_Callback+0x36>
    		case SELECTION_MINUTE:
    			selection_mode = SELECTION_NONE;
				break;
    	}
    }
}
 8001a38:	e00b      	b.n	8001a52 <HAL_GPIO_EXTI_Callback+0x3e>
    			selection_mode = SELECTION_HOUR;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
    			break;
 8001a40:	e007      	b.n	8001a52 <HAL_GPIO_EXTI_Callback+0x3e>
    			selection_mode = SELECTION_MINUTE;
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
				break;
 8001a48:	e003      	b.n	8001a52 <HAL_GPIO_EXTI_Callback+0x3e>
    			selection_mode = SELECTION_NONE;
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]
				break;
 8001a50:	bf00      	nop
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000184 	.word	0x20000184

08001a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e00a      	b.n	8001a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a76:	f3af 8000 	nop.w
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <_read+0x12>
  }

  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e009      	b.n	8001ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fc74 	bl	80013a6 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf1      	blt.n	8001ab0 <_write+0x12>
  }
  return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_close>:

int _close(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001afe:	605a      	str	r2, [r3, #4]
  return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_isatty>:

int _isatty(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	@ (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d207      	bcs.n	8001b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b70:	f005 fcac 	bl	80074cc <__errno>
 8001b74:	4603      	mov	r3, r0
 8001b76:	220c      	movs	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e009      	b.n	8001b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b86:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <_sbrk+0x64>)
 8001b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20020000 	.word	0x20020000
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	200001ac 	.word	0x200001ac
 8001ba8:	20000390 	.word	0x20000390

08001bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb0:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <SystemInit+0x20>)
 8001bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb6:	4a05      	ldr	r2, [pc, #20]	@ (8001bcc <SystemInit+0x20>)
 8001bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2224      	movs	r2, #36	@ 0x24
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fc15 	bl	800740e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bec:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001bee:	4a25      	ldr	r2, [pc, #148]	@ (8001c84 <MX_TIM1_Init+0xb4>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c20:	2301      	movs	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c30:	2301      	movs	r3, #1
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4619      	mov	r1, r3
 8001c42:	480f      	ldr	r0, [pc, #60]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001c44:	f004 fc36 	bl	80064b4 <HAL_TIM_Encoder_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c4e:	f7ff fd5b 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4808      	ldr	r0, [pc, #32]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001c60:	f005 f964 	bl	8006f2c <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c6a:	f7ff fd4d 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c6e:	213c      	movs	r1, #60	@ 0x3c
 8001c70:	4803      	ldr	r0, [pc, #12]	@ (8001c80 <MX_TIM1_Init+0xb0>)
 8001c72:	f004 fcc5 	bl	8006600 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	3730      	adds	r7, #48	@ 0x30
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200001b0 	.word	0x200001b0
 8001c84:	40010000 	.word	0x40010000

08001c88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	@ 0x28
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001caa:	4b24      	ldr	r3, [pc, #144]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001cac:	4a24      	ldr	r2, [pc, #144]	@ (8001d40 <MX_TIM3_Init+0xb8>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001cbe:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8001cc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001ccc:	2280      	movs	r2, #128	@ 0x80
 8001cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cd0:	481a      	ldr	r0, [pc, #104]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001cd2:	f004 faa1 	bl	8006218 <HAL_TIM_PWM_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001cdc:	f7ff fd14 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	4619      	mov	r1, r3
 8001cee:	4813      	ldr	r0, [pc, #76]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001cf0:	f005 f91c 	bl	8006f2c <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001cfa:	f7ff fd05 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfe:	2360      	movs	r3, #96	@ 0x60
 8001d00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001d02:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2200      	movs	r2, #0
 8001d14:	4619      	mov	r1, r3
 8001d16:	4809      	ldr	r0, [pc, #36]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001d18:	f004 fdf0 	bl	80068fc <HAL_TIM_PWM_ConfigChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001d22:	f7ff fcf1 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001d26:	2100      	movs	r1, #0
 8001d28:	4804      	ldr	r0, [pc, #16]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001d2a:	f004 fac5 	bl	80062b8 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d2e:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <MX_TIM3_Init+0xb4>)
 8001d30:	f000 f880 	bl	8001e34 <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	@ 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200001f8 	.word	0x200001f8
 8001d40:	40000400 	.word	0x40000400

08001d44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	@ 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d134      	bne.n	8001dd0 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d76:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CLK_Pin|ENC1_DATA_Pin;
 8001d9e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	4809      	ldr	r0, [pc, #36]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001dbc:	f000 fdce 	bl	800295c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2019      	movs	r0, #25
 8001dc6:	f000 f9e6 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dca:	2019      	movs	r0, #25
 8001dcc:	f000 f9ff 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0e      	ldr	r2, [pc, #56]	@ (8001e2c <HAL_TIM_PWM_MspInit+0x48>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d115      	bne.n	8001e22 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <HAL_TIM_PWM_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001e30 <HAL_TIM_PWM_MspInit+0x4c>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_TIM_PWM_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	201d      	movs	r0, #29
 8001e18:	f000 f9bd 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e1c:	201d      	movs	r0, #29
 8001e1e:	f000 f9d6 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40023800 	.word	0x40023800

08001e34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a12      	ldr	r2, [pc, #72]	@ (8001e9c <HAL_TIM_MspPostInit+0x68>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d11d      	bne.n	8001e92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_TIM_MspPostInit+0x6c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ea0 <HAL_TIM_MspPostInit+0x6c>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_TIM_MspPostInit+0x6c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_TIM3_PWM_Pin;
 8001e72:	2340      	movs	r3, #64	@ 0x40
 8001e74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_TIM3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <HAL_TIM_MspPostInit+0x70>)
 8001e8e:	f000 fd65 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eac:	f7ff fe7e 	bl	8001bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eb2:	490d      	ldr	r1, [pc, #52]	@ (8001ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f005 faff 	bl	80074d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7ff fa71 	bl	80013c0 <main>
  bx  lr    
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001eec:	08008814 	.word	0x08008814
  ldr r2, =_sbss
 8001ef0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ef4:	20000390 	.word	0x20000390

08001ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f00:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	@ (8001f3c <HAL_Init+0x40>)
 8001f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <HAL_Init+0x40>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <HAL_Init+0x40>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 f92b 	bl	8002180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	200f      	movs	r0, #15
 8001f2c:	f000 f808 	bl	8001f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f30:	f7ff fc9c 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_InitTick+0x54>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_InitTick+0x58>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f943 	bl	80021ea <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d80a      	bhi.n	8001f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f000 f90b 	bl	8002196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4a06      	ldr	r2, [pc, #24]	@ (8001f9c <HAL_InitTick+0x5c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	20000240 	.word	0x20000240

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000240 	.word	0x20000240

08001fe0 <__NVIC_SetPriorityGrouping>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800200c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_GetPriorityGrouping>:
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <__NVIC_GetPriorityGrouping+0x18>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0307 	and.w	r3, r3, #7
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_EnableIRQ>:
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db0b      	blt.n	800206e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4907      	ldr	r1, [pc, #28]	@ (800207c <__NVIC_EnableIRQ+0x38>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000e100 	.word	0xe000e100

08002080 <__NVIC_SetPriority>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0a      	blt.n	80020aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	490c      	ldr	r1, [pc, #48]	@ (80020cc <__NVIC_SetPriority+0x4c>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	0112      	lsls	r2, r2, #4
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	440b      	add	r3, r1
 80020a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020a8:	e00a      	b.n	80020c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4908      	ldr	r1, [pc, #32]	@ (80020d0 <__NVIC_SetPriority+0x50>)
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	3b04      	subs	r3, #4
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	440b      	add	r3, r1
 80020be:	761a      	strb	r2, [r3, #24]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000e100 	.word	0xe000e100
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <NVIC_EncodePriority>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	@ 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f1c3 0307 	rsb	r3, r3, #7
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	bf28      	it	cs
 80020f2:	2304      	movcs	r3, #4
 80020f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3304      	adds	r3, #4
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d902      	bls.n	8002104 <NVIC_EncodePriority+0x30>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3b03      	subs	r3, #3
 8002102:	e000      	b.n	8002106 <NVIC_EncodePriority+0x32>
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	401a      	ands	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800211c:	f04f 31ff 	mov.w	r1, #4294967295
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43d9      	mvns	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	4313      	orrs	r3, r2
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	@ 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <SysTick_Config>:
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800214c:	d301      	bcc.n	8002152 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800214e:	2301      	movs	r3, #1
 8002150:	e00f      	b.n	8002172 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <SysTick_Config+0x40>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215a:	210f      	movs	r1, #15
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f7ff ff8e 	bl	8002080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <SysTick_Config+0x40>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216a:	4b04      	ldr	r3, [pc, #16]	@ (800217c <SysTick_Config+0x40>)
 800216c:	2207      	movs	r2, #7
 800216e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010

08002180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff29 	bl	8001fe0 <__NVIC_SetPriorityGrouping>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff3e 	bl	8002028 <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff8e 	bl	80020d4 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5d 	bl	8002080 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff31 	bl	8002044 <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa2 	bl	800213c <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff feda 	bl	8001fc8 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e099      	b.n	8002354 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002240:	e00f      	b.n	8002262 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002242:	f7ff fec1 	bl	8001fc8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b05      	cmp	r3, #5
 800224e:	d908      	bls.n	8002262 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e078      	b.n	8002354 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e8      	bne.n	8002242 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4b38      	ldr	r3, [pc, #224]	@ (800235c <HAL_DMA_Init+0x158>)
 800227c:	4013      	ands	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800228e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d107      	bne.n	80022cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	4313      	orrs	r3, r2
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f023 0307 	bic.w	r3, r3, #7
 80022e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d117      	bne.n	8002326 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00e      	beq.n	8002326 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 faab 	bl	8002864 <DMA_CheckFifoParam>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2240      	movs	r2, #64	@ 0x40
 8002318:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002322:	2301      	movs	r3, #1
 8002324:	e016      	b.n	8002354 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa62 	bl	80027f8 <DMA_CalcBaseAndBitshift>
 8002334:	4603      	mov	r3, r0
 8002336:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233c:	223f      	movs	r2, #63	@ 0x3f
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	f010803f 	.word	0xf010803f

08002360 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_DMA_Start_IT+0x26>
 8002382:	2302      	movs	r3, #2
 8002384:	e040      	b.n	8002408 <HAL_DMA_Start_IT+0xa8>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d12f      	bne.n	80023fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2202      	movs	r2, #2
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f9f4 	bl	800279c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b8:	223f      	movs	r2, #63	@ 0x3f
 80023ba:	409a      	lsls	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0216 	orr.w	r2, r2, #22
 80023ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0208 	orr.w	r2, r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e005      	b.n	8002406 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002406:	7dfb      	ldrb	r3, [r7, #23]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d004      	beq.n	800242e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2280      	movs	r2, #128	@ 0x80
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e00c      	b.n	8002448 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2205      	movs	r2, #5
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002460:	4b8e      	ldr	r3, [pc, #568]	@ (800269c <HAL_DMA_IRQHandler+0x248>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a8e      	ldr	r2, [pc, #568]	@ (80026a0 <HAL_DMA_IRQHandler+0x24c>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002472:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247e:	2208      	movs	r2, #8
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01a      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0204 	bic.w	r2, r2, #4
 80024a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	2208      	movs	r2, #8
 80024ae:	409a      	lsls	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c4:	2201      	movs	r2, #1
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e2:	2201      	movs	r2, #1
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ee:	f043 0202 	orr.w	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	2204      	movs	r2, #4
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d012      	beq.n	800252c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	2204      	movs	r2, #4
 800251a:	409a      	lsls	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002524:	f043 0204 	orr.w	r2, r3, #4
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002530:	2210      	movs	r2, #16
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d043      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03c      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	2210      	movs	r2, #16
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d018      	beq.n	8002596 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d024      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
 8002582:	e01f      	b.n	80025c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01b      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
 8002594:	e016      	b.n	80025c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0208 	bic.w	r2, r2, #8
 80025b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c8:	2220      	movs	r2, #32
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 808f 	beq.w	80026f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8087 	beq.w	80026f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ea:	2220      	movs	r2, #32
 80025ec:	409a      	lsls	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d136      	bne.n	800266c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0216 	bic.w	r2, r2, #22
 800260c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800261c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <HAL_DMA_IRQHandler+0x1da>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0208 	bic.w	r2, r2, #8
 800263c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002642:	223f      	movs	r2, #63	@ 0x3f
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800265e:	2b00      	cmp	r3, #0
 8002660:	d07e      	beq.n	8002760 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
        }
        return;
 800266a:	e079      	b.n	8002760 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01d      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268c:	2b00      	cmp	r3, #0
 800268e:	d031      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e02c      	b.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
 800269a:	bf00      	nop
 800269c:	20000000 	.word	0x20000000
 80026a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d023      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	e01e      	b.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10f      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0210 	bic.w	r2, r2, #16
 80026d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d032      	beq.n	8002762 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d022      	beq.n	800274e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2205      	movs	r2, #5
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3301      	adds	r3, #1
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	d307      	bcc.n	800273c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f2      	bne.n	8002720 <HAL_DMA_IRQHandler+0x2cc>
 800273a:	e000      	b.n	800273e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800273c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
 800275e:	e000      	b.n	8002762 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002760:	bf00      	nop
    }
  }
}
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002776:	b2db      	uxtb	r3, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b40      	cmp	r3, #64	@ 0x40
 80027c8:	d108      	bne.n	80027dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027da:	e007      	b.n	80027ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3b10      	subs	r3, #16
 8002808:	4a14      	ldr	r2, [pc, #80]	@ (800285c <DMA_CalcBaseAndBitshift+0x64>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002812:	4a13      	ldr	r2, [pc, #76]	@ (8002860 <DMA_CalcBaseAndBitshift+0x68>)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d909      	bls.n	800283a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	1d1a      	adds	r2, r3, #4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	659a      	str	r2, [r3, #88]	@ 0x58
 8002838:	e007      	b.n	800284a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	aaaaaaab 	.word	0xaaaaaaab
 8002860:	080087c8 	.word	0x080087c8

08002864 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11f      	bne.n	80028be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d856      	bhi.n	8002932 <DMA_CheckFifoParam+0xce>
 8002884:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <DMA_CheckFifoParam+0x28>)
 8002886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	0800289d 	.word	0x0800289d
 8002890:	080028af 	.word	0x080028af
 8002894:	0800289d 	.word	0x0800289d
 8002898:	08002933 	.word	0x08002933
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d046      	beq.n	8002936 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e043      	b.n	8002936 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028b6:	d140      	bne.n	800293a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e03d      	b.n	800293a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c6:	d121      	bne.n	800290c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d837      	bhi.n	800293e <DMA_CheckFifoParam+0xda>
 80028ce:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <DMA_CheckFifoParam+0x70>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028eb 	.word	0x080028eb
 80028dc:	080028e5 	.word	0x080028e5
 80028e0:	080028fd 	.word	0x080028fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      break;
 80028e8:	e030      	b.n	800294c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d025      	beq.n	8002942 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fa:	e022      	b.n	8002942 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002904:	d11f      	bne.n	8002946 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800290a:	e01c      	b.n	8002946 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d903      	bls.n	800291a <DMA_CheckFifoParam+0xb6>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d003      	beq.n	8002920 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002918:	e018      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      break;
 800291e:	e015      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e00b      	b.n	800294a <DMA_CheckFifoParam+0xe6>
      break;
 8002932:	bf00      	nop
 8002934:	e00a      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e008      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e006      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e004      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;   
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
    }
  } 
  
  return status; 
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	@ 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e159      	b.n	8002c2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	f040 8148 	bne.w	8002c26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d005      	beq.n	80029ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d130      	bne.n	8002a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0201 	and.w	r2, r3, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d017      	beq.n	8002a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d123      	bne.n	8002aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80a2 	beq.w	8002c26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b57      	ldr	r3, [pc, #348]	@ (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	4a56      	ldr	r2, [pc, #344]	@ (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002af2:	4b54      	ldr	r3, [pc, #336]	@ (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afe:	4a52      	ldr	r2, [pc, #328]	@ (8002c48 <HAL_GPIO_Init+0x2ec>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a49      	ldr	r2, [pc, #292]	@ (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x202>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a48      	ldr	r2, [pc, #288]	@ (8002c50 <HAL_GPIO_Init+0x2f4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x1fe>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a47      	ldr	r2, [pc, #284]	@ (8002c54 <HAL_GPIO_Init+0x2f8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x1fa>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a46      	ldr	r2, [pc, #280]	@ (8002c58 <HAL_GPIO_Init+0x2fc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x1f6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a45      	ldr	r2, [pc, #276]	@ (8002c5c <HAL_GPIO_Init+0x300>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x1f2>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b4e:	2307      	movs	r3, #7
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b70:	4935      	ldr	r1, [pc, #212]	@ (8002c48 <HAL_GPIO_Init+0x2ec>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7e:	4b38      	ldr	r3, [pc, #224]	@ (8002c60 <HAL_GPIO_Init+0x304>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8002c60 <HAL_GPIO_Init+0x304>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c60 <HAL_GPIO_Init+0x304>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bcc:	4a24      	ldr	r2, [pc, #144]	@ (8002c60 <HAL_GPIO_Init+0x304>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd2:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <HAL_GPIO_Init+0x304>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c60 <HAL_GPIO_Init+0x304>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfc:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <HAL_GPIO_Init+0x304>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c20:	4a0f      	ldr	r2, [pc, #60]	@ (8002c60 <HAL_GPIO_Init+0x304>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	f67f aea2 	bls.w	8002978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40013c00 	.word	0x40013c00

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	041a      	lsls	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca8:	887a      	ldrh	r2, [r7, #2]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	041a      	lsls	r2, r3, #16
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	43d9      	mvns	r1, r3
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	619a      	str	r2, [r3, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cd6:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ce2:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fe92 	bl	8001a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40013c00 	.word	0x40013c00

08002cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e12b      	b.n	8002f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fa96 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	@ 0x24
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d60:	f002 ff16 	bl	8005b90 <HAL_RCC_GetPCLK1Freq>
 8002d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4a81      	ldr	r2, [pc, #516]	@ (8002f70 <HAL_I2C_Init+0x274>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d807      	bhi.n	8002d80 <HAL_I2C_Init+0x84>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a80      	ldr	r2, [pc, #512]	@ (8002f74 <HAL_I2C_Init+0x278>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	bf94      	ite	ls
 8002d78:	2301      	movls	r3, #1
 8002d7a:	2300      	movhi	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e006      	b.n	8002d8e <HAL_I2C_Init+0x92>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a7d      	ldr	r2, [pc, #500]	@ (8002f78 <HAL_I2C_Init+0x27c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	bf94      	ite	ls
 8002d88:	2301      	movls	r3, #1
 8002d8a:	2300      	movhi	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0e7      	b.n	8002f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4a78      	ldr	r2, [pc, #480]	@ (8002f7c <HAL_I2C_Init+0x280>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0c9b      	lsrs	r3, r3, #18
 8002da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002f70 <HAL_I2C_Init+0x274>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d802      	bhi.n	8002dd0 <HAL_I2C_Init+0xd4>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	e009      	b.n	8002de4 <HAL_I2C_Init+0xe8>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	4a69      	ldr	r2, [pc, #420]	@ (8002f80 <HAL_I2C_Init+0x284>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	3301      	adds	r3, #1
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002df6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	495c      	ldr	r1, [pc, #368]	@ (8002f70 <HAL_I2C_Init+0x274>)
 8002e00:	428b      	cmp	r3, r1
 8002e02:	d819      	bhi.n	8002e38 <HAL_I2C_Init+0x13c>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1e59      	subs	r1, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e12:	1c59      	adds	r1, r3, #1
 8002e14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e18:	400b      	ands	r3, r1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_I2C_Init+0x138>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1e59      	subs	r1, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e32:	e051      	b.n	8002ed8 <HAL_I2C_Init+0x1dc>
 8002e34:	2304      	movs	r3, #4
 8002e36:	e04f      	b.n	8002ed8 <HAL_I2C_Init+0x1dc>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d111      	bne.n	8002e64 <HAL_I2C_Init+0x168>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e58      	subs	r0, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	440b      	add	r3, r1
 8002e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e012      	b.n	8002e8a <HAL_I2C_Init+0x18e>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e58      	subs	r0, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	0099      	lsls	r1, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Init+0x196>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e022      	b.n	8002ed8 <HAL_I2C_Init+0x1dc>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10e      	bne.n	8002eb8 <HAL_I2C_Init+0x1bc>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1e58      	subs	r0, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	440b      	add	r3, r1
 8002ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb6:	e00f      	b.n	8002ed8 <HAL_I2C_Init+0x1dc>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	0099      	lsls	r1, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	6809      	ldr	r1, [r1, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6911      	ldr	r1, [r2, #16]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68d2      	ldr	r2, [r2, #12]
 8002f12:	4311      	orrs	r1, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	000186a0 	.word	0x000186a0
 8002f74:	001e847f 	.word	0x001e847f
 8002f78:	003d08ff 	.word	0x003d08ff
 8002f7c:	431bde83 	.word	0x431bde83
 8002f80:	10624dd3 	.word	0x10624dd3

08002f84 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f96:	2b80      	cmp	r3, #128	@ 0x80
 8002f98:	d103      	bne.n	8002fa2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fca:	f7fe fffd 	bl	8001fc8 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	f040 80d9 	bne.w	8003190 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2319      	movs	r3, #25
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	496d      	ldr	r1, [pc, #436]	@ (800319c <HAL_I2C_Mem_Write+0x1ec>)
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f001 ff7b 	bl	8004ee4 <I2C_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0cc      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_I2C_Mem_Write+0x56>
 8003002:	2302      	movs	r3, #2
 8003004:	e0c5      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d007      	beq.n	800302c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2221      	movs	r2, #33	@ 0x21
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2240      	movs	r2, #64	@ 0x40
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800305c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a4d      	ldr	r2, [pc, #308]	@ (80031a0 <HAL_I2C_Mem_Write+0x1f0>)
 800306c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800306e:	88f8      	ldrh	r0, [r7, #6]
 8003070:	893a      	ldrh	r2, [r7, #8]
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	4603      	mov	r3, r0
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f001 fcd6 	bl	8004a30 <I2C_RequestMemoryWrite>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d052      	beq.n	8003130 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e081      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f002 f840 	bl	8005118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d107      	bne.n	80030b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e06b      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d11b      	bne.n	8003130 <HAL_I2C_Mem_Write+0x180>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1aa      	bne.n	800308e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f002 f833 	bl	80051a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00d      	beq.n	8003164 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	2b04      	cmp	r3, #4
 800314e:	d107      	bne.n	8003160 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e016      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	00100002 	.word	0x00100002
 80031a0:	ffff0000 	.word	0xffff0000

080031a4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	817b      	strh	r3, [r7, #10]
 80031b6:	460b      	mov	r3, r1
 80031b8:	813b      	strh	r3, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031c2:	f7fe ff01 	bl	8001fc8 <HAL_GetTick>
 80031c6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	f040 8136 	bne.w	8003442 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80031d6:	4b9d      	ldr	r3, [pc, #628]	@ (800344c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	08db      	lsrs	r3, r3, #3
 80031dc:	4a9c      	ldr	r2, [pc, #624]	@ (8003450 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a1a      	lsrs	r2, r3, #8
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009a      	lsls	r2, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d112      	bne.n	8003222 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f043 0220 	orr.w	r2, r3, #32
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
 8003220:	e110      	b.n	8003444 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d0df      	beq.n	80031f0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_I2C_Mem_Write_DMA+0x9a>
 800323a:	2302      	movs	r3, #2
 800323c:	e102      	b.n	8003444 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d007      	beq.n	8003264 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003272:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2221      	movs	r2, #33	@ 0x21
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2240      	movs	r2, #64	@ 0x40
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800328e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003454 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80032a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80032a6:	897a      	ldrh	r2, [r7, #10]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80032ac:	893a      	ldrh	r2, [r7, #8]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80a9 	beq.w	800341a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d02a      	beq.n	8003326 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d4:	4a60      	ldr	r2, [pc, #384]	@ (8003458 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80032d6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032dc:	4a5f      	ldr	r2, [pc, #380]	@ (800345c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80032de:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ec:	2200      	movs	r2, #0
 80032ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f4:	2200      	movs	r2, #0
 80032f6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fc:	2200      	movs	r2, #0
 80032fe:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	4619      	mov	r1, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3310      	adds	r3, #16
 8003310:	461a      	mov	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003316:	f7ff f823 	bl	8002360 <HAL_DMA_Start_IT>
 800331a:	4603      	mov	r3, r0
 800331c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800331e:	7efb      	ldrb	r3, [r7, #27]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d166      	bne.n	80033f2 <HAL_I2C_Mem_Write_DMA+0x24e>
 8003324:	e013      	b.n	800334e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07a      	b.n	8003444 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800334e:	88f8      	ldrh	r0, [r7, #6]
 8003350:	893a      	ldrh	r2, [r7, #8]
 8003352:	8979      	ldrh	r1, [r7, #10]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	2323      	movs	r3, #35	@ 0x23
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4603      	mov	r3, r0
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f001 fb66 	bl	8004a30 <I2C_RequestMemoryWrite>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d022      	beq.n	80033b0 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f84e 	bl	8002410 <HAL_DMA_Abort_IT>
 8003374:	4603      	mov	r3, r0
 8003376:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800337c:	2200      	movs	r2, #0
 800337e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800338e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e049      	b.n	8003444 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033dc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ec:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e028      	b.n	8003444 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e014      	b.n	8003444 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000000 	.word	0x20000000
 8003450:	14f8b589 	.word	0x14f8b589
 8003454:	ffff0000 	.word	0xffff0000
 8003458:	08004b5d 	.word	0x08004b5d
 800345c:	08004d1b 	.word	0x08004d1b

08003460 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003478:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003480:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003488:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b10      	cmp	r3, #16
 800348e:	d003      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b40      	cmp	r3, #64	@ 0x40
 8003494:	f040 80c1 	bne.w	800361a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_I2C_EV_IRQHandler+0x6e>
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80034b8:	d003      	beq.n	80034c2 <HAL_I2C_EV_IRQHandler+0x62>
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80034c0:	d101      	bne.n	80034c6 <HAL_I2C_EV_IRQHandler+0x66>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x68>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	f000 8132 	beq.w	8003732 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00c      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x92>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	0a5b      	lsrs	r3, r3, #9
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f001 ff08 	bl	80052fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fcf4 	bl	8003ed8 <I2C_Master_SB>
 80034f0:	e092      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0xb2>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	0a5b      	lsrs	r3, r3, #9
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fd6a 	bl	8003fe4 <I2C_Master_ADD10>
 8003510:	e082      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0xd2>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	0a5b      	lsrs	r3, r3, #9
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fd84 	bl	8004038 <I2C_Master_ADDR>
 8003530:	e072      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d03b      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800354c:	f000 80f3 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	09db      	lsrs	r3, r3, #7
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00f      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x11c>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	0a9b      	lsrs	r3, r3, #10
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x11c>
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f94c 	bl	8003812 <I2C_MasterTransmit_TXE>
 800357a:	e04d      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80d6 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	0a5b      	lsrs	r3, r3, #9
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80cf 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003598:	7bbb      	ldrb	r3, [r7, #14]
 800359a:	2b21      	cmp	r3, #33	@ 0x21
 800359c:	d103      	bne.n	80035a6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9d3 	bl	800394a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a4:	e0c7      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b40      	cmp	r3, #64	@ 0x40
 80035aa:	f040 80c4 	bne.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa41 	bl	8003a36 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b4:	e0bf      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035c4:	f000 80b7 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00f      	beq.n	80035f4 <HAL_I2C_EV_IRQHandler+0x194>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	0a9b      	lsrs	r3, r3, #10
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_I2C_EV_IRQHandler+0x194>
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d103      	bne.n	80035f4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 faba 	bl	8003b66 <I2C_MasterReceive_RXNE>
 80035f2:	e011      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 809a 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	0a5b      	lsrs	r3, r3, #9
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8093 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fb70 	bl	8003cf6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003616:	e08e      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003618:	e08d      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e007      	b.n	800363c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d012      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x20e>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	0a5b      	lsrs	r3, r3, #9
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003664:	69b9      	ldr	r1, [r7, #24]
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 ff35 	bl	80044d6 <I2C_Slave_ADDR>
 800366c:	e066      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x22e>
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	0a5b      	lsrs	r3, r3, #9
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 ff70 	bl	800456c <I2C_Slave_STOPF>
 800368c:	e056      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800368e:	7bbb      	ldrb	r3, [r7, #14]
 8003690:	2b21      	cmp	r3, #33	@ 0x21
 8003692:	d002      	beq.n	800369a <HAL_I2C_EV_IRQHandler+0x23a>
 8003694:	7bbb      	ldrb	r3, [r7, #14]
 8003696:	2b29      	cmp	r3, #41	@ 0x29
 8003698:	d125      	bne.n	80036e6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	09db      	lsrs	r3, r3, #7
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00f      	beq.n	80036c6 <HAL_I2C_EV_IRQHandler+0x266>
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	0a9b      	lsrs	r3, r3, #10
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_I2C_EV_IRQHandler+0x266>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fe4b 	bl	800435a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c4:	e039      	b.n	800373a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d033      	beq.n	800373a <HAL_I2C_EV_IRQHandler+0x2da>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	0a5b      	lsrs	r3, r3, #9
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d02d      	beq.n	800373a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fe78 	bl	80043d4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e4:	e029      	b.n	800373a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00f      	beq.n	8003712 <HAL_I2C_EV_IRQHandler+0x2b2>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	0a9b      	lsrs	r3, r3, #10
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_I2C_EV_IRQHandler+0x2b2>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d103      	bne.n	8003712 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fe83 	bl	8004416 <I2C_SlaveReceive_RXNE>
 8003710:	e014      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	0a5b      	lsrs	r3, r3, #9
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 feb1 	bl	8004492 <I2C_SlaveReceive_BTF>
 8003730:	e004      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003732:	bf00      	nop
 8003734:	e002      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800373a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	70fb      	strb	r3, [r7, #3]
 800379e:	4613      	mov	r3, r2
 80037a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003820:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003828:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d150      	bne.n	80038da <I2C_MasterTransmit_TXE+0xc8>
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b21      	cmp	r3, #33	@ 0x21
 800383c:	d14d      	bne.n	80038da <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d01d      	beq.n	8003880 <I2C_MasterTransmit_TXE+0x6e>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b20      	cmp	r3, #32
 8003848:	d01a      	beq.n	8003880 <I2C_MasterTransmit_TXE+0x6e>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003850:	d016      	beq.n	8003880 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003860:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2211      	movs	r2, #17
 8003866:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff62 	bl	8003742 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800387e:	e060      	b.n	8003942 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800388e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b40      	cmp	r3, #64	@ 0x40
 80038b8:	d107      	bne.n	80038ca <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ff7d 	bl	80037c2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c8:	e03b      	b.n	8003942 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ff35 	bl	8003742 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038d8:	e033      	b.n	8003942 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b21      	cmp	r3, #33	@ 0x21
 80038de:	d005      	beq.n	80038ec <I2C_MasterTransmit_TXE+0xda>
 80038e0:	7bbb      	ldrb	r3, [r7, #14]
 80038e2:	2b40      	cmp	r3, #64	@ 0x40
 80038e4:	d12d      	bne.n	8003942 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b22      	cmp	r3, #34	@ 0x22
 80038ea:	d12a      	bne.n	8003942 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003904:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003906:	e01c      	b.n	8003942 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b40      	cmp	r3, #64	@ 0x40
 8003912:	d103      	bne.n	800391c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f88e 	bl	8003a36 <I2C_MemoryTransmit_TXE_BTF>
}
 800391a:	e012      	b.n	8003942 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003940:	e7ff      	b.n	8003942 <I2C_MasterTransmit_TXE+0x130>
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b21      	cmp	r3, #33	@ 0x21
 8003962:	d164      	bne.n	8003a2e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003992:	e04c      	b.n	8003a2e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b08      	cmp	r3, #8
 8003998:	d01d      	beq.n	80039d6 <I2C_MasterTransmit_BTF+0x8c>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b20      	cmp	r3, #32
 800399e:	d01a      	beq.n	80039d6 <I2C_MasterTransmit_BTF+0x8c>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039a6:	d016      	beq.n	80039d6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039b6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2211      	movs	r2, #17
 80039bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff feb7 	bl	8003742 <HAL_I2C_MasterTxCpltCallback>
}
 80039d4:	e02b      	b.n	8003a2e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039e4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	d107      	bne.n	8003a20 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fed2 	bl	80037c2 <HAL_I2C_MemTxCpltCallback>
}
 8003a1e:	e006      	b.n	8003a2e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fe8a 	bl	8003742 <HAL_I2C_MasterTxCpltCallback>
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a44:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d11d      	bne.n	8003a8a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d10b      	bne.n	8003a6e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a66:	1c9a      	adds	r2, r3, #2
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003a6c:	e077      	b.n	8003b5e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	121b      	asrs	r3, r3, #8
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a88:	e069      	b.n	8003b5e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d10b      	bne.n	8003aaa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003aa8:	e059      	b.n	8003b5e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d152      	bne.n	8003b58 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b22      	cmp	r3, #34	@ 0x22
 8003ab6:	d10d      	bne.n	8003ad4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ad2:	e044      	b.n	8003b5e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d015      	beq.n	8003b0a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b21      	cmp	r3, #33	@ 0x21
 8003ae2:	d112      	bne.n	8003b0a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b08:	e029      	b.n	8003b5e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d124      	bne.n	8003b5e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b21      	cmp	r3, #33	@ 0x21
 8003b18:	d121      	bne.n	8003b5e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b28:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b38:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fe36 	bl	80037c2 <HAL_I2C_MemTxCpltCallback>
}
 8003b56:	e002      	b.n	8003b5e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fa13 	bl	8002f84 <I2C_Flush_DR>
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b22      	cmp	r3, #34	@ 0x22
 8003b78:	f040 80b9 	bne.w	8003cee <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d921      	bls.n	8003bd4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	f040 8096 	bne.w	8003cee <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003bd2:	e08c      	b.n	8003cee <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d07f      	beq.n	8003cdc <I2C_MasterReceive_RXNE+0x176>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d002      	beq.n	8003be8 <I2C_MasterReceive_RXNE+0x82>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d179      	bne.n	8003cdc <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f001 fb25 	bl	8005238 <I2C_WaitOnSTOPRequestThroughIT>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d14c      	bne.n	8003c8e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c02:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b40      	cmp	r3, #64	@ 0x40
 8003c4c:	d10a      	bne.n	8003c64 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fdba 	bl	80037d6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c62:	e044      	b.n	8003cee <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d002      	beq.n	8003c78 <I2C_MasterReceive_RXNE+0x112>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d103      	bne.n	8003c80 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c7e:	e002      	b.n	8003c86 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2212      	movs	r2, #18
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fd65 	bl	8003756 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c8c:	e02f      	b.n	8003cee <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fd88 	bl	80037ea <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cda:	e008      	b.n	8003cee <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cea:	605a      	str	r2, [r3, #4]
}
 8003cec:	e7ff      	b.n	8003cee <I2C_MasterReceive_RXNE+0x188>
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d11b      	bne.n	8003d46 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d44:	e0c4      	b.n	8003ed0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d129      	bne.n	8003da4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d00a      	beq.n	8003d7c <I2C_MasterReceive_BTF+0x86>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d007      	beq.n	8003d7c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003da2:	e095      	b.n	8003ed0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d17d      	bne.n	8003eaa <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d002      	beq.n	8003dba <I2C_MasterReceive_BTF+0xc4>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d108      	bne.n	8003dcc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e016      	b.n	8003dfa <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d002      	beq.n	8003dd8 <I2C_MasterReceive_BTF+0xe2>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d108      	bne.n	8003dea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e007      	b.n	8003dfa <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e54:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b40      	cmp	r3, #64	@ 0x40
 8003e68:	d10a      	bne.n	8003e80 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff fcac 	bl	80037d6 <HAL_I2C_MemRxCpltCallback>
}
 8003e7e:	e027      	b.n	8003ed0 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d002      	beq.n	8003e94 <I2C_MasterReceive_BTF+0x19e>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d103      	bne.n	8003e9c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e9a:	e002      	b.n	8003ea2 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2212      	movs	r2, #18
 8003ea0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fc57 	bl	8003756 <HAL_I2C_MasterRxCpltCallback>
}
 8003ea8:	e012      	b.n	8003ed0 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d117      	bne.n	8003f1c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f04:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f06:	e067      	b.n	8003fd8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	611a      	str	r2, [r3, #16]
}
 8003f1a:	e05d      	b.n	8003fd8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f24:	d133      	bne.n	8003f8e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b21      	cmp	r3, #33	@ 0x21
 8003f30:	d109      	bne.n	8003f46 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f42:	611a      	str	r2, [r3, #16]
 8003f44:	e008      	b.n	8003f58 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <I2C_Master_SB+0x92>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d108      	bne.n	8003f7c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d032      	beq.n	8003fd8 <I2C_Master_SB+0x100>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d02d      	beq.n	8003fd8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f8a:	605a      	str	r2, [r3, #4]
}
 8003f8c:	e024      	b.n	8003fd8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10e      	bne.n	8003fb4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	11db      	asrs	r3, r3, #7
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f003 0306 	and.w	r3, r3, #6
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f063 030f 	orn	r3, r3, #15
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	611a      	str	r2, [r3, #16]
}
 8003fb2:	e011      	b.n	8003fd8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10d      	bne.n	8003fd8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	11db      	asrs	r3, r3, #7
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0306 	and.w	r3, r3, #6
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f063 030e 	orn	r3, r3, #14
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <I2C_Master_ADD10+0x26>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d108      	bne.n	800401c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <I2C_Master_ADD10+0x48>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800402a:	605a      	str	r2, [r3, #4]
  }
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004038:	b480      	push	{r7}
 800403a:	b091      	sub	sp, #68	@ 0x44
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004046:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004054:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b22      	cmp	r3, #34	@ 0x22
 8004060:	f040 8169 	bne.w	8004336 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10f      	bne.n	800408c <I2C_Master_ADDR+0x54>
 800406c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004070:	2b40      	cmp	r3, #64	@ 0x40
 8004072:	d10b      	bne.n	800408c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004074:	2300      	movs	r3, #0
 8004076:	633b      	str	r3, [r7, #48]	@ 0x30
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	633b      	str	r3, [r7, #48]	@ 0x30
 8004088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408a:	e160      	b.n	800434e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11d      	bne.n	80040d0 <I2C_Master_ADDR+0x98>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800409c:	d118      	bne.n	80040d0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040c2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80040ce:	e13e      	b.n	800434e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d113      	bne.n	8004102 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e115      	b.n	800432e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 808a 	bne.w	8004222 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004114:	d137      	bne.n	8004186 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004124:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004134:	d113      	bne.n	800415e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004144:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	e0e7      	b.n	800432e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	2300      	movs	r3, #0
 8004160:	623b      	str	r3, [r7, #32]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e0d3      	b.n	800432e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	2b08      	cmp	r3, #8
 800418a:	d02e      	beq.n	80041ea <I2C_Master_ADDR+0x1b2>
 800418c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418e:	2b20      	cmp	r3, #32
 8004190:	d02b      	beq.n	80041ea <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004194:	2b12      	cmp	r3, #18
 8004196:	d102      	bne.n	800419e <I2C_Master_ADDR+0x166>
 8004198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419a:	2b01      	cmp	r3, #1
 800419c:	d125      	bne.n	80041ea <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800419e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d00e      	beq.n	80041c2 <I2C_Master_ADDR+0x18a>
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d00b      	beq.n	80041c2 <I2C_Master_ADDR+0x18a>
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d008      	beq.n	80041c2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e007      	b.n	80041d2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	e0a1      	b.n	800432e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e085      	b.n	800432e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d14d      	bne.n	80042c8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	2b04      	cmp	r3, #4
 8004230:	d016      	beq.n	8004260 <I2C_Master_ADDR+0x228>
 8004232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004234:	2b02      	cmp	r3, #2
 8004236:	d013      	beq.n	8004260 <I2C_Master_ADDR+0x228>
 8004238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423a:	2b10      	cmp	r3, #16
 800423c:	d010      	beq.n	8004260 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800424c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e007      	b.n	8004270 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800426e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800427a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800427e:	d117      	bne.n	80042b0 <I2C_Master_ADDR+0x278>
 8004280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004282:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004286:	d00b      	beq.n	80042a0 <I2C_Master_ADDR+0x268>
 8004288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428a:	2b01      	cmp	r3, #1
 800428c:	d008      	beq.n	80042a0 <I2C_Master_ADDR+0x268>
 800428e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004290:	2b08      	cmp	r3, #8
 8004292:	d005      	beq.n	80042a0 <I2C_Master_ADDR+0x268>
 8004294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004296:	2b10      	cmp	r3, #16
 8004298:	d002      	beq.n	80042a0 <I2C_Master_ADDR+0x268>
 800429a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429c:	2b20      	cmp	r3, #32
 800429e:	d107      	bne.n	80042b0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	e032      	b.n	800432e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042d6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042e6:	d117      	bne.n	8004318 <I2C_Master_ADDR+0x2e0>
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042ee:	d00b      	beq.n	8004308 <I2C_Master_ADDR+0x2d0>
 80042f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d008      	beq.n	8004308 <I2C_Master_ADDR+0x2d0>
 80042f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d005      	beq.n	8004308 <I2C_Master_ADDR+0x2d0>
 80042fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d002      	beq.n	8004308 <I2C_Master_ADDR+0x2d0>
 8004302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004304:	2b20      	cmp	r3, #32
 8004306:	d107      	bne.n	8004318 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004316:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004334:	e00b      	b.n	800434e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	e7ff      	b.n	800434e <I2C_Master_ADDR+0x316>
 800434e:	bf00      	nop
 8004350:	3744      	adds	r7, #68	@ 0x44
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004368:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02b      	beq.n	80043cc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d114      	bne.n	80043cc <I2C_SlaveTransmit_TXE+0x72>
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b29      	cmp	r3, #41	@ 0x29
 80043a6:	d111      	bne.n	80043cc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2221      	movs	r2, #33	@ 0x21
 80043bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2228      	movs	r2, #40	@ 0x28
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff f9cf 	bl	800376a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004424:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d02c      	beq.n	800448a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d114      	bne.n	800448a <I2C_SlaveReceive_RXNE+0x74>
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b2a      	cmp	r3, #42	@ 0x2a
 8004464:	d111      	bne.n	800448a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004474:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2222      	movs	r2, #34	@ 0x22
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2228      	movs	r2, #40	@ 0x28
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff f97a 	bl	800377e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80044f0:	2b28      	cmp	r3, #40	@ 0x28
 80044f2:	d127      	bne.n	8004544 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004502:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004510:	2301      	movs	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	09db      	lsrs	r3, r3, #7
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	81bb      	strh	r3, [r7, #12]
 8004526:	e002      	b.n	800452e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004536:	89ba      	ldrh	r2, [r7, #12]
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff f928 	bl	8003792 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004542:	e00e      	b.n	8004562 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800458a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800458c:	2300      	movs	r3, #0
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c8:	d172      	bne.n	80046b0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	2b22      	cmp	r3, #34	@ 0x22
 80045ce:	d002      	beq.n	80045d6 <I2C_Slave_STOPF+0x6a>
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80045d4:	d135      	bne.n	8004642 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	f043 0204 	orr.w	r2, r3, #4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004608:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe f8aa 	bl	8002768 <HAL_DMA_GetState>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d049      	beq.n	80046ae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	4a69      	ldr	r2, [pc, #420]	@ (80047c4 <I2C_Slave_STOPF+0x258>)
 8004620:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004626:	4618      	mov	r0, r3
 8004628:	f7fd fef2 	bl	8002410 <HAL_DMA_Abort_IT>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d03d      	beq.n	80046ae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800463c:	4610      	mov	r0, r2
 800463e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004640:	e035      	b.n	80046ae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	f043 0204 	orr.w	r2, r3, #4
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004674:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe f874 	bl	8002768 <HAL_DMA_GetState>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d014      	beq.n	80046b0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800468a:	4a4e      	ldr	r2, [pc, #312]	@ (80047c4 <I2C_Slave_STOPF+0x258>)
 800468c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd febc 	bl	8002410 <HAL_DMA_Abort_IT>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046a8:	4610      	mov	r0, r2
 80046aa:	4798      	blx	r3
 80046ac:	e000      	b.n	80046b0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d03e      	beq.n	8004738 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d112      	bne.n	80046ee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f8:	2b40      	cmp	r3, #64	@ 0x40
 80046fa:	d112      	bne.n	8004722 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004730:	f043 0204 	orr.w	r2, r3, #4
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f843 	bl	80047cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004746:	e039      	b.n	80047bc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b2a      	cmp	r3, #42	@ 0x2a
 800474c:	d109      	bne.n	8004762 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2228      	movs	r2, #40	@ 0x28
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff f80e 	bl	800377e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b28      	cmp	r3, #40	@ 0x28
 800476c:	d111      	bne.n	8004792 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a15      	ldr	r2, [pc, #84]	@ (80047c8 <I2C_Slave_STOPF+0x25c>)
 8004772:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff f80f 	bl	80037ae <HAL_I2C_ListenCpltCallback>
}
 8004790:	e014      	b.n	80047bc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004796:	2b22      	cmp	r3, #34	@ 0x22
 8004798:	d002      	beq.n	80047a0 <I2C_Slave_STOPF+0x234>
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b22      	cmp	r3, #34	@ 0x22
 800479e:	d10d      	bne.n	80047bc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fe ffe1 	bl	800377e <HAL_I2C_SlaveRxCpltCallback>
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	08004d95 	.word	0x08004d95
 80047c8:	ffff0000 	.word	0xffff0000

080047cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047e4:	7bbb      	ldrb	r3, [r7, #14]
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d002      	beq.n	80047f0 <I2C_ITError+0x24>
 80047ea:	7bbb      	ldrb	r3, [r7, #14]
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d10a      	bne.n	8004806 <I2C_ITError+0x3a>
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b22      	cmp	r3, #34	@ 0x22
 80047f4:	d107      	bne.n	8004806 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004804:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800480c:	2b28      	cmp	r3, #40	@ 0x28
 800480e:	d107      	bne.n	8004820 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2228      	movs	r2, #40	@ 0x28
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800481e:	e015      	b.n	800484c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800482e:	d00a      	beq.n	8004846 <I2C_ITError+0x7a>
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b60      	cmp	r3, #96	@ 0x60
 8004834:	d007      	beq.n	8004846 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004856:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800485a:	d162      	bne.n	8004922 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800486a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004870:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d020      	beq.n	80048bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487e:	4a6a      	ldr	r2, [pc, #424]	@ (8004a28 <I2C_ITError+0x25c>)
 8004880:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd fdc2 	bl	8002410 <HAL_DMA_Abort_IT>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8089 	beq.w	80049a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048b6:	4610      	mov	r0, r2
 80048b8:	4798      	blx	r3
 80048ba:	e074      	b.n	80049a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c0:	4a59      	ldr	r2, [pc, #356]	@ (8004a28 <I2C_ITError+0x25c>)
 80048c2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fd fda1 	bl	8002410 <HAL_DMA_Abort_IT>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d068      	beq.n	80049a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048de:	2b40      	cmp	r3, #64	@ 0x40
 80048e0:	d10b      	bne.n	80048fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800491c:	4610      	mov	r0, r2
 800491e:	4798      	blx	r3
 8004920:	e041      	b.n	80049a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b60      	cmp	r3, #96	@ 0x60
 800492c:	d125      	bne.n	800497a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004946:	2b40      	cmp	r3, #64	@ 0x40
 8004948:	d10b      	bne.n	8004962 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fe ff43 	bl	80037fe <HAL_I2C_AbortCpltCallback>
 8004978:	e015      	b.n	80049a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004984:	2b40      	cmp	r3, #64	@ 0x40
 8004986:	d10b      	bne.n	80049a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7fe ff22 	bl	80037ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10e      	bne.n	80049d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d113      	bne.n	8004a20 <I2C_ITError+0x254>
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b28      	cmp	r3, #40	@ 0x28
 80049fc:	d110      	bne.n	8004a20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a0a      	ldr	r2, [pc, #40]	@ (8004a2c <I2C_ITError+0x260>)
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fe fec7 	bl	80037ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	08004d95 	.word	0x08004d95
 8004a2c:	ffff0000 	.word	0xffff0000

08004a30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	4608      	mov	r0, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	817b      	strh	r3, [r7, #10]
 8004a42:	460b      	mov	r3, r1
 8004a44:	813b      	strh	r3, [r7, #8]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fa3c 	bl	8004ee4 <I2C_WaitOnFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a80:	d103      	bne.n	8004a8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e05f      	b.n	8004b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a8e:	897b      	ldrh	r3, [r7, #10]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	6a3a      	ldr	r2, [r7, #32]
 8004aa2:	492d      	ldr	r1, [pc, #180]	@ (8004b58 <I2C_RequestMemoryWrite+0x128>)
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fa97 	bl	8004fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e04c      	b.n	8004b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004acc:	6a39      	ldr	r1, [r7, #32]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fb22 	bl	8005118 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d107      	bne.n	8004af2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e02b      	b.n	8004b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d105      	bne.n	8004b08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004afc:	893b      	ldrh	r3, [r7, #8]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	611a      	str	r2, [r3, #16]
 8004b06:	e021      	b.n	8004b4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b08:	893b      	ldrh	r3, [r7, #8]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b18:	6a39      	ldr	r1, [r7, #32]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fafc 	bl	8005118 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d107      	bne.n	8004b3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e005      	b.n	8004b4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b42:	893b      	ldrh	r3, [r7, #8]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	00010002 	.word	0x00010002

08004b5c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b70:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b78:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004b8e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	2200      	movs	r2, #0
 8004bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004bb6:	2b21      	cmp	r3, #33	@ 0x21
 8004bb8:	d007      	beq.n	8004bca <I2C_DMAXferCplt+0x6e>
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004bc0:	2b22      	cmp	r3, #34	@ 0x22
 8004bc2:	d131      	bne.n	8004c28 <I2C_DMAXferCplt+0xcc>
 8004bc4:	7cbb      	ldrb	r3, [r7, #18]
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d12e      	bne.n	8004c28 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bd8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	2b29      	cmp	r3, #41	@ 0x29
 8004be4:	d10a      	bne.n	8004bfc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2221      	movs	r2, #33	@ 0x21
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2228      	movs	r2, #40	@ 0x28
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bf4:	6978      	ldr	r0, [r7, #20]
 8004bf6:	f7fe fdb8 	bl	800376a <HAL_I2C_SlaveTxCpltCallback>
 8004bfa:	e00c      	b.n	8004c16 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c00:	d109      	bne.n	8004c16 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2222      	movs	r2, #34	@ 0x22
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2228      	movs	r2, #40	@ 0x28
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c10:	6978      	ldr	r0, [r7, #20]
 8004c12:	f7fe fdb4 	bl	800377e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004c24:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c26:	e074      	b.n	8004d12 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d06e      	beq.n	8004d12 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d107      	bne.n	8004c4e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c4c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c5c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c64:	d009      	beq.n	8004c7a <I2C_DMAXferCplt+0x11e>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d006      	beq.n	8004c7a <I2C_DMAXferCplt+0x11e>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c72:	d002      	beq.n	8004c7a <I2C_DMAXferCplt+0x11e>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d107      	bne.n	8004c8a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c88:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c98:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ca8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2200      	movs	r2, #0
 8004cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004cb8:	6978      	ldr	r0, [r7, #20]
 8004cba:	f7fe fd96 	bl	80037ea <HAL_I2C_ErrorCallback>
}
 8004cbe:	e028      	b.n	8004d12 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b40      	cmp	r3, #64	@ 0x40
 8004cd2:	d10a      	bne.n	8004cea <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004ce2:	6978      	ldr	r0, [r7, #20]
 8004ce4:	f7fe fd77 	bl	80037d6 <HAL_I2C_MemRxCpltCallback>
}
 8004ce8:	e013      	b.n	8004d12 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d002      	beq.n	8004cfe <I2C_DMAXferCplt+0x1a2>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d103      	bne.n	8004d06 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d04:	e002      	b.n	8004d0c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2212      	movs	r2, #18
 8004d0a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d0c:	6978      	ldr	r0, [r7, #20]
 8004d0e:	f7fe fd22 	bl	8003756 <HAL_I2C_MasterRxCpltCallback>
}
 8004d12:	bf00      	nop
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d34:	2200      	movs	r2, #0
 8004d36:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d44:	2200      	movs	r2, #0
 8004d46:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fd fd1b 	bl	8002784 <HAL_DMA_GetError>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d01b      	beq.n	8004d8c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d62:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	f043 0210 	orr.w	r2, r3, #16
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7fe fd2f 	bl	80037ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dae:	4b4b      	ldr	r3, [pc, #300]	@ (8004edc <I2C_DMAAbort+0x148>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	08db      	lsrs	r3, r3, #3
 8004db4:	4a4a      	ldr	r2, [pc, #296]	@ (8004ee0 <I2C_DMAAbort+0x14c>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	0a1a      	lsrs	r2, r3, #8
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	00da      	lsls	r2, r3, #3
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004dda:	e00a      	b.n	8004df2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df0:	d0ea      	beq.n	8004dc8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfe:	2200      	movs	r2, #0
 8004e00:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0e:	2200      	movs	r2, #0
 8004e10:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e34:	2200      	movs	r2, #0
 8004e36:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	2200      	movs	r2, #0
 8004e46:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b60      	cmp	r3, #96	@ 0x60
 8004e62:	d10e      	bne.n	8004e82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2200      	movs	r2, #0
 8004e78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e7a:	6978      	ldr	r0, [r7, #20]
 8004e7c:	f7fe fcbf 	bl	80037fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e80:	e027      	b.n	8004ed2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e82:	7cfb      	ldrb	r3, [r7, #19]
 8004e84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e88:	2b28      	cmp	r3, #40	@ 0x28
 8004e8a:	d117      	bne.n	8004ebc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004eaa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2228      	movs	r2, #40	@ 0x28
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004eba:	e007      	b.n	8004ecc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ecc:	6978      	ldr	r0, [r7, #20]
 8004ece:	f7fe fc8c 	bl	80037ea <HAL_I2C_ErrorCallback>
}
 8004ed2:	bf00      	nop
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	14f8b589 	.word	0x14f8b589

08004ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef4:	e048      	b.n	8004f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d044      	beq.n	8004f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efe:	f7fd f863 	bl	8001fc8 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d139      	bne.n	8004f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	0c1b      	lsrs	r3, r3, #16
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d10d      	bne.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	43da      	mvns	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf0c      	ite	eq
 8004f30:	2301      	moveq	r3, #1
 8004f32:	2300      	movne	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	e00c      	b.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	43da      	mvns	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4013      	ands	r3, r2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2301      	moveq	r3, #1
 8004f4e:	2300      	movne	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d116      	bne.n	8004f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e023      	b.n	8004fd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	0c1b      	lsrs	r3, r3, #16
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10d      	bne.n	8004fae <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	43da      	mvns	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	e00c      	b.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	43da      	mvns	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d093      	beq.n	8004ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fe6:	e071      	b.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff6:	d123      	bne.n	8005040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005006:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	f043 0204 	orr.w	r2, r3, #4
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e067      	b.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d041      	beq.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005048:	f7fc ffbe 	bl	8001fc8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d136      	bne.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d10c      	bne.n	8005082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	43da      	mvns	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	bf14      	ite	ne
 800507a:	2301      	movne	r3, #1
 800507c:	2300      	moveq	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	e00b      	b.n	800509a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	43da      	mvns	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4013      	ands	r3, r2
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e021      	b.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	0c1b      	lsrs	r3, r3, #16
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d10c      	bne.n	80050f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	43da      	mvns	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e00b      	b.n	8005108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	43da      	mvns	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	bf14      	ite	ne
 8005102:	2301      	movne	r3, #1
 8005104:	2300      	moveq	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	f47f af6d 	bne.w	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005124:	e034      	b.n	8005190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f8b8 	bl	800529c <I2C_IsAcknowledgeFailed>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e034      	b.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d028      	beq.n	8005190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513e:	f7fc ff43 	bl	8001fc8 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d11d      	bne.n	8005190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515e:	2b80      	cmp	r3, #128	@ 0x80
 8005160:	d016      	beq.n	8005190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e007      	b.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519a:	2b80      	cmp	r3, #128	@ 0x80
 800519c:	d1c3      	bne.n	8005126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051b4:	e034      	b.n	8005220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f870 	bl	800529c <I2C_IsAcknowledgeFailed>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e034      	b.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d028      	beq.n	8005220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fc fefb 	bl	8001fc8 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d11d      	bne.n	8005220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d016      	beq.n	8005220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	f043 0220 	orr.w	r2, r3, #32
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e007      	b.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d1c3      	bne.n	80051b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005244:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	08db      	lsrs	r3, r3, #3
 800524a:	4a13      	ldr	r2, [pc, #76]	@ (8005298 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	0a1a      	lsrs	r2, r3, #8
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3b01      	subs	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e008      	b.n	8005288 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005284:	d0e9      	beq.n	800525a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	20000000 	.word	0x20000000
 8005298:	14f8b589 	.word	0x14f8b589

0800529c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052b2:	d11b      	bne.n	80052ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	f043 0204 	orr.w	r2, r3, #4
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800530a:	d103      	bne.n	8005314 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005312:	e007      	b.n	8005324 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800531c:	d102      	bne.n	8005324 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2208      	movs	r2, #8
 8005322:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e267      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d075      	beq.n	800543a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800534e:	4b88      	ldr	r3, [pc, #544]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b04      	cmp	r3, #4
 8005358:	d00c      	beq.n	8005374 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800535a:	4b85      	ldr	r3, [pc, #532]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005362:	2b08      	cmp	r3, #8
 8005364:	d112      	bne.n	800538c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005366:	4b82      	ldr	r3, [pc, #520]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800536e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005372:	d10b      	bne.n	800538c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	4b7e      	ldr	r3, [pc, #504]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d05b      	beq.n	8005438 <HAL_RCC_OscConfig+0x108>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d157      	bne.n	8005438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e242      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005394:	d106      	bne.n	80053a4 <HAL_RCC_OscConfig+0x74>
 8005396:	4b76      	ldr	r3, [pc, #472]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a75      	ldr	r2, [pc, #468]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	e01d      	b.n	80053e0 <HAL_RCC_OscConfig+0xb0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x98>
 80053ae:	4b70      	ldr	r3, [pc, #448]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a6f      	ldr	r2, [pc, #444]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80053b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a6c      	ldr	r2, [pc, #432]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e00b      	b.n	80053e0 <HAL_RCC_OscConfig+0xb0>
 80053c8:	4b69      	ldr	r3, [pc, #420]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a68      	ldr	r2, [pc, #416]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80053ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	4b66      	ldr	r3, [pc, #408]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a65      	ldr	r2, [pc, #404]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80053da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d013      	beq.n	8005410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7fc fdee 	bl	8001fc8 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f0:	f7fc fdea 	bl	8001fc8 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	@ 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e207      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	4b5b      	ldr	r3, [pc, #364]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0xc0>
 800540e:	e014      	b.n	800543a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005410:	f7fc fdda 	bl	8001fc8 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005418:	f7fc fdd6 	bl	8001fc8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	@ 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e1f3      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800542a:	4b51      	ldr	r3, [pc, #324]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0xe8>
 8005436:	e000      	b.n	800543a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d063      	beq.n	800550e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005446:	4b4a      	ldr	r3, [pc, #296]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005452:	4b47      	ldr	r3, [pc, #284]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800545a:	2b08      	cmp	r3, #8
 800545c:	d11c      	bne.n	8005498 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800545e:	4b44      	ldr	r3, [pc, #272]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d116      	bne.n	8005498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800546a:	4b41      	ldr	r3, [pc, #260]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_RCC_OscConfig+0x152>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d001      	beq.n	8005482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e1c7      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005482:	4b3b      	ldr	r3, [pc, #236]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4937      	ldr	r1, [pc, #220]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005496:	e03a      	b.n	800550e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d020      	beq.n	80054e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054a0:	4b34      	ldr	r3, [pc, #208]	@ (8005574 <HAL_RCC_OscConfig+0x244>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a6:	f7fc fd8f 	bl	8001fc8 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ae:	f7fc fd8b 	bl	8001fc8 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e1a8      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054cc:	4b28      	ldr	r3, [pc, #160]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4925      	ldr	r1, [pc, #148]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
 80054e0:	e015      	b.n	800550e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054e2:	4b24      	ldr	r3, [pc, #144]	@ (8005574 <HAL_RCC_OscConfig+0x244>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fc fd6e 	bl	8001fc8 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f0:	f7fc fd6a 	bl	8001fc8 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e187      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005502:	4b1b      	ldr	r3, [pc, #108]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d036      	beq.n	8005588 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d016      	beq.n	8005550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005522:	4b15      	ldr	r3, [pc, #84]	@ (8005578 <HAL_RCC_OscConfig+0x248>)
 8005524:	2201      	movs	r2, #1
 8005526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005528:	f7fc fd4e 	bl	8001fc8 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005530:	f7fc fd4a 	bl	8001fc8 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e167      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005542:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <HAL_RCC_OscConfig+0x240>)
 8005544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f0      	beq.n	8005530 <HAL_RCC_OscConfig+0x200>
 800554e:	e01b      	b.n	8005588 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005550:	4b09      	ldr	r3, [pc, #36]	@ (8005578 <HAL_RCC_OscConfig+0x248>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005556:	f7fc fd37 	bl	8001fc8 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555c:	e00e      	b.n	800557c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555e:	f7fc fd33 	bl	8001fc8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d907      	bls.n	800557c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e150      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
 8005570:	40023800 	.word	0x40023800
 8005574:	42470000 	.word	0x42470000
 8005578:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800557c:	4b88      	ldr	r3, [pc, #544]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 800557e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1ea      	bne.n	800555e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8097 	beq.w	80056c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559a:	4b81      	ldr	r3, [pc, #516]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	4b7d      	ldr	r3, [pc, #500]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	4a7c      	ldr	r2, [pc, #496]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 80055b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055b6:	4b7a      	ldr	r3, [pc, #488]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c6:	4b77      	ldr	r3, [pc, #476]	@ (80057a4 <HAL_RCC_OscConfig+0x474>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d118      	bne.n	8005604 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d2:	4b74      	ldr	r3, [pc, #464]	@ (80057a4 <HAL_RCC_OscConfig+0x474>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a73      	ldr	r2, [pc, #460]	@ (80057a4 <HAL_RCC_OscConfig+0x474>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055de:	f7fc fcf3 	bl	8001fc8 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e6:	f7fc fcef 	bl	8001fc8 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e10c      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	4b6a      	ldr	r3, [pc, #424]	@ (80057a4 <HAL_RCC_OscConfig+0x474>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d106      	bne.n	800561a <HAL_RCC_OscConfig+0x2ea>
 800560c:	4b64      	ldr	r3, [pc, #400]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005610:	4a63      	ldr	r2, [pc, #396]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6713      	str	r3, [r2, #112]	@ 0x70
 8005618:	e01c      	b.n	8005654 <HAL_RCC_OscConfig+0x324>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b05      	cmp	r3, #5
 8005620:	d10c      	bne.n	800563c <HAL_RCC_OscConfig+0x30c>
 8005622:	4b5f      	ldr	r3, [pc, #380]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005626:	4a5e      	ldr	r2, [pc, #376]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	6713      	str	r3, [r2, #112]	@ 0x70
 800562e:	4b5c      	ldr	r3, [pc, #368]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005632:	4a5b      	ldr	r2, [pc, #364]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	6713      	str	r3, [r2, #112]	@ 0x70
 800563a:	e00b      	b.n	8005654 <HAL_RCC_OscConfig+0x324>
 800563c:	4b58      	ldr	r3, [pc, #352]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005640:	4a57      	ldr	r2, [pc, #348]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	6713      	str	r3, [r2, #112]	@ 0x70
 8005648:	4b55      	ldr	r3, [pc, #340]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564c:	4a54      	ldr	r2, [pc, #336]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 800564e:	f023 0304 	bic.w	r3, r3, #4
 8005652:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d015      	beq.n	8005688 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fc fcb4 	bl	8001fc8 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005662:	e00a      	b.n	800567a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005664:	f7fc fcb0 	bl	8001fc8 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e0cb      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800567a:	4b49      	ldr	r3, [pc, #292]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0ee      	beq.n	8005664 <HAL_RCC_OscConfig+0x334>
 8005686:	e014      	b.n	80056b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005688:	f7fc fc9e 	bl	8001fc8 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800568e:	e00a      	b.n	80056a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005690:	f7fc fc9a 	bl	8001fc8 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e0b5      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a6:	4b3e      	ldr	r3, [pc, #248]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ee      	bne.n	8005690 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d105      	bne.n	80056c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b8:	4b39      	ldr	r3, [pc, #228]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 80056ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056bc:	4a38      	ldr	r2, [pc, #224]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 80056be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80a1 	beq.w	8005810 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ce:	4b34      	ldr	r3, [pc, #208]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d05c      	beq.n	8005794 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d141      	bne.n	8005766 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b31      	ldr	r3, [pc, #196]	@ (80057a8 <HAL_RCC_OscConfig+0x478>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fc fc6e 	bl	8001fc8 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f0:	f7fc fc6a 	bl	8001fc8 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e087      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005702:	4b27      	ldr	r3, [pc, #156]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69da      	ldr	r2, [r3, #28]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	019b      	lsls	r3, r3, #6
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005724:	085b      	lsrs	r3, r3, #1
 8005726:	3b01      	subs	r3, #1
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005730:	061b      	lsls	r3, r3, #24
 8005732:	491b      	ldr	r1, [pc, #108]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005734:	4313      	orrs	r3, r2
 8005736:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005738:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <HAL_RCC_OscConfig+0x478>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573e:	f7fc fc43 	bl	8001fc8 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005746:	f7fc fc3f 	bl	8001fc8 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e05c      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005758:	4b11      	ldr	r3, [pc, #68]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x416>
 8005764:	e054      	b.n	8005810 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005766:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <HAL_RCC_OscConfig+0x478>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fc fc2c 	bl	8001fc8 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005774:	f7fc fc28 	bl	8001fc8 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e045      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005786:	4b06      	ldr	r3, [pc, #24]	@ (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x444>
 8005792:	e03d      	b.n	8005810 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d107      	bne.n	80057ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e038      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40007000 	.word	0x40007000
 80057a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057ac:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <HAL_RCC_OscConfig+0x4ec>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d028      	beq.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d121      	bne.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d11a      	bne.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057dc:	4013      	ands	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d111      	bne.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	3b01      	subs	r3, #1
 80057f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d107      	bne.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005808:	429a      	cmp	r2, r3
 800580a:	d001      	beq.n	8005810 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800

08005820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0cc      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005834:	4b68      	ldr	r3, [pc, #416]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d90c      	bls.n	800585c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005842:	4b65      	ldr	r3, [pc, #404]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800584a:	4b63      	ldr	r3, [pc, #396]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d001      	beq.n	800585c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0b8      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d020      	beq.n	80058aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005874:	4b59      	ldr	r3, [pc, #356]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	4a58      	ldr	r2, [pc, #352]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800587e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800588c:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4a52      	ldr	r2, [pc, #328]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b50      	ldr	r3, [pc, #320]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	494d      	ldr	r1, [pc, #308]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d044      	beq.n	8005940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	4b47      	ldr	r3, [pc, #284]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d119      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e07f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d003      	beq.n	80058de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058de:	4b3f      	ldr	r3, [pc, #252]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e06f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ee:	4b3b      	ldr	r3, [pc, #236]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e067      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fe:	4b37      	ldr	r3, [pc, #220]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f023 0203 	bic.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4934      	ldr	r1, [pc, #208]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	4313      	orrs	r3, r2
 800590e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005910:	f7fc fb5a 	bl	8001fc8 <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005916:	e00a      	b.n	800592e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005918:	f7fc fb56 	bl	8001fc8 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e04f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592e:	4b2b      	ldr	r3, [pc, #172]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 020c 	and.w	r2, r3, #12
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	429a      	cmp	r2, r3
 800593e:	d1eb      	bne.n	8005918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005940:	4b25      	ldr	r3, [pc, #148]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d20c      	bcs.n	8005968 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b22      	ldr	r3, [pc, #136]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	4b20      	ldr	r3, [pc, #128]	@ (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d001      	beq.n	8005968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e032      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005974:	4b19      	ldr	r3, [pc, #100]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4916      	ldr	r1, [pc, #88]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005992:	4b12      	ldr	r3, [pc, #72]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	490e      	ldr	r1, [pc, #56]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059a6:	f000 f821 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 80059aa:	4602      	mov	r2, r0
 80059ac:	4b0b      	ldr	r3, [pc, #44]	@ (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	490a      	ldr	r1, [pc, #40]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 80059b8:	5ccb      	ldrb	r3, [r1, r3]
 80059ba:	fa22 f303 	lsr.w	r3, r2, r3
 80059be:	4a09      	ldr	r2, [pc, #36]	@ (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80059c2:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <HAL_RCC_ClockConfig+0x1c8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fc faba 	bl	8001f40 <HAL_InitTick>

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40023c00 	.word	0x40023c00
 80059dc:	40023800 	.word	0x40023800
 80059e0:	080087b0 	.word	0x080087b0
 80059e4:	20000000 	.word	0x20000000
 80059e8:	20000004 	.word	0x20000004

080059ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f0:	b090      	sub	sp, #64	@ 0x40
 80059f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a04:	4b59      	ldr	r3, [pc, #356]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d00d      	beq.n	8005a2c <HAL_RCC_GetSysClockFreq+0x40>
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	f200 80a1 	bhi.w	8005b58 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_RCC_GetSysClockFreq+0x34>
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d003      	beq.n	8005a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a1e:	e09b      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a20:	4b53      	ldr	r3, [pc, #332]	@ (8005b70 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a24:	e09b      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a26:	4b53      	ldr	r3, [pc, #332]	@ (8005b74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a2a:	e098      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a36:	4b4d      	ldr	r3, [pc, #308]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d028      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a42:	4b4a      	ldr	r3, [pc, #296]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	099b      	lsrs	r3, r3, #6
 8005a48:	2200      	movs	r2, #0
 8005a4a:	623b      	str	r3, [r7, #32]
 8005a4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a54:	2100      	movs	r1, #0
 8005a56:	4b47      	ldr	r3, [pc, #284]	@ (8005b74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a58:	fb03 f201 	mul.w	r2, r3, r1
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	fb00 f303 	mul.w	r3, r0, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	4a43      	ldr	r2, [pc, #268]	@ (8005b74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a66:	fba0 1202 	umull	r1, r2, r0, r2
 8005a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a6c:	460a      	mov	r2, r1
 8005a6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a72:	4413      	add	r3, r2
 8005a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a78:	2200      	movs	r2, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
 8005a7c:	61fa      	str	r2, [r7, #28]
 8005a7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a86:	f7fa fbfb 	bl	8000280 <__aeabi_uldivmod>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4613      	mov	r3, r2
 8005a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a92:	e053      	b.n	8005b3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a94:	4b35      	ldr	r3, [pc, #212]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	099b      	lsrs	r3, r3, #6
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	617a      	str	r2, [r7, #20]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005aa6:	f04f 0b00 	mov.w	fp, #0
 8005aaa:	4652      	mov	r2, sl
 8005aac:	465b      	mov	r3, fp
 8005aae:	f04f 0000 	mov.w	r0, #0
 8005ab2:	f04f 0100 	mov.w	r1, #0
 8005ab6:	0159      	lsls	r1, r3, #5
 8005ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005abc:	0150      	lsls	r0, r2, #5
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	ebb2 080a 	subs.w	r8, r2, sl
 8005ac6:	eb63 090b 	sbc.w	r9, r3, fp
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ad6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ada:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ade:	ebb2 0408 	subs.w	r4, r2, r8
 8005ae2:	eb63 0509 	sbc.w	r5, r3, r9
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	00eb      	lsls	r3, r5, #3
 8005af0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005af4:	00e2      	lsls	r2, r4, #3
 8005af6:	4614      	mov	r4, r2
 8005af8:	461d      	mov	r5, r3
 8005afa:	eb14 030a 	adds.w	r3, r4, sl
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	eb45 030b 	adc.w	r3, r5, fp
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b12:	4629      	mov	r1, r5
 8005b14:	028b      	lsls	r3, r1, #10
 8005b16:	4621      	mov	r1, r4
 8005b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	028a      	lsls	r2, r1, #10
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b26:	2200      	movs	r2, #0
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	60fa      	str	r2, [r7, #12]
 8005b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b30:	f7fa fba6 	bl	8000280 <__aeabi_uldivmod>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4613      	mov	r3, r2
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	0c1b      	lsrs	r3, r3, #16
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	3301      	adds	r3, #1
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005b4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b56:	e002      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3740      	adds	r7, #64	@ 0x40
 8005b64:	46bd      	mov	sp, r7
 8005b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	00f42400 	.word	0x00f42400
 8005b74:	017d7840 	.word	0x017d7840

08005b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b7c:	4b03      	ldr	r3, [pc, #12]	@ (8005b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000000 	.word	0x20000000

08005b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b94:	f7ff fff0 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	4b05      	ldr	r3, [pc, #20]	@ (8005bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	0a9b      	lsrs	r3, r3, #10
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	4903      	ldr	r1, [pc, #12]	@ (8005bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ba6:	5ccb      	ldrb	r3, [r1, r3]
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	080087c0 	.word	0x080087c0

08005bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d038      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005be0:	4b68      	ldr	r3, [pc, #416]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005be6:	f7fc f9ef 	bl	8001fc8 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bee:	f7fc f9eb 	bl	8001fc8 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e0bd      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c00:	4b61      	ldr	r3, [pc, #388]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	019b      	lsls	r3, r3, #6
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	071b      	lsls	r3, r3, #28
 8005c1e:	495a      	ldr	r1, [pc, #360]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c26:	4b57      	ldr	r3, [pc, #348]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c2c:	f7fc f9cc 	bl	8001fc8 <HAL_GetTick>
 8005c30:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c34:	f7fc f9c8 	bl	8001fc8 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e09a      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c46:	4b50      	ldr	r3, [pc, #320]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8083 	beq.w	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	4b48      	ldr	r3, [pc, #288]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	4a47      	ldr	r2, [pc, #284]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c70:	4b45      	ldr	r3, [pc, #276]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c7c:	4b43      	ldr	r3, [pc, #268]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a42      	ldr	r2, [pc, #264]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c86:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c88:	f7fc f99e 	bl	8001fc8 <HAL_GetTick>
 8005c8c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c90:	f7fc f99a 	bl	8001fc8 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e06c      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ca2:	4b3a      	ldr	r3, [pc, #232]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f0      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cae:	4b36      	ldr	r3, [pc, #216]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cb6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d02f      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d028      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ce2:	4a29      	ldr	r2, [pc, #164]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ce8:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d114      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cf4:	f7fc f968 	bl	8001fc8 <HAL_GetTick>
 8005cf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cfc:	f7fc f964 	bl	8001fc8 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e034      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d12:	4b1d      	ldr	r3, [pc, #116]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0ee      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d2a:	d10d      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005d2c:	4b16      	ldr	r3, [pc, #88]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d40:	4911      	ldr	r1, [pc, #68]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
 8005d46:	e005      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005d48:	4b0f      	ldr	r3, [pc, #60]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005d52:	6093      	str	r3, [r2, #8]
 8005d54:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d60:	4909      	ldr	r1, [pc, #36]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	7d1a      	ldrb	r2, [r3, #20]
 8005d76:	4b07      	ldr	r3, [pc, #28]	@ (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005d78:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	42470068 	.word	0x42470068
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40007000 	.word	0x40007000
 8005d90:	42470e40 	.word	0x42470e40
 8005d94:	424711e0 	.word	0x424711e0

08005d98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e073      	b.n	8005e92 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	7f5b      	ldrb	r3, [r3, #29]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fb fd2a 	bl	8001814 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d055      	beq.n	8005e80 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	22ca      	movs	r2, #202	@ 0xca
 8005dda:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2253      	movs	r2, #83	@ 0x53
 8005de2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f99d 	bl	8006124 <RTC_EnterInitMode>
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d12c      	bne.n	8005e4e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e06:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6899      	ldr	r1, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68d2      	ldr	r2, [r2, #12]
 8005e2e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6919      	ldr	r1, [r3, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	041a      	lsls	r2, r3, #16
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f9a4 	bl	8006192 <RTC_ExitInitMode>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d110      	bne.n	8005e76 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e62:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	22ff      	movs	r2, #255	@ 0xff
 8005e7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e7e:	e001      	b.n	8005e84 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e9a:	b590      	push	{r4, r7, lr}
 8005e9c:	b087      	sub	sp, #28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	7f1b      	ldrb	r3, [r3, #28]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RTC_SetTime+0x1c>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e087      	b.n	8005fc6 <HAL_RTC_SetTime+0x12c>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d126      	bne.n	8005f16 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 f97b 	bl	80061dc <RTC_ByteToBcd2>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f974 	bl	80061dc <RTC_ByteToBcd2>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ef8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	789b      	ldrb	r3, [r3, #2]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 f96c 	bl	80061dc <RTC_ByteToBcd2>
 8005f04:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f06:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	78db      	ldrb	r3, [r3, #3]
 8005f0e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e018      	b.n	8005f48 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d102      	bne.n	8005f2a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2200      	movs	r2, #0
 8005f28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f36:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	78db      	ldrb	r3, [r3, #3]
 8005f42:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	22ca      	movs	r2, #202	@ 0xca
 8005f4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2253      	movs	r2, #83	@ 0x53
 8005f56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f8e3 	bl	8006124 <RTC_EnterInitMode>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f62:	7cfb      	ldrb	r3, [r7, #19]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d120      	bne.n	8005faa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005f72:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005f76:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6899      	ldr	r1, [r3, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f8f6 	bl	8006192 <RTC_ExitInitMode>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	22ff      	movs	r2, #255	@ 0xff
 8005fbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]

  return status;
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd90      	pop	{r4, r7, pc}

08005fce <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fce:	b590      	push	{r4, r7, lr}
 8005fd0:	b087      	sub	sp, #28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	7f1b      	ldrb	r3, [r3, #28]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_RTC_SetDate+0x1c>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e071      	b.n	80060ce <HAL_RTC_SetDate+0x100>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10e      	bne.n	800601a <HAL_RTC_SetDate+0x4c>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	f023 0310 	bic.w	r3, r3, #16
 8006010:	b2db      	uxtb	r3, r3
 8006012:	330a      	adds	r3, #10
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d11c      	bne.n	800605a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	78db      	ldrb	r3, [r3, #3]
 8006024:	4618      	mov	r0, r3
 8006026:	f000 f8d9 	bl	80061dc <RTC_ByteToBcd2>
 800602a:	4603      	mov	r3, r0
 800602c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f8d2 	bl	80061dc <RTC_ByteToBcd2>
 8006038:	4603      	mov	r3, r0
 800603a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800603c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	789b      	ldrb	r3, [r3, #2]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f8ca 	bl	80061dc <RTC_ByteToBcd2>
 8006048:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800604a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	e00e      	b.n	8006078 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	78db      	ldrb	r3, [r3, #3]
 800605e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006066:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800606c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	22ca      	movs	r2, #202	@ 0xca
 800607e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2253      	movs	r2, #83	@ 0x53
 8006086:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f84b 	bl	8006124 <RTC_EnterInitMode>
 800608e:	4603      	mov	r3, r0
 8006090:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006092:	7cfb      	ldrb	r3, [r7, #19]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10c      	bne.n	80060b2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80060a6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f872 	bl	8006192 <RTC_ExitInitMode>
 80060ae:	4603      	mov	r3, r0
 80060b0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80060b2:	7cfb      	ldrb	r3, [r7, #19]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	22ff      	movs	r2, #255	@ 0xff
 80060c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]

  return status;
 80060cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd90      	pop	{r4, r7, pc}
	...

080060d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006120 <HAL_RTC_WaitForSynchro+0x48>)
 80060ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060ec:	f7fb ff6c 	bl	8001fc8 <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060f2:	e009      	b.n	8006108 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060f4:	f7fb ff68 	bl	8001fc8 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006102:	d901      	bls.n	8006108 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e007      	b.n	8006118 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ee      	beq.n	80060f4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	00013f5f 	.word	0x00013f5f

08006124 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d122      	bne.n	8006188 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006150:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006152:	f7fb ff39 	bl	8001fc8 <HAL_GetTick>
 8006156:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006158:	e00c      	b.n	8006174 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800615a:	f7fb ff35 	bl	8001fc8 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006168:	d904      	bls.n	8006174 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2204      	movs	r2, #4
 800616e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <RTC_EnterInitMode+0x64>
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d1e8      	bne.n	800615a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061ac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff ff8b 	bl	80060d8 <HAL_RTC_WaitForSynchro>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2204      	movs	r2, #4
 80061cc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80061ea:	e005      	b.n	80061f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3301      	adds	r3, #1
 80061f0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80061f2:	79fb      	ldrb	r3, [r7, #7]
 80061f4:	3b0a      	subs	r3, #10
 80061f6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	2b09      	cmp	r3, #9
 80061fc:	d8f6      	bhi.n	80061ec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	b2da      	uxtb	r2, r3
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	4313      	orrs	r3, r2
 800620a:	b2db      	uxtb	r3, r3
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e041      	b.n	80062ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fb fdd0 	bl	8001de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f000 fc30 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <HAL_TIM_PWM_Start_IT+0x28>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e022      	b.n	8006326 <HAL_TIM_PWM_Start_IT+0x6e>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d109      	bne.n	80062fa <HAL_TIM_PWM_Start_IT+0x42>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	bf14      	ite	ne
 80062f2:	2301      	movne	r3, #1
 80062f4:	2300      	moveq	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	e015      	b.n	8006326 <HAL_TIM_PWM_Start_IT+0x6e>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d109      	bne.n	8006314 <HAL_TIM_PWM_Start_IT+0x5c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	bf14      	ite	ne
 800630c:	2301      	movne	r3, #1
 800630e:	2300      	moveq	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e008      	b.n	8006326 <HAL_TIM_PWM_Start_IT+0x6e>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e0b3      	b.n	8006496 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d104      	bne.n	800633e <HAL_TIM_PWM_Start_IT+0x86>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800633c:	e013      	b.n	8006366 <HAL_TIM_PWM_Start_IT+0xae>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b04      	cmp	r3, #4
 8006342:	d104      	bne.n	800634e <HAL_TIM_PWM_Start_IT+0x96>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800634c:	e00b      	b.n	8006366 <HAL_TIM_PWM_Start_IT+0xae>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d104      	bne.n	800635e <HAL_TIM_PWM_Start_IT+0xa6>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800635c:	e003      	b.n	8006366 <HAL_TIM_PWM_Start_IT+0xae>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b0c      	cmp	r3, #12
 800636a:	d841      	bhi.n	80063f0 <HAL_TIM_PWM_Start_IT+0x138>
 800636c:	a201      	add	r2, pc, #4	@ (adr r2, 8006374 <HAL_TIM_PWM_Start_IT+0xbc>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	080063a9 	.word	0x080063a9
 8006378:	080063f1 	.word	0x080063f1
 800637c:	080063f1 	.word	0x080063f1
 8006380:	080063f1 	.word	0x080063f1
 8006384:	080063bb 	.word	0x080063bb
 8006388:	080063f1 	.word	0x080063f1
 800638c:	080063f1 	.word	0x080063f1
 8006390:	080063f1 	.word	0x080063f1
 8006394:	080063cd 	.word	0x080063cd
 8006398:	080063f1 	.word	0x080063f1
 800639c:	080063f1 	.word	0x080063f1
 80063a0:	080063f1 	.word	0x080063f1
 80063a4:	080063df 	.word	0x080063df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0202 	orr.w	r2, r2, #2
 80063b6:	60da      	str	r2, [r3, #12]
      break;
 80063b8:	e01d      	b.n	80063f6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0204 	orr.w	r2, r2, #4
 80063c8:	60da      	str	r2, [r3, #12]
      break;
 80063ca:	e014      	b.n	80063f6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0208 	orr.w	r2, r2, #8
 80063da:	60da      	str	r2, [r3, #12]
      break;
 80063dc:	e00b      	b.n	80063f6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0210 	orr.w	r2, r2, #16
 80063ec:	60da      	str	r2, [r3, #12]
      break;
 80063ee:	e002      	b.n	80063f6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
      break;
 80063f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d14b      	bne.n	8006494 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2201      	movs	r2, #1
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fd6b 	bl	8006ee0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a24      	ldr	r2, [pc, #144]	@ (80064a0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d107      	bne.n	8006424 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006422:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_TIM_PWM_Start_IT+0x1a8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006436:	d013      	beq.n	8006460 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a19      	ldr	r2, [pc, #100]	@ (80064a4 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a18      	ldr	r2, [pc, #96]	@ (80064a8 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_TIM_PWM_Start_IT+0x1a8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a16      	ldr	r2, [pc, #88]	@ (80064ac <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a15      	ldr	r2, [pc, #84]	@ (80064b0 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d111      	bne.n	8006484 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b06      	cmp	r3, #6
 8006470:	d010      	beq.n	8006494 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006482:	e007      	b.n	8006494 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40014000 	.word	0x40014000

080064b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e097      	b.n	80065f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d106      	bne.n	80064e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fb fc31 	bl	8001d44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064f8:	f023 0307 	bic.w	r3, r3, #7
 80064fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 fad7 	bl	8006abc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	4313      	orrs	r3, r2
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006554:	f023 030c 	bic.w	r3, r3, #12
 8006558:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	4313      	orrs	r3, r2
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	011a      	lsls	r2, r3, #4
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	031b      	lsls	r3, r3, #12
 8006584:	4313      	orrs	r3, r2
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800659a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	4313      	orrs	r3, r2
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006610:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006618:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006620:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006628:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d110      	bne.n	8006652 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d102      	bne.n	800663c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006636:	7b7b      	ldrb	r3, [r7, #13]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d001      	beq.n	8006640 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e069      	b.n	8006714 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006650:	e031      	b.n	80066b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b04      	cmp	r3, #4
 8006656:	d110      	bne.n	800667a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d102      	bne.n	8006664 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800665e:	7b3b      	ldrb	r3, [r7, #12]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d001      	beq.n	8006668 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e055      	b.n	8006714 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006678:	e01d      	b.n	80066b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d108      	bne.n	8006692 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d105      	bne.n	8006692 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006686:	7b7b      	ldrb	r3, [r7, #13]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d102      	bne.n	8006692 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800668c:	7b3b      	ldrb	r3, [r7, #12]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d001      	beq.n	8006696 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e03e      	b.n	8006714 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2202      	movs	r2, #2
 80066a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_TIM_Encoder_Start+0xc4>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d008      	beq.n	80066d4 <HAL_TIM_Encoder_Start+0xd4>
 80066c2:	e00f      	b.n	80066e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2201      	movs	r2, #1
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fc07 	bl	8006ee0 <TIM_CCxChannelCmd>
      break;
 80066d2:	e016      	b.n	8006702 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	2104      	movs	r1, #4
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fbff 	bl	8006ee0 <TIM_CCxChannelCmd>
      break;
 80066e2:	e00e      	b.n	8006702 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2201      	movs	r2, #1
 80066ea:	2100      	movs	r1, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fbf7 	bl	8006ee0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2201      	movs	r2, #1
 80066f8:	2104      	movs	r1, #4
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fbf0 	bl	8006ee0 <TIM_CCxChannelCmd>
      break;
 8006700:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0201 	orr.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d020      	beq.n	8006780 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01b      	beq.n	8006780 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0202 	mvn.w	r2, #2
 8006750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f994 	bl	8006a94 <HAL_TIM_IC_CaptureCallback>
 800676c:	e005      	b.n	800677a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f986 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fb f915 	bl	80019a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d020      	beq.n	80067cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01b      	beq.n	80067cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f06f 0204 	mvn.w	r2, #4
 800679c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2202      	movs	r2, #2
 80067a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f96e 	bl	8006a94 <HAL_TIM_IC_CaptureCallback>
 80067b8:	e005      	b.n	80067c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f960 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7fb f8ef 	bl	80019a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d020      	beq.n	8006818 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01b      	beq.n	8006818 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0208 	mvn.w	r2, #8
 80067e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2204      	movs	r2, #4
 80067ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f948 	bl	8006a94 <HAL_TIM_IC_CaptureCallback>
 8006804:	e005      	b.n	8006812 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f93a 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fb f8c9 	bl	80019a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b00      	cmp	r3, #0
 8006820:	d020      	beq.n	8006864 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01b      	beq.n	8006864 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f06f 0210 	mvn.w	r2, #16
 8006834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2208      	movs	r2, #8
 800683a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f922 	bl	8006a94 <HAL_TIM_IC_CaptureCallback>
 8006850:	e005      	b.n	800685e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f914 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7fb f8a3 	bl	80019a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00c      	beq.n	8006888 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f06f 0201 	mvn.w	r2, #1
 8006880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fb f878 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fbb8 	bl	800701c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00c      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f8ec 	bl	8006aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00c      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0220 	mvn.w	r2, #32
 80068ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fb8a 	bl	8007008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006916:	2302      	movs	r3, #2
 8006918:	e0ae      	b.n	8006a78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b0c      	cmp	r3, #12
 8006926:	f200 809f 	bhi.w	8006a68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800692a:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006965 	.word	0x08006965
 8006934:	08006a69 	.word	0x08006a69
 8006938:	08006a69 	.word	0x08006a69
 800693c:	08006a69 	.word	0x08006a69
 8006940:	080069a5 	.word	0x080069a5
 8006944:	08006a69 	.word	0x08006a69
 8006948:	08006a69 	.word	0x08006a69
 800694c:	08006a69 	.word	0x08006a69
 8006950:	080069e7 	.word	0x080069e7
 8006954:	08006a69 	.word	0x08006a69
 8006958:	08006a69 	.word	0x08006a69
 800695c:	08006a69 	.word	0x08006a69
 8006960:	08006a27 	.word	0x08006a27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	4618      	mov	r0, r3
 800696c:	f000 f92c 	bl	8006bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0208 	orr.w	r2, r2, #8
 800697e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0204 	bic.w	r2, r2, #4
 800698e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6999      	ldr	r1, [r3, #24]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	691a      	ldr	r2, [r3, #16]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	619a      	str	r2, [r3, #24]
      break;
 80069a2:	e064      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 f972 	bl	8006c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6999      	ldr	r1, [r3, #24]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	021a      	lsls	r2, r3, #8
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	619a      	str	r2, [r3, #24]
      break;
 80069e4:	e043      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 f9bd 	bl	8006d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0208 	orr.w	r2, r2, #8
 8006a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0204 	bic.w	r2, r2, #4
 8006a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69d9      	ldr	r1, [r3, #28]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	61da      	str	r2, [r3, #28]
      break;
 8006a24:	e023      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fa07 	bl	8006e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69d9      	ldr	r1, [r3, #28]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	021a      	lsls	r2, r3, #8
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	61da      	str	r2, [r3, #28]
      break;
 8006a66:	e002      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a37      	ldr	r2, [pc, #220]	@ (8006bac <TIM_Base_SetConfig+0xf0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00f      	beq.n	8006af4 <TIM_Base_SetConfig+0x38>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ada:	d00b      	beq.n	8006af4 <TIM_Base_SetConfig+0x38>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a34      	ldr	r2, [pc, #208]	@ (8006bb0 <TIM_Base_SetConfig+0xf4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <TIM_Base_SetConfig+0x38>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a33      	ldr	r2, [pc, #204]	@ (8006bb4 <TIM_Base_SetConfig+0xf8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_Base_SetConfig+0x38>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a32      	ldr	r2, [pc, #200]	@ (8006bb8 <TIM_Base_SetConfig+0xfc>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d108      	bne.n	8006b06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a28      	ldr	r2, [pc, #160]	@ (8006bac <TIM_Base_SetConfig+0xf0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d01b      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b14:	d017      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a25      	ldr	r2, [pc, #148]	@ (8006bb0 <TIM_Base_SetConfig+0xf4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a24      	ldr	r2, [pc, #144]	@ (8006bb4 <TIM_Base_SetConfig+0xf8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00f      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a23      	ldr	r2, [pc, #140]	@ (8006bb8 <TIM_Base_SetConfig+0xfc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00b      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a22      	ldr	r2, [pc, #136]	@ (8006bbc <TIM_Base_SetConfig+0x100>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d007      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a21      	ldr	r2, [pc, #132]	@ (8006bc0 <TIM_Base_SetConfig+0x104>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a20      	ldr	r2, [pc, #128]	@ (8006bc4 <TIM_Base_SetConfig+0x108>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d108      	bne.n	8006b58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a0c      	ldr	r2, [pc, #48]	@ (8006bac <TIM_Base_SetConfig+0xf0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d103      	bne.n	8006b86 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f043 0204 	orr.w	r2, r3, #4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	601a      	str	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40014400 	.word	0x40014400
 8006bc4:	40014800 	.word	0x40014800

08006bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f023 0201 	bic.w	r2, r3, #1
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0303 	bic.w	r3, r3, #3
 8006bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f023 0302 	bic.w	r3, r3, #2
 8006c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006c90 <TIM_OC1_SetConfig+0xc8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d10c      	bne.n	8006c3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0308 	bic.w	r3, r3, #8
 8006c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 0304 	bic.w	r3, r3, #4
 8006c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a13      	ldr	r2, [pc, #76]	@ (8006c90 <TIM_OC1_SetConfig+0xc8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d111      	bne.n	8006c6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	621a      	str	r2, [r3, #32]
}
 8006c84:	bf00      	nop
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	40010000 	.word	0x40010000

08006c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	f023 0210 	bic.w	r2, r3, #16
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f023 0320 	bic.w	r3, r3, #32
 8006cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a1e      	ldr	r2, [pc, #120]	@ (8006d68 <TIM_OC2_SetConfig+0xd4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d10d      	bne.n	8006d10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a15      	ldr	r2, [pc, #84]	@ (8006d68 <TIM_OC2_SetConfig+0xd4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d113      	bne.n	8006d40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40010000 	.word	0x40010000

08006d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0303 	bic.w	r3, r3, #3
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	021b      	lsls	r3, r3, #8
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e3c <TIM_OC3_SetConfig+0xd0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d10d      	bne.n	8006de6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a14      	ldr	r2, [pc, #80]	@ (8006e3c <TIM_OC3_SetConfig+0xd0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d113      	bne.n	8006e16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	621a      	str	r2, [r3, #32]
}
 8006e30:	bf00      	nop
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	40010000 	.word	0x40010000

08006e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	031b      	lsls	r3, r3, #12
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a10      	ldr	r2, [pc, #64]	@ (8006edc <TIM_OC4_SetConfig+0x9c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d109      	bne.n	8006eb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	019b      	lsls	r3, r3, #6
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	621a      	str	r2, [r3, #32]
}
 8006ece:	bf00      	nop
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40010000 	.word	0x40010000

08006ee0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6a1a      	ldr	r2, [r3, #32]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	43db      	mvns	r3, r3
 8006f02:	401a      	ands	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1a      	ldr	r2, [r3, #32]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	fa01 f303 	lsl.w	r3, r1, r3
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e050      	b.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d018      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f90:	d013      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a18      	ldr	r2, [pc, #96]	@ (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00e      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a16      	ldr	r2, [pc, #88]	@ (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d009      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a15      	ldr	r2, [pc, #84]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d004      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a13      	ldr	r2, [pc, #76]	@ (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d10c      	bne.n	8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40000c00 	.word	0x40000c00
 8007004:	40014000 	.word	0x40014000

08007008 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <malloc>:
 8007030:	4b02      	ldr	r3, [pc, #8]	@ (800703c <malloc+0xc>)
 8007032:	4601      	mov	r1, r0
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	f000 b825 	b.w	8007084 <_malloc_r>
 800703a:	bf00      	nop
 800703c:	20000018 	.word	0x20000018

08007040 <sbrk_aligned>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	4e0f      	ldr	r6, [pc, #60]	@ (8007080 <sbrk_aligned+0x40>)
 8007044:	460c      	mov	r4, r1
 8007046:	6831      	ldr	r1, [r6, #0]
 8007048:	4605      	mov	r5, r0
 800704a:	b911      	cbnz	r1, 8007052 <sbrk_aligned+0x12>
 800704c:	f000 fa1c 	bl	8007488 <_sbrk_r>
 8007050:	6030      	str	r0, [r6, #0]
 8007052:	4621      	mov	r1, r4
 8007054:	4628      	mov	r0, r5
 8007056:	f000 fa17 	bl	8007488 <_sbrk_r>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	d103      	bne.n	8007066 <sbrk_aligned+0x26>
 800705e:	f04f 34ff 	mov.w	r4, #4294967295
 8007062:	4620      	mov	r0, r4
 8007064:	bd70      	pop	{r4, r5, r6, pc}
 8007066:	1cc4      	adds	r4, r0, #3
 8007068:	f024 0403 	bic.w	r4, r4, #3
 800706c:	42a0      	cmp	r0, r4
 800706e:	d0f8      	beq.n	8007062 <sbrk_aligned+0x22>
 8007070:	1a21      	subs	r1, r4, r0
 8007072:	4628      	mov	r0, r5
 8007074:	f000 fa08 	bl	8007488 <_sbrk_r>
 8007078:	3001      	adds	r0, #1
 800707a:	d1f2      	bne.n	8007062 <sbrk_aligned+0x22>
 800707c:	e7ef      	b.n	800705e <sbrk_aligned+0x1e>
 800707e:	bf00      	nop
 8007080:	20000244 	.word	0x20000244

08007084 <_malloc_r>:
 8007084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007088:	1ccd      	adds	r5, r1, #3
 800708a:	f025 0503 	bic.w	r5, r5, #3
 800708e:	3508      	adds	r5, #8
 8007090:	2d0c      	cmp	r5, #12
 8007092:	bf38      	it	cc
 8007094:	250c      	movcc	r5, #12
 8007096:	2d00      	cmp	r5, #0
 8007098:	4606      	mov	r6, r0
 800709a:	db01      	blt.n	80070a0 <_malloc_r+0x1c>
 800709c:	42a9      	cmp	r1, r5
 800709e:	d904      	bls.n	80070aa <_malloc_r+0x26>
 80070a0:	230c      	movs	r3, #12
 80070a2:	6033      	str	r3, [r6, #0]
 80070a4:	2000      	movs	r0, #0
 80070a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007180 <_malloc_r+0xfc>
 80070ae:	f000 f869 	bl	8007184 <__malloc_lock>
 80070b2:	f8d8 3000 	ldr.w	r3, [r8]
 80070b6:	461c      	mov	r4, r3
 80070b8:	bb44      	cbnz	r4, 800710c <_malloc_r+0x88>
 80070ba:	4629      	mov	r1, r5
 80070bc:	4630      	mov	r0, r6
 80070be:	f7ff ffbf 	bl	8007040 <sbrk_aligned>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	4604      	mov	r4, r0
 80070c6:	d158      	bne.n	800717a <_malloc_r+0xf6>
 80070c8:	f8d8 4000 	ldr.w	r4, [r8]
 80070cc:	4627      	mov	r7, r4
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	d143      	bne.n	800715a <_malloc_r+0xd6>
 80070d2:	2c00      	cmp	r4, #0
 80070d4:	d04b      	beq.n	800716e <_malloc_r+0xea>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	4639      	mov	r1, r7
 80070da:	4630      	mov	r0, r6
 80070dc:	eb04 0903 	add.w	r9, r4, r3
 80070e0:	f000 f9d2 	bl	8007488 <_sbrk_r>
 80070e4:	4581      	cmp	r9, r0
 80070e6:	d142      	bne.n	800716e <_malloc_r+0xea>
 80070e8:	6821      	ldr	r1, [r4, #0]
 80070ea:	1a6d      	subs	r5, r5, r1
 80070ec:	4629      	mov	r1, r5
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff ffa6 	bl	8007040 <sbrk_aligned>
 80070f4:	3001      	adds	r0, #1
 80070f6:	d03a      	beq.n	800716e <_malloc_r+0xea>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	442b      	add	r3, r5
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	bb62      	cbnz	r2, 8007160 <_malloc_r+0xdc>
 8007106:	f8c8 7000 	str.w	r7, [r8]
 800710a:	e00f      	b.n	800712c <_malloc_r+0xa8>
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	1b52      	subs	r2, r2, r5
 8007110:	d420      	bmi.n	8007154 <_malloc_r+0xd0>
 8007112:	2a0b      	cmp	r2, #11
 8007114:	d917      	bls.n	8007146 <_malloc_r+0xc2>
 8007116:	1961      	adds	r1, r4, r5
 8007118:	42a3      	cmp	r3, r4
 800711a:	6025      	str	r5, [r4, #0]
 800711c:	bf18      	it	ne
 800711e:	6059      	strne	r1, [r3, #4]
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	bf08      	it	eq
 8007124:	f8c8 1000 	streq.w	r1, [r8]
 8007128:	5162      	str	r2, [r4, r5]
 800712a:	604b      	str	r3, [r1, #4]
 800712c:	4630      	mov	r0, r6
 800712e:	f000 f82f 	bl	8007190 <__malloc_unlock>
 8007132:	f104 000b 	add.w	r0, r4, #11
 8007136:	1d23      	adds	r3, r4, #4
 8007138:	f020 0007 	bic.w	r0, r0, #7
 800713c:	1ac2      	subs	r2, r0, r3
 800713e:	bf1c      	itt	ne
 8007140:	1a1b      	subne	r3, r3, r0
 8007142:	50a3      	strne	r3, [r4, r2]
 8007144:	e7af      	b.n	80070a6 <_malloc_r+0x22>
 8007146:	6862      	ldr	r2, [r4, #4]
 8007148:	42a3      	cmp	r3, r4
 800714a:	bf0c      	ite	eq
 800714c:	f8c8 2000 	streq.w	r2, [r8]
 8007150:	605a      	strne	r2, [r3, #4]
 8007152:	e7eb      	b.n	800712c <_malloc_r+0xa8>
 8007154:	4623      	mov	r3, r4
 8007156:	6864      	ldr	r4, [r4, #4]
 8007158:	e7ae      	b.n	80070b8 <_malloc_r+0x34>
 800715a:	463c      	mov	r4, r7
 800715c:	687f      	ldr	r7, [r7, #4]
 800715e:	e7b6      	b.n	80070ce <_malloc_r+0x4a>
 8007160:	461a      	mov	r2, r3
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	42a3      	cmp	r3, r4
 8007166:	d1fb      	bne.n	8007160 <_malloc_r+0xdc>
 8007168:	2300      	movs	r3, #0
 800716a:	6053      	str	r3, [r2, #4]
 800716c:	e7de      	b.n	800712c <_malloc_r+0xa8>
 800716e:	230c      	movs	r3, #12
 8007170:	6033      	str	r3, [r6, #0]
 8007172:	4630      	mov	r0, r6
 8007174:	f000 f80c 	bl	8007190 <__malloc_unlock>
 8007178:	e794      	b.n	80070a4 <_malloc_r+0x20>
 800717a:	6005      	str	r5, [r0, #0]
 800717c:	e7d6      	b.n	800712c <_malloc_r+0xa8>
 800717e:	bf00      	nop
 8007180:	20000248 	.word	0x20000248

08007184 <__malloc_lock>:
 8007184:	4801      	ldr	r0, [pc, #4]	@ (800718c <__malloc_lock+0x8>)
 8007186:	f000 b9cc 	b.w	8007522 <__retarget_lock_acquire_recursive>
 800718a:	bf00      	nop
 800718c:	2000038c 	.word	0x2000038c

08007190 <__malloc_unlock>:
 8007190:	4801      	ldr	r0, [pc, #4]	@ (8007198 <__malloc_unlock+0x8>)
 8007192:	f000 b9c7 	b.w	8007524 <__retarget_lock_release_recursive>
 8007196:	bf00      	nop
 8007198:	2000038c 	.word	0x2000038c

0800719c <std>:
 800719c:	2300      	movs	r3, #0
 800719e:	b510      	push	{r4, lr}
 80071a0:	4604      	mov	r4, r0
 80071a2:	e9c0 3300 	strd	r3, r3, [r0]
 80071a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071aa:	6083      	str	r3, [r0, #8]
 80071ac:	8181      	strh	r1, [r0, #12]
 80071ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80071b0:	81c2      	strh	r2, [r0, #14]
 80071b2:	6183      	str	r3, [r0, #24]
 80071b4:	4619      	mov	r1, r3
 80071b6:	2208      	movs	r2, #8
 80071b8:	305c      	adds	r0, #92	@ 0x5c
 80071ba:	f000 f928 	bl	800740e <memset>
 80071be:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <std+0x58>)
 80071c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80071c2:	4b0d      	ldr	r3, [pc, #52]	@ (80071f8 <std+0x5c>)
 80071c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071c6:	4b0d      	ldr	r3, [pc, #52]	@ (80071fc <std+0x60>)
 80071c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007200 <std+0x64>)
 80071cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80071ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <std+0x68>)
 80071d0:	6224      	str	r4, [r4, #32]
 80071d2:	429c      	cmp	r4, r3
 80071d4:	d006      	beq.n	80071e4 <std+0x48>
 80071d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071da:	4294      	cmp	r4, r2
 80071dc:	d002      	beq.n	80071e4 <std+0x48>
 80071de:	33d0      	adds	r3, #208	@ 0xd0
 80071e0:	429c      	cmp	r4, r3
 80071e2:	d105      	bne.n	80071f0 <std+0x54>
 80071e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ec:	f000 b998 	b.w	8007520 <__retarget_lock_init_recursive>
 80071f0:	bd10      	pop	{r4, pc}
 80071f2:	bf00      	nop
 80071f4:	08007389 	.word	0x08007389
 80071f8:	080073ab 	.word	0x080073ab
 80071fc:	080073e3 	.word	0x080073e3
 8007200:	08007407 	.word	0x08007407
 8007204:	2000024c 	.word	0x2000024c

08007208 <stdio_exit_handler>:
 8007208:	4a02      	ldr	r2, [pc, #8]	@ (8007214 <stdio_exit_handler+0xc>)
 800720a:	4903      	ldr	r1, [pc, #12]	@ (8007218 <stdio_exit_handler+0x10>)
 800720c:	4803      	ldr	r0, [pc, #12]	@ (800721c <stdio_exit_handler+0x14>)
 800720e:	f000 b869 	b.w	80072e4 <_fwalk_sglue>
 8007212:	bf00      	nop
 8007214:	2000000c 	.word	0x2000000c
 8007218:	08007f11 	.word	0x08007f11
 800721c:	2000001c 	.word	0x2000001c

08007220 <cleanup_stdio>:
 8007220:	6841      	ldr	r1, [r0, #4]
 8007222:	4b0c      	ldr	r3, [pc, #48]	@ (8007254 <cleanup_stdio+0x34>)
 8007224:	4299      	cmp	r1, r3
 8007226:	b510      	push	{r4, lr}
 8007228:	4604      	mov	r4, r0
 800722a:	d001      	beq.n	8007230 <cleanup_stdio+0x10>
 800722c:	f000 fe70 	bl	8007f10 <_fflush_r>
 8007230:	68a1      	ldr	r1, [r4, #8]
 8007232:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <cleanup_stdio+0x38>)
 8007234:	4299      	cmp	r1, r3
 8007236:	d002      	beq.n	800723e <cleanup_stdio+0x1e>
 8007238:	4620      	mov	r0, r4
 800723a:	f000 fe69 	bl	8007f10 <_fflush_r>
 800723e:	68e1      	ldr	r1, [r4, #12]
 8007240:	4b06      	ldr	r3, [pc, #24]	@ (800725c <cleanup_stdio+0x3c>)
 8007242:	4299      	cmp	r1, r3
 8007244:	d004      	beq.n	8007250 <cleanup_stdio+0x30>
 8007246:	4620      	mov	r0, r4
 8007248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800724c:	f000 be60 	b.w	8007f10 <_fflush_r>
 8007250:	bd10      	pop	{r4, pc}
 8007252:	bf00      	nop
 8007254:	2000024c 	.word	0x2000024c
 8007258:	200002b4 	.word	0x200002b4
 800725c:	2000031c 	.word	0x2000031c

08007260 <global_stdio_init.part.0>:
 8007260:	b510      	push	{r4, lr}
 8007262:	4b0b      	ldr	r3, [pc, #44]	@ (8007290 <global_stdio_init.part.0+0x30>)
 8007264:	4c0b      	ldr	r4, [pc, #44]	@ (8007294 <global_stdio_init.part.0+0x34>)
 8007266:	4a0c      	ldr	r2, [pc, #48]	@ (8007298 <global_stdio_init.part.0+0x38>)
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	4620      	mov	r0, r4
 800726c:	2200      	movs	r2, #0
 800726e:	2104      	movs	r1, #4
 8007270:	f7ff ff94 	bl	800719c <std>
 8007274:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007278:	2201      	movs	r2, #1
 800727a:	2109      	movs	r1, #9
 800727c:	f7ff ff8e 	bl	800719c <std>
 8007280:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007284:	2202      	movs	r2, #2
 8007286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800728a:	2112      	movs	r1, #18
 800728c:	f7ff bf86 	b.w	800719c <std>
 8007290:	20000384 	.word	0x20000384
 8007294:	2000024c 	.word	0x2000024c
 8007298:	08007209 	.word	0x08007209

0800729c <__sfp_lock_acquire>:
 800729c:	4801      	ldr	r0, [pc, #4]	@ (80072a4 <__sfp_lock_acquire+0x8>)
 800729e:	f000 b940 	b.w	8007522 <__retarget_lock_acquire_recursive>
 80072a2:	bf00      	nop
 80072a4:	2000038d 	.word	0x2000038d

080072a8 <__sfp_lock_release>:
 80072a8:	4801      	ldr	r0, [pc, #4]	@ (80072b0 <__sfp_lock_release+0x8>)
 80072aa:	f000 b93b 	b.w	8007524 <__retarget_lock_release_recursive>
 80072ae:	bf00      	nop
 80072b0:	2000038d 	.word	0x2000038d

080072b4 <__sinit>:
 80072b4:	b510      	push	{r4, lr}
 80072b6:	4604      	mov	r4, r0
 80072b8:	f7ff fff0 	bl	800729c <__sfp_lock_acquire>
 80072bc:	6a23      	ldr	r3, [r4, #32]
 80072be:	b11b      	cbz	r3, 80072c8 <__sinit+0x14>
 80072c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c4:	f7ff bff0 	b.w	80072a8 <__sfp_lock_release>
 80072c8:	4b04      	ldr	r3, [pc, #16]	@ (80072dc <__sinit+0x28>)
 80072ca:	6223      	str	r3, [r4, #32]
 80072cc:	4b04      	ldr	r3, [pc, #16]	@ (80072e0 <__sinit+0x2c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1f5      	bne.n	80072c0 <__sinit+0xc>
 80072d4:	f7ff ffc4 	bl	8007260 <global_stdio_init.part.0>
 80072d8:	e7f2      	b.n	80072c0 <__sinit+0xc>
 80072da:	bf00      	nop
 80072dc:	08007221 	.word	0x08007221
 80072e0:	20000384 	.word	0x20000384

080072e4 <_fwalk_sglue>:
 80072e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e8:	4607      	mov	r7, r0
 80072ea:	4688      	mov	r8, r1
 80072ec:	4614      	mov	r4, r2
 80072ee:	2600      	movs	r6, #0
 80072f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072f4:	f1b9 0901 	subs.w	r9, r9, #1
 80072f8:	d505      	bpl.n	8007306 <_fwalk_sglue+0x22>
 80072fa:	6824      	ldr	r4, [r4, #0]
 80072fc:	2c00      	cmp	r4, #0
 80072fe:	d1f7      	bne.n	80072f0 <_fwalk_sglue+0xc>
 8007300:	4630      	mov	r0, r6
 8007302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d907      	bls.n	800731c <_fwalk_sglue+0x38>
 800730c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007310:	3301      	adds	r3, #1
 8007312:	d003      	beq.n	800731c <_fwalk_sglue+0x38>
 8007314:	4629      	mov	r1, r5
 8007316:	4638      	mov	r0, r7
 8007318:	47c0      	blx	r8
 800731a:	4306      	orrs	r6, r0
 800731c:	3568      	adds	r5, #104	@ 0x68
 800731e:	e7e9      	b.n	80072f4 <_fwalk_sglue+0x10>

08007320 <iprintf>:
 8007320:	b40f      	push	{r0, r1, r2, r3}
 8007322:	b507      	push	{r0, r1, r2, lr}
 8007324:	4906      	ldr	r1, [pc, #24]	@ (8007340 <iprintf+0x20>)
 8007326:	ab04      	add	r3, sp, #16
 8007328:	6808      	ldr	r0, [r1, #0]
 800732a:	f853 2b04 	ldr.w	r2, [r3], #4
 800732e:	6881      	ldr	r1, [r0, #8]
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	f000 fac5 	bl	80078c0 <_vfiprintf_r>
 8007336:	b003      	add	sp, #12
 8007338:	f85d eb04 	ldr.w	lr, [sp], #4
 800733c:	b004      	add	sp, #16
 800733e:	4770      	bx	lr
 8007340:	20000018 	.word	0x20000018

08007344 <siprintf>:
 8007344:	b40e      	push	{r1, r2, r3}
 8007346:	b510      	push	{r4, lr}
 8007348:	b09d      	sub	sp, #116	@ 0x74
 800734a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800734c:	9002      	str	r0, [sp, #8]
 800734e:	9006      	str	r0, [sp, #24]
 8007350:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007354:	480a      	ldr	r0, [pc, #40]	@ (8007380 <siprintf+0x3c>)
 8007356:	9107      	str	r1, [sp, #28]
 8007358:	9104      	str	r1, [sp, #16]
 800735a:	490a      	ldr	r1, [pc, #40]	@ (8007384 <siprintf+0x40>)
 800735c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007360:	9105      	str	r1, [sp, #20]
 8007362:	2400      	movs	r4, #0
 8007364:	a902      	add	r1, sp, #8
 8007366:	6800      	ldr	r0, [r0, #0]
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800736c:	f000 f982 	bl	8007674 <_svfiprintf_r>
 8007370:	9b02      	ldr	r3, [sp, #8]
 8007372:	701c      	strb	r4, [r3, #0]
 8007374:	b01d      	add	sp, #116	@ 0x74
 8007376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800737a:	b003      	add	sp, #12
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	20000018 	.word	0x20000018
 8007384:	ffff0208 	.word	0xffff0208

08007388 <__sread>:
 8007388:	b510      	push	{r4, lr}
 800738a:	460c      	mov	r4, r1
 800738c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007390:	f000 f868 	bl	8007464 <_read_r>
 8007394:	2800      	cmp	r0, #0
 8007396:	bfab      	itete	ge
 8007398:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800739a:	89a3      	ldrhlt	r3, [r4, #12]
 800739c:	181b      	addge	r3, r3, r0
 800739e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073a2:	bfac      	ite	ge
 80073a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073a6:	81a3      	strhlt	r3, [r4, #12]
 80073a8:	bd10      	pop	{r4, pc}

080073aa <__swrite>:
 80073aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ae:	461f      	mov	r7, r3
 80073b0:	898b      	ldrh	r3, [r1, #12]
 80073b2:	05db      	lsls	r3, r3, #23
 80073b4:	4605      	mov	r5, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	4616      	mov	r6, r2
 80073ba:	d505      	bpl.n	80073c8 <__swrite+0x1e>
 80073bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c0:	2302      	movs	r3, #2
 80073c2:	2200      	movs	r2, #0
 80073c4:	f000 f83c 	bl	8007440 <_lseek_r>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	4632      	mov	r2, r6
 80073d6:	463b      	mov	r3, r7
 80073d8:	4628      	mov	r0, r5
 80073da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073de:	f000 b863 	b.w	80074a8 <_write_r>

080073e2 <__sseek>:
 80073e2:	b510      	push	{r4, lr}
 80073e4:	460c      	mov	r4, r1
 80073e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ea:	f000 f829 	bl	8007440 <_lseek_r>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	bf15      	itete	ne
 80073f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073fe:	81a3      	strheq	r3, [r4, #12]
 8007400:	bf18      	it	ne
 8007402:	81a3      	strhne	r3, [r4, #12]
 8007404:	bd10      	pop	{r4, pc}

08007406 <__sclose>:
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 b809 	b.w	8007420 <_close_r>

0800740e <memset>:
 800740e:	4402      	add	r2, r0
 8007410:	4603      	mov	r3, r0
 8007412:	4293      	cmp	r3, r2
 8007414:	d100      	bne.n	8007418 <memset+0xa>
 8007416:	4770      	bx	lr
 8007418:	f803 1b01 	strb.w	r1, [r3], #1
 800741c:	e7f9      	b.n	8007412 <memset+0x4>
	...

08007420 <_close_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4d06      	ldr	r5, [pc, #24]	@ (800743c <_close_r+0x1c>)
 8007424:	2300      	movs	r3, #0
 8007426:	4604      	mov	r4, r0
 8007428:	4608      	mov	r0, r1
 800742a:	602b      	str	r3, [r5, #0]
 800742c:	f7fa fb53 	bl	8001ad6 <_close>
 8007430:	1c43      	adds	r3, r0, #1
 8007432:	d102      	bne.n	800743a <_close_r+0x1a>
 8007434:	682b      	ldr	r3, [r5, #0]
 8007436:	b103      	cbz	r3, 800743a <_close_r+0x1a>
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	20000388 	.word	0x20000388

08007440 <_lseek_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4d07      	ldr	r5, [pc, #28]	@ (8007460 <_lseek_r+0x20>)
 8007444:	4604      	mov	r4, r0
 8007446:	4608      	mov	r0, r1
 8007448:	4611      	mov	r1, r2
 800744a:	2200      	movs	r2, #0
 800744c:	602a      	str	r2, [r5, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	f7fa fb68 	bl	8001b24 <_lseek>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	d102      	bne.n	800745e <_lseek_r+0x1e>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	b103      	cbz	r3, 800745e <_lseek_r+0x1e>
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	bd38      	pop	{r3, r4, r5, pc}
 8007460:	20000388 	.word	0x20000388

08007464 <_read_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	@ (8007484 <_read_r+0x20>)
 8007468:	4604      	mov	r4, r0
 800746a:	4608      	mov	r0, r1
 800746c:	4611      	mov	r1, r2
 800746e:	2200      	movs	r2, #0
 8007470:	602a      	str	r2, [r5, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	f7fa faf6 	bl	8001a64 <_read>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_read_r+0x1e>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_read_r+0x1e>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20000388 	.word	0x20000388

08007488 <_sbrk_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d06      	ldr	r5, [pc, #24]	@ (80074a4 <_sbrk_r+0x1c>)
 800748c:	2300      	movs	r3, #0
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7fa fb54 	bl	8001b40 <_sbrk>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_sbrk_r+0x1a>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_sbrk_r+0x1a>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	20000388 	.word	0x20000388

080074a8 <_write_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4d07      	ldr	r5, [pc, #28]	@ (80074c8 <_write_r+0x20>)
 80074ac:	4604      	mov	r4, r0
 80074ae:	4608      	mov	r0, r1
 80074b0:	4611      	mov	r1, r2
 80074b2:	2200      	movs	r2, #0
 80074b4:	602a      	str	r2, [r5, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	f7fa faf1 	bl	8001a9e <_write>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_write_r+0x1e>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_write_r+0x1e>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	20000388 	.word	0x20000388

080074cc <__errno>:
 80074cc:	4b01      	ldr	r3, [pc, #4]	@ (80074d4 <__errno+0x8>)
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20000018 	.word	0x20000018

080074d8 <__libc_init_array>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	4d0d      	ldr	r5, [pc, #52]	@ (8007510 <__libc_init_array+0x38>)
 80074dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007514 <__libc_init_array+0x3c>)
 80074de:	1b64      	subs	r4, r4, r5
 80074e0:	10a4      	asrs	r4, r4, #2
 80074e2:	2600      	movs	r6, #0
 80074e4:	42a6      	cmp	r6, r4
 80074e6:	d109      	bne.n	80074fc <__libc_init_array+0x24>
 80074e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007518 <__libc_init_array+0x40>)
 80074ea:	4c0c      	ldr	r4, [pc, #48]	@ (800751c <__libc_init_array+0x44>)
 80074ec:	f000 feae 	bl	800824c <_init>
 80074f0:	1b64      	subs	r4, r4, r5
 80074f2:	10a4      	asrs	r4, r4, #2
 80074f4:	2600      	movs	r6, #0
 80074f6:	42a6      	cmp	r6, r4
 80074f8:	d105      	bne.n	8007506 <__libc_init_array+0x2e>
 80074fa:	bd70      	pop	{r4, r5, r6, pc}
 80074fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007500:	4798      	blx	r3
 8007502:	3601      	adds	r6, #1
 8007504:	e7ee      	b.n	80074e4 <__libc_init_array+0xc>
 8007506:	f855 3b04 	ldr.w	r3, [r5], #4
 800750a:	4798      	blx	r3
 800750c:	3601      	adds	r6, #1
 800750e:	e7f2      	b.n	80074f6 <__libc_init_array+0x1e>
 8007510:	0800880c 	.word	0x0800880c
 8007514:	0800880c 	.word	0x0800880c
 8007518:	0800880c 	.word	0x0800880c
 800751c:	08008810 	.word	0x08008810

08007520 <__retarget_lock_init_recursive>:
 8007520:	4770      	bx	lr

08007522 <__retarget_lock_acquire_recursive>:
 8007522:	4770      	bx	lr

08007524 <__retarget_lock_release_recursive>:
 8007524:	4770      	bx	lr
	...

08007528 <_free_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4605      	mov	r5, r0
 800752c:	2900      	cmp	r1, #0
 800752e:	d041      	beq.n	80075b4 <_free_r+0x8c>
 8007530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007534:	1f0c      	subs	r4, r1, #4
 8007536:	2b00      	cmp	r3, #0
 8007538:	bfb8      	it	lt
 800753a:	18e4      	addlt	r4, r4, r3
 800753c:	f7ff fe22 	bl	8007184 <__malloc_lock>
 8007540:	4a1d      	ldr	r2, [pc, #116]	@ (80075b8 <_free_r+0x90>)
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	b933      	cbnz	r3, 8007554 <_free_r+0x2c>
 8007546:	6063      	str	r3, [r4, #4]
 8007548:	6014      	str	r4, [r2, #0]
 800754a:	4628      	mov	r0, r5
 800754c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007550:	f7ff be1e 	b.w	8007190 <__malloc_unlock>
 8007554:	42a3      	cmp	r3, r4
 8007556:	d908      	bls.n	800756a <_free_r+0x42>
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	1821      	adds	r1, r4, r0
 800755c:	428b      	cmp	r3, r1
 800755e:	bf01      	itttt	eq
 8007560:	6819      	ldreq	r1, [r3, #0]
 8007562:	685b      	ldreq	r3, [r3, #4]
 8007564:	1809      	addeq	r1, r1, r0
 8007566:	6021      	streq	r1, [r4, #0]
 8007568:	e7ed      	b.n	8007546 <_free_r+0x1e>
 800756a:	461a      	mov	r2, r3
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	b10b      	cbz	r3, 8007574 <_free_r+0x4c>
 8007570:	42a3      	cmp	r3, r4
 8007572:	d9fa      	bls.n	800756a <_free_r+0x42>
 8007574:	6811      	ldr	r1, [r2, #0]
 8007576:	1850      	adds	r0, r2, r1
 8007578:	42a0      	cmp	r0, r4
 800757a:	d10b      	bne.n	8007594 <_free_r+0x6c>
 800757c:	6820      	ldr	r0, [r4, #0]
 800757e:	4401      	add	r1, r0
 8007580:	1850      	adds	r0, r2, r1
 8007582:	4283      	cmp	r3, r0
 8007584:	6011      	str	r1, [r2, #0]
 8007586:	d1e0      	bne.n	800754a <_free_r+0x22>
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	6053      	str	r3, [r2, #4]
 800758e:	4408      	add	r0, r1
 8007590:	6010      	str	r0, [r2, #0]
 8007592:	e7da      	b.n	800754a <_free_r+0x22>
 8007594:	d902      	bls.n	800759c <_free_r+0x74>
 8007596:	230c      	movs	r3, #12
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	e7d6      	b.n	800754a <_free_r+0x22>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	1821      	adds	r1, r4, r0
 80075a0:	428b      	cmp	r3, r1
 80075a2:	bf04      	itt	eq
 80075a4:	6819      	ldreq	r1, [r3, #0]
 80075a6:	685b      	ldreq	r3, [r3, #4]
 80075a8:	6063      	str	r3, [r4, #4]
 80075aa:	bf04      	itt	eq
 80075ac:	1809      	addeq	r1, r1, r0
 80075ae:	6021      	streq	r1, [r4, #0]
 80075b0:	6054      	str	r4, [r2, #4]
 80075b2:	e7ca      	b.n	800754a <_free_r+0x22>
 80075b4:	bd38      	pop	{r3, r4, r5, pc}
 80075b6:	bf00      	nop
 80075b8:	20000248 	.word	0x20000248

080075bc <__ssputs_r>:
 80075bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	688e      	ldr	r6, [r1, #8]
 80075c2:	461f      	mov	r7, r3
 80075c4:	42be      	cmp	r6, r7
 80075c6:	680b      	ldr	r3, [r1, #0]
 80075c8:	4682      	mov	sl, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	4690      	mov	r8, r2
 80075ce:	d82d      	bhi.n	800762c <__ssputs_r+0x70>
 80075d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075d8:	d026      	beq.n	8007628 <__ssputs_r+0x6c>
 80075da:	6965      	ldr	r5, [r4, #20]
 80075dc:	6909      	ldr	r1, [r1, #16]
 80075de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075e2:	eba3 0901 	sub.w	r9, r3, r1
 80075e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075ea:	1c7b      	adds	r3, r7, #1
 80075ec:	444b      	add	r3, r9
 80075ee:	106d      	asrs	r5, r5, #1
 80075f0:	429d      	cmp	r5, r3
 80075f2:	bf38      	it	cc
 80075f4:	461d      	movcc	r5, r3
 80075f6:	0553      	lsls	r3, r2, #21
 80075f8:	d527      	bpl.n	800764a <__ssputs_r+0x8e>
 80075fa:	4629      	mov	r1, r5
 80075fc:	f7ff fd42 	bl	8007084 <_malloc_r>
 8007600:	4606      	mov	r6, r0
 8007602:	b360      	cbz	r0, 800765e <__ssputs_r+0xa2>
 8007604:	6921      	ldr	r1, [r4, #16]
 8007606:	464a      	mov	r2, r9
 8007608:	f000 fd58 	bl	80080bc <memcpy>
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	6126      	str	r6, [r4, #16]
 800761a:	6165      	str	r5, [r4, #20]
 800761c:	444e      	add	r6, r9
 800761e:	eba5 0509 	sub.w	r5, r5, r9
 8007622:	6026      	str	r6, [r4, #0]
 8007624:	60a5      	str	r5, [r4, #8]
 8007626:	463e      	mov	r6, r7
 8007628:	42be      	cmp	r6, r7
 800762a:	d900      	bls.n	800762e <__ssputs_r+0x72>
 800762c:	463e      	mov	r6, r7
 800762e:	6820      	ldr	r0, [r4, #0]
 8007630:	4632      	mov	r2, r6
 8007632:	4641      	mov	r1, r8
 8007634:	f000 fd28 	bl	8008088 <memmove>
 8007638:	68a3      	ldr	r3, [r4, #8]
 800763a:	1b9b      	subs	r3, r3, r6
 800763c:	60a3      	str	r3, [r4, #8]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	4433      	add	r3, r6
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	2000      	movs	r0, #0
 8007646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764a:	462a      	mov	r2, r5
 800764c:	f000 fd44 	bl	80080d8 <_realloc_r>
 8007650:	4606      	mov	r6, r0
 8007652:	2800      	cmp	r0, #0
 8007654:	d1e0      	bne.n	8007618 <__ssputs_r+0x5c>
 8007656:	6921      	ldr	r1, [r4, #16]
 8007658:	4650      	mov	r0, sl
 800765a:	f7ff ff65 	bl	8007528 <_free_r>
 800765e:	230c      	movs	r3, #12
 8007660:	f8ca 3000 	str.w	r3, [sl]
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800766a:	81a3      	strh	r3, [r4, #12]
 800766c:	f04f 30ff 	mov.w	r0, #4294967295
 8007670:	e7e9      	b.n	8007646 <__ssputs_r+0x8a>
	...

08007674 <_svfiprintf_r>:
 8007674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	4698      	mov	r8, r3
 800767a:	898b      	ldrh	r3, [r1, #12]
 800767c:	061b      	lsls	r3, r3, #24
 800767e:	b09d      	sub	sp, #116	@ 0x74
 8007680:	4607      	mov	r7, r0
 8007682:	460d      	mov	r5, r1
 8007684:	4614      	mov	r4, r2
 8007686:	d510      	bpl.n	80076aa <_svfiprintf_r+0x36>
 8007688:	690b      	ldr	r3, [r1, #16]
 800768a:	b973      	cbnz	r3, 80076aa <_svfiprintf_r+0x36>
 800768c:	2140      	movs	r1, #64	@ 0x40
 800768e:	f7ff fcf9 	bl	8007084 <_malloc_r>
 8007692:	6028      	str	r0, [r5, #0]
 8007694:	6128      	str	r0, [r5, #16]
 8007696:	b930      	cbnz	r0, 80076a6 <_svfiprintf_r+0x32>
 8007698:	230c      	movs	r3, #12
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	b01d      	add	sp, #116	@ 0x74
 80076a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a6:	2340      	movs	r3, #64	@ 0x40
 80076a8:	616b      	str	r3, [r5, #20]
 80076aa:	2300      	movs	r3, #0
 80076ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ae:	2320      	movs	r3, #32
 80076b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80076b8:	2330      	movs	r3, #48	@ 0x30
 80076ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007858 <_svfiprintf_r+0x1e4>
 80076be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076c2:	f04f 0901 	mov.w	r9, #1
 80076c6:	4623      	mov	r3, r4
 80076c8:	469a      	mov	sl, r3
 80076ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ce:	b10a      	cbz	r2, 80076d4 <_svfiprintf_r+0x60>
 80076d0:	2a25      	cmp	r2, #37	@ 0x25
 80076d2:	d1f9      	bne.n	80076c8 <_svfiprintf_r+0x54>
 80076d4:	ebba 0b04 	subs.w	fp, sl, r4
 80076d8:	d00b      	beq.n	80076f2 <_svfiprintf_r+0x7e>
 80076da:	465b      	mov	r3, fp
 80076dc:	4622      	mov	r2, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	4638      	mov	r0, r7
 80076e2:	f7ff ff6b 	bl	80075bc <__ssputs_r>
 80076e6:	3001      	adds	r0, #1
 80076e8:	f000 80a7 	beq.w	800783a <_svfiprintf_r+0x1c6>
 80076ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076ee:	445a      	add	r2, fp
 80076f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80076f2:	f89a 3000 	ldrb.w	r3, [sl]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 809f 	beq.w	800783a <_svfiprintf_r+0x1c6>
 80076fc:	2300      	movs	r3, #0
 80076fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007706:	f10a 0a01 	add.w	sl, sl, #1
 800770a:	9304      	str	r3, [sp, #16]
 800770c:	9307      	str	r3, [sp, #28]
 800770e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007712:	931a      	str	r3, [sp, #104]	@ 0x68
 8007714:	4654      	mov	r4, sl
 8007716:	2205      	movs	r2, #5
 8007718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771c:	484e      	ldr	r0, [pc, #312]	@ (8007858 <_svfiprintf_r+0x1e4>)
 800771e:	f7f8 fd5f 	bl	80001e0 <memchr>
 8007722:	9a04      	ldr	r2, [sp, #16]
 8007724:	b9d8      	cbnz	r0, 800775e <_svfiprintf_r+0xea>
 8007726:	06d0      	lsls	r0, r2, #27
 8007728:	bf44      	itt	mi
 800772a:	2320      	movmi	r3, #32
 800772c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007730:	0711      	lsls	r1, r2, #28
 8007732:	bf44      	itt	mi
 8007734:	232b      	movmi	r3, #43	@ 0x2b
 8007736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800773a:	f89a 3000 	ldrb.w	r3, [sl]
 800773e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007740:	d015      	beq.n	800776e <_svfiprintf_r+0xfa>
 8007742:	9a07      	ldr	r2, [sp, #28]
 8007744:	4654      	mov	r4, sl
 8007746:	2000      	movs	r0, #0
 8007748:	f04f 0c0a 	mov.w	ip, #10
 800774c:	4621      	mov	r1, r4
 800774e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007752:	3b30      	subs	r3, #48	@ 0x30
 8007754:	2b09      	cmp	r3, #9
 8007756:	d94b      	bls.n	80077f0 <_svfiprintf_r+0x17c>
 8007758:	b1b0      	cbz	r0, 8007788 <_svfiprintf_r+0x114>
 800775a:	9207      	str	r2, [sp, #28]
 800775c:	e014      	b.n	8007788 <_svfiprintf_r+0x114>
 800775e:	eba0 0308 	sub.w	r3, r0, r8
 8007762:	fa09 f303 	lsl.w	r3, r9, r3
 8007766:	4313      	orrs	r3, r2
 8007768:	9304      	str	r3, [sp, #16]
 800776a:	46a2      	mov	sl, r4
 800776c:	e7d2      	b.n	8007714 <_svfiprintf_r+0xa0>
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	1d19      	adds	r1, r3, #4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	9103      	str	r1, [sp, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	bfbb      	ittet	lt
 800777a:	425b      	neglt	r3, r3
 800777c:	f042 0202 	orrlt.w	r2, r2, #2
 8007780:	9307      	strge	r3, [sp, #28]
 8007782:	9307      	strlt	r3, [sp, #28]
 8007784:	bfb8      	it	lt
 8007786:	9204      	strlt	r2, [sp, #16]
 8007788:	7823      	ldrb	r3, [r4, #0]
 800778a:	2b2e      	cmp	r3, #46	@ 0x2e
 800778c:	d10a      	bne.n	80077a4 <_svfiprintf_r+0x130>
 800778e:	7863      	ldrb	r3, [r4, #1]
 8007790:	2b2a      	cmp	r3, #42	@ 0x2a
 8007792:	d132      	bne.n	80077fa <_svfiprintf_r+0x186>
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	1d1a      	adds	r2, r3, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	9203      	str	r2, [sp, #12]
 800779c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077a0:	3402      	adds	r4, #2
 80077a2:	9305      	str	r3, [sp, #20]
 80077a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007868 <_svfiprintf_r+0x1f4>
 80077a8:	7821      	ldrb	r1, [r4, #0]
 80077aa:	2203      	movs	r2, #3
 80077ac:	4650      	mov	r0, sl
 80077ae:	f7f8 fd17 	bl	80001e0 <memchr>
 80077b2:	b138      	cbz	r0, 80077c4 <_svfiprintf_r+0x150>
 80077b4:	9b04      	ldr	r3, [sp, #16]
 80077b6:	eba0 000a 	sub.w	r0, r0, sl
 80077ba:	2240      	movs	r2, #64	@ 0x40
 80077bc:	4082      	lsls	r2, r0
 80077be:	4313      	orrs	r3, r2
 80077c0:	3401      	adds	r4, #1
 80077c2:	9304      	str	r3, [sp, #16]
 80077c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c8:	4824      	ldr	r0, [pc, #144]	@ (800785c <_svfiprintf_r+0x1e8>)
 80077ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077ce:	2206      	movs	r2, #6
 80077d0:	f7f8 fd06 	bl	80001e0 <memchr>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d036      	beq.n	8007846 <_svfiprintf_r+0x1d2>
 80077d8:	4b21      	ldr	r3, [pc, #132]	@ (8007860 <_svfiprintf_r+0x1ec>)
 80077da:	bb1b      	cbnz	r3, 8007824 <_svfiprintf_r+0x1b0>
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	3307      	adds	r3, #7
 80077e0:	f023 0307 	bic.w	r3, r3, #7
 80077e4:	3308      	adds	r3, #8
 80077e6:	9303      	str	r3, [sp, #12]
 80077e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ea:	4433      	add	r3, r6
 80077ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ee:	e76a      	b.n	80076c6 <_svfiprintf_r+0x52>
 80077f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80077f4:	460c      	mov	r4, r1
 80077f6:	2001      	movs	r0, #1
 80077f8:	e7a8      	b.n	800774c <_svfiprintf_r+0xd8>
 80077fa:	2300      	movs	r3, #0
 80077fc:	3401      	adds	r4, #1
 80077fe:	9305      	str	r3, [sp, #20]
 8007800:	4619      	mov	r1, r3
 8007802:	f04f 0c0a 	mov.w	ip, #10
 8007806:	4620      	mov	r0, r4
 8007808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800780c:	3a30      	subs	r2, #48	@ 0x30
 800780e:	2a09      	cmp	r2, #9
 8007810:	d903      	bls.n	800781a <_svfiprintf_r+0x1a6>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0c6      	beq.n	80077a4 <_svfiprintf_r+0x130>
 8007816:	9105      	str	r1, [sp, #20]
 8007818:	e7c4      	b.n	80077a4 <_svfiprintf_r+0x130>
 800781a:	fb0c 2101 	mla	r1, ip, r1, r2
 800781e:	4604      	mov	r4, r0
 8007820:	2301      	movs	r3, #1
 8007822:	e7f0      	b.n	8007806 <_svfiprintf_r+0x192>
 8007824:	ab03      	add	r3, sp, #12
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	462a      	mov	r2, r5
 800782a:	4b0e      	ldr	r3, [pc, #56]	@ (8007864 <_svfiprintf_r+0x1f0>)
 800782c:	a904      	add	r1, sp, #16
 800782e:	4638      	mov	r0, r7
 8007830:	f3af 8000 	nop.w
 8007834:	1c42      	adds	r2, r0, #1
 8007836:	4606      	mov	r6, r0
 8007838:	d1d6      	bne.n	80077e8 <_svfiprintf_r+0x174>
 800783a:	89ab      	ldrh	r3, [r5, #12]
 800783c:	065b      	lsls	r3, r3, #25
 800783e:	f53f af2d 	bmi.w	800769c <_svfiprintf_r+0x28>
 8007842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007844:	e72c      	b.n	80076a0 <_svfiprintf_r+0x2c>
 8007846:	ab03      	add	r3, sp, #12
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	462a      	mov	r2, r5
 800784c:	4b05      	ldr	r3, [pc, #20]	@ (8007864 <_svfiprintf_r+0x1f0>)
 800784e:	a904      	add	r1, sp, #16
 8007850:	4638      	mov	r0, r7
 8007852:	f000 f9bb 	bl	8007bcc <_printf_i>
 8007856:	e7ed      	b.n	8007834 <_svfiprintf_r+0x1c0>
 8007858:	080087d0 	.word	0x080087d0
 800785c:	080087da 	.word	0x080087da
 8007860:	00000000 	.word	0x00000000
 8007864:	080075bd 	.word	0x080075bd
 8007868:	080087d6 	.word	0x080087d6

0800786c <__sfputc_r>:
 800786c:	6893      	ldr	r3, [r2, #8]
 800786e:	3b01      	subs	r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	b410      	push	{r4}
 8007874:	6093      	str	r3, [r2, #8]
 8007876:	da08      	bge.n	800788a <__sfputc_r+0x1e>
 8007878:	6994      	ldr	r4, [r2, #24]
 800787a:	42a3      	cmp	r3, r4
 800787c:	db01      	blt.n	8007882 <__sfputc_r+0x16>
 800787e:	290a      	cmp	r1, #10
 8007880:	d103      	bne.n	800788a <__sfputc_r+0x1e>
 8007882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007886:	f000 bb6b 	b.w	8007f60 <__swbuf_r>
 800788a:	6813      	ldr	r3, [r2, #0]
 800788c:	1c58      	adds	r0, r3, #1
 800788e:	6010      	str	r0, [r2, #0]
 8007890:	7019      	strb	r1, [r3, #0]
 8007892:	4608      	mov	r0, r1
 8007894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007898:	4770      	bx	lr

0800789a <__sfputs_r>:
 800789a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789c:	4606      	mov	r6, r0
 800789e:	460f      	mov	r7, r1
 80078a0:	4614      	mov	r4, r2
 80078a2:	18d5      	adds	r5, r2, r3
 80078a4:	42ac      	cmp	r4, r5
 80078a6:	d101      	bne.n	80078ac <__sfputs_r+0x12>
 80078a8:	2000      	movs	r0, #0
 80078aa:	e007      	b.n	80078bc <__sfputs_r+0x22>
 80078ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b0:	463a      	mov	r2, r7
 80078b2:	4630      	mov	r0, r6
 80078b4:	f7ff ffda 	bl	800786c <__sfputc_r>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d1f3      	bne.n	80078a4 <__sfputs_r+0xa>
 80078bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078c0 <_vfiprintf_r>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	460d      	mov	r5, r1
 80078c6:	b09d      	sub	sp, #116	@ 0x74
 80078c8:	4614      	mov	r4, r2
 80078ca:	4698      	mov	r8, r3
 80078cc:	4606      	mov	r6, r0
 80078ce:	b118      	cbz	r0, 80078d8 <_vfiprintf_r+0x18>
 80078d0:	6a03      	ldr	r3, [r0, #32]
 80078d2:	b90b      	cbnz	r3, 80078d8 <_vfiprintf_r+0x18>
 80078d4:	f7ff fcee 	bl	80072b4 <__sinit>
 80078d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078da:	07d9      	lsls	r1, r3, #31
 80078dc:	d405      	bmi.n	80078ea <_vfiprintf_r+0x2a>
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	059a      	lsls	r2, r3, #22
 80078e2:	d402      	bmi.n	80078ea <_vfiprintf_r+0x2a>
 80078e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078e6:	f7ff fe1c 	bl	8007522 <__retarget_lock_acquire_recursive>
 80078ea:	89ab      	ldrh	r3, [r5, #12]
 80078ec:	071b      	lsls	r3, r3, #28
 80078ee:	d501      	bpl.n	80078f4 <_vfiprintf_r+0x34>
 80078f0:	692b      	ldr	r3, [r5, #16]
 80078f2:	b99b      	cbnz	r3, 800791c <_vfiprintf_r+0x5c>
 80078f4:	4629      	mov	r1, r5
 80078f6:	4630      	mov	r0, r6
 80078f8:	f000 fb70 	bl	8007fdc <__swsetup_r>
 80078fc:	b170      	cbz	r0, 800791c <_vfiprintf_r+0x5c>
 80078fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007900:	07dc      	lsls	r4, r3, #31
 8007902:	d504      	bpl.n	800790e <_vfiprintf_r+0x4e>
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	b01d      	add	sp, #116	@ 0x74
 800790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790e:	89ab      	ldrh	r3, [r5, #12]
 8007910:	0598      	lsls	r0, r3, #22
 8007912:	d4f7      	bmi.n	8007904 <_vfiprintf_r+0x44>
 8007914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007916:	f7ff fe05 	bl	8007524 <__retarget_lock_release_recursive>
 800791a:	e7f3      	b.n	8007904 <_vfiprintf_r+0x44>
 800791c:	2300      	movs	r3, #0
 800791e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007920:	2320      	movs	r3, #32
 8007922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007926:	f8cd 800c 	str.w	r8, [sp, #12]
 800792a:	2330      	movs	r3, #48	@ 0x30
 800792c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007adc <_vfiprintf_r+0x21c>
 8007930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007934:	f04f 0901 	mov.w	r9, #1
 8007938:	4623      	mov	r3, r4
 800793a:	469a      	mov	sl, r3
 800793c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007940:	b10a      	cbz	r2, 8007946 <_vfiprintf_r+0x86>
 8007942:	2a25      	cmp	r2, #37	@ 0x25
 8007944:	d1f9      	bne.n	800793a <_vfiprintf_r+0x7a>
 8007946:	ebba 0b04 	subs.w	fp, sl, r4
 800794a:	d00b      	beq.n	8007964 <_vfiprintf_r+0xa4>
 800794c:	465b      	mov	r3, fp
 800794e:	4622      	mov	r2, r4
 8007950:	4629      	mov	r1, r5
 8007952:	4630      	mov	r0, r6
 8007954:	f7ff ffa1 	bl	800789a <__sfputs_r>
 8007958:	3001      	adds	r0, #1
 800795a:	f000 80a7 	beq.w	8007aac <_vfiprintf_r+0x1ec>
 800795e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007960:	445a      	add	r2, fp
 8007962:	9209      	str	r2, [sp, #36]	@ 0x24
 8007964:	f89a 3000 	ldrb.w	r3, [sl]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 809f 	beq.w	8007aac <_vfiprintf_r+0x1ec>
 800796e:	2300      	movs	r3, #0
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007978:	f10a 0a01 	add.w	sl, sl, #1
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	9307      	str	r3, [sp, #28]
 8007980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007984:	931a      	str	r3, [sp, #104]	@ 0x68
 8007986:	4654      	mov	r4, sl
 8007988:	2205      	movs	r2, #5
 800798a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800798e:	4853      	ldr	r0, [pc, #332]	@ (8007adc <_vfiprintf_r+0x21c>)
 8007990:	f7f8 fc26 	bl	80001e0 <memchr>
 8007994:	9a04      	ldr	r2, [sp, #16]
 8007996:	b9d8      	cbnz	r0, 80079d0 <_vfiprintf_r+0x110>
 8007998:	06d1      	lsls	r1, r2, #27
 800799a:	bf44      	itt	mi
 800799c:	2320      	movmi	r3, #32
 800799e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079a2:	0713      	lsls	r3, r2, #28
 80079a4:	bf44      	itt	mi
 80079a6:	232b      	movmi	r3, #43	@ 0x2b
 80079a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079ac:	f89a 3000 	ldrb.w	r3, [sl]
 80079b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80079b2:	d015      	beq.n	80079e0 <_vfiprintf_r+0x120>
 80079b4:	9a07      	ldr	r2, [sp, #28]
 80079b6:	4654      	mov	r4, sl
 80079b8:	2000      	movs	r0, #0
 80079ba:	f04f 0c0a 	mov.w	ip, #10
 80079be:	4621      	mov	r1, r4
 80079c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079c4:	3b30      	subs	r3, #48	@ 0x30
 80079c6:	2b09      	cmp	r3, #9
 80079c8:	d94b      	bls.n	8007a62 <_vfiprintf_r+0x1a2>
 80079ca:	b1b0      	cbz	r0, 80079fa <_vfiprintf_r+0x13a>
 80079cc:	9207      	str	r2, [sp, #28]
 80079ce:	e014      	b.n	80079fa <_vfiprintf_r+0x13a>
 80079d0:	eba0 0308 	sub.w	r3, r0, r8
 80079d4:	fa09 f303 	lsl.w	r3, r9, r3
 80079d8:	4313      	orrs	r3, r2
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	46a2      	mov	sl, r4
 80079de:	e7d2      	b.n	8007986 <_vfiprintf_r+0xc6>
 80079e0:	9b03      	ldr	r3, [sp, #12]
 80079e2:	1d19      	adds	r1, r3, #4
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	9103      	str	r1, [sp, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	bfbb      	ittet	lt
 80079ec:	425b      	neglt	r3, r3
 80079ee:	f042 0202 	orrlt.w	r2, r2, #2
 80079f2:	9307      	strge	r3, [sp, #28]
 80079f4:	9307      	strlt	r3, [sp, #28]
 80079f6:	bfb8      	it	lt
 80079f8:	9204      	strlt	r2, [sp, #16]
 80079fa:	7823      	ldrb	r3, [r4, #0]
 80079fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80079fe:	d10a      	bne.n	8007a16 <_vfiprintf_r+0x156>
 8007a00:	7863      	ldrb	r3, [r4, #1]
 8007a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a04:	d132      	bne.n	8007a6c <_vfiprintf_r+0x1ac>
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	1d1a      	adds	r2, r3, #4
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	9203      	str	r2, [sp, #12]
 8007a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a12:	3402      	adds	r4, #2
 8007a14:	9305      	str	r3, [sp, #20]
 8007a16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007aec <_vfiprintf_r+0x22c>
 8007a1a:	7821      	ldrb	r1, [r4, #0]
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	4650      	mov	r0, sl
 8007a20:	f7f8 fbde 	bl	80001e0 <memchr>
 8007a24:	b138      	cbz	r0, 8007a36 <_vfiprintf_r+0x176>
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	eba0 000a 	sub.w	r0, r0, sl
 8007a2c:	2240      	movs	r2, #64	@ 0x40
 8007a2e:	4082      	lsls	r2, r0
 8007a30:	4313      	orrs	r3, r2
 8007a32:	3401      	adds	r4, #1
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a3a:	4829      	ldr	r0, [pc, #164]	@ (8007ae0 <_vfiprintf_r+0x220>)
 8007a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a40:	2206      	movs	r2, #6
 8007a42:	f7f8 fbcd 	bl	80001e0 <memchr>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d03f      	beq.n	8007aca <_vfiprintf_r+0x20a>
 8007a4a:	4b26      	ldr	r3, [pc, #152]	@ (8007ae4 <_vfiprintf_r+0x224>)
 8007a4c:	bb1b      	cbnz	r3, 8007a96 <_vfiprintf_r+0x1d6>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	3307      	adds	r3, #7
 8007a52:	f023 0307 	bic.w	r3, r3, #7
 8007a56:	3308      	adds	r3, #8
 8007a58:	9303      	str	r3, [sp, #12]
 8007a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5c:	443b      	add	r3, r7
 8007a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a60:	e76a      	b.n	8007938 <_vfiprintf_r+0x78>
 8007a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a66:	460c      	mov	r4, r1
 8007a68:	2001      	movs	r0, #1
 8007a6a:	e7a8      	b.n	80079be <_vfiprintf_r+0xfe>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	3401      	adds	r4, #1
 8007a70:	9305      	str	r3, [sp, #20]
 8007a72:	4619      	mov	r1, r3
 8007a74:	f04f 0c0a 	mov.w	ip, #10
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a7e:	3a30      	subs	r2, #48	@ 0x30
 8007a80:	2a09      	cmp	r2, #9
 8007a82:	d903      	bls.n	8007a8c <_vfiprintf_r+0x1cc>
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0c6      	beq.n	8007a16 <_vfiprintf_r+0x156>
 8007a88:	9105      	str	r1, [sp, #20]
 8007a8a:	e7c4      	b.n	8007a16 <_vfiprintf_r+0x156>
 8007a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a90:	4604      	mov	r4, r0
 8007a92:	2301      	movs	r3, #1
 8007a94:	e7f0      	b.n	8007a78 <_vfiprintf_r+0x1b8>
 8007a96:	ab03      	add	r3, sp, #12
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4b12      	ldr	r3, [pc, #72]	@ (8007ae8 <_vfiprintf_r+0x228>)
 8007a9e:	a904      	add	r1, sp, #16
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f3af 8000 	nop.w
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	1c78      	adds	r0, r7, #1
 8007aaa:	d1d6      	bne.n	8007a5a <_vfiprintf_r+0x19a>
 8007aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007aae:	07d9      	lsls	r1, r3, #31
 8007ab0:	d405      	bmi.n	8007abe <_vfiprintf_r+0x1fe>
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	059a      	lsls	r2, r3, #22
 8007ab6:	d402      	bmi.n	8007abe <_vfiprintf_r+0x1fe>
 8007ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007aba:	f7ff fd33 	bl	8007524 <__retarget_lock_release_recursive>
 8007abe:	89ab      	ldrh	r3, [r5, #12]
 8007ac0:	065b      	lsls	r3, r3, #25
 8007ac2:	f53f af1f 	bmi.w	8007904 <_vfiprintf_r+0x44>
 8007ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ac8:	e71e      	b.n	8007908 <_vfiprintf_r+0x48>
 8007aca:	ab03      	add	r3, sp, #12
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	462a      	mov	r2, r5
 8007ad0:	4b05      	ldr	r3, [pc, #20]	@ (8007ae8 <_vfiprintf_r+0x228>)
 8007ad2:	a904      	add	r1, sp, #16
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f000 f879 	bl	8007bcc <_printf_i>
 8007ada:	e7e4      	b.n	8007aa6 <_vfiprintf_r+0x1e6>
 8007adc:	080087d0 	.word	0x080087d0
 8007ae0:	080087da 	.word	0x080087da
 8007ae4:	00000000 	.word	0x00000000
 8007ae8:	0800789b 	.word	0x0800789b
 8007aec:	080087d6 	.word	0x080087d6

08007af0 <_printf_common>:
 8007af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	4616      	mov	r6, r2
 8007af6:	4698      	mov	r8, r3
 8007af8:	688a      	ldr	r2, [r1, #8]
 8007afa:	690b      	ldr	r3, [r1, #16]
 8007afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b00:	4293      	cmp	r3, r2
 8007b02:	bfb8      	it	lt
 8007b04:	4613      	movlt	r3, r2
 8007b06:	6033      	str	r3, [r6, #0]
 8007b08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	b10a      	cbz	r2, 8007b16 <_printf_common+0x26>
 8007b12:	3301      	adds	r3, #1
 8007b14:	6033      	str	r3, [r6, #0]
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	0699      	lsls	r1, r3, #26
 8007b1a:	bf42      	ittt	mi
 8007b1c:	6833      	ldrmi	r3, [r6, #0]
 8007b1e:	3302      	addmi	r3, #2
 8007b20:	6033      	strmi	r3, [r6, #0]
 8007b22:	6825      	ldr	r5, [r4, #0]
 8007b24:	f015 0506 	ands.w	r5, r5, #6
 8007b28:	d106      	bne.n	8007b38 <_printf_common+0x48>
 8007b2a:	f104 0a19 	add.w	sl, r4, #25
 8007b2e:	68e3      	ldr	r3, [r4, #12]
 8007b30:	6832      	ldr	r2, [r6, #0]
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	dc26      	bgt.n	8007b86 <_printf_common+0x96>
 8007b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b3c:	6822      	ldr	r2, [r4, #0]
 8007b3e:	3b00      	subs	r3, #0
 8007b40:	bf18      	it	ne
 8007b42:	2301      	movne	r3, #1
 8007b44:	0692      	lsls	r2, r2, #26
 8007b46:	d42b      	bmi.n	8007ba0 <_printf_common+0xb0>
 8007b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c8      	blx	r9
 8007b52:	3001      	adds	r0, #1
 8007b54:	d01e      	beq.n	8007b94 <_printf_common+0xa4>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	6922      	ldr	r2, [r4, #16]
 8007b5a:	f003 0306 	and.w	r3, r3, #6
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	bf02      	ittt	eq
 8007b62:	68e5      	ldreq	r5, [r4, #12]
 8007b64:	6833      	ldreq	r3, [r6, #0]
 8007b66:	1aed      	subeq	r5, r5, r3
 8007b68:	68a3      	ldr	r3, [r4, #8]
 8007b6a:	bf0c      	ite	eq
 8007b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b70:	2500      	movne	r5, #0
 8007b72:	4293      	cmp	r3, r2
 8007b74:	bfc4      	itt	gt
 8007b76:	1a9b      	subgt	r3, r3, r2
 8007b78:	18ed      	addgt	r5, r5, r3
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	341a      	adds	r4, #26
 8007b7e:	42b5      	cmp	r5, r6
 8007b80:	d11a      	bne.n	8007bb8 <_printf_common+0xc8>
 8007b82:	2000      	movs	r0, #0
 8007b84:	e008      	b.n	8007b98 <_printf_common+0xa8>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4652      	mov	r2, sl
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	47c8      	blx	r9
 8007b90:	3001      	adds	r0, #1
 8007b92:	d103      	bne.n	8007b9c <_printf_common+0xac>
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	e7c6      	b.n	8007b2e <_printf_common+0x3e>
 8007ba0:	18e1      	adds	r1, r4, r3
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	2030      	movs	r0, #48	@ 0x30
 8007ba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007baa:	4422      	add	r2, r4
 8007bac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bb4:	3302      	adds	r3, #2
 8007bb6:	e7c7      	b.n	8007b48 <_printf_common+0x58>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	4622      	mov	r2, r4
 8007bbc:	4641      	mov	r1, r8
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	47c8      	blx	r9
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d0e6      	beq.n	8007b94 <_printf_common+0xa4>
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7d9      	b.n	8007b7e <_printf_common+0x8e>
	...

08007bcc <_printf_i>:
 8007bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd0:	7e0f      	ldrb	r7, [r1, #24]
 8007bd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bd4:	2f78      	cmp	r7, #120	@ 0x78
 8007bd6:	4691      	mov	r9, r2
 8007bd8:	4680      	mov	r8, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	469a      	mov	sl, r3
 8007bde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007be2:	d807      	bhi.n	8007bf4 <_printf_i+0x28>
 8007be4:	2f62      	cmp	r7, #98	@ 0x62
 8007be6:	d80a      	bhi.n	8007bfe <_printf_i+0x32>
 8007be8:	2f00      	cmp	r7, #0
 8007bea:	f000 80d1 	beq.w	8007d90 <_printf_i+0x1c4>
 8007bee:	2f58      	cmp	r7, #88	@ 0x58
 8007bf0:	f000 80b8 	beq.w	8007d64 <_printf_i+0x198>
 8007bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007bfc:	e03a      	b.n	8007c74 <_printf_i+0xa8>
 8007bfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c02:	2b15      	cmp	r3, #21
 8007c04:	d8f6      	bhi.n	8007bf4 <_printf_i+0x28>
 8007c06:	a101      	add	r1, pc, #4	@ (adr r1, 8007c0c <_printf_i+0x40>)
 8007c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c0c:	08007c65 	.word	0x08007c65
 8007c10:	08007c79 	.word	0x08007c79
 8007c14:	08007bf5 	.word	0x08007bf5
 8007c18:	08007bf5 	.word	0x08007bf5
 8007c1c:	08007bf5 	.word	0x08007bf5
 8007c20:	08007bf5 	.word	0x08007bf5
 8007c24:	08007c79 	.word	0x08007c79
 8007c28:	08007bf5 	.word	0x08007bf5
 8007c2c:	08007bf5 	.word	0x08007bf5
 8007c30:	08007bf5 	.word	0x08007bf5
 8007c34:	08007bf5 	.word	0x08007bf5
 8007c38:	08007d77 	.word	0x08007d77
 8007c3c:	08007ca3 	.word	0x08007ca3
 8007c40:	08007d31 	.word	0x08007d31
 8007c44:	08007bf5 	.word	0x08007bf5
 8007c48:	08007bf5 	.word	0x08007bf5
 8007c4c:	08007d99 	.word	0x08007d99
 8007c50:	08007bf5 	.word	0x08007bf5
 8007c54:	08007ca3 	.word	0x08007ca3
 8007c58:	08007bf5 	.word	0x08007bf5
 8007c5c:	08007bf5 	.word	0x08007bf5
 8007c60:	08007d39 	.word	0x08007d39
 8007c64:	6833      	ldr	r3, [r6, #0]
 8007c66:	1d1a      	adds	r2, r3, #4
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6032      	str	r2, [r6, #0]
 8007c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c74:	2301      	movs	r3, #1
 8007c76:	e09c      	b.n	8007db2 <_printf_i+0x1e6>
 8007c78:	6833      	ldr	r3, [r6, #0]
 8007c7a:	6820      	ldr	r0, [r4, #0]
 8007c7c:	1d19      	adds	r1, r3, #4
 8007c7e:	6031      	str	r1, [r6, #0]
 8007c80:	0606      	lsls	r6, r0, #24
 8007c82:	d501      	bpl.n	8007c88 <_printf_i+0xbc>
 8007c84:	681d      	ldr	r5, [r3, #0]
 8007c86:	e003      	b.n	8007c90 <_printf_i+0xc4>
 8007c88:	0645      	lsls	r5, r0, #25
 8007c8a:	d5fb      	bpl.n	8007c84 <_printf_i+0xb8>
 8007c8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c90:	2d00      	cmp	r5, #0
 8007c92:	da03      	bge.n	8007c9c <_printf_i+0xd0>
 8007c94:	232d      	movs	r3, #45	@ 0x2d
 8007c96:	426d      	negs	r5, r5
 8007c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c9c:	4858      	ldr	r0, [pc, #352]	@ (8007e00 <_printf_i+0x234>)
 8007c9e:	230a      	movs	r3, #10
 8007ca0:	e011      	b.n	8007cc6 <_printf_i+0xfa>
 8007ca2:	6821      	ldr	r1, [r4, #0]
 8007ca4:	6833      	ldr	r3, [r6, #0]
 8007ca6:	0608      	lsls	r0, r1, #24
 8007ca8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cac:	d402      	bmi.n	8007cb4 <_printf_i+0xe8>
 8007cae:	0649      	lsls	r1, r1, #25
 8007cb0:	bf48      	it	mi
 8007cb2:	b2ad      	uxthmi	r5, r5
 8007cb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cb6:	4852      	ldr	r0, [pc, #328]	@ (8007e00 <_printf_i+0x234>)
 8007cb8:	6033      	str	r3, [r6, #0]
 8007cba:	bf14      	ite	ne
 8007cbc:	230a      	movne	r3, #10
 8007cbe:	2308      	moveq	r3, #8
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007cc6:	6866      	ldr	r6, [r4, #4]
 8007cc8:	60a6      	str	r6, [r4, #8]
 8007cca:	2e00      	cmp	r6, #0
 8007ccc:	db05      	blt.n	8007cda <_printf_i+0x10e>
 8007cce:	6821      	ldr	r1, [r4, #0]
 8007cd0:	432e      	orrs	r6, r5
 8007cd2:	f021 0104 	bic.w	r1, r1, #4
 8007cd6:	6021      	str	r1, [r4, #0]
 8007cd8:	d04b      	beq.n	8007d72 <_printf_i+0x1a6>
 8007cda:	4616      	mov	r6, r2
 8007cdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ce0:	fb03 5711 	mls	r7, r3, r1, r5
 8007ce4:	5dc7      	ldrb	r7, [r0, r7]
 8007ce6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cea:	462f      	mov	r7, r5
 8007cec:	42bb      	cmp	r3, r7
 8007cee:	460d      	mov	r5, r1
 8007cf0:	d9f4      	bls.n	8007cdc <_printf_i+0x110>
 8007cf2:	2b08      	cmp	r3, #8
 8007cf4:	d10b      	bne.n	8007d0e <_printf_i+0x142>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	07df      	lsls	r7, r3, #31
 8007cfa:	d508      	bpl.n	8007d0e <_printf_i+0x142>
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	6861      	ldr	r1, [r4, #4]
 8007d00:	4299      	cmp	r1, r3
 8007d02:	bfde      	ittt	le
 8007d04:	2330      	movle	r3, #48	@ 0x30
 8007d06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d0e:	1b92      	subs	r2, r2, r6
 8007d10:	6122      	str	r2, [r4, #16]
 8007d12:	f8cd a000 	str.w	sl, [sp]
 8007d16:	464b      	mov	r3, r9
 8007d18:	aa03      	add	r2, sp, #12
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	f7ff fee7 	bl	8007af0 <_printf_common>
 8007d22:	3001      	adds	r0, #1
 8007d24:	d14a      	bne.n	8007dbc <_printf_i+0x1f0>
 8007d26:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2a:	b004      	add	sp, #16
 8007d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	f043 0320 	orr.w	r3, r3, #32
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	4832      	ldr	r0, [pc, #200]	@ (8007e04 <_printf_i+0x238>)
 8007d3a:	2778      	movs	r7, #120	@ 0x78
 8007d3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	6831      	ldr	r1, [r6, #0]
 8007d44:	061f      	lsls	r7, r3, #24
 8007d46:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d4a:	d402      	bmi.n	8007d52 <_printf_i+0x186>
 8007d4c:	065f      	lsls	r7, r3, #25
 8007d4e:	bf48      	it	mi
 8007d50:	b2ad      	uxthmi	r5, r5
 8007d52:	6031      	str	r1, [r6, #0]
 8007d54:	07d9      	lsls	r1, r3, #31
 8007d56:	bf44      	itt	mi
 8007d58:	f043 0320 	orrmi.w	r3, r3, #32
 8007d5c:	6023      	strmi	r3, [r4, #0]
 8007d5e:	b11d      	cbz	r5, 8007d68 <_printf_i+0x19c>
 8007d60:	2310      	movs	r3, #16
 8007d62:	e7ad      	b.n	8007cc0 <_printf_i+0xf4>
 8007d64:	4826      	ldr	r0, [pc, #152]	@ (8007e00 <_printf_i+0x234>)
 8007d66:	e7e9      	b.n	8007d3c <_printf_i+0x170>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	f023 0320 	bic.w	r3, r3, #32
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	e7f6      	b.n	8007d60 <_printf_i+0x194>
 8007d72:	4616      	mov	r6, r2
 8007d74:	e7bd      	b.n	8007cf2 <_printf_i+0x126>
 8007d76:	6833      	ldr	r3, [r6, #0]
 8007d78:	6825      	ldr	r5, [r4, #0]
 8007d7a:	6961      	ldr	r1, [r4, #20]
 8007d7c:	1d18      	adds	r0, r3, #4
 8007d7e:	6030      	str	r0, [r6, #0]
 8007d80:	062e      	lsls	r6, r5, #24
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	d501      	bpl.n	8007d8a <_printf_i+0x1be>
 8007d86:	6019      	str	r1, [r3, #0]
 8007d88:	e002      	b.n	8007d90 <_printf_i+0x1c4>
 8007d8a:	0668      	lsls	r0, r5, #25
 8007d8c:	d5fb      	bpl.n	8007d86 <_printf_i+0x1ba>
 8007d8e:	8019      	strh	r1, [r3, #0]
 8007d90:	2300      	movs	r3, #0
 8007d92:	6123      	str	r3, [r4, #16]
 8007d94:	4616      	mov	r6, r2
 8007d96:	e7bc      	b.n	8007d12 <_printf_i+0x146>
 8007d98:	6833      	ldr	r3, [r6, #0]
 8007d9a:	1d1a      	adds	r2, r3, #4
 8007d9c:	6032      	str	r2, [r6, #0]
 8007d9e:	681e      	ldr	r6, [r3, #0]
 8007da0:	6862      	ldr	r2, [r4, #4]
 8007da2:	2100      	movs	r1, #0
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7f8 fa1b 	bl	80001e0 <memchr>
 8007daa:	b108      	cbz	r0, 8007db0 <_printf_i+0x1e4>
 8007dac:	1b80      	subs	r0, r0, r6
 8007dae:	6060      	str	r0, [r4, #4]
 8007db0:	6863      	ldr	r3, [r4, #4]
 8007db2:	6123      	str	r3, [r4, #16]
 8007db4:	2300      	movs	r3, #0
 8007db6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dba:	e7aa      	b.n	8007d12 <_printf_i+0x146>
 8007dbc:	6923      	ldr	r3, [r4, #16]
 8007dbe:	4632      	mov	r2, r6
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	47d0      	blx	sl
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	d0ad      	beq.n	8007d26 <_printf_i+0x15a>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	079b      	lsls	r3, r3, #30
 8007dce:	d413      	bmi.n	8007df8 <_printf_i+0x22c>
 8007dd0:	68e0      	ldr	r0, [r4, #12]
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	4298      	cmp	r0, r3
 8007dd6:	bfb8      	it	lt
 8007dd8:	4618      	movlt	r0, r3
 8007dda:	e7a6      	b.n	8007d2a <_printf_i+0x15e>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	4632      	mov	r2, r6
 8007de0:	4649      	mov	r1, r9
 8007de2:	4640      	mov	r0, r8
 8007de4:	47d0      	blx	sl
 8007de6:	3001      	adds	r0, #1
 8007de8:	d09d      	beq.n	8007d26 <_printf_i+0x15a>
 8007dea:	3501      	adds	r5, #1
 8007dec:	68e3      	ldr	r3, [r4, #12]
 8007dee:	9903      	ldr	r1, [sp, #12]
 8007df0:	1a5b      	subs	r3, r3, r1
 8007df2:	42ab      	cmp	r3, r5
 8007df4:	dcf2      	bgt.n	8007ddc <_printf_i+0x210>
 8007df6:	e7eb      	b.n	8007dd0 <_printf_i+0x204>
 8007df8:	2500      	movs	r5, #0
 8007dfa:	f104 0619 	add.w	r6, r4, #25
 8007dfe:	e7f5      	b.n	8007dec <_printf_i+0x220>
 8007e00:	080087e1 	.word	0x080087e1
 8007e04:	080087f2 	.word	0x080087f2

08007e08 <__sflush_r>:
 8007e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e10:	0716      	lsls	r6, r2, #28
 8007e12:	4605      	mov	r5, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	d454      	bmi.n	8007ec2 <__sflush_r+0xba>
 8007e18:	684b      	ldr	r3, [r1, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dc02      	bgt.n	8007e24 <__sflush_r+0x1c>
 8007e1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	dd48      	ble.n	8007eb6 <__sflush_r+0xae>
 8007e24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e26:	2e00      	cmp	r6, #0
 8007e28:	d045      	beq.n	8007eb6 <__sflush_r+0xae>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e30:	682f      	ldr	r7, [r5, #0]
 8007e32:	6a21      	ldr	r1, [r4, #32]
 8007e34:	602b      	str	r3, [r5, #0]
 8007e36:	d030      	beq.n	8007e9a <__sflush_r+0x92>
 8007e38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	0759      	lsls	r1, r3, #29
 8007e3e:	d505      	bpl.n	8007e4c <__sflush_r+0x44>
 8007e40:	6863      	ldr	r3, [r4, #4]
 8007e42:	1ad2      	subs	r2, r2, r3
 8007e44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e46:	b10b      	cbz	r3, 8007e4c <__sflush_r+0x44>
 8007e48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e50:	6a21      	ldr	r1, [r4, #32]
 8007e52:	4628      	mov	r0, r5
 8007e54:	47b0      	blx	r6
 8007e56:	1c43      	adds	r3, r0, #1
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	d106      	bne.n	8007e6a <__sflush_r+0x62>
 8007e5c:	6829      	ldr	r1, [r5, #0]
 8007e5e:	291d      	cmp	r1, #29
 8007e60:	d82b      	bhi.n	8007eba <__sflush_r+0xb2>
 8007e62:	4a2a      	ldr	r2, [pc, #168]	@ (8007f0c <__sflush_r+0x104>)
 8007e64:	40ca      	lsrs	r2, r1
 8007e66:	07d6      	lsls	r6, r2, #31
 8007e68:	d527      	bpl.n	8007eba <__sflush_r+0xb2>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	6062      	str	r2, [r4, #4]
 8007e6e:	04d9      	lsls	r1, r3, #19
 8007e70:	6922      	ldr	r2, [r4, #16]
 8007e72:	6022      	str	r2, [r4, #0]
 8007e74:	d504      	bpl.n	8007e80 <__sflush_r+0x78>
 8007e76:	1c42      	adds	r2, r0, #1
 8007e78:	d101      	bne.n	8007e7e <__sflush_r+0x76>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	b903      	cbnz	r3, 8007e80 <__sflush_r+0x78>
 8007e7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e82:	602f      	str	r7, [r5, #0]
 8007e84:	b1b9      	cbz	r1, 8007eb6 <__sflush_r+0xae>
 8007e86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e8a:	4299      	cmp	r1, r3
 8007e8c:	d002      	beq.n	8007e94 <__sflush_r+0x8c>
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f7ff fb4a 	bl	8007528 <_free_r>
 8007e94:	2300      	movs	r3, #0
 8007e96:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e98:	e00d      	b.n	8007eb6 <__sflush_r+0xae>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	47b0      	blx	r6
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	1c50      	adds	r0, r2, #1
 8007ea4:	d1c9      	bne.n	8007e3a <__sflush_r+0x32>
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0c6      	beq.n	8007e3a <__sflush_r+0x32>
 8007eac:	2b1d      	cmp	r3, #29
 8007eae:	d001      	beq.n	8007eb4 <__sflush_r+0xac>
 8007eb0:	2b16      	cmp	r3, #22
 8007eb2:	d11e      	bne.n	8007ef2 <__sflush_r+0xea>
 8007eb4:	602f      	str	r7, [r5, #0]
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	e022      	b.n	8007f00 <__sflush_r+0xf8>
 8007eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ebe:	b21b      	sxth	r3, r3
 8007ec0:	e01b      	b.n	8007efa <__sflush_r+0xf2>
 8007ec2:	690f      	ldr	r7, [r1, #16]
 8007ec4:	2f00      	cmp	r7, #0
 8007ec6:	d0f6      	beq.n	8007eb6 <__sflush_r+0xae>
 8007ec8:	0793      	lsls	r3, r2, #30
 8007eca:	680e      	ldr	r6, [r1, #0]
 8007ecc:	bf08      	it	eq
 8007ece:	694b      	ldreq	r3, [r1, #20]
 8007ed0:	600f      	str	r7, [r1, #0]
 8007ed2:	bf18      	it	ne
 8007ed4:	2300      	movne	r3, #0
 8007ed6:	eba6 0807 	sub.w	r8, r6, r7
 8007eda:	608b      	str	r3, [r1, #8]
 8007edc:	f1b8 0f00 	cmp.w	r8, #0
 8007ee0:	dde9      	ble.n	8007eb6 <__sflush_r+0xae>
 8007ee2:	6a21      	ldr	r1, [r4, #32]
 8007ee4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ee6:	4643      	mov	r3, r8
 8007ee8:	463a      	mov	r2, r7
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b0      	blx	r6
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	dc08      	bgt.n	8007f04 <__sflush_r+0xfc>
 8007ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007efa:	81a3      	strh	r3, [r4, #12]
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f04:	4407      	add	r7, r0
 8007f06:	eba8 0800 	sub.w	r8, r8, r0
 8007f0a:	e7e7      	b.n	8007edc <__sflush_r+0xd4>
 8007f0c:	20400001 	.word	0x20400001

08007f10 <_fflush_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	690b      	ldr	r3, [r1, #16]
 8007f14:	4605      	mov	r5, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	b913      	cbnz	r3, 8007f20 <_fflush_r+0x10>
 8007f1a:	2500      	movs	r5, #0
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	b118      	cbz	r0, 8007f2a <_fflush_r+0x1a>
 8007f22:	6a03      	ldr	r3, [r0, #32]
 8007f24:	b90b      	cbnz	r3, 8007f2a <_fflush_r+0x1a>
 8007f26:	f7ff f9c5 	bl	80072b4 <__sinit>
 8007f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0f3      	beq.n	8007f1a <_fflush_r+0xa>
 8007f32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f34:	07d0      	lsls	r0, r2, #31
 8007f36:	d404      	bmi.n	8007f42 <_fflush_r+0x32>
 8007f38:	0599      	lsls	r1, r3, #22
 8007f3a:	d402      	bmi.n	8007f42 <_fflush_r+0x32>
 8007f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f3e:	f7ff faf0 	bl	8007522 <__retarget_lock_acquire_recursive>
 8007f42:	4628      	mov	r0, r5
 8007f44:	4621      	mov	r1, r4
 8007f46:	f7ff ff5f 	bl	8007e08 <__sflush_r>
 8007f4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f4c:	07da      	lsls	r2, r3, #31
 8007f4e:	4605      	mov	r5, r0
 8007f50:	d4e4      	bmi.n	8007f1c <_fflush_r+0xc>
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	059b      	lsls	r3, r3, #22
 8007f56:	d4e1      	bmi.n	8007f1c <_fflush_r+0xc>
 8007f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f5a:	f7ff fae3 	bl	8007524 <__retarget_lock_release_recursive>
 8007f5e:	e7dd      	b.n	8007f1c <_fflush_r+0xc>

08007f60 <__swbuf_r>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	460e      	mov	r6, r1
 8007f64:	4614      	mov	r4, r2
 8007f66:	4605      	mov	r5, r0
 8007f68:	b118      	cbz	r0, 8007f72 <__swbuf_r+0x12>
 8007f6a:	6a03      	ldr	r3, [r0, #32]
 8007f6c:	b90b      	cbnz	r3, 8007f72 <__swbuf_r+0x12>
 8007f6e:	f7ff f9a1 	bl	80072b4 <__sinit>
 8007f72:	69a3      	ldr	r3, [r4, #24]
 8007f74:	60a3      	str	r3, [r4, #8]
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	071a      	lsls	r2, r3, #28
 8007f7a:	d501      	bpl.n	8007f80 <__swbuf_r+0x20>
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	b943      	cbnz	r3, 8007f92 <__swbuf_r+0x32>
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f82a 	bl	8007fdc <__swsetup_r>
 8007f88:	b118      	cbz	r0, 8007f92 <__swbuf_r+0x32>
 8007f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8007f8e:	4638      	mov	r0, r7
 8007f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	6922      	ldr	r2, [r4, #16]
 8007f96:	1a98      	subs	r0, r3, r2
 8007f98:	6963      	ldr	r3, [r4, #20]
 8007f9a:	b2f6      	uxtb	r6, r6
 8007f9c:	4283      	cmp	r3, r0
 8007f9e:	4637      	mov	r7, r6
 8007fa0:	dc05      	bgt.n	8007fae <__swbuf_r+0x4e>
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f7ff ffb3 	bl	8007f10 <_fflush_r>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d1ed      	bne.n	8007f8a <__swbuf_r+0x2a>
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	60a3      	str	r3, [r4, #8]
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	701e      	strb	r6, [r3, #0]
 8007fbc:	6962      	ldr	r2, [r4, #20]
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d004      	beq.n	8007fce <__swbuf_r+0x6e>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	07db      	lsls	r3, r3, #31
 8007fc8:	d5e1      	bpl.n	8007f8e <__swbuf_r+0x2e>
 8007fca:	2e0a      	cmp	r6, #10
 8007fcc:	d1df      	bne.n	8007f8e <__swbuf_r+0x2e>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f7ff ff9d 	bl	8007f10 <_fflush_r>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d0d9      	beq.n	8007f8e <__swbuf_r+0x2e>
 8007fda:	e7d6      	b.n	8007f8a <__swbuf_r+0x2a>

08007fdc <__swsetup_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4b29      	ldr	r3, [pc, #164]	@ (8008084 <__swsetup_r+0xa8>)
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	b118      	cbz	r0, 8007ff0 <__swsetup_r+0x14>
 8007fe8:	6a03      	ldr	r3, [r0, #32]
 8007fea:	b90b      	cbnz	r3, 8007ff0 <__swsetup_r+0x14>
 8007fec:	f7ff f962 	bl	80072b4 <__sinit>
 8007ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff4:	0719      	lsls	r1, r3, #28
 8007ff6:	d422      	bmi.n	800803e <__swsetup_r+0x62>
 8007ff8:	06da      	lsls	r2, r3, #27
 8007ffa:	d407      	bmi.n	800800c <__swsetup_r+0x30>
 8007ffc:	2209      	movs	r2, #9
 8007ffe:	602a      	str	r2, [r5, #0]
 8008000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	f04f 30ff 	mov.w	r0, #4294967295
 800800a:	e033      	b.n	8008074 <__swsetup_r+0x98>
 800800c:	0758      	lsls	r0, r3, #29
 800800e:	d512      	bpl.n	8008036 <__swsetup_r+0x5a>
 8008010:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008012:	b141      	cbz	r1, 8008026 <__swsetup_r+0x4a>
 8008014:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008018:	4299      	cmp	r1, r3
 800801a:	d002      	beq.n	8008022 <__swsetup_r+0x46>
 800801c:	4628      	mov	r0, r5
 800801e:	f7ff fa83 	bl	8007528 <_free_r>
 8008022:	2300      	movs	r3, #0
 8008024:	6363      	str	r3, [r4, #52]	@ 0x34
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	2300      	movs	r3, #0
 8008030:	6063      	str	r3, [r4, #4]
 8008032:	6923      	ldr	r3, [r4, #16]
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	f043 0308 	orr.w	r3, r3, #8
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	6923      	ldr	r3, [r4, #16]
 8008040:	b94b      	cbnz	r3, 8008056 <__swsetup_r+0x7a>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804c:	d003      	beq.n	8008056 <__swsetup_r+0x7a>
 800804e:	4621      	mov	r1, r4
 8008050:	4628      	mov	r0, r5
 8008052:	f000 f895 	bl	8008180 <__smakebuf_r>
 8008056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805a:	f013 0201 	ands.w	r2, r3, #1
 800805e:	d00a      	beq.n	8008076 <__swsetup_r+0x9a>
 8008060:	2200      	movs	r2, #0
 8008062:	60a2      	str	r2, [r4, #8]
 8008064:	6962      	ldr	r2, [r4, #20]
 8008066:	4252      	negs	r2, r2
 8008068:	61a2      	str	r2, [r4, #24]
 800806a:	6922      	ldr	r2, [r4, #16]
 800806c:	b942      	cbnz	r2, 8008080 <__swsetup_r+0xa4>
 800806e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008072:	d1c5      	bne.n	8008000 <__swsetup_r+0x24>
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	0799      	lsls	r1, r3, #30
 8008078:	bf58      	it	pl
 800807a:	6962      	ldrpl	r2, [r4, #20]
 800807c:	60a2      	str	r2, [r4, #8]
 800807e:	e7f4      	b.n	800806a <__swsetup_r+0x8e>
 8008080:	2000      	movs	r0, #0
 8008082:	e7f7      	b.n	8008074 <__swsetup_r+0x98>
 8008084:	20000018 	.word	0x20000018

08008088 <memmove>:
 8008088:	4288      	cmp	r0, r1
 800808a:	b510      	push	{r4, lr}
 800808c:	eb01 0402 	add.w	r4, r1, r2
 8008090:	d902      	bls.n	8008098 <memmove+0x10>
 8008092:	4284      	cmp	r4, r0
 8008094:	4623      	mov	r3, r4
 8008096:	d807      	bhi.n	80080a8 <memmove+0x20>
 8008098:	1e43      	subs	r3, r0, #1
 800809a:	42a1      	cmp	r1, r4
 800809c:	d008      	beq.n	80080b0 <memmove+0x28>
 800809e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080a6:	e7f8      	b.n	800809a <memmove+0x12>
 80080a8:	4402      	add	r2, r0
 80080aa:	4601      	mov	r1, r0
 80080ac:	428a      	cmp	r2, r1
 80080ae:	d100      	bne.n	80080b2 <memmove+0x2a>
 80080b0:	bd10      	pop	{r4, pc}
 80080b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080ba:	e7f7      	b.n	80080ac <memmove+0x24>

080080bc <memcpy>:
 80080bc:	440a      	add	r2, r1
 80080be:	4291      	cmp	r1, r2
 80080c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c4:	d100      	bne.n	80080c8 <memcpy+0xc>
 80080c6:	4770      	bx	lr
 80080c8:	b510      	push	{r4, lr}
 80080ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d2:	4291      	cmp	r1, r2
 80080d4:	d1f9      	bne.n	80080ca <memcpy+0xe>
 80080d6:	bd10      	pop	{r4, pc}

080080d8 <_realloc_r>:
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	4607      	mov	r7, r0
 80080de:	4614      	mov	r4, r2
 80080e0:	460d      	mov	r5, r1
 80080e2:	b921      	cbnz	r1, 80080ee <_realloc_r+0x16>
 80080e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080e8:	4611      	mov	r1, r2
 80080ea:	f7fe bfcb 	b.w	8007084 <_malloc_r>
 80080ee:	b92a      	cbnz	r2, 80080fc <_realloc_r+0x24>
 80080f0:	f7ff fa1a 	bl	8007528 <_free_r>
 80080f4:	4625      	mov	r5, r4
 80080f6:	4628      	mov	r0, r5
 80080f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fc:	f000 f89e 	bl	800823c <_malloc_usable_size_r>
 8008100:	4284      	cmp	r4, r0
 8008102:	4606      	mov	r6, r0
 8008104:	d802      	bhi.n	800810c <_realloc_r+0x34>
 8008106:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800810a:	d8f4      	bhi.n	80080f6 <_realloc_r+0x1e>
 800810c:	4621      	mov	r1, r4
 800810e:	4638      	mov	r0, r7
 8008110:	f7fe ffb8 	bl	8007084 <_malloc_r>
 8008114:	4680      	mov	r8, r0
 8008116:	b908      	cbnz	r0, 800811c <_realloc_r+0x44>
 8008118:	4645      	mov	r5, r8
 800811a:	e7ec      	b.n	80080f6 <_realloc_r+0x1e>
 800811c:	42b4      	cmp	r4, r6
 800811e:	4622      	mov	r2, r4
 8008120:	4629      	mov	r1, r5
 8008122:	bf28      	it	cs
 8008124:	4632      	movcs	r2, r6
 8008126:	f7ff ffc9 	bl	80080bc <memcpy>
 800812a:	4629      	mov	r1, r5
 800812c:	4638      	mov	r0, r7
 800812e:	f7ff f9fb 	bl	8007528 <_free_r>
 8008132:	e7f1      	b.n	8008118 <_realloc_r+0x40>

08008134 <__swhatbuf_r>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	460c      	mov	r4, r1
 8008138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813c:	2900      	cmp	r1, #0
 800813e:	b096      	sub	sp, #88	@ 0x58
 8008140:	4615      	mov	r5, r2
 8008142:	461e      	mov	r6, r3
 8008144:	da0d      	bge.n	8008162 <__swhatbuf_r+0x2e>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800814c:	f04f 0100 	mov.w	r1, #0
 8008150:	bf14      	ite	ne
 8008152:	2340      	movne	r3, #64	@ 0x40
 8008154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008158:	2000      	movs	r0, #0
 800815a:	6031      	str	r1, [r6, #0]
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	b016      	add	sp, #88	@ 0x58
 8008160:	bd70      	pop	{r4, r5, r6, pc}
 8008162:	466a      	mov	r2, sp
 8008164:	f000 f848 	bl	80081f8 <_fstat_r>
 8008168:	2800      	cmp	r0, #0
 800816a:	dbec      	blt.n	8008146 <__swhatbuf_r+0x12>
 800816c:	9901      	ldr	r1, [sp, #4]
 800816e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008176:	4259      	negs	r1, r3
 8008178:	4159      	adcs	r1, r3
 800817a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800817e:	e7eb      	b.n	8008158 <__swhatbuf_r+0x24>

08008180 <__smakebuf_r>:
 8008180:	898b      	ldrh	r3, [r1, #12]
 8008182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008184:	079d      	lsls	r5, r3, #30
 8008186:	4606      	mov	r6, r0
 8008188:	460c      	mov	r4, r1
 800818a:	d507      	bpl.n	800819c <__smakebuf_r+0x1c>
 800818c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	6123      	str	r3, [r4, #16]
 8008194:	2301      	movs	r3, #1
 8008196:	6163      	str	r3, [r4, #20]
 8008198:	b003      	add	sp, #12
 800819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800819c:	ab01      	add	r3, sp, #4
 800819e:	466a      	mov	r2, sp
 80081a0:	f7ff ffc8 	bl	8008134 <__swhatbuf_r>
 80081a4:	9f00      	ldr	r7, [sp, #0]
 80081a6:	4605      	mov	r5, r0
 80081a8:	4639      	mov	r1, r7
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7fe ff6a 	bl	8007084 <_malloc_r>
 80081b0:	b948      	cbnz	r0, 80081c6 <__smakebuf_r+0x46>
 80081b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b6:	059a      	lsls	r2, r3, #22
 80081b8:	d4ee      	bmi.n	8008198 <__smakebuf_r+0x18>
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	f043 0302 	orr.w	r3, r3, #2
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	e7e2      	b.n	800818c <__smakebuf_r+0xc>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	6020      	str	r0, [r4, #0]
 80081ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	9b01      	ldr	r3, [sp, #4]
 80081d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081d6:	b15b      	cbz	r3, 80081f0 <__smakebuf_r+0x70>
 80081d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081dc:	4630      	mov	r0, r6
 80081de:	f000 f81d 	bl	800821c <_isatty_r>
 80081e2:	b128      	cbz	r0, 80081f0 <__smakebuf_r+0x70>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f023 0303 	bic.w	r3, r3, #3
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	81a3      	strh	r3, [r4, #12]
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	431d      	orrs	r5, r3
 80081f4:	81a5      	strh	r5, [r4, #12]
 80081f6:	e7cf      	b.n	8008198 <__smakebuf_r+0x18>

080081f8 <_fstat_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	@ (8008218 <_fstat_r+0x20>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f7f9 fc72 	bl	8001aee <_fstat>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d102      	bne.n	8008214 <_fstat_r+0x1c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	b103      	cbz	r3, 8008214 <_fstat_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	bf00      	nop
 8008218:	20000388 	.word	0x20000388

0800821c <_isatty_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	@ (8008238 <_isatty_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7f9 fc71 	bl	8001b0e <_isatty>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_isatty_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_isatty_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20000388 	.word	0x20000388

0800823c <_malloc_usable_size_r>:
 800823c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008240:	1f18      	subs	r0, r3, #4
 8008242:	2b00      	cmp	r3, #0
 8008244:	bfbc      	itt	lt
 8008246:	580b      	ldrlt	r3, [r1, r0]
 8008248:	18c0      	addlt	r0, r0, r3
 800824a:	4770      	bx	lr

0800824c <_init>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	bf00      	nop
 8008250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008252:	bc08      	pop	{r3}
 8008254:	469e      	mov	lr, r3
 8008256:	4770      	bx	lr

08008258 <_fini>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr
