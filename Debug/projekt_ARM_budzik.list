
projekt_ARM_budzik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  08009dfc  08009dfc  0000adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a48c  0800a48c  0000c074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a48c  0800a48c  0000b48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a494  0800a494  0000c074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a494  0800a494  0000b494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a498  0800a498  0000b498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800a49c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000074  0800a510  0000c074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800a510  0000c500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001363f  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003483  00000000  00000000  0001f6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00022b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebb  00000000  00000000  00023e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b12  00000000  00000000  00024d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185f6  00000000  00000000  0003e84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a5a  00000000  00000000  00056e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee89d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a0  00000000  00000000  000ee8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000f4080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009de4 	.word	0x08009de4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08009de4 	.word	0x08009de4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4604      	mov	r4, r0
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4623      	mov	r3, r4
 80005bc:	80fb      	strh	r3, [r7, #6]
 80005be:	4603      	mov	r3, r0
 80005c0:	80bb      	strh	r3, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	70fb      	strb	r3, [r7, #3]
 80005c6:	4613      	mov	r3, r2
 80005c8:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 80005ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80005d0:	f300 8100 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80005da:	f300 80fb 	bgt.w	80007d4 <GFX_draw_char+0x228>
 80005de:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80005e2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	440b      	add	r3, r1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f340 80ef 	ble.w	80007d4 <GFX_draw_char+0x228>
 80005f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	4413      	add	r3, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	f340 80e6 	ble.w	80007d4 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e0aa      	b.n	8000764 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	441a      	add	r2, r3
 8000616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061a:	4413      	add	r3, r2
 800061c:	4a6f      	ldr	r2, [pc, #444]	@ (80007dc <GFX_draw_char+0x230>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000622:	2307      	movs	r3, #7
 8000624:	73bb      	strb	r3, [r7, #14]
 8000626:	e092      	b.n	800074e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d040      	beq.n	80006b4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000632:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000636:	2b01      	cmp	r3, #1
 8000638:	d116      	bne.n	8000668 <GFX_draw_char+0xbc>
 800063a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800063e:	2b01      	cmp	r3, #1
 8000640:	d112      	bne.n	8000668 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000646:	b29a      	uxth	r2, r3
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4413      	add	r3, r2
 800064c:	b29b      	uxth	r3, r3
 800064e:	b218      	sxth	r0, r3
 8000650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000654:	b29a      	uxth	r2, r3
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	b29b      	uxth	r3, r3
 800065c:	b21b      	sxth	r3, r3
 800065e:	883a      	ldrh	r2, [r7, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f000 f9f7 	bl	8000a54 <SSD1306_draw_pixel>
 8000666:	e069      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066c:	b29a      	uxth	r2, r3
 800066e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000672:	b29b      	uxth	r3, r3
 8000674:	fb12 f303 	smulbb	r3, r2, r3
 8000678:	b29a      	uxth	r2, r3
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	b218      	sxth	r0, r3
 8000682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000686:	b29a      	uxth	r2, r3
 8000688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800068c:	b29b      	uxth	r3, r3
 800068e:	fb12 f303 	smulbb	r3, r2, r3
 8000692:	b29a      	uxth	r2, r3
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	b29b      	uxth	r3, r3
 800069a:	b219      	sxth	r1, r3
 800069c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006a6:	b21c      	sxth	r4, r3
 80006a8:	883b      	ldrh	r3, [r7, #0]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4623      	mov	r3, r4
 80006ae:	f000 f8d0 	bl	8000852 <GFX_draw_fill_rect>
 80006b2:	e043      	b.n	800073c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 80006b4:	8c3a      	ldrh	r2, [r7, #32]
 80006b6:	883b      	ldrh	r3, [r7, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d03f      	beq.n	800073c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 80006bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d116      	bne.n	80006f2 <GFX_draw_char+0x146>
 80006c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d112      	bne.n	80006f2 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80006cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b218      	sxth	r0, r3
 80006da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	88bb      	ldrh	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	8c3a      	ldrh	r2, [r7, #32]
 80006ea:	4619      	mov	r1, r3
 80006ec:	f000 f9b2 	bl	8000a54 <SSD1306_draw_pixel>
 80006f0:	e024      	b.n	800073c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80006f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	fb12 f303 	smulbb	r3, r2, r3
 8000702:	b29a      	uxth	r2, r3
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	4413      	add	r3, r2
 8000708:	b29b      	uxth	r3, r3
 800070a:	b218      	sxth	r0, r3
 800070c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000710:	b29a      	uxth	r2, r3
 8000712:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000716:	b29b      	uxth	r3, r3
 8000718:	fb12 f303 	smulbb	r3, r2, r3
 800071c:	b29a      	uxth	r2, r3
 800071e:	88bb      	ldrh	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	b219      	sxth	r1, r3
 8000726:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800072a:	b21a      	sxth	r2, r3
 800072c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000730:	b21c      	sxth	r4, r3
 8000732:	8c3b      	ldrh	r3, [r7, #32]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	4623      	mov	r3, r4
 8000738:	f000 f88b 	bl	8000852 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800073c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	73bb      	strb	r3, [r7, #14]
 8000748:	7b7b      	ldrb	r3, [r7, #13]
 800074a:	085b      	lsrs	r3, r3, #1
 800074c:	737b      	strb	r3, [r7, #13]
 800074e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000752:	2b00      	cmp	r3, #0
 8000754:	f6bf af68 	bge.w	8000628 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000768:	2b04      	cmp	r3, #4
 800076a:	f77f af50 	ble.w	800060e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800076e:	8c3a      	ldrh	r2, [r7, #32]
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d02f      	beq.n	80007d6 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000776:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10e      	bne.n	800079c <GFX_draw_char+0x1f0>
 800077e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10a      	bne.n	800079c <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	3305      	adds	r3, #5
 800078a:	b29b      	uxth	r3, r3
 800078c:	b218      	sxth	r0, r3
 800078e:	8c3b      	ldrh	r3, [r7, #32]
 8000790:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000794:	2208      	movs	r2, #8
 8000796:	f000 fad3 	bl	8000d40 <SSD1306_draw_fast_vline>
 800079a:	e01c      	b.n	80007d6 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800079c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	0092      	lsls	r2, r2, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	4413      	add	r3, r2
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	b218      	sxth	r0, r3
 80007b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007bc:	b29b      	uxth	r3, r3
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b21c      	sxth	r4, r3
 80007c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007c8:	8c3b      	ldrh	r3, [r7, #32]
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4623      	mov	r3, r4
 80007ce:	f000 f840 	bl	8000852 <GFX_draw_fill_rect>
 80007d2:	e000      	b.n	80007d6 <GFX_draw_char+0x22a>
		return;
 80007d4:	bf00      	nop
		}
	}
}
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	08009f28 	.word	0x08009f28

080007e0 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af04      	add	r7, sp, #16
 80007e6:	60ba      	str	r2, [r7, #8]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	81fb      	strh	r3, [r7, #14]
 80007ee:	460b      	mov	r3, r1
 80007f0:	81bb      	strh	r3, [r7, #12]
 80007f2:	4613      	mov	r3, r2
 80007f4:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]
	while(*c)
 80007fa:	e021      	b.n	8000840 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	4413      	add	r3, r2
 8000804:	b29b      	uxth	r3, r3
 8000806:	b218      	sxth	r0, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	88fc      	ldrh	r4, [r7, #6]
 800080e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000812:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4623      	mov	r3, r4
 8000824:	f7ff fec2 	bl	80005ac <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000828:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800082c:	461a      	mov	r2, r3
 800082e:	00d2      	lsls	r2, r2, #3
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b2da      	uxtb	r2, r3
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	4413      	add	r3, r2
 8000838:	75fb      	strb	r3, [r7, #23]
		c++;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3301      	adds	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1d9      	bne.n	80007fc <GFX_draw_string+0x1c>
	}
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	371c      	adds	r7, #28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}

08000852 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000852:	b590      	push	{r4, r7, lr}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	4604      	mov	r4, r0
 800085a:	4608      	mov	r0, r1
 800085c:	4611      	mov	r1, r2
 800085e:	461a      	mov	r2, r3
 8000860:	4623      	mov	r3, r4
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4603      	mov	r3, r0
 8000866:	80bb      	strh	r3, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
 800086c:	4613      	mov	r3, r2
 800086e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	e00e      	b.n	8000894 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000876:	8c3b      	ldrh	r3, [r7, #32]
 8000878:	f9b7 2000 	ldrsh.w	r2, [r7]
 800087c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000880:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000884:	f000 fa5c 	bl	8000d40 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8000888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088c:	b29b      	uxth	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b29b      	uxth	r3, r3
 8000892:	81fb      	strh	r3, [r7, #14]
 8000894:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000898:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800089c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a0:	440b      	add	r3, r1
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbe7      	blt.n	8000876 <GFX_draw_fill_rect+0x24>
	}
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af04      	add	r7, sp, #16
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	2178      	movs	r1, #120	@ 0x78
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <platform_write+0x34>)
 80008d6:	f003 fbf1 	bl	80040bc <HAL_I2C_Mem_Write>
	return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000098 	.word	0x20000098

080008e8 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	88bb      	ldrh	r3, [r7, #4]
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	2178      	movs	r1, #120	@ 0x78
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <platform_write_dma+0x30>)
 800090a:	f003 fcd1 	bl	80042b0 <HAL_I2C_Mem_Write_DMA>
	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000098 	.word	0x20000098

0800091c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ffbf 	bl	80008b0 <platform_write>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <SSD1306_init>:

bool SSD1306_init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8000942:	2302      	movs	r3, #2
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	238f      	movs	r3, #143	@ 0x8f
 8000948:	71bb      	strb	r3, [r7, #6]
 800094a:	2302      	movs	r3, #2
 800094c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800094e:	4b40      	ldr	r3, [pc, #256]	@ (8000a50 <SSD1306_init+0x114>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10d      	bne.n	8000972 <SSD1306_init+0x36>
 8000956:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800095a:	f008 f935 	bl	8008bc8 <malloc>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b3b      	ldr	r3, [pc, #236]	@ (8000a50 <SSD1306_init+0x114>)
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	4b3a      	ldr	r3, [pc, #232]	@ (8000a50 <SSD1306_init+0x114>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <SSD1306_init+0x36>
  {
    return false;
 800096e:	2300      	movs	r3, #0
 8000970:	e06a      	b.n	8000a48 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 8000972:	f000 f947 	bl	8000c04 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000976:	20ae      	movs	r0, #174	@ 0xae
 8000978:	f7ff ffd0 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 800097c:	20d5      	movs	r0, #213	@ 0xd5
 800097e:	f7ff ffcd 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 8000982:	20e0      	movs	r0, #224	@ 0xe0
 8000984:	f7ff ffca 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8000988:	20a8      	movs	r0, #168	@ 0xa8
 800098a:	f7ff ffc7 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 800098e:	203f      	movs	r0, #63	@ 0x3f
 8000990:	f7ff ffc4 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 8000994:	20d3      	movs	r0, #211	@ 0xd3
 8000996:	f7ff ffc1 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ffbe 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80009a0:	2040      	movs	r0, #64	@ 0x40
 80009a2:	f7ff ffbb 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80009a6:	208d      	movs	r0, #141	@ 0x8d
 80009a8:	f7ff ffb8 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80009ac:	797b      	ldrb	r3, [r7, #5]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d101      	bne.n	80009b6 <SSD1306_init+0x7a>
 80009b2:	2310      	movs	r3, #16
 80009b4:	e000      	b.n	80009b8 <SSD1306_init+0x7c>
 80009b6:	2314      	movs	r3, #20
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffaf 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80009be:	2020      	movs	r0, #32
 80009c0:	f7ff ffac 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff ffa9 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80009ca:	20b0      	movs	r0, #176	@ 0xb0
 80009cc:	f7ff ffa6 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80009d0:	20c8      	movs	r0, #200	@ 0xc8
 80009d2:	f7ff ffa3 	bl	800091c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80009d6:	2312      	movs	r3, #18
 80009d8:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80009da:	797b      	ldrb	r3, [r7, #5]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d101      	bne.n	80009e4 <SSD1306_init+0xa8>
 80009e0:	239f      	movs	r3, #159	@ 0x9f
 80009e2:	e000      	b.n	80009e6 <SSD1306_init+0xaa>
 80009e4:	23cf      	movs	r3, #207	@ 0xcf
 80009e6:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 80009e8:	20da      	movs	r0, #218	@ 0xda
 80009ea:	f7ff ff97 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff93 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 80009f6:	2081      	movs	r0, #129	@ 0x81
 80009f8:	f7ff ff90 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff8c 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000a04:	20d9      	movs	r0, #217	@ 0xd9
 8000a06:	f7ff ff89 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000a0a:	797b      	ldrb	r3, [r7, #5]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <SSD1306_init+0xd8>
 8000a10:	2322      	movs	r3, #34	@ 0x22
 8000a12:	e000      	b.n	8000a16 <SSD1306_init+0xda>
 8000a14:	23f1      	movs	r3, #241	@ 0xf1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff80 	bl	800091c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8000a1c:	20db      	movs	r0, #219	@ 0xdb
 8000a1e:	f7ff ff7d 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8000a22:	2040      	movs	r0, #64	@ 0x40
 8000a24:	f7ff ff7a 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000a28:	20a4      	movs	r0, #164	@ 0xa4
 8000a2a:	f7ff ff77 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8000a2e:	20a6      	movs	r0, #166	@ 0xa6
 8000a30:	f7ff ff74 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000a34:	202e      	movs	r0, #46	@ 0x2e
 8000a36:	f7ff ff71 	bl	800091c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8000a3a:	20af      	movs	r0, #175	@ 0xaf
 8000a3c:	f7ff ff6e 	bl	800091c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fb17 	bl	8001074 <SSD1306_set_rotation>
  return true;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000090 	.word	0x20000090

08000a54 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8000a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f2c0 80c4 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a76:	f300 80bf 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f2c0 80ba 	blt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000a84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a88:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a8a:	f300 80b5 	bgt.w	8000bf8 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 8000a8e:	f000 fb01 	bl	8001094 <SSD1306_get_rotation>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d023      	beq.n	8000ae0 <SSD1306_draw_pixel+0x8c>
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	dc33      	bgt.n	8000b04 <SSD1306_draw_pixel+0xb0>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d002      	beq.n	8000aa6 <SSD1306_draw_pixel+0x52>
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d012      	beq.n	8000aca <SSD1306_draw_pixel+0x76>
 8000aa4:	e02e      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	4053      	eors	r3, r2
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	80bb      	strh	r3, [r7, #4]
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	4053      	eors	r3, r2
 8000abc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	80fb      	strh	r3, [r7, #6]
				break;
 8000ac8:	e01c      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	80bb      	strh	r3, [r7, #4]
				break;
 8000ade:	e011      	b.n	8000b04 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	4053      	eors	r3, r2
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4053      	eors	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
 8000af0:	88fa      	ldrh	r2, [r7, #6]
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	4053      	eors	r3, r2
 8000af6:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	80bb      	strh	r3, [r7, #4]
				break;
 8000b02:	bf00      	nop
		}

		switch (color)
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d051      	beq.n	8000bae <SSD1306_draw_pixel+0x15a>
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	dc74      	bgt.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d026      	beq.n	8000b60 <SSD1306_draw_pixel+0x10c>
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d170      	bne.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8000b16:	4b3a      	ldr	r3, [pc, #232]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da00      	bge.n	8000b28 <SSD1306_draw_pixel+0xd4>
 8000b26:	3307      	adds	r3, #7
 8000b28:	10db      	asrs	r3, r3, #3
 8000b2a:	b218      	sxth	r0, r3
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	440b      	add	r3, r1
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b25c      	sxtb	r4, r3
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b52:	4602      	mov	r2, r0
 8000b54:	01d2      	lsls	r2, r2, #7
 8000b56:	440a      	add	r2, r1
 8000b58:	4413      	add	r3, r2
 8000b5a:	b2e2      	uxtb	r2, r4
 8000b5c:	701a      	strb	r2, [r3, #0]
				break;
 8000b5e:	e04b      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8000b60:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <SSD1306_draw_pixel+0x11e>
 8000b70:	3307      	adds	r3, #7
 8000b72:	10db      	asrs	r3, r3, #3
 8000b74:	b218      	sxth	r0, r3
 8000b76:	4603      	mov	r3, r0
 8000b78:	01db      	lsls	r3, r3, #7
 8000b7a:	440b      	add	r3, r1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	4013      	ands	r3, r2
 8000b96:	b25c      	sxtb	r4, r3
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	01d2      	lsls	r2, r2, #7
 8000ba4:	440a      	add	r2, r1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2e2      	uxtb	r2, r4
 8000baa:	701a      	strb	r2, [r3, #0]
				break;
 8000bac:	e024      	b.n	8000bf8 <SSD1306_draw_pixel+0x1a4>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da00      	bge.n	8000bc0 <SSD1306_draw_pixel+0x16c>
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	10db      	asrs	r3, r3, #3
 8000bc2:	b218      	sxth	r0, r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	440b      	add	r3, r1
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	4053      	eors	r3, r2
 8000be0:	b25c      	sxtb	r4, r3
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <SSD1306_draw_pixel+0x1ac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bea:	4602      	mov	r2, r0
 8000bec:	01d2      	lsls	r2, r2, #7
 8000bee:	440a      	add	r2, r1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2e2      	uxtb	r2, r4
 8000bf4:	701a      	strb	r2, [r3, #0]
				break;
 8000bf6:	bf00      	nop
		}
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	20000090 	.word	0x20000090

08000c04 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <SSD1306_display_clear+0x18>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f008 f9c7 	bl	8008fa6 <memset>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000090 	.word	0x20000090

08000c20 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000c20:	b490      	push	{r4, r7}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4604      	mov	r4, r0
 8000c28:	4608      	mov	r0, r1
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4623      	mov	r3, r4
 8000c30:	80fb      	strh	r3, [r7, #6]
 8000c32:	4603      	mov	r3, r0
 8000c34:	80bb      	strh	r3, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8000c3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db75      	blt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c4c:	dc71      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8000c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da06      	bge.n	8000c64 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	807b      	strh	r3, [r7, #2]
			x = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8000c64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2b80      	cmp	r3, #128	@ 0x80
 8000c70:	dd04      	ble.n	8000c7c <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8000c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dd56      	ble.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <SSD1306_draw_fast_hline_internal+0x11c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da00      	bge.n	8000c92 <SSD1306_draw_fast_hline_internal+0x72>
 8000c90:	3307      	adds	r3, #7
 8000c92:	10db      	asrs	r3, r3, #3
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	01d9      	lsls	r1, r3, #7
 8000c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8000cb0:	883b      	ldrh	r3, [r7, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d034      	beq.n	8000d20 <SSD1306_draw_fast_hline_internal+0x100>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	dc3b      	bgt.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d013      	beq.n	8000ce6 <SSD1306_draw_fast_hline_internal+0xc6>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d137      	bne.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
			{
				case SSD1306_WHITE:
					while (w--)
 8000cc2:	e007      	b.n	8000cd4 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60fa      	str	r2, [r7, #12]
 8000cca:	7819      	ldrb	r1, [r3, #0]
 8000ccc:	7afa      	ldrb	r2, [r7, #11]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	3a01      	subs	r2, #1
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	807a      	strh	r2, [r7, #2]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1ef      	bne.n	8000cc4 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000ce4:	e025      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_BLACK:
					mask = ~mask;
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000cec:	e007      	b.n	8000cfe <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60fa      	str	r2, [r7, #12]
 8000cf4:	7819      	ldrb	r1, [r3, #0]
 8000cf6:	7afa      	ldrb	r2, [r7, #11]
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000cfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	3a01      	subs	r2, #1
 8000d06:	b292      	uxth	r2, r2
 8000d08:	807a      	strh	r2, [r7, #2]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1ef      	bne.n	8000cee <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8000d0e:	e010      	b.n	8000d32 <SSD1306_draw_fast_hline_internal+0x112>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60fa      	str	r2, [r7, #12]
 8000d16:	7819      	ldrb	r1, [r3, #0]
 8000d18:	7afa      	ldrb	r2, [r7, #11]
 8000d1a:	404a      	eors	r2, r1
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	3a01      	subs	r2, #1
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	807a      	strh	r2, [r7, #2]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ef      	bne.n	8000d10 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8000d30:	bf00      	nop
			}
		}
	}
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc90      	pop	{r4, r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000090 	.word	0x20000090

08000d40 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4604      	mov	r4, r0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4623      	mov	r3, r4
 8000d50:	80fb      	strh	r3, [r7, #6]
 8000d52:	4603      	mov	r3, r0
 8000d54:	80bb      	strh	r3, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8000d62:	f000 f997 	bl	8001094 <SSD1306_get_rotation>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d033      	beq.n	8000dd4 <SSD1306_draw_fast_vline+0x94>
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	dc45      	bgt.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d002      	beq.n	8000d7a <SSD1306_draw_fast_vline+0x3a>
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d01b      	beq.n	8000db0 <SSD1306_draw_fast_vline+0x70>
 8000d78:	e040      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8000d7e:	88fa      	ldrh	r2, [r7, #6]
 8000d80:	88bb      	ldrh	r3, [r7, #4]
 8000d82:	4053      	eors	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	88ba      	ldrh	r2, [r7, #4]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4053      	eors	r3, r2
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	88fa      	ldrh	r2, [r7, #6]
 8000d90:	88bb      	ldrh	r3, [r7, #4]
 8000d92:	4053      	eors	r3, r2
 8000d94:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	80fb      	strh	r3, [r7, #6]
  			break;
 8000dae:	e025      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000dba:	88bb      	ldrh	r3, [r7, #4]
 8000dbc:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dd2:	e013      	b.n	8000dfc <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000dd8:	88fa      	ldrh	r2, [r7, #6]
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	4053      	eors	r3, r2
 8000dde:	80fb      	strh	r3, [r7, #6]
 8000de0:	88ba      	ldrh	r2, [r7, #4]
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	4053      	eors	r3, r2
 8000de6:	80bb      	strh	r3, [r7, #4]
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	4053      	eors	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dfa:	bf00      	nop
	}

	if (bSwap)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d009      	beq.n	8000e16 <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8000e02:	883b      	ldrh	r3, [r7, #0]
 8000e04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e10:	f7ff ff06 	bl	8000c20 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8000e14:	e008      	b.n	8000e28 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e24:	f000 f804 	bl	8000e30 <SSD1306_draw_fast_vline_internal>
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}

08000e30 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f2c0 80dc 	blt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5e:	f300 80d7 	bgt.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
	{
		// X coord in bounds?
		if (__y < 0)
 8000e62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da06      	bge.n	8000e78 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000e78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e80:	4413      	add	r3, r2
 8000e82:	2b40      	cmp	r3, #64	@ 0x40
 8000e84:	dd04      	ble.n	8000e90 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000e90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f340 80bb 	ble.w	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	737b      	strb	r3, [r7, #13]
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800101c <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	7b7a      	ldrb	r2, [r7, #13]
 8000ea8:	08d2      	lsrs	r2, r2, #3
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	01d1      	lsls	r1, r2, #7
 8000eae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000eb2:	440a      	add	r2, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d041      	beq.n	8000f4a <SSD1306_draw_fast_vline_internal+0x11a>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f1c3 0308 	rsb	r3, r3, #8
 8000ecc:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4a53      	ldr	r2, [pc, #332]	@ (8001020 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000ed8:	7dfa      	ldrb	r2, [r7, #23]
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d20b      	bcs.n	8000ef8 <SSD1306_draw_fast_vline_internal+0xc8>
				{
					mask &= (0XFF >> (mod - h));
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	22ff      	movs	r2, #255	@ 0xff
 8000ee8:	fa42 f303 	asr.w	r3, r2, r3
 8000eec:	b25a      	sxtb	r2, r3
 8000eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d01a      	beq.n	8000f34 <SSD1306_draw_fast_vline_internal+0x104>
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	dc20      	bgt.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d009      	beq.n	8000f1a <SSD1306_draw_fast_vline_internal+0xea>
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d11c      	bne.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	701a      	strb	r2, [r3, #0]
						break;
 8000f18:	e014      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	701a      	strb	r2, [r3, #0]
						break;
 8000f32:	e007      	b.n	8000f44 <SSD1306_draw_fast_vline_internal+0x114>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	701a      	strb	r2, [r3, #0]
						break;
 8000f42:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	3380      	adds	r3, #128	@ 0x80
 8000f48:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000f4a:	7dfa      	ldrb	r2, [r7, #23]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d35e      	bcc.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
			{
				// More to go?
				h -= mod;
 8000f52:	7dfa      	ldrb	r2, [r7, #23]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	d925      	bls.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
				{
					if (color == SSD1306_INVERSE)
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d10f      	bne.n	8000f86 <SSD1306_draw_fast_vline_internal+0x156>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3380      	adds	r3, #128	@ 0x80
 8000f76:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d8f0      	bhi.n	8000f66 <SSD1306_draw_fast_vline_internal+0x136>
 8000f84:	e012      	b.n	8000fac <SSD1306_draw_fast_vline_internal+0x17c>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000f86:	883b      	ldrh	r3, [r7, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SSD1306_draw_fast_vline_internal+0x160>
 8000f8c:	23ff      	movs	r3, #255	@ 0xff
 8000f8e:	e000      	b.n	8000f92 <SSD1306_draw_fast_vline_internal+0x162>
 8000f90:	2300      	movs	r3, #0
 8000f92:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	7b3a      	ldrb	r2, [r7, #12]
 8000f98:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3380      	adds	r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	3b08      	subs	r3, #8
 8000fa4:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d8f3      	bhi.n	8000f94 <SSD1306_draw_fast_vline_internal+0x164>
					}
				}

				if (h)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d02e      	beq.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <SSD1306_draw_fast_vline_internal+0x1f4>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000fc4:	883b      	ldrh	r3, [r7, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d01a      	beq.n	8001000 <SSD1306_draw_fast_vline_internal+0x1d0>
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	dc20      	bgt.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <SSD1306_draw_fast_vline_internal+0x1b6>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d11c      	bne.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	701a      	strb	r2, [r3, #0]
							break;
 8000fe4:	e014      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25a      	sxtb	r2, r3
 8000fec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	701a      	strb	r2, [r3, #0]
							break;
 8000ffe:	e007      	b.n	8001010 <SSD1306_draw_fast_vline_internal+0x1e0>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	4053      	eors	r3, r2
 8001008:	b2da      	uxtb	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	701a      	strb	r2, [r3, #0]
							break;
 800100e:	bf00      	nop
					}
				}
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bc90      	pop	{r4, r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000090 	.word	0x20000090
 8001020:	0800a428 	.word	0x0800a428
 8001024:	0800a430 	.word	0x0800a430

08001028 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 800102e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001032:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001034:	2022      	movs	r0, #34	@ 0x22
 8001036:	f7ff fc71 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc6e 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001040:	20ff      	movs	r0, #255	@ 0xff
 8001042:	f7ff fc6b 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8001046:	2021      	movs	r0, #33	@ 0x21
 8001048:	f7ff fc68 	bl	800091c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fc65 	bl	800091c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001052:	207f      	movs	r0, #127	@ 0x7f
 8001054:	f7ff fc62 	bl	800091c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SSD1306_display_repaint+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	88fa      	ldrh	r2, [r7, #6]
 800105e:	4619      	mov	r1, r3
 8001060:	2040      	movs	r0, #64	@ 0x40
 8001062:	f7ff fc41 	bl	80008e8 <platform_write_dma>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000090 	.word	0x20000090

08001074 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 800107e:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <SSD1306_set_rotation+0x1c>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	7013      	strb	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000094 	.word	0x20000094

08001094 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return rotation;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <SSD1306_get_rotation+0x14>)
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000094 	.word	0x20000094

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_DMA_Init+0x4c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <MX_DMA_Init+0x4c>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <MX_DMA_Init+0x4c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200c      	movs	r0, #12
 80010d4:	f002 f801 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010d8:	200c      	movs	r0, #12
 80010da:	f002 f81a 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	200f      	movs	r0, #15
 80010e4:	f001 fff9 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f002 f812 	bl	8003112 <HAL_NVIC_EnableIRQ>

}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b47      	ldr	r3, [pc, #284]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a46      	ldr	r2, [pc, #280]	@ (8001234 <MX_GPIO_Init+0x138>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b44      	ldr	r3, [pc, #272]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b40      	ldr	r3, [pc, #256]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a3f      	ldr	r2, [pc, #252]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b3d      	ldr	r3, [pc, #244]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b39      	ldr	r3, [pc, #228]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a38      	ldr	r2, [pc, #224]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b36      	ldr	r3, [pc, #216]	@ (8001234 <MX_GPIO_Init+0x138>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <MX_GPIO_Init+0x138>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a31      	ldr	r2, [pc, #196]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a2a      	ldr	r2, [pc, #168]	@ (8001234 <MX_GPIO_Init+0x138>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <MX_GPIO_Init+0x138>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80011a4:	4824      	ldr	r0, [pc, #144]	@ (8001238 <MX_GPIO_Init+0x13c>)
 80011a6:	f002 fcff 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80011aa:	2301      	movs	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	481f      	ldr	r0, [pc, #124]	@ (800123c <MX_GPIO_Init+0x140>)
 80011c0:	f002 fb6e 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80011c4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4816      	ldr	r0, [pc, #88]	@ (8001238 <MX_GPIO_Init+0x13c>)
 80011de:	f002 fb5f 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_ALARM_BTN_Pin ENC_CLOCK_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_ALARM_BTN_Pin|ENC_CLOCK_BTN_Pin;
 80011e2:	2306      	movs	r3, #6
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4810      	ldr	r0, [pc, #64]	@ (8001238 <MX_GPIO_Init+0x13c>)
 80011f8:	f002 fb52 	bl	80038a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2006      	movs	r0, #6
 8001202:	f001 ff6a 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001206:	2006      	movs	r0, #6
 8001208:	f001 ff83 	bl	8003112 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2007      	movs	r0, #7
 8001212:	f001 ff62 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001216:	2007      	movs	r0, #7
 8001218:	f001 ff7b 	bl	8003112 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2008      	movs	r0, #8
 8001222:	f001 ff5a 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001226:	2008      	movs	r0, #8
 8001228:	f001 ff73 	bl	8003112 <HAL_NVIC_EnableIRQ>

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	@ 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40020000 	.word	0x40020000

08001240 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001246:	4a13      	ldr	r2, [pc, #76]	@ (8001294 <MX_I2C1_Init+0x54>)
 8001248:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_I2C1_Init+0x50>)
 800124c:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_I2C1_Init+0x58>)
 800124e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_I2C1_Init+0x50>)
 800125e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001262:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_I2C1_Init+0x50>)
 800127e:	f002 fcc5 	bl	8003c0c <HAL_I2C_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001288:	f000 feca 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000098 	.word	0x20000098
 8001294:	40005400 	.word	0x40005400
 8001298:	00061a80 	.word	0x00061a80

0800129c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <MX_I2C3_Init+0x54>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012a8:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <MX_I2C3_Init+0x58>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	@ (80012ec <MX_I2C3_Init+0x50>)
 80012da:	f002 fc97 	bl	8003c0c <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 fe9c 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200000ec 	.word	0x200000ec
 80012f0:	40005c00 	.word	0x40005c00
 80012f4:	00061a80 	.word	0x00061a80

080012f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	@ 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a78      	ldr	r2, [pc, #480]	@ (80014f8 <HAL_I2C_MspInit+0x200>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d162      	bne.n	80013e0 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	4b77      	ldr	r3, [pc, #476]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a76      	ldr	r2, [pc, #472]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b74      	ldr	r3, [pc, #464]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_I2C_SCL_Pin|OLED_I2C_SDA_Pin;
 8001336:	23c0      	movs	r3, #192	@ 0xc0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133a:	2312      	movs	r3, #18
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001346:	2304      	movs	r3, #4
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	486b      	ldr	r0, [pc, #428]	@ (8001500 <HAL_I2C_MspInit+0x208>)
 8001352:	f002 faa5 	bl	80038a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	4b68      	ldr	r3, [pc, #416]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	4a67      	ldr	r2, [pc, #412]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4b65      	ldr	r3, [pc, #404]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001372:	4b64      	ldr	r3, [pc, #400]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 8001374:	4a64      	ldr	r2, [pc, #400]	@ (8001508 <HAL_I2C_MspInit+0x210>)
 8001376:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001378:	4b62      	ldr	r3, [pc, #392]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137e:	4b61      	ldr	r3, [pc, #388]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 8001380:	2240      	movs	r2, #64	@ 0x40
 8001382:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001384:	4b5f      	ldr	r3, [pc, #380]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800138a:	4b5e      	ldr	r3, [pc, #376]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 800138c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001390:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001392:	4b5c      	ldr	r3, [pc, #368]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001398:	4b5a      	ldr	r3, [pc, #360]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800139e:	4b59      	ldr	r3, [pc, #356]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013a4:	4b57      	ldr	r3, [pc, #348]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 80013a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013aa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ac:	4b55      	ldr	r3, [pc, #340]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80013b2:	4854      	ldr	r0, [pc, #336]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 80013b4:	f001 fec8 	bl	8003148 <HAL_DMA_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80013be:	f000 fe2f 	bl	8002020 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 80013c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80013c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001504 <HAL_I2C_MspInit+0x20c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201f      	movs	r0, #31
 80013d4:	f001 fe81 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013d8:	201f      	movs	r0, #31
 80013da:	f001 fe9a 	bl	8003112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80013de:	e087      	b.n	80014f0 <HAL_I2C_MspInit+0x1f8>
  else if(i2cHandle->Instance==I2C3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a49      	ldr	r2, [pc, #292]	@ (800150c <HAL_I2C_MspInit+0x214>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f040 8082 	bne.w	80014f0 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	4b42      	ldr	r3, [pc, #264]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	4a41      	ldr	r2, [pc, #260]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fc:	4b3f      	ldr	r3, [pc, #252]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001410:	4a3a      	ldr	r2, [pc, #232]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6313      	str	r3, [r2, #48]	@ 0x30
 8001418:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142a:	2312      	movs	r3, #18
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001436:	2304      	movs	r3, #4
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4833      	ldr	r0, [pc, #204]	@ (8001510 <HAL_I2C_MspInit+0x218>)
 8001442:	f002 fa2d 	bl	80038a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8001446:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144c:	2312      	movs	r3, #18
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001458:	2304      	movs	r3, #4
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	482c      	ldr	r0, [pc, #176]	@ (8001514 <HAL_I2C_MspInit+0x21c>)
 8001464:	f002 fa1c 	bl	80038a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	4a22      	ldr	r2, [pc, #136]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 8001472:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001476:	6413      	str	r3, [r2, #64]	@ 0x40
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <HAL_I2C_MspInit+0x204>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8001484:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 8001486:	4a25      	ldr	r2, [pc, #148]	@ (800151c <HAL_I2C_MspInit+0x224>)
 8001488:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800148a:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 800148c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001490:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 8001494:	2240      	movs	r2, #64	@ 0x40
 8001496:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 80014a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014a4:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b8:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014be:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80014c4:	4814      	ldr	r0, [pc, #80]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 80014c6:	f001 fe3f 	bl	8003148 <HAL_DMA_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_I2C_MspInit+0x1dc>
      Error_Handler();
 80014d0:	f000 fda6 	bl	8002020 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a10      	ldr	r2, [pc, #64]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 80014d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80014da:	4a0f      	ldr	r2, [pc, #60]	@ (8001518 <HAL_I2C_MspInit+0x220>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2048      	movs	r0, #72	@ 0x48
 80014e6:	f001 fdf8 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80014ea:	2048      	movs	r0, #72	@ 0x48
 80014ec:	f001 fe11 	bl	8003112 <HAL_NVIC_EnableIRQ>
}
 80014f0:	bf00      	nop
 80014f2:	3730      	adds	r7, #48	@ 0x30
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40005400 	.word	0x40005400
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400
 8001504:	20000140 	.word	0x20000140
 8001508:	40026028 	.word	0x40026028
 800150c:	40005c00 	.word	0x40005c00
 8001510:	40020800 	.word	0x40020800
 8001514:	40020000 	.word	0x40020000
 8001518:	200001a0 	.word	0x200001a0
 800151c:	40026070 	.word	0x40026070

08001520 <LCD_send_internal>:
#include "lcd_i2c.h"

static I2C_HandleTypeDef *lcd_i2c;

void LCD_send_internal(uint8_t data, uint8_t rs) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	4603      	mov	r3, r0
 8001528:	460a      	mov	r2, r1
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	4613      	mov	r3, r2
 800152e:	71bb      	strb	r3, [r7, #6]
    uint8_t high_nibble = data & 0xF0;
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f023 030f 	bic.w	r3, r3, #15
 8001536:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble  = (data << 4) & 0xF0;
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	73bb      	strb	r3, [r7, #14]
    uint8_t data_arr[4];

    data_arr[0] = high_nibble | rs | LCD_BACKLIGHT | LCD_ENABLE;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	4313      	orrs	r3, r2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f043 030c 	orr.w	r3, r3, #12
 800154a:	b2db      	uxtb	r3, r3
 800154c:	723b      	strb	r3, [r7, #8]
    data_arr[1] = high_nibble | rs | LCD_BACKLIGHT;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	4313      	orrs	r3, r2
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	b2db      	uxtb	r3, r3
 800155c:	727b      	strb	r3, [r7, #9]
    data_arr[2] = low_nibble | rs | LCD_BACKLIGHT | LCD_ENABLE;
 800155e:	7bba      	ldrb	r2, [r7, #14]
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	4313      	orrs	r3, r2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 030c 	orr.w	r3, r3, #12
 800156a:	b2db      	uxtb	r3, r3
 800156c:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = low_nibble | rs | LCD_BACKLIGHT;
 800156e:	7bba      	ldrb	r2, [r7, #14]
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	4313      	orrs	r3, r2
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	b2db      	uxtb	r3, r3
 800157c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd_i2c, LCD_ADDR, data_arr, 4, HAL_MAX_DELAY);
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <LCD_send_internal+0x7c>)
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	f107 0208 	add.w	r2, r7, #8
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2304      	movs	r3, #4
 800158e:	214e      	movs	r1, #78	@ 0x4e
 8001590:	f002 fc96 	bl	8003ec0 <HAL_I2C_Master_Transmit>
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000200 	.word	0x20000200

080015a0 <LCD_send_cmd>:

void LCD_send_cmd(uint8_t cmd) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
    LCD_send_internal(cmd, 0x00);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ffb6 	bl	8001520 <LCD_send_internal>
    HAL_Delay(2);
 80015b4:	2002      	movs	r0, #2
 80015b6:	f001 fc91 	bl	8002edc <HAL_Delay>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LCD_send_data>:

void LCD_send_data(uint8_t data) {
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
    LCD_send_internal(data, LCD_REGISTER_SEL);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2101      	movs	r1, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffa5 	bl	8001520 <LCD_send_internal>
    HAL_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f001 fc80 	bl	8002edc <HAL_Delay>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LCD_clear>:

void LCD_clear(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    LCD_send_cmd(0x01);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff ffd9 	bl	80015a0 <LCD_send_cmd>
    HAL_Delay(2);
 80015ee:	2002      	movs	r0, #2
 80015f0:	f001 fc74 	bl	8002edc <HAL_Delay>
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <LCD_put_cursor>:

void LCD_put_cursor(uint8_t row, uint8_t col) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]
    switch (row) {
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d819      	bhi.n	8001646 <LCD_put_cursor+0x4e>
 8001612:	a201      	add	r2, pc, #4	@ (adr r2, 8001618 <LCD_put_cursor+0x20>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001629 	.word	0x08001629
 800161c:	0800162f 	.word	0x0800162f
 8001620:	08001637 	.word	0x08001637
 8001624:	0800163f 	.word	0x0800163f
        case 0: addr = 0x00 + col; break;
 8001628:	79bb      	ldrb	r3, [r7, #6]
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e00b      	b.n	8001646 <LCD_put_cursor+0x4e>
        case 1: addr = 0x40 + col; break;
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	3340      	adds	r3, #64	@ 0x40
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e007      	b.n	8001646 <LCD_put_cursor+0x4e>
        case 2: addr = 0x14 + col; break;
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	3314      	adds	r3, #20
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e003      	b.n	8001646 <LCD_put_cursor+0x4e>
        case 3: addr = 0x54 + col; break;
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	3354      	adds	r3, #84	@ 0x54
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	bf00      	nop
    }
    LCD_send_cmd(0x80 | addr);
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ffa6 	bl	80015a0 <LCD_send_cmd>
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <LCD_send_string>:

void LCD_send_string(char *str) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001664:	e007      	b.n	8001676 <LCD_send_string+0x1a>
        LCD_send_data((uint8_t)(*str));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ffa9 	bl	80015c2 <LCD_send_data>
        str++;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3301      	adds	r3, #1
 8001674:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f3      	bne.n	8001666 <LCD_send_string+0xa>
    }
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <LCD_clear_row>:

void LCD_clear_row(uint8_t row) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	if(row > LCD_ROWS) {
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d901      	bls.n	800169c <LCD_clear_row+0x14>
		row = LCD_ROWS;
 8001698:	2304      	movs	r3, #4
 800169a:	71fb      	strb	r3, [r7, #7]
	}

	for(uint8_t i = 0; i < LCD_COLS; i++) {
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e00b      	b.n	80016ba <LCD_clear_row+0x32>
		LCD_put_cursor(row, i);
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ffa5 	bl	80015f8 <LCD_put_cursor>
		LCD_send_string(" ");
 80016ae:	4807      	ldr	r0, [pc, #28]	@ (80016cc <LCD_clear_row+0x44>)
 80016b0:	f7ff ffd4 	bl	800165c <LCD_send_string>
	for(uint8_t i = 0; i < LCD_COLS; i++) {
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	3301      	adds	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b13      	cmp	r3, #19
 80016be:	d9f0      	bls.n	80016a2 <LCD_clear_row+0x1a>
	}
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	08009dfc 	.word	0x08009dfc

080016d0 <LCD_init>:

void LCD_init(I2C_HandleTypeDef *hi2c) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
    lcd_i2c = hi2c;
 80016d8:	4a18      	ldr	r2, [pc, #96]	@ (800173c <LCD_init+0x6c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 80016de:	2032      	movs	r0, #50	@ 0x32
 80016e0:	f001 fbfc 	bl	8002edc <HAL_Delay>

    LCD_send_cmd(0x30);
 80016e4:	2030      	movs	r0, #48	@ 0x30
 80016e6:	f7ff ff5b 	bl	80015a0 <LCD_send_cmd>
    HAL_Delay(5);
 80016ea:	2005      	movs	r0, #5
 80016ec:	f001 fbf6 	bl	8002edc <HAL_Delay>
    LCD_send_cmd(0x30);
 80016f0:	2030      	movs	r0, #48	@ 0x30
 80016f2:	f7ff ff55 	bl	80015a0 <LCD_send_cmd>
    HAL_Delay(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f001 fbf0 	bl	8002edc <HAL_Delay>
    LCD_send_cmd(0x30);
 80016fc:	2030      	movs	r0, #48	@ 0x30
 80016fe:	f7ff ff4f 	bl	80015a0 <LCD_send_cmd>
    HAL_Delay(10);
 8001702:	200a      	movs	r0, #10
 8001704:	f001 fbea 	bl	8002edc <HAL_Delay>
    LCD_send_cmd(0x20); // Tryb 4-bitowy
 8001708:	2020      	movs	r0, #32
 800170a:	f7ff ff49 	bl	80015a0 <LCD_send_cmd>

    LCD_send_cmd(0x28); // 4-bit, 2-linie, 5x8 font
 800170e:	2028      	movs	r0, #40	@ 0x28
 8001710:	f7ff ff46 	bl	80015a0 <LCD_send_cmd>
    LCD_send_cmd(0x08); // Display off
 8001714:	2008      	movs	r0, #8
 8001716:	f7ff ff43 	bl	80015a0 <LCD_send_cmd>
    LCD_send_cmd(0x01); // Clear
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff ff40 	bl	80015a0 <LCD_send_cmd>
    HAL_Delay(2);
 8001720:	2002      	movs	r0, #2
 8001722:	f001 fbdb 	bl	8002edc <HAL_Delay>
    LCD_send_cmd(0x06); // Entry mode
 8001726:	2006      	movs	r0, #6
 8001728:	f7ff ff3a 	bl	80015a0 <LCD_send_cmd>
    LCD_send_cmd(0x0C); // Display on, cursor off, blink off
 800172c:	200c      	movs	r0, #12
 800172e:	f7ff ff37 	bl	80015a0 <LCD_send_cmd>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000200 	.word	0x20000200

08001740 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001748:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800174c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d013      	beq.n	8001780 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001758:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800175c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001760:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00b      	beq.n	8001780 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001768:	e000      	b.n	800176c <ITM_SendChar+0x2c>
    {
      __NOP();
 800176a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800176c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f9      	beq.n	800176a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001776:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ffd1 	bl	8001740 <ITM_SendChar>
	return ch;
 800179e:	687b      	ldr	r3, [r7, #4]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <to_bcd>:

uint8_t to_bcd(uint8_t dec) {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
    return ((dec / 10) << 4) | (dec % 10);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	@ (80017f0 <to_bcd+0x48>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	08db      	lsrs	r3, r3, #3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	b258      	sxtb	r0, r3
 80017c4:	79fa      	ldrb	r2, [r7, #7]
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <to_bcd+0x48>)
 80017c8:	fba3 1302 	umull	r1, r3, r3, r2
 80017cc:	08d9      	lsrs	r1, r3, #3
 80017ce:	460b      	mov	r3, r1
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	4303      	orrs	r3, r0
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	cccccccd 	.word	0xcccccccd

080017f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
   alarm_config.enabled = false;
 80017f8:	4b20      	ldr	r3, [pc, #128]	@ (800187c <main+0x88>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
   alarm_config.dismissed = false;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <main+0x88>)
 8001800:	2200      	movs	r2, #0
 8001802:	705a      	strb	r2, [r3, #1]
   clock_config.hours = 0;
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <main+0x8c>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
   clock_config.minutes = 0;
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <main+0x8c>)
 800180c:	2200      	movs	r2, #0
 800180e:	705a      	strb	r2, [r3, #1]
   clock_config.seconds = 0;
 8001810:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <main+0x8c>)
 8001812:	2200      	movs	r2, #0
 8001814:	709a      	strb	r2, [r3, #2]
   clock_config.date = 1;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <main+0x8c>)
 8001818:	2201      	movs	r2, #1
 800181a:	70da      	strb	r2, [r3, #3]
   clock_config.month = 1;
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <main+0x8c>)
 800181e:	2201      	movs	r2, #1
 8001820:	711a      	strb	r2, [r3, #4]
   clock_config.year = 25;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <main+0x8c>)
 8001824:	2219      	movs	r2, #25
 8001826:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001828:	f001 fae6 	bl	8002df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182c:	f000 f82e 	bl	800188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001830:	f7ff fc64 	bl	80010fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001834:	f7ff fc3a 	bl	80010ac <MX_DMA_Init>
  MX_I2C1_Init();
 8001838:	f7ff fd02 	bl	8001240 <MX_I2C1_Init>
  MX_TIM1_Init();
 800183c:	f001 f81e 	bl	800287c <MX_TIM1_Init>
  MX_RTC_Init();
 8001840:	f000 fc1a 	bl	8002078 <MX_RTC_Init>
  MX_TIM3_Init();
 8001844:	f001 f8ce 	bl	80029e4 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001848:	f7ff fd28 	bl	800129c <MX_I2C3_Init>
  MX_TIM4_Init();
 800184c:	f001 f924 	bl	8002a98 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001850:	f001 f870 	bl	8002934 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  OLED_init();
 8001854:	f000 fbea 	bl	800202c <OLED_init>
  LCD_init(&hi2c3);
 8001858:	480a      	ldr	r0, [pc, #40]	@ (8001884 <main+0x90>)
 800185a:	f7ff ff39 	bl	80016d0 <LCD_init>

  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800185e:	2100      	movs	r1, #0
 8001860:	4809      	ldr	r0, [pc, #36]	@ (8001888 <main+0x94>)
 8001862:	f006 f88f 	bl	8007984 <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LCD_update();
 8001866:	f000 fb9f 	bl	8001fa8 <LCD_update>
	  ENC_ALARM_update();
 800186a:	f000 f95f 	bl	8001b2c <ENC_ALARM_update>
	  OLED_update();
 800186e:	f000 f941 	bl	8001af4 <OLED_update>
	  ENC_CLOCK_update();
 8001872:	f000 f9b1 	bl	8001bd8 <ENC_CLOCK_update>
	  LCD_update();
 8001876:	bf00      	nop
 8001878:	e7f5      	b.n	8001866 <main+0x72>
 800187a:	bf00      	nop
 800187c:	2000024c 	.word	0x2000024c
 8001880:	20000250 	.word	0x20000250
 8001884:	200000ec 	.word	0x200000ec
 8001888:	20000368 	.word	0x20000368

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b094      	sub	sp, #80	@ 0x50
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0320 	add.w	r3, r7, #32
 8001896:	2230      	movs	r2, #48	@ 0x30
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f007 fb83 	bl	8008fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <SystemClock_Config+0xb8>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	4a22      	ldr	r2, [pc, #136]	@ (8001944 <SystemClock_Config+0xb8>)
 80018ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018be:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c0:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <SystemClock_Config+0xb8>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <SystemClock_Config+0xbc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001948 <SystemClock_Config+0xbc>)
 80018d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <SystemClock_Config+0xbc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018e8:	230a      	movs	r3, #10
 80018ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ec:	2301      	movs	r3, #1
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f0:	2310      	movs	r3, #16
 80018f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018f4:	2301      	movs	r3, #1
 80018f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	4618      	mov	r0, r3
 8001902:	f004 fe1d 	bl	8006540 <HAL_RCC_OscConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800190c:	f000 fb88 	bl	8002020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001910:	230f      	movs	r3, #15
 8001912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f005 f880 	bl	8006a30 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001936:	f000 fb73 	bl	8002020 <Error_Handler>
  }
}
 800193a:	bf00      	nop
 800193c:	3750      	adds	r7, #80	@ 0x50
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000

0800194c <OLED_show_edit_alarm_screen>:

/* USER CODE BEGIN 4 */

void OLED_show_edit_alarm_screen(void) {
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
    OLED_print("Godzina alarmu", 0, OLED_ROW_1, 1);
 8001950:	2301      	movs	r3, #1
 8001952:	2238      	movs	r2, #56	@ 0x38
 8001954:	2100      	movs	r1, #0
 8001956:	4833      	ldr	r0, [pc, #204]	@ (8001a24 <OLED_show_edit_alarm_screen+0xd8>)
 8001958:	f000 fb6e 	bl	8002038 <OLED_print>

	if(alarm_selection_mode != SELECTION_NONE) {
 800195c:	4b32      	ldr	r3, [pc, #200]	@ (8001a28 <OLED_show_edit_alarm_screen+0xdc>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d035      	beq.n	80019d0 <OLED_show_edit_alarm_screen+0x84>

    	if(alarm_selection_mode == SELECTION_HOUR) {
 8001964:	4b30      	ldr	r3, [pc, #192]	@ (8001a28 <OLED_show_edit_alarm_screen+0xdc>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <OLED_show_edit_alarm_screen+0x52>

    		if(cursor_cnt < 40) {
 800196c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a2c <OLED_show_edit_alarm_screen+0xe0>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b27      	cmp	r3, #39	@ 0x27
 8001972:	d807      	bhi.n	8001984 <OLED_show_edit_alarm_screen+0x38>
    			sprintf(time_hour_str, "%02d", alarm_config.hours);
 8001974:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <OLED_show_edit_alarm_screen+0xe4>)
 8001976:	789b      	ldrb	r3, [r3, #2]
 8001978:	461a      	mov	r2, r3
 800197a:	492e      	ldr	r1, [pc, #184]	@ (8001a34 <OLED_show_edit_alarm_screen+0xe8>)
 800197c:	482e      	ldr	r0, [pc, #184]	@ (8001a38 <OLED_show_edit_alarm_screen+0xec>)
 800197e:	f007 faad 	bl	8008edc <siprintf>
 8001982:	e004      	b.n	800198e <OLED_show_edit_alarm_screen+0x42>
    		} else {
    			sprintf(time_hour_str, "%s", "  ");
 8001984:	4a2d      	ldr	r2, [pc, #180]	@ (8001a3c <OLED_show_edit_alarm_screen+0xf0>)
 8001986:	492e      	ldr	r1, [pc, #184]	@ (8001a40 <OLED_show_edit_alarm_screen+0xf4>)
 8001988:	482b      	ldr	r0, [pc, #172]	@ (8001a38 <OLED_show_edit_alarm_screen+0xec>)
 800198a:	f007 faa7 	bl	8008edc <siprintf>
    		}
    		sprintf(time_minute_str, "%02d", alarm_config.minutes);
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <OLED_show_edit_alarm_screen+0xe4>)
 8001990:	78db      	ldrb	r3, [r3, #3]
 8001992:	461a      	mov	r2, r3
 8001994:	4927      	ldr	r1, [pc, #156]	@ (8001a34 <OLED_show_edit_alarm_screen+0xe8>)
 8001996:	482b      	ldr	r0, [pc, #172]	@ (8001a44 <OLED_show_edit_alarm_screen+0xf8>)
 8001998:	f007 faa0 	bl	8008edc <siprintf>
 800199c:	e026      	b.n	80019ec <OLED_show_edit_alarm_screen+0xa0>

    	} else {

    		if(cursor_cnt < 40) {
 800199e:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <OLED_show_edit_alarm_screen+0xe0>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	2b27      	cmp	r3, #39	@ 0x27
 80019a4:	d807      	bhi.n	80019b6 <OLED_show_edit_alarm_screen+0x6a>
        		sprintf(time_minute_str, "%02d", alarm_config.minutes);
 80019a6:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <OLED_show_edit_alarm_screen+0xe4>)
 80019a8:	78db      	ldrb	r3, [r3, #3]
 80019aa:	461a      	mov	r2, r3
 80019ac:	4921      	ldr	r1, [pc, #132]	@ (8001a34 <OLED_show_edit_alarm_screen+0xe8>)
 80019ae:	4825      	ldr	r0, [pc, #148]	@ (8001a44 <OLED_show_edit_alarm_screen+0xf8>)
 80019b0:	f007 fa94 	bl	8008edc <siprintf>
 80019b4:	e004      	b.n	80019c0 <OLED_show_edit_alarm_screen+0x74>
			} else {
				sprintf(time_minute_str, "%s", "  ");
 80019b6:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <OLED_show_edit_alarm_screen+0xf0>)
 80019b8:	4921      	ldr	r1, [pc, #132]	@ (8001a40 <OLED_show_edit_alarm_screen+0xf4>)
 80019ba:	4822      	ldr	r0, [pc, #136]	@ (8001a44 <OLED_show_edit_alarm_screen+0xf8>)
 80019bc:	f007 fa8e 	bl	8008edc <siprintf>
			}
    		sprintf(time_hour_str, "%02d", alarm_config.hours);
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <OLED_show_edit_alarm_screen+0xe4>)
 80019c2:	789b      	ldrb	r3, [r3, #2]
 80019c4:	461a      	mov	r2, r3
 80019c6:	491b      	ldr	r1, [pc, #108]	@ (8001a34 <OLED_show_edit_alarm_screen+0xe8>)
 80019c8:	481b      	ldr	r0, [pc, #108]	@ (8001a38 <OLED_show_edit_alarm_screen+0xec>)
 80019ca:	f007 fa87 	bl	8008edc <siprintf>
 80019ce:	e00d      	b.n	80019ec <OLED_show_edit_alarm_screen+0xa0>
    	}

    } else {
		sprintf(time_hour_str, "%02d", alarm_config.hours);
 80019d0:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <OLED_show_edit_alarm_screen+0xe4>)
 80019d2:	789b      	ldrb	r3, [r3, #2]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4917      	ldr	r1, [pc, #92]	@ (8001a34 <OLED_show_edit_alarm_screen+0xe8>)
 80019d8:	4817      	ldr	r0, [pc, #92]	@ (8001a38 <OLED_show_edit_alarm_screen+0xec>)
 80019da:	f007 fa7f 	bl	8008edc <siprintf>
		sprintf(time_minute_str, "%02d", alarm_config.minutes);
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <OLED_show_edit_alarm_screen+0xe4>)
 80019e0:	78db      	ldrb	r3, [r3, #3]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4913      	ldr	r1, [pc, #76]	@ (8001a34 <OLED_show_edit_alarm_screen+0xe8>)
 80019e6:	4817      	ldr	r0, [pc, #92]	@ (8001a44 <OLED_show_edit_alarm_screen+0xf8>)
 80019e8:	f007 fa78 	bl	8008edc <siprintf>
    }

	if(cursor_cnt > 50) cursor_cnt = 0;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <OLED_show_edit_alarm_screen+0xe0>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	2b32      	cmp	r3, #50	@ 0x32
 80019f2:	d903      	bls.n	80019fc <OLED_show_edit_alarm_screen+0xb0>
 80019f4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <OLED_show_edit_alarm_screen+0xe0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	e005      	b.n	8001a08 <OLED_show_edit_alarm_screen+0xbc>
	else cursor_cnt++;
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <OLED_show_edit_alarm_screen+0xe0>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <OLED_show_edit_alarm_screen+0xe0>)
 8001a06:	801a      	strh	r2, [r3, #0]

	sprintf(time_str, "%s:%s", time_hour_str, time_minute_str);
 8001a08:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <OLED_show_edit_alarm_screen+0xf8>)
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a38 <OLED_show_edit_alarm_screen+0xec>)
 8001a0c:	490e      	ldr	r1, [pc, #56]	@ (8001a48 <OLED_show_edit_alarm_screen+0xfc>)
 8001a0e:	480f      	ldr	r0, [pc, #60]	@ (8001a4c <OLED_show_edit_alarm_screen+0x100>)
 8001a10:	f007 fa64 	bl	8008edc <siprintf>
	OLED_print(time_str, 0, OLED_ROW_5, 2);
 8001a14:	2302      	movs	r3, #2
 8001a16:	2218      	movs	r2, #24
 8001a18:	2100      	movs	r1, #0
 8001a1a:	480c      	ldr	r0, [pc, #48]	@ (8001a4c <OLED_show_edit_alarm_screen+0x100>)
 8001a1c:	f000 fb0c 	bl	8002038 <OLED_print>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	08009e00 	.word	0x08009e00
 8001a28:	20000248 	.word	0x20000248
 8001a2c:	20000204 	.word	0x20000204
 8001a30:	2000024c 	.word	0x2000024c
 8001a34:	08009e10 	.word	0x08009e10
 8001a38:	20000228 	.word	0x20000228
 8001a3c:	08009e18 	.word	0x08009e18
 8001a40:	08009e1c 	.word	0x08009e1c
 8001a44:	20000238 	.word	0x20000238
 8001a48:	08009e20 	.word	0x08009e20
 8001a4c:	20000208 	.word	0x20000208

08001a50 <OLED_show_alarm_countdown_screen>:

void OLED_show_alarm_countdown_screen() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08e      	sub	sp, #56	@ 0x38
 8001a54:	af00      	add	r7, sp, #0
	char buffer[32];
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	481f      	ldr	r0, [pc, #124]	@ (8001adc <OLED_show_alarm_countdown_screen+0x8c>)
 8001a5e:	f005 fbbe 	bl	80071de <HAL_RTC_GetTime>

	if(alarm_config.hours - sTime.Hours >= 0 && alarm_config.minutes - sTime.Minutes >= 0) {
 8001a62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <OLED_show_alarm_countdown_screen+0x90>)
 8001a64:	789b      	ldrb	r3, [r3, #2]
 8001a66:	461a      	mov	r2, r3
 8001a68:	793b      	ldrb	r3, [r7, #4]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db23      	blt.n	8001ab8 <OLED_show_alarm_countdown_screen+0x68>
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <OLED_show_alarm_countdown_screen+0x90>)
 8001a72:	78db      	ldrb	r3, [r3, #3]
 8001a74:	461a      	mov	r2, r3
 8001a76:	797b      	ldrb	r3, [r7, #5]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db1c      	blt.n	8001ab8 <OLED_show_alarm_countdown_screen+0x68>
		OLED_print("Alarm zadzwoni za", 0, OLED_ROW_1, 1);
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2238      	movs	r2, #56	@ 0x38
 8001a82:	2100      	movs	r1, #0
 8001a84:	4817      	ldr	r0, [pc, #92]	@ (8001ae4 <OLED_show_alarm_countdown_screen+0x94>)
 8001a86:	f000 fad7 	bl	8002038 <OLED_print>

		sprintf(buffer, "%d godz. %d min.", alarm_config.hours - sTime.Hours, alarm_config.minutes - sTime.Minutes);
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <OLED_show_alarm_countdown_screen+0x90>)
 8001a8c:	789b      	ldrb	r3, [r3, #2]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	793b      	ldrb	r3, [r7, #4]
 8001a92:	1ad2      	subs	r2, r2, r3
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <OLED_show_alarm_countdown_screen+0x90>)
 8001a96:	78db      	ldrb	r3, [r3, #3]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	797b      	ldrb	r3, [r7, #5]
 8001a9c:	1acb      	subs	r3, r1, r3
 8001a9e:	f107 0018 	add.w	r0, r7, #24
 8001aa2:	4911      	ldr	r1, [pc, #68]	@ (8001ae8 <OLED_show_alarm_countdown_screen+0x98>)
 8001aa4:	f007 fa1a 	bl	8008edc <siprintf>
		OLED_print(buffer, 0, OLED_ROW_3, 1);
 8001aa8:	f107 0018 	add.w	r0, r7, #24
 8001aac:	2301      	movs	r3, #1
 8001aae:	2228      	movs	r2, #40	@ 0x28
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f000 fac1 	bl	8002038 <OLED_print>
 8001ab6:	e00c      	b.n	8001ad2 <OLED_show_alarm_countdown_screen+0x82>
	} else {
		OLED_print("Alarm nie zosta\314", 0, OLED_ROW_3, 1);
 8001ab8:	2301      	movs	r3, #1
 8001aba:	2228      	movs	r2, #40	@ 0x28
 8001abc:	2100      	movs	r1, #0
 8001abe:	480b      	ldr	r0, [pc, #44]	@ (8001aec <OLED_show_alarm_countdown_screen+0x9c>)
 8001ac0:	f000 faba 	bl	8002038 <OLED_print>
		OLED_print("ustawiony", 0, OLED_ROW_4, 1);
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <OLED_show_alarm_countdown_screen+0xa0>)
 8001acc:	f000 fab4 	bl	8002038 <OLED_print>
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3738      	adds	r7, #56	@ 0x38
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000260 	.word	0x20000260
 8001ae0:	2000024c 	.word	0x2000024c
 8001ae4:	08009e28 	.word	0x08009e28
 8001ae8:	08009e3c 	.word	0x08009e3c
 8001aec:	08009e50 	.word	0x08009e50
 8001af0:	08009e64 	.word	0x08009e64

08001af4 <OLED_update>:

void OLED_update(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	if(is_oled_cls) {
 8001af8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <OLED_update+0x30>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <OLED_update+0x1a>
		SSD1306_display_clear();
 8001b00:	f7ff f880 	bl	8000c04 <SSD1306_display_clear>
		SSD1306_display_repaint();
 8001b04:	f7ff fa90 	bl	8001028 <SSD1306_display_repaint>
		is_oled_cls = false;
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <OLED_update+0x30>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	}

    if(current_state == STATE_EDIT_ALARM) {
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <OLED_update+0x34>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d102      	bne.n	8001b1c <OLED_update+0x28>
    	OLED_show_edit_alarm_screen();
 8001b16:	f7ff ff19 	bl	800194c <OLED_show_edit_alarm_screen>
    }
    else {
        OLED_show_alarm_countdown_screen();
    }
}
 8001b1a:	e001      	b.n	8001b20 <OLED_update+0x2c>
        OLED_show_alarm_countdown_screen();
 8001b1c:	f7ff ff98 	bl	8001a50 <OLED_show_alarm_countdown_screen>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000025a 	.word	0x2000025a
 8001b28:	20000000 	.word	0x20000000

08001b2c <ENC_ALARM_update>:

void ENC_ALARM_update(void) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
	static uint16_t last_cnt = 0;
	int diff = htim1.Instance->CNT - last_cnt;
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <ENC_ALARM_update+0x9c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	4a24      	ldr	r2, [pc, #144]	@ (8001bcc <ENC_ALARM_update+0xa0>)
 8001b3a:	8812      	ldrh	r2, [r2, #0]
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	607b      	str	r3, [r7, #4]

	if(diff >= 4 || diff <= -4) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	dc03      	bgt.n	8001b4e <ENC_ALARM_update+0x22>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f113 0f03 	cmn.w	r3, #3
 8001b4c:	da35      	bge.n	8001bba <ENC_ALARM_update+0x8e>
		diff /= 4;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	da00      	bge.n	8001b56 <ENC_ALARM_update+0x2a>
 8001b54:	3303      	adds	r3, #3
 8001b56:	109b      	asrs	r3, r3, #2
 8001b58:	607b      	str	r3, [r7, #4]

		switch(alarm_selection_mode) {
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <ENC_ALARM_update+0xa4>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <ENC_ALARM_update+0x3c>
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d010      	beq.n	8001b88 <ENC_ALARM_update+0x5c>
				alarm_config.minutes += (int8_t)diff;

				if(alarm_config.minutes > 59) alarm_config.minutes = 0;
				if (alarm_config.minutes < 0) alarm_config.minutes = 59;
			default:
				break;
 8001b66:	e021      	b.n	8001bac <ENC_ALARM_update+0x80>
				alarm_config.hours += (int8_t)diff;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <ENC_ALARM_update+0xa8>)
 8001b6a:	789a      	ldrb	r2, [r3, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <ENC_ALARM_update+0xa8>)
 8001b76:	709a      	strb	r2, [r3, #2]
				if(alarm_config.hours > 23) alarm_config.hours = 0;
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <ENC_ALARM_update+0xa8>)
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	2b17      	cmp	r3, #23
 8001b7e:	d913      	bls.n	8001ba8 <ENC_ALARM_update+0x7c>
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <ENC_ALARM_update+0xa8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	709a      	strb	r2, [r3, #2]
				break;
 8001b86:	e00f      	b.n	8001ba8 <ENC_ALARM_update+0x7c>
				alarm_config.minutes += (int8_t)diff;
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <ENC_ALARM_update+0xa8>)
 8001b8a:	78da      	ldrb	r2, [r3, #3]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <ENC_ALARM_update+0xa8>)
 8001b96:	70da      	strb	r2, [r3, #3]
				if(alarm_config.minutes > 59) alarm_config.minutes = 0;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <ENC_ALARM_update+0xa8>)
 8001b9a:	78db      	ldrb	r3, [r3, #3]
 8001b9c:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b9e:	d905      	bls.n	8001bac <ENC_ALARM_update+0x80>
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <ENC_ALARM_update+0xa8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	70da      	strb	r2, [r3, #3]
				break;
 8001ba6:	e001      	b.n	8001bac <ENC_ALARM_update+0x80>
				break;
 8001ba8:	bf00      	nop
 8001baa:	e000      	b.n	8001bae <ENC_ALARM_update+0x82>
				break;
 8001bac:	bf00      	nop
		}

		last_cnt = htim1.Instance->CNT;
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <ENC_ALARM_update+0x9c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <ENC_ALARM_update+0xa0>)
 8001bb8:	801a      	strh	r2, [r3, #0]
	}
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000290 	.word	0x20000290
 8001bcc:	2000025c 	.word	0x2000025c
 8001bd0:	20000248 	.word	0x20000248
 8001bd4:	2000024c 	.word	0x2000024c

08001bd8 <ENC_CLOCK_update>:

void ENC_CLOCK_update(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
	static uint16_t last_cnt_clock = 0;
	int diff = htim2.Instance->CNT - last_cnt_clock;
 8001bde:	4b55      	ldr	r3, [pc, #340]	@ (8001d34 <ENC_CLOCK_update+0x15c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	4a54      	ldr	r2, [pc, #336]	@ (8001d38 <ENC_CLOCK_update+0x160>)
 8001be6:	8812      	ldrh	r2, [r2, #0]
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	607b      	str	r3, [r7, #4]

	if(diff >= 4 || diff <= -4) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	dc04      	bgt.n	8001bfc <ENC_CLOCK_update+0x24>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f113 0f03 	cmn.w	r3, #3
 8001bf8:	f280 8098 	bge.w	8001d2c <ENC_CLOCK_update+0x154>
		diff /= 4;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da00      	bge.n	8001c04 <ENC_CLOCK_update+0x2c>
 8001c02:	3303      	adds	r3, #3
 8001c04:	109b      	asrs	r3, r3, #2
 8001c06:	607b      	str	r3, [r7, #4]

		printf("Clock: %d \n", diff);
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	484c      	ldr	r0, [pc, #304]	@ (8001d3c <ENC_CLOCK_update+0x164>)
 8001c0c:	f007 f954 	bl	8008eb8 <iprintf>

		switch(clock_selection_mode) {
 8001c10:	4b4b      	ldr	r3, [pc, #300]	@ (8001d40 <ENC_CLOCK_update+0x168>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b06      	cmp	r3, #6
 8001c16:	d878      	bhi.n	8001d0a <ENC_CLOCK_update+0x132>
 8001c18:	a201      	add	r2, pc, #4	@ (adr r2, 8001c20 <ENC_CLOCK_update+0x48>)
 8001c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1e:	bf00      	nop
 8001c20:	08001c3d 	.word	0x08001c3d
 8001c24:	08001c5d 	.word	0x08001c5d
 8001c28:	08001c7d 	.word	0x08001c7d
 8001c2c:	08001d0b 	.word	0x08001d0b
 8001c30:	08001c9d 	.word	0x08001c9d
 8001c34:	08001cbd 	.word	0x08001cbd
 8001c38:	08001cdd 	.word	0x08001cdd
			case SELECTION_HOUR:
				clock_config.hours += (int8_t)diff;
 8001c3c:	4b41      	ldr	r3, [pc, #260]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b3e      	ldr	r3, [pc, #248]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c4a:	701a      	strb	r2, [r3, #0]

				if(clock_config.hours > 23) clock_config.hours = 0;
 8001c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b17      	cmp	r3, #23
 8001c52:	d95c      	bls.n	8001d0e <ENC_CLOCK_update+0x136>
 8001c54:	4b3b      	ldr	r3, [pc, #236]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
				if (clock_config.hours < 0) clock_config.hours = 23;
				break;
 8001c5a:	e058      	b.n	8001d0e <ENC_CLOCK_update+0x136>

			case SELECTION_MINUTE:
				clock_config.minutes += (int8_t)diff;
 8001c5c:	4b39      	ldr	r3, [pc, #228]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c5e:	785a      	ldrb	r2, [r3, #1]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b36      	ldr	r3, [pc, #216]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c6a:	705a      	strb	r2, [r3, #1]

				if(clock_config.minutes > 59) clock_config.minutes = 0;
 8001c6c:	4b35      	ldr	r3, [pc, #212]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c72:	d94e      	bls.n	8001d12 <ENC_CLOCK_update+0x13a>
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	705a      	strb	r2, [r3, #1]
				if (clock_config.minutes < 0) clock_config.minutes = 59;
				break;
 8001c7a:	e04a      	b.n	8001d12 <ENC_CLOCK_update+0x13a>

			case SELECTION_SECONDS:
				clock_config.seconds += (int8_t)diff;
 8001c7c:	4b31      	ldr	r3, [pc, #196]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c7e:	789a      	ldrb	r2, [r3, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c8a:	709a      	strb	r2, [r3, #2]

				if(clock_config.seconds > 59) clock_config.seconds = 0;
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c8e:	789b      	ldrb	r3, [r3, #2]
 8001c90:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c92:	d940      	bls.n	8001d16 <ENC_CLOCK_update+0x13e>
 8001c94:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	709a      	strb	r2, [r3, #2]
				if (clock_config.seconds < 0) clock_config.seconds = 59;
				break;
 8001c9a:	e03c      	b.n	8001d16 <ENC_CLOCK_update+0x13e>

			case SELECTION_DATE:
				clock_config.date += (int8_t)diff;
 8001c9c:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001c9e:	78da      	ldrb	r2, [r3, #3]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b26      	ldr	r3, [pc, #152]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001caa:	70da      	strb	r2, [r3, #3]

				if(clock_config.date > 31) clock_config.date = 1;
 8001cac:	4b25      	ldr	r3, [pc, #148]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cae:	78db      	ldrb	r3, [r3, #3]
 8001cb0:	2b1f      	cmp	r3, #31
 8001cb2:	d932      	bls.n	8001d1a <ENC_CLOCK_update+0x142>
 8001cb4:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	70da      	strb	r2, [r3, #3]
				if (clock_config.date < 0) clock_config.date = 31;
				break;
 8001cba:	e02e      	b.n	8001d1a <ENC_CLOCK_update+0x142>

			case SELECTION_MONTH:
				clock_config.month += (int8_t)diff;
 8001cbc:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cbe:	791a      	ldrb	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cca:	711a      	strb	r2, [r3, #4]

				if(clock_config.month > 12) clock_config.month = 1;
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cce:	791b      	ldrb	r3, [r3, #4]
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	d924      	bls.n	8001d1e <ENC_CLOCK_update+0x146>
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	711a      	strb	r2, [r3, #4]
				if (clock_config.month < 0) clock_config.month = 12;
				break;
 8001cda:	e020      	b.n	8001d1e <ENC_CLOCK_update+0x146>

			case SELECTION_YEAR:
				clock_config.year += (int8_t)diff;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cde:	88da      	ldrh	r2, [r3, #6]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b16      	ldr	r3, [pc, #88]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cec:	80da      	strh	r2, [r3, #6]

				if(clock_config.year > 30) clock_config.year = 25;
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cf0:	88db      	ldrh	r3, [r3, #6]
 8001cf2:	2b1e      	cmp	r3, #30
 8001cf4:	d902      	bls.n	8001cfc <ENC_CLOCK_update+0x124>
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cf8:	2219      	movs	r2, #25
 8001cfa:	80da      	strh	r2, [r3, #6]
				if (clock_config.year < 25) clock_config.year = 30;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001cfe:	88db      	ldrh	r3, [r3, #6]
 8001d00:	2b18      	cmp	r3, #24
 8001d02:	d802      	bhi.n	8001d0a <ENC_CLOCK_update+0x132>
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <ENC_CLOCK_update+0x16c>)
 8001d06:	221e      	movs	r2, #30
 8001d08:	80da      	strh	r2, [r3, #6]
			default:
				break;
 8001d0a:	bf00      	nop
 8001d0c:	e008      	b.n	8001d20 <ENC_CLOCK_update+0x148>
				break;
 8001d0e:	bf00      	nop
 8001d10:	e006      	b.n	8001d20 <ENC_CLOCK_update+0x148>
				break;
 8001d12:	bf00      	nop
 8001d14:	e004      	b.n	8001d20 <ENC_CLOCK_update+0x148>
				break;
 8001d16:	bf00      	nop
 8001d18:	e002      	b.n	8001d20 <ENC_CLOCK_update+0x148>
				break;
 8001d1a:	bf00      	nop
 8001d1c:	e000      	b.n	8001d20 <ENC_CLOCK_update+0x148>
				break;
 8001d1e:	bf00      	nop
		}

		last_cnt_clock = htim2.Instance->CNT;
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <ENC_CLOCK_update+0x15c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <ENC_CLOCK_update+0x160>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	}
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200002d8 	.word	0x200002d8
 8001d38:	2000025e 	.word	0x2000025e
 8001d3c:	08009e70 	.word	0x08009e70
 8001d40:	20000249 	.word	0x20000249
 8001d44:	20000250 	.word	0x20000250

08001d48 <LCD_show_clock_screen>:

void LCD_show_clock_screen() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b098      	sub	sp, #96	@ 0x60
 8001d4c:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001d4e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	481e      	ldr	r0, [pc, #120]	@ (8001dd0 <LCD_show_clock_screen+0x88>)
 8001d58:	f005 fa41 	bl	80071de <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d60:	2200      	movs	r2, #0
 8001d62:	4619      	mov	r1, r3
 8001d64:	481a      	ldr	r0, [pc, #104]	@ (8001dd0 <LCD_show_clock_screen+0x88>)
 8001d66:	f005 fb1c 	bl	80073a2 <HAL_RTC_GetDate>

	char buffer[64];
	sprintf(buffer, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001d6a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001d74:	4619      	mov	r1, r3
 8001d76:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001d7a:	4638      	mov	r0, r7
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4914      	ldr	r1, [pc, #80]	@ (8001dd4 <LCD_show_clock_screen+0x8c>)
 8001d82:	f007 f8ab 	bl	8008edc <siprintf>
	LCD_put_cursor(0, 6);
 8001d86:	2106      	movs	r1, #6
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff fc35 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string(buffer);
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fc63 	bl	800165c <LCD_send_string>

	sprintf(buffer, "%02d.%02d.%d", sDate.Date, sDate.Month, 2000 + sDate.Year);
 8001d96:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001da0:	4619      	mov	r1, r3
 8001da2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001da6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001daa:	4638      	mov	r0, r7
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	460b      	mov	r3, r1
 8001db0:	4909      	ldr	r1, [pc, #36]	@ (8001dd8 <LCD_show_clock_screen+0x90>)
 8001db2:	f007 f893 	bl	8008edc <siprintf>
	LCD_put_cursor(2, 5);
 8001db6:	2105      	movs	r1, #5
 8001db8:	2002      	movs	r0, #2
 8001dba:	f7ff fc1d 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string(buffer);
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fc4b 	bl	800165c <LCD_send_string>
}
 8001dc6:	bf00      	nop
 8001dc8:	3758      	adds	r7, #88	@ 0x58
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000260 	.word	0x20000260
 8001dd4:	08009e7c 	.word	0x08009e7c
 8001dd8:	08009e8c 	.word	0x08009e8c

08001ddc <LCD_show_edit_clock_screen>:

void LCD_show_edit_clock_screen() {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b092      	sub	sp, #72	@ 0x48
 8001de0:	af02      	add	r7, sp, #8
	char buffer[64];

	LCD_put_cursor(0, 0);
 8001de2:	2100      	movs	r1, #0
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fc07 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string("Godzina");
 8001dea:	484d      	ldr	r0, [pc, #308]	@ (8001f20 <LCD_show_edit_clock_screen+0x144>)
 8001dec:	f7ff fc36 	bl	800165c <LCD_send_string>
	LCD_put_cursor(0, 10);
 8001df0:	210a      	movs	r1, #10
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff fc00 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string("Data");
 8001df8:	484a      	ldr	r0, [pc, #296]	@ (8001f24 <LCD_show_edit_clock_screen+0x148>)
 8001dfa:	f7ff fc2f 	bl	800165c <LCD_send_string>
	LCD_put_cursor(3, 0);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2003      	movs	r0, #3
 8001e02:	f7ff fbf9 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string("Zapisz - User Button");
 8001e06:	4848      	ldr	r0, [pc, #288]	@ (8001f28 <LCD_show_edit_clock_screen+0x14c>)
 8001e08:	f7ff fc28 	bl	800165c <LCD_send_string>

	sprintf(buffer, "%02d:%02d:%02d", clock_config.hours, clock_config.minutes, clock_config.seconds);
 8001e0c:	4b47      	ldr	r3, [pc, #284]	@ (8001f2c <LCD_show_edit_clock_screen+0x150>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b46      	ldr	r3, [pc, #280]	@ (8001f2c <LCD_show_edit_clock_screen+0x150>)
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	4619      	mov	r1, r3
 8001e18:	4b44      	ldr	r3, [pc, #272]	@ (8001f2c <LCD_show_edit_clock_screen+0x150>)
 8001e1a:	789b      	ldrb	r3, [r3, #2]
 8001e1c:	4638      	mov	r0, r7
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	460b      	mov	r3, r1
 8001e22:	4943      	ldr	r1, [pc, #268]	@ (8001f30 <LCD_show_edit_clock_screen+0x154>)
 8001e24:	f007 f85a 	bl	8008edc <siprintf>
	LCD_put_cursor(1, 0);
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7ff fbe4 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string(buffer);
 8001e30:	463b      	mov	r3, r7
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fc12 	bl	800165c <LCD_send_string>

	sprintf(buffer, "%02d.%02d.%d", clock_config.date, clock_config.month, 2000 + clock_config.year);
 8001e38:	4b3c      	ldr	r3, [pc, #240]	@ (8001f2c <LCD_show_edit_clock_screen+0x150>)
 8001e3a:	78db      	ldrb	r3, [r3, #3]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f2c <LCD_show_edit_clock_screen+0x150>)
 8001e40:	791b      	ldrb	r3, [r3, #4]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4b39      	ldr	r3, [pc, #228]	@ (8001f2c <LCD_show_edit_clock_screen+0x150>)
 8001e46:	88db      	ldrh	r3, [r3, #6]
 8001e48:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001e4c:	4638      	mov	r0, r7
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	460b      	mov	r3, r1
 8001e52:	4938      	ldr	r1, [pc, #224]	@ (8001f34 <LCD_show_edit_clock_screen+0x158>)
 8001e54:	f007 f842 	bl	8008edc <siprintf>
	LCD_put_cursor(1, 10);
 8001e58:	210a      	movs	r1, #10
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff fbcc 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string(buffer);
 8001e60:	463b      	mov	r3, r7
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fbfa 	bl	800165c <LCD_send_string>

	switch(clock_selection_mode) {
 8001e68:	4b33      	ldr	r3, [pc, #204]	@ (8001f38 <LCD_show_edit_clock_screen+0x15c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d852      	bhi.n	8001f16 <LCD_show_edit_clock_screen+0x13a>
 8001e70:	a201      	add	r2, pc, #4	@ (adr r2, 8001e78 <LCD_show_edit_clock_screen+0x9c>)
 8001e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e76:	bf00      	nop
 8001e78:	08001e95 	.word	0x08001e95
 8001e7c:	08001eab 	.word	0x08001eab
 8001e80:	08001ec1 	.word	0x08001ec1
 8001e84:	08001f17 	.word	0x08001f17
 8001e88:	08001ed7 	.word	0x08001ed7
 8001e8c:	08001eed 	.word	0x08001eed
 8001e90:	08001f03 	.word	0x08001f03
		case SELECTION_HOUR:
			LCD_clear_row(2);
 8001e94:	2002      	movs	r0, #2
 8001e96:	f7ff fbf7 	bl	8001688 <LCD_clear_row>
			LCD_put_cursor(2, 0);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7ff fbab 	bl	80015f8 <LCD_put_cursor>
			LCD_send_string("^^");
 8001ea2:	4826      	ldr	r0, [pc, #152]	@ (8001f3c <LCD_show_edit_clock_screen+0x160>)
 8001ea4:	f7ff fbda 	bl	800165c <LCD_send_string>
			break;
 8001ea8:	e036      	b.n	8001f18 <LCD_show_edit_clock_screen+0x13c>

		case SELECTION_MINUTE:
			LCD_clear_row(2);
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7ff fbec 	bl	8001688 <LCD_clear_row>
			LCD_put_cursor(2, 3);
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7ff fba0 	bl	80015f8 <LCD_put_cursor>
			LCD_send_string("^^");;
 8001eb8:	4820      	ldr	r0, [pc, #128]	@ (8001f3c <LCD_show_edit_clock_screen+0x160>)
 8001eba:	f7ff fbcf 	bl	800165c <LCD_send_string>
			break;
 8001ebe:	e02b      	b.n	8001f18 <LCD_show_edit_clock_screen+0x13c>

		case SELECTION_SECONDS:
			LCD_clear_row(2);
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	f7ff fbe1 	bl	8001688 <LCD_clear_row>
			LCD_put_cursor(2, 6);
 8001ec6:	2106      	movs	r1, #6
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f7ff fb95 	bl	80015f8 <LCD_put_cursor>
			LCD_send_string("^^");
 8001ece:	481b      	ldr	r0, [pc, #108]	@ (8001f3c <LCD_show_edit_clock_screen+0x160>)
 8001ed0:	f7ff fbc4 	bl	800165c <LCD_send_string>
			break;
 8001ed4:	e020      	b.n	8001f18 <LCD_show_edit_clock_screen+0x13c>

		case SELECTION_DATE:
			LCD_clear_row(2);
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f7ff fbd6 	bl	8001688 <LCD_clear_row>
			LCD_put_cursor(2, 10);
 8001edc:	210a      	movs	r1, #10
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f7ff fb8a 	bl	80015f8 <LCD_put_cursor>
			LCD_send_string("^^");
 8001ee4:	4815      	ldr	r0, [pc, #84]	@ (8001f3c <LCD_show_edit_clock_screen+0x160>)
 8001ee6:	f7ff fbb9 	bl	800165c <LCD_send_string>
			break;
 8001eea:	e015      	b.n	8001f18 <LCD_show_edit_clock_screen+0x13c>

		case SELECTION_MONTH:
			LCD_clear_row(2);
 8001eec:	2002      	movs	r0, #2
 8001eee:	f7ff fbcb 	bl	8001688 <LCD_clear_row>
			LCD_put_cursor(2, 13);
 8001ef2:	210d      	movs	r1, #13
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff fb7f 	bl	80015f8 <LCD_put_cursor>
			LCD_send_string("^^");
 8001efa:	4810      	ldr	r0, [pc, #64]	@ (8001f3c <LCD_show_edit_clock_screen+0x160>)
 8001efc:	f7ff fbae 	bl	800165c <LCD_send_string>
			break;
 8001f00:	e00a      	b.n	8001f18 <LCD_show_edit_clock_screen+0x13c>

		case SELECTION_YEAR:
			LCD_clear_row(2);
 8001f02:	2002      	movs	r0, #2
 8001f04:	f7ff fbc0 	bl	8001688 <LCD_clear_row>
			LCD_put_cursor(2, 18);
 8001f08:	2112      	movs	r1, #18
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f7ff fb74 	bl	80015f8 <LCD_put_cursor>
			LCD_send_string("^^");
 8001f10:	480a      	ldr	r0, [pc, #40]	@ (8001f3c <LCD_show_edit_clock_screen+0x160>)
 8001f12:	f7ff fba3 	bl	800165c <LCD_send_string>

		default:
			break;
 8001f16:	bf00      	nop
	}
}
 8001f18:	bf00      	nop
 8001f1a:	3740      	adds	r7, #64	@ 0x40
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	08009e9c 	.word	0x08009e9c
 8001f24:	08009ea4 	.word	0x08009ea4
 8001f28:	08009eac 	.word	0x08009eac
 8001f2c:	20000250 	.word	0x20000250
 8001f30:	08009e7c 	.word	0x08009e7c
 8001f34:	08009e8c 	.word	0x08009e8c
 8001f38:	20000249 	.word	0x20000249
 8001f3c:	08009ec4 	.word	0x08009ec4

08001f40 <LCD_show_alarm_screen>:

void LCD_show_alarm_screen() {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	LCD_put_cursor(2, 2);
 8001f44:	2102      	movs	r1, #2
 8001f46:	2002      	movs	r0, #2
 8001f48:	f7ff fb56 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string("     ALARM    ");
 8001f4c:	4812      	ldr	r0, [pc, #72]	@ (8001f98 <LCD_show_alarm_screen+0x58>)
 8001f4e:	f7ff fb85 	bl	800165c <LCD_send_string>
	HAL_Delay(150);
 8001f52:	2096      	movs	r0, #150	@ 0x96
 8001f54:	f000 ffc2 	bl	8002edc <HAL_Delay>
	LCD_put_cursor(2, 2);
 8001f58:	2102      	movs	r1, #2
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f7ff fb4c 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string("   ! ALARM !  ");
 8001f60:	480e      	ldr	r0, [pc, #56]	@ (8001f9c <LCD_show_alarm_screen+0x5c>)
 8001f62:	f7ff fb7b 	bl	800165c <LCD_send_string>
	HAL_Delay(150);
 8001f66:	2096      	movs	r0, #150	@ 0x96
 8001f68:	f000 ffb8 	bl	8002edc <HAL_Delay>
	LCD_put_cursor(2, 2);
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7ff fb42 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string("  !! ALARM !! ");
 8001f74:	480a      	ldr	r0, [pc, #40]	@ (8001fa0 <LCD_show_alarm_screen+0x60>)
 8001f76:	f7ff fb71 	bl	800165c <LCD_send_string>
	HAL_Delay(150);
 8001f7a:	2096      	movs	r0, #150	@ 0x96
 8001f7c:	f000 ffae 	bl	8002edc <HAL_Delay>
	LCD_put_cursor(2, 2);
 8001f80:	2102      	movs	r1, #2
 8001f82:	2002      	movs	r0, #2
 8001f84:	f7ff fb38 	bl	80015f8 <LCD_put_cursor>
	LCD_send_string(" !!! ALARM !!!");
 8001f88:	4806      	ldr	r0, [pc, #24]	@ (8001fa4 <LCD_show_alarm_screen+0x64>)
 8001f8a:	f7ff fb67 	bl	800165c <LCD_send_string>
	HAL_Delay(150);
 8001f8e:	2096      	movs	r0, #150	@ 0x96
 8001f90:	f000 ffa4 	bl	8002edc <HAL_Delay>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	08009ec8 	.word	0x08009ec8
 8001f9c:	08009ed8 	.word	0x08009ed8
 8001fa0:	08009ee8 	.word	0x08009ee8
 8001fa4:	08009ef8 	.word	0x08009ef8

08001fa8 <LCD_update>:

void LCD_update(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	if(is_lcd_cls) {
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <LCD_update+0x68>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <LCD_update+0x16>
		is_lcd_cls = false;
 8001fb4:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <LCD_update+0x68>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
		LCD_clear();
 8001fba:	f7ff fb13 	bl	80015e4 <LCD_clear>
	}

	if(current_state == STATE_ALARM) {
 8001fbe:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <LCD_update+0x6c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d102      	bne.n	8001fcc <LCD_update+0x24>
		LCD_show_alarm_screen();
 8001fc6:	f7ff ffbb 	bl	8001f40 <LCD_show_alarm_screen>
			HAL_Delay(800);
			LCD_clear();
		}
		LCD_show_clock_screen();
	}
}
 8001fca:	e01e      	b.n	800200a <LCD_update+0x62>
	else if(current_state == STATE_EDIT_CLOCK) {
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <LCD_update+0x6c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d102      	bne.n	8001fda <LCD_update+0x32>
		LCD_show_edit_clock_screen();
 8001fd4:	f7ff ff02 	bl	8001ddc <LCD_show_edit_clock_screen>
}
 8001fd8:	e017      	b.n	800200a <LCD_update+0x62>
		if(alarm_config.dismissed) {
 8001fda:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <LCD_update+0x70>)
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d011      	beq.n	8002006 <LCD_update+0x5e>
			alarm_config.dismissed = false;
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <LCD_update+0x70>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	705a      	strb	r2, [r3, #1]
			LCD_clear();
 8001fe8:	f7ff fafc 	bl	80015e4 <LCD_clear>
			LCD_put_cursor(2, 2);
 8001fec:	2102      	movs	r1, #2
 8001fee:	2002      	movs	r0, #2
 8001ff0:	f7ff fb02 	bl	80015f8 <LCD_put_cursor>
			LCD_send_string("ALARM ODRZUCONY!");
 8001ff4:	4809      	ldr	r0, [pc, #36]	@ (800201c <LCD_update+0x74>)
 8001ff6:	f7ff fb31 	bl	800165c <LCD_send_string>
			HAL_Delay(800);
 8001ffa:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001ffe:	f000 ff6d 	bl	8002edc <HAL_Delay>
			LCD_clear();
 8002002:	f7ff faef 	bl	80015e4 <LCD_clear>
		LCD_show_clock_screen();
 8002006:	f7ff fe9f 	bl	8001d48 <LCD_show_clock_screen>
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000259 	.word	0x20000259
 8002014:	20000000 	.word	0x20000000
 8002018:	2000024c 	.word	0x2000024c
 800201c:	08009f08 	.word	0x08009f08

08002020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002024:	b672      	cpsid	i
}
 8002026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <Error_Handler+0x8>

0800202c <OLED_init>:
 */


#include "oled.h"

void OLED_init(void) {
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	SSD1306_init();
 8002030:	f7fe fc84 	bl	800093c <SSD1306_init>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}

08002038 <OLED_print>:


void OLED_print(char *str, uint16_t x, uint16_t y, uint8_t size) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af04      	add	r7, sp, #16
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	817b      	strh	r3, [r7, #10]
 800204a:	460b      	mov	r3, r1
 800204c:	813b      	strh	r3, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	71fb      	strb	r3, [r7, #7]
	GFX_draw_string(x, y, str, WHITE, BLACK, size, size);
 8002052:	8978      	ldrh	r0, [r7, #10]
 8002054:	8939      	ldrh	r1, [r7, #8]
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	79fa      	ldrb	r2, [r7, #7]
 800205a:	9202      	str	r2, [sp, #8]
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2300      	movs	r3, #0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2301      	movs	r3, #1
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	f7fe fbbb 	bl	80007e0 <GFX_draw_string>
	SSD1306_display_repaint();
 800206a:	f7fe ffdd 	bl	8001028 <SSD1306_display_repaint>
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b090      	sub	sp, #64	@ 0x40
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	__HAL_RCC_BACKUPRESET_FORCE();
 800207e:	4b34      	ldr	r3, [pc, #208]	@ (8002150 <MX_RTC_Init+0xd8>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]
	__HAL_RCC_BACKUPRESET_RELEASE();
 8002084:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <MX_RTC_Init+0xd8>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]


  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800208a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800209a:	2300      	movs	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800209e:	463b      	mov	r3, r7
 80020a0:	2228      	movs	r2, #40	@ 0x28
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f006 ff7e 	bl	8008fa6 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <MX_RTC_Init+0xdc>)
 80020ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002158 <MX_RTC_Init+0xe0>)
 80020ae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020b0:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <MX_RTC_Init+0xdc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020b6:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <MX_RTC_Init+0xdc>)
 80020b8:	227f      	movs	r2, #127	@ 0x7f
 80020ba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020bc:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <MX_RTC_Init+0xdc>)
 80020be:	22ff      	movs	r2, #255	@ 0xff
 80020c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020c2:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <MX_RTC_Init+0xdc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020c8:	4b22      	ldr	r3, [pc, #136]	@ (8002154 <MX_RTC_Init+0xdc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020ce:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <MX_RTC_Init+0xdc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020d4:	481f      	ldr	r0, [pc, #124]	@ (8002154 <MX_RTC_Init+0xdc>)
 80020d6:	f004 ff67 	bl	8006fa8 <HAL_RTC_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80020e0:	f7ff ff9e 	bl	8002020 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 80020e4:	2319      	movs	r3, #25
 80020e6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002102:	2201      	movs	r2, #1
 8002104:	4619      	mov	r1, r3
 8002106:	4813      	ldr	r0, [pc, #76]	@ (8002154 <MX_RTC_Init+0xdc>)
 8002108:	f004 ffcf 	bl	80070aa <HAL_RTC_SetTime>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8002112:	f7ff ff85 	bl	8002020 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8002116:	2305      	movs	r3, #5
 8002118:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JUNE;
 800211c:	2306      	movs	r3, #6
 800211e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x20;
 8002122:	2320      	movs	r3, #32
 8002124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x25;
 8002128:	2325      	movs	r3, #37	@ 0x25
 800212a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800212e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002132:	2201      	movs	r2, #1
 8002134:	4619      	mov	r1, r3
 8002136:	4807      	ldr	r0, [pc, #28]	@ (8002154 <MX_RTC_Init+0xdc>)
 8002138:	f005 f8af 	bl	800729a <HAL_RTC_SetDate>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8002142:	f7ff ff6d 	bl	8002020 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	3740      	adds	r7, #64	@ 0x40
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	42470e40 	.word	0x42470e40
 8002154:	20000260 	.word	0x20000260
 8002158:	40002800 	.word	0x40002800

0800215c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a10      	ldr	r2, [pc, #64]	@ (80021bc <HAL_RTC_MspInit+0x60>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d119      	bne.n	80021b4 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002180:	2302      	movs	r3, #2
 8002182:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002188:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fe1a 	bl	8006dc8 <HAL_RCCEx_PeriphCLKConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800219a:	f7ff ff41 	bl	8002020 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800219e:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <HAL_RTC_MspInit+0x64>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2029      	movs	r0, #41	@ 0x29
 80021aa:	f000 ff96 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80021ae:	2029      	movs	r0, #41	@ 0x29
 80021b0:	f000 ffaf 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40002800 	.word	0x40002800
 80021c0:	42470e3c 	.word	0x42470e3c

080021c4 <RTC_update_alarm>:
  }
}

/* USER CODE BEGIN 1 */

void RTC_update_alarm(AlarmConfig_TypeDef *config, ClockConfig_TypeDef *dateConfig) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	@ 0x30
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef sAlarm = {0};
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	2228      	movs	r2, #40	@ 0x28
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f006 fee5 	bl	8008fa6 <memset>

	sAlarm.AlarmTime.Hours = to_bcd(config->hours);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	789b      	ldrb	r3, [r3, #2]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fae1 	bl	80017a8 <to_bcd>
 80021e6:	4603      	mov	r3, r0
 80021e8:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = to_bcd(config->minutes);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	78db      	ldrb	r3, [r3, #3]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fada 	bl	80017a8 <to_bcd>
 80021f4:	4603      	mov	r3, r0
 80021f6:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = 0x00;
 80021f8:	2300      	movs	r3, #0
 80021fa:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0x00;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = to_bcd(dateConfig->date);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	78db      	ldrb	r3, [r3, #3]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fac5 	bl	80017a8 <to_bcd>
 800221e:	4603      	mov	r3, r0
 8002220:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8002224:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	2201      	movs	r2, #1
 8002230:	4619      	mov	r1, r3
 8002232:	4806      	ldr	r0, [pc, #24]	@ (800224c <RTC_update_alarm+0x88>)
 8002234:	f005 f904 	bl	8007440 <HAL_RTC_SetAlarm_IT>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <RTC_update_alarm+0x7e>
	{
		Error_Handler();
 800223e:	f7ff feef 	bl	8002020 <Error_Handler>
	}
}
 8002242:	bf00      	nop
 8002244:	3730      	adds	r7, #48	@ 0x30
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000260 	.word	0x20000260

08002250 <RTC_update_clock>:

void RTC_update_clock(ClockConfig_TypeDef *config) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]

	sTime.Hours = to_bcd(config->hours);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fa99 	bl	80017a8 <to_bcd>
 8002276:	4603      	mov	r3, r0
 8002278:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = to_bcd(config->minutes);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fa92 	bl	80017a8 <to_bcd>
 8002284:	4603      	mov	r3, r0
 8002286:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = to_bcd(config->seconds);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	789b      	ldrb	r3, [r3, #2]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fa8b 	bl	80017a8 <to_bcd>
 8002292:	4603      	mov	r3, r0
 8002294:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	2201      	movs	r2, #1
 80022a4:	4619      	mov	r1, r3
 80022a6:	4817      	ldr	r0, [pc, #92]	@ (8002304 <RTC_update_clock+0xb4>)
 80022a8:	f004 feff 	bl	80070aa <HAL_RTC_SetTime>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <RTC_update_clock+0x66>
	{
		Error_Handler();
 80022b2:	f7ff feb5 	bl	8002020 <Error_Handler>
	}
	sDate.Month = to_bcd(config->month);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	791b      	ldrb	r3, [r3, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fa74 	bl	80017a8 <to_bcd>
 80022c0:	4603      	mov	r3, r0
 80022c2:	727b      	strb	r3, [r7, #9]
	sDate.Date = to_bcd(config->date);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	78db      	ldrb	r3, [r3, #3]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fa6d 	bl	80017a8 <to_bcd>
 80022ce:	4603      	mov	r3, r0
 80022d0:	72bb      	strb	r3, [r7, #10]
	sDate.Year = to_bcd(config->year);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	88db      	ldrh	r3, [r3, #6]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fa65 	bl	80017a8 <to_bcd>
 80022de:	4603      	mov	r3, r0
 80022e0:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	2201      	movs	r2, #1
 80022e8:	4619      	mov	r1, r3
 80022ea:	4806      	ldr	r0, [pc, #24]	@ (8002304 <RTC_update_clock+0xb4>)
 80022ec:	f004 ffd5 	bl	800729a <HAL_RTC_SetDate>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <RTC_update_clock+0xaa>
	{
		Error_Handler();
 80022f6:	f7ff fe93 	bl	8002020 <Error_Handler>
	}
}
 80022fa:	bf00      	nop
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000260 	.word	0x20000260

08002308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <HAL_MspInit+0x4c>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4a0f      	ldr	r2, [pc, #60]	@ (8002354 <HAL_MspInit+0x4c>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800231c:	6453      	str	r3, [r2, #68]	@ 0x44
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <HAL_MspInit+0x4c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_MspInit+0x4c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	4a08      	ldr	r2, [pc, #32]	@ (8002354 <HAL_MspInit+0x4c>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	@ 0x40
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_MspInit+0x4c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <NMI_Handler+0x4>

08002360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <MemManage_Handler+0x4>

08002370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <UsageFault_Handler+0x4>

08002380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ae:	f000 fd75 	bl	8002e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f001 fc0e 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_ALARM_BTN_Pin);
 80023c8:	2002      	movs	r0, #2
 80023ca:	f001 fc07 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_CLOCK_BTN_Pin);
 80023d6:	2004      	movs	r0, #4
 80023d8:	f001 fc00 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80023e4:	4802      	ldr	r0, [pc, #8]	@ (80023f0 <DMA1_Stream1_IRQHandler+0x10>)
 80023e6:	f000 ffd7 	bl	8003398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000140 	.word	0x20000140

080023f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80023f8:	4802      	ldr	r0, [pc, #8]	@ (8002404 <DMA1_Stream4_IRQHandler+0x10>)
 80023fa:	f000 ffcd 	bl	8003398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200001a0 	.word	0x200001a0

08002408 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800240c:	4802      	ldr	r0, [pc, #8]	@ (8002418 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800240e:	f005 feeb 	bl	80081e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000290 	.word	0x20000290

0800241c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002420:	4802      	ldr	r0, [pc, #8]	@ (800242c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002422:	f005 fee1 	bl	80081e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000290 	.word	0x20000290

08002430 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <TIM3_IRQHandler+0x10>)
 8002436:	f005 fed7 	bl	80081e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000320 	.word	0x20000320

08002444 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002448:	4802      	ldr	r0, [pc, #8]	@ (8002454 <TIM4_IRQHandler+0x10>)
 800244a:	f005 fecd 	bl	80081e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000368 	.word	0x20000368

08002458 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <I2C1_EV_IRQHandler+0x10>)
 800245e:	f002 f885 	bl	800456c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000098 	.word	0x20000098

0800246c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <RTC_Alarm_IRQHandler+0x10>)
 8002472:	f005 f929 	bl	80076c8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000260 	.word	0x20000260

08002480 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <I2C3_EV_IRQHandler+0x10>)
 8002486:	f002 f871 	bl	800456c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200000ec 	.word	0x200000ec

08002494 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1e      	ldr	r2, [pc, #120]	@ (800251c <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d120      	bne.n	80024e8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7f1b      	ldrb	r3, [r3, #28]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d11c      	bne.n	80024e8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>

    	if(buzzer_cnt < 5) {
 80024ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d805      	bhi.n	80024c4 <HAL_TIM_PWM_PulseFinishedCallback+0x30>
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 80024b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80024c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80024c2:	e003      	b.n	80024cc <HAL_TIM_PWM_PulseFinishedCallback+0x38>

    	} else {
    		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80024c4:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	635a      	str	r2, [r3, #52]	@ 0x34
    	}

    	buzzer_cnt = buzzer_cnt <= 6 ? buzzer_cnt + 1 : 0;
 80024cc:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d805      	bhi.n	80024e2 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 80024d6:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e000      	b.n	80024e4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
 80024e2:	2300      	movs	r3, #0
 80024e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002520 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 80024e6:	7013      	strb	r3, [r2, #0]
    }

    if(htim->Instance == TIM4) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002528 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d10e      	bne.n	8002510 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>
    	is_update_lcd = !is_update_lcd;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f083 0301 	eor.w	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b07      	ldr	r3, [pc, #28]	@ (800252c <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 800250e:	701a      	strb	r2, [r3, #0]
    }
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40000400 	.word	0x40000400
 8002520:	20000280 	.word	0x20000280
 8002524:	20000320 	.word	0x20000320
 8002528:	40000800 	.word	0x40000800
 800252c:	20000258 	.word	0x20000258

08002530 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	80fb      	strh	r3, [r7, #6]
    if (pin == ENC_ALARM_BTN_Pin)
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d134      	bne.n	80025aa <HAL_GPIO_EXTI_Callback+0x7a>
    {
    	if(current_state != STATE_EDIT_ALARM) {
 8002540:	4b56      	ldr	r3, [pc, #344]	@ (800269c <HAL_GPIO_EXTI_Callback+0x16c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d005      	beq.n	8002554 <HAL_GPIO_EXTI_Callback+0x24>
    		is_oled_cls = true;
 8002548:	4b55      	ldr	r3, [pc, #340]	@ (80026a0 <HAL_GPIO_EXTI_Callback+0x170>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
        	current_state = STATE_EDIT_ALARM;
 800254e:	4b53      	ldr	r3, [pc, #332]	@ (800269c <HAL_GPIO_EXTI_Callback+0x16c>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
    	}

    	if(HAL_GetTick() - enc_alarm_selection_mode_tick > 70) {
 8002554:	f000 fcb6 	bl	8002ec4 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	4b52      	ldr	r3, [pc, #328]	@ (80026a4 <HAL_GPIO_EXTI_Callback+0x174>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b46      	cmp	r3, #70	@ 0x46
 8002562:	f240 8097 	bls.w	8002694 <HAL_GPIO_EXTI_Callback+0x164>
    		enc_alarm_selection_mode_tick = HAL_GetTick();
 8002566:	f000 fcad 	bl	8002ec4 <HAL_GetTick>
 800256a:	4603      	mov	r3, r0
 800256c:	4a4d      	ldr	r2, [pc, #308]	@ (80026a4 <HAL_GPIO_EXTI_Callback+0x174>)
 800256e:	6013      	str	r3, [r2, #0]

    		alarm_index = alarm_index < 1 ? alarm_index + 1 : 0;
 8002570:	4b4d      	ldr	r3, [pc, #308]	@ (80026a8 <HAL_GPIO_EXTI_Callback+0x178>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <HAL_GPIO_EXTI_Callback+0x56>
 800257a:	4b4b      	ldr	r3, [pc, #300]	@ (80026a8 <HAL_GPIO_EXTI_Callback+0x178>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	b2db      	uxtb	r3, r3
 8002584:	e000      	b.n	8002588 <HAL_GPIO_EXTI_Callback+0x58>
 8002586:	2300      	movs	r3, #0
 8002588:	4a47      	ldr	r2, [pc, #284]	@ (80026a8 <HAL_GPIO_EXTI_Callback+0x178>)
 800258a:	7013      	strb	r3, [r2, #0]
    		alarm_selection_mode = selection_modes[alarm_index];
 800258c:	4b46      	ldr	r3, [pc, #280]	@ (80026a8 <HAL_GPIO_EXTI_Callback+0x178>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	4b45      	ldr	r3, [pc, #276]	@ (80026ac <HAL_GPIO_EXTI_Callback+0x17c>)
 8002596:	5c9a      	ldrb	r2, [r3, r2]
 8002598:	4b45      	ldr	r3, [pc, #276]	@ (80026b0 <HAL_GPIO_EXTI_Callback+0x180>)
 800259a:	701a      	strb	r2, [r3, #0]

			printf("Mode: %d \n", alarm_selection_mode);
 800259c:	4b44      	ldr	r3, [pc, #272]	@ (80026b0 <HAL_GPIO_EXTI_Callback+0x180>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	4844      	ldr	r0, [pc, #272]	@ (80026b4 <HAL_GPIO_EXTI_Callback+0x184>)
 80025a4:	f006 fc88 	bl	8008eb8 <iprintf>
				BUZZER_set_enable(false);
				current_state = STATE_DUMMY;
				break;
    	}
    }
}
 80025a8:	e074      	b.n	8002694 <HAL_GPIO_EXTI_Callback+0x164>
    else if (pin == ENC_CLOCK_BTN_Pin)
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d12d      	bne.n	800260c <HAL_GPIO_EXTI_Callback+0xdc>
    	if(current_state != STATE_EDIT_CLOCK) {
 80025b0:	4b3a      	ldr	r3, [pc, #232]	@ (800269c <HAL_GPIO_EXTI_Callback+0x16c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d005      	beq.n	80025c4 <HAL_GPIO_EXTI_Callback+0x94>
    		current_state = STATE_EDIT_CLOCK;
 80025b8:	4b38      	ldr	r3, [pc, #224]	@ (800269c <HAL_GPIO_EXTI_Callback+0x16c>)
 80025ba:	2202      	movs	r2, #2
 80025bc:	701a      	strb	r2, [r3, #0]
			is_lcd_cls = true;
 80025be:	4b3e      	ldr	r3, [pc, #248]	@ (80026b8 <HAL_GPIO_EXTI_Callback+0x188>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
    	if(HAL_GetTick() - enc_clock_selection_mode_tick > 70) {
 80025c4:	f000 fc7e 	bl	8002ec4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b3c      	ldr	r3, [pc, #240]	@ (80026bc <HAL_GPIO_EXTI_Callback+0x18c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b46      	cmp	r3, #70	@ 0x46
 80025d2:	d95f      	bls.n	8002694 <HAL_GPIO_EXTI_Callback+0x164>
    		enc_clock_selection_mode_tick = HAL_GetTick();
 80025d4:	f000 fc76 	bl	8002ec4 <HAL_GetTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	4a38      	ldr	r2, [pc, #224]	@ (80026bc <HAL_GPIO_EXTI_Callback+0x18c>)
 80025dc:	6013      	str	r3, [r2, #0]
    		clock_index = clock_index < 5 ? clock_index + 1 : 0;
 80025de:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <HAL_GPIO_EXTI_Callback+0x190>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d805      	bhi.n	80025f4 <HAL_GPIO_EXTI_Callback+0xc4>
 80025e8:	4b35      	ldr	r3, [pc, #212]	@ (80026c0 <HAL_GPIO_EXTI_Callback+0x190>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e000      	b.n	80025f6 <HAL_GPIO_EXTI_Callback+0xc6>
 80025f4:	2300      	movs	r3, #0
 80025f6:	4a32      	ldr	r2, [pc, #200]	@ (80026c0 <HAL_GPIO_EXTI_Callback+0x190>)
 80025f8:	7013      	strb	r3, [r2, #0]
    		clock_selection_mode = selection_modes[clock_index];
 80025fa:	4b31      	ldr	r3, [pc, #196]	@ (80026c0 <HAL_GPIO_EXTI_Callback+0x190>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <HAL_GPIO_EXTI_Callback+0x17c>)
 8002604:	5c9a      	ldrb	r2, [r3, r2]
 8002606:	4b2f      	ldr	r3, [pc, #188]	@ (80026c4 <HAL_GPIO_EXTI_Callback+0x194>)
 8002608:	701a      	strb	r2, [r3, #0]
}
 800260a:	e043      	b.n	8002694 <HAL_GPIO_EXTI_Callback+0x164>
    else if(pin == USER_BTN_Pin) {
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d140      	bne.n	8002694 <HAL_GPIO_EXTI_Callback+0x164>
    	switch(current_state) {
 8002612:	4b22      	ldr	r3, [pc, #136]	@ (800269c <HAL_GPIO_EXTI_Callback+0x16c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d83c      	bhi.n	8002694 <HAL_GPIO_EXTI_Callback+0x164>
 800261a:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <HAL_GPIO_EXTI_Callback+0xf0>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002631 	.word	0x08002631
 8002624:	08002645 	.word	0x08002645
 8002628:	0800265b 	.word	0x0800265b
 800262c:	0800266f 	.word	0x0800266f
				is_lcd_cls = true;
 8002630:	4b21      	ldr	r3, [pc, #132]	@ (80026b8 <HAL_GPIO_EXTI_Callback+0x188>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
				alarm_config.dismissed = false;
 8002636:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <HAL_GPIO_EXTI_Callback+0x198>)
 8002638:	2200      	movs	r2, #0
 800263a:	705a      	strb	r2, [r3, #1]
				alarm_config.enabled = false;
 800263c:	4b22      	ldr	r3, [pc, #136]	@ (80026c8 <HAL_GPIO_EXTI_Callback+0x198>)
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
				break;
 8002642:	e027      	b.n	8002694 <HAL_GPIO_EXTI_Callback+0x164>
				is_oled_cls = true;
 8002644:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <HAL_GPIO_EXTI_Callback+0x170>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
				RTC_update_alarm(&alarm_config, &clock_config);
 800264a:	4920      	ldr	r1, [pc, #128]	@ (80026cc <HAL_GPIO_EXTI_Callback+0x19c>)
 800264c:	481e      	ldr	r0, [pc, #120]	@ (80026c8 <HAL_GPIO_EXTI_Callback+0x198>)
 800264e:	f7ff fdb9 	bl	80021c4 <RTC_update_alarm>
				current_state = STATE_DUMMY;
 8002652:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_GPIO_EXTI_Callback+0x16c>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
				break;
 8002658:	e01c      	b.n	8002694 <HAL_GPIO_EXTI_Callback+0x164>
				is_lcd_cls = true;
 800265a:	4b17      	ldr	r3, [pc, #92]	@ (80026b8 <HAL_GPIO_EXTI_Callback+0x188>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
				RTC_update_clock(&clock_config);
 8002660:	481a      	ldr	r0, [pc, #104]	@ (80026cc <HAL_GPIO_EXTI_Callback+0x19c>)
 8002662:	f7ff fdf5 	bl	8002250 <RTC_update_clock>
				current_state = STATE_DUMMY;
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HAL_GPIO_EXTI_Callback+0x16c>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
				break;
 800266c:	e012      	b.n	8002694 <HAL_GPIO_EXTI_Callback+0x164>
				is_lcd_cls = true;
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_GPIO_EXTI_Callback+0x188>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
				is_oled_cls = true;
 8002674:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_GPIO_EXTI_Callback+0x170>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
				alarm_config.dismissed = true;
 800267a:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <HAL_GPIO_EXTI_Callback+0x198>)
 800267c:	2201      	movs	r2, #1
 800267e:	705a      	strb	r2, [r3, #1]
				alarm_config.enabled = false;
 8002680:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_GPIO_EXTI_Callback+0x198>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
				BUZZER_set_enable(false);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 fb74 	bl	8002d74 <BUZZER_set_enable>
				current_state = STATE_DUMMY;
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_GPIO_EXTI_Callback+0x16c>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
				break;
 8002692:	bf00      	nop
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000000 	.word	0x20000000
 80026a0:	2000025a 	.word	0x2000025a
 80026a4:	20000284 	.word	0x20000284
 80026a8:	20000281 	.word	0x20000281
 80026ac:	20000004 	.word	0x20000004
 80026b0:	20000248 	.word	0x20000248
 80026b4:	08009f1c 	.word	0x08009f1c
 80026b8:	20000259 	.word	0x20000259
 80026bc:	20000288 	.word	0x20000288
 80026c0:	20000282 	.word	0x20000282
 80026c4:	20000249 	.word	0x20000249
 80026c8:	2000024c 	.word	0x2000024c
 80026cc:	20000250 	.word	0x20000250

080026d0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc_)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	is_lcd_cls = true;
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <HAL_RTC_AlarmAEventCallback+0x30>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
	is_oled_cls = true;
 80026de:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <HAL_RTC_AlarmAEventCallback+0x34>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
	current_state = STATE_ALARM;
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_RTC_AlarmAEventCallback+0x38>)
 80026e6:	2203      	movs	r2, #3
 80026e8:	701a      	strb	r2, [r3, #0]
	alarm_config.enabled = true;
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_RTC_AlarmAEventCallback+0x3c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
	BUZZER_set_enable(true);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f000 fb3f 	bl	8002d74 <BUZZER_set_enable>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000259 	.word	0x20000259
 8002704:	2000025a 	.word	0x2000025a
 8002708:	20000000 	.word	0x20000000
 800270c:	2000024c 	.word	0x2000024c

08002710 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e00a      	b.n	8002738 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002722:	f3af 8000 	nop.w
 8002726:	4601      	mov	r1, r0
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	60ba      	str	r2, [r7, #8]
 800272e:	b2ca      	uxtb	r2, r1
 8002730:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3301      	adds	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	dbf0      	blt.n	8002722 <_read+0x12>
  }

  return len;
 8002740:	687b      	ldr	r3, [r7, #4]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e009      	b.n	8002770 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	60ba      	str	r2, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff f812 	bl	800178e <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	dbf1      	blt.n	800275c <_write+0x12>
  }
  return len;
 8002778:	687b      	ldr	r3, [r7, #4]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <_close>:

int _close(int file)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027aa:	605a      	str	r2, [r3, #4]
  return 0;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <_isatty>:

int _isatty(int file)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f4:	4a14      	ldr	r2, [pc, #80]	@ (8002848 <_sbrk+0x5c>)
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <_sbrk+0x60>)
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <_sbrk+0x64>)
 800280a:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <_sbrk+0x68>)
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	429a      	cmp	r2, r3
 800281a:	d207      	bcs.n	800282c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800281c:	f006 fc22 	bl	8009064 <__errno>
 8002820:	4603      	mov	r3, r0
 8002822:	220c      	movs	r2, #12
 8002824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
 800282a:	e009      	b.n	8002840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800282c:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002832:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <_sbrk+0x64>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	4a05      	ldr	r2, [pc, #20]	@ (8002850 <_sbrk+0x64>)
 800283c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20020000 	.word	0x20020000
 800284c:	00000400 	.word	0x00000400
 8002850:	2000028c 	.word	0x2000028c
 8002854:	20000500 	.word	0x20000500

08002858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <SystemInit+0x20>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <SystemInit+0x20>)
 8002864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	@ 0x30
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	2224      	movs	r2, #36	@ 0x24
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f006 fb8b 	bl	8008fa6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002898:	4b24      	ldr	r3, [pc, #144]	@ (800292c <MX_TIM1_Init+0xb0>)
 800289a:	4a25      	ldr	r2, [pc, #148]	@ (8002930 <MX_TIM1_Init+0xb4>)
 800289c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800289e:	4b23      	ldr	r3, [pc, #140]	@ (800292c <MX_TIM1_Init+0xb0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a4:	4b21      	ldr	r3, [pc, #132]	@ (800292c <MX_TIM1_Init+0xb0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028aa:	4b20      	ldr	r3, [pc, #128]	@ (800292c <MX_TIM1_Init+0xb0>)
 80028ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	@ (800292c <MX_TIM1_Init+0xb0>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	@ (800292c <MX_TIM1_Init+0xb0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028be:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <MX_TIM1_Init+0xb0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028cc:	2301      	movs	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028dc:	2301      	movs	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4619      	mov	r1, r3
 80028ee:	480f      	ldr	r0, [pc, #60]	@ (800292c <MX_TIM1_Init+0xb0>)
 80028f0:	f005 fb46 	bl	8007f80 <HAL_TIM_Encoder_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80028fa:	f7ff fb91 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4808      	ldr	r0, [pc, #32]	@ (800292c <MX_TIM1_Init+0xb0>)
 800290c:	f006 f8da 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002916:	f7ff fb83 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800291a:	213c      	movs	r1, #60	@ 0x3c
 800291c:	4803      	ldr	r0, [pc, #12]	@ (800292c <MX_TIM1_Init+0xb0>)
 800291e:	f005 fbd5 	bl	80080cc <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	3730      	adds	r7, #48	@ 0x30
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000290 	.word	0x20000290
 8002930:	40010000 	.word	0x40010000

08002934 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08c      	sub	sp, #48	@ 0x30
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800293a:	f107 030c 	add.w	r3, r7, #12
 800293e:	2224      	movs	r2, #36	@ 0x24
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f006 fb2f 	bl	8008fa6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002950:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <MX_TIM2_Init+0xac>)
 8002952:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002956:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002958:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <MX_TIM2_Init+0xac>)
 800295a:	2200      	movs	r2, #0
 800295c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295e:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <MX_TIM2_Init+0xac>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002964:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <MX_TIM2_Init+0xac>)
 8002966:	f04f 32ff 	mov.w	r2, #4294967295
 800296a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296c:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <MX_TIM2_Init+0xac>)
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002972:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <MX_TIM2_Init+0xac>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002978:	2301      	movs	r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002980:	2301      	movs	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002990:	2301      	movs	r3, #1
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	4619      	mov	r1, r3
 80029a2:	480f      	ldr	r0, [pc, #60]	@ (80029e0 <MX_TIM2_Init+0xac>)
 80029a4:	f005 faec 	bl	8007f80 <HAL_TIM_Encoder_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80029ae:	f7ff fb37 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4808      	ldr	r0, [pc, #32]	@ (80029e0 <MX_TIM2_Init+0xac>)
 80029c0:	f006 f880 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80029ca:	f7ff fb29 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80029ce:	213c      	movs	r1, #60	@ 0x3c
 80029d0:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <MX_TIM2_Init+0xac>)
 80029d2:	f005 fb7b 	bl	80080cc <HAL_TIM_Encoder_Start>

  /* USER CODE END TIM2_Init 2 */

}
 80029d6:	bf00      	nop
 80029d8:	3730      	adds	r7, #48	@ 0x30
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200002d8 	.word	0x200002d8

080029e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	@ 0x28
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ea:	f107 0320 	add.w	r3, r7, #32
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	615a      	str	r2, [r3, #20]
 8002a04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a06:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a08:	4a22      	ldr	r2, [pc, #136]	@ (8002a94 <MX_TIM3_Init+0xb0>)
 8002a0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8002a0c:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a0e:	2220      	movs	r2, #32
 8002a10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a1a:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8002a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a2c:	4818      	ldr	r0, [pc, #96]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a2e:	f005 f8a7 	bl	8007b80 <HAL_TIM_PWM_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002a38:	f7ff faf2 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a44:	f107 0320 	add.w	r3, r7, #32
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4811      	ldr	r0, [pc, #68]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a4c:	f006 f83a 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002a56:	f7ff fae3 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a5a:	2360      	movs	r3, #96	@ 0x60
 8002a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002a5e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4619      	mov	r1, r3
 8002a72:	4807      	ldr	r0, [pc, #28]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a74:	f005 fd04 	bl	8008480 <HAL_TIM_PWM_ConfigChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002a7e:	f7ff facf 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a82:	4803      	ldr	r0, [pc, #12]	@ (8002a90 <MX_TIM3_Init+0xac>)
 8002a84:	f000 f93c 	bl	8002d00 <HAL_TIM_MspPostInit>

}
 8002a88:	bf00      	nop
 8002a8a:	3728      	adds	r7, #40	@ 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000320 	.word	0x20000320
 8002a94:	40000400 	.word	0x40000400

08002a98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	@ 0x28
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9e:	f107 0320 	add.w	r3, r7, #32
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	611a      	str	r2, [r3, #16]
 8002ab6:	615a      	str	r2, [r3, #20]
 8002ab8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002aba:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <MX_TIM4_Init+0xa8>)
 8002abc:	4a21      	ldr	r2, [pc, #132]	@ (8002b44 <MX_TIM4_Init+0xac>)
 8002abe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b40 <MX_TIM4_Init+0xa8>)
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b40 <MX_TIM4_Init+0xa8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8002acc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b40 <MX_TIM4_Init+0xa8>)
 8002ace:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002ad2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b40 <MX_TIM4_Init+0xa8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ada:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <MX_TIM4_Init+0xa8>)
 8002adc:	2280      	movs	r2, #128	@ 0x80
 8002ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002ae0:	4817      	ldr	r0, [pc, #92]	@ (8002b40 <MX_TIM4_Init+0xa8>)
 8002ae2:	f004 feff 	bl	80078e4 <HAL_TIM_OC_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002aec:	f7ff fa98 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002af8:	f107 0320 	add.w	r3, r7, #32
 8002afc:	4619      	mov	r1, r3
 8002afe:	4810      	ldr	r0, [pc, #64]	@ (8002b40 <MX_TIM4_Init+0xa8>)
 8002b00:	f005 ffe0 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002b0a:	f7ff fa89 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8002b12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002b16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	2200      	movs	r2, #0
 8002b24:	4619      	mov	r1, r3
 8002b26:	4806      	ldr	r0, [pc, #24]	@ (8002b40 <MX_TIM4_Init+0xa8>)
 8002b28:	f005 fc4e 	bl	80083c8 <HAL_TIM_OC_ConfigChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002b32:	f7ff fa75 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	3728      	adds	r7, #40	@ 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000368 	.word	0x20000368
 8002b44:	40000800 	.word	0x40000800

08002b48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08c      	sub	sp, #48	@ 0x30
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a3a      	ldr	r2, [pc, #232]	@ (8002c50 <HAL_TIM_Encoder_MspInit+0x108>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d13d      	bne.n	8002be6 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	4b39      	ldr	r3, [pc, #228]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	4a38      	ldr	r2, [pc, #224]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b7a:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	4b32      	ldr	r3, [pc, #200]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a31      	ldr	r2, [pc, #196]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b90:	f043 0310 	orr.w	r3, r3, #16
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b2f      	ldr	r3, [pc, #188]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_ALARM_CLK_Pin|ENC_ALARM_DATAE11_Pin;
 8002ba2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb8:	f107 031c 	add.w	r3, r7, #28
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4826      	ldr	r0, [pc, #152]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0x110>)
 8002bc0:	f000 fe6e 	bl	80038a0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2018      	movs	r0, #24
 8002bca:	f000 fa86 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002bce:	2018      	movs	r0, #24
 8002bd0:	f000 fa9f 	bl	8003112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	2019      	movs	r0, #25
 8002bda:	f000 fa7e 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002bde:	2019      	movs	r0, #25
 8002be0:	f000 fa97 	bl	8003112 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002be4:	e030      	b.n	8002c48 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bee:	d12b      	bne.n	8002c48 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	4b17      	ldr	r3, [pc, #92]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	4a16      	ldr	r2, [pc, #88]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c00:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	4a0f      	ldr	r2, [pc, #60]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_CLOCK_CLK_Pin|ENC_ALARM_DATA_Pin;
 8002c28:	2322      	movs	r3, #34	@ 0x22
 8002c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	4619      	mov	r1, r3
 8002c42:	4806      	ldr	r0, [pc, #24]	@ (8002c5c <HAL_TIM_Encoder_MspInit+0x114>)
 8002c44:	f000 fe2c 	bl	80038a0 <HAL_GPIO_Init>
}
 8002c48:	bf00      	nop
 8002c4a:	3730      	adds	r7, #48	@ 0x30
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40020000 	.word	0x40020000

08002c60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x48>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d115      	bne.n	8002c9e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <HAL_TIM_PWM_MspInit+0x4c>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002cac <HAL_TIM_PWM_MspInit+0x4c>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_TIM_PWM_MspInit+0x4c>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	201d      	movs	r0, #29
 8002c94:	f000 fa21 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c98:	201d      	movs	r0, #29
 8002c9a:	f000 fa3a 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf8 <HAL_TIM_OC_MspInit+0x48>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d115      	bne.n	8002cee <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <HAL_TIM_OC_MspInit+0x4c>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	4a0c      	ldr	r2, [pc, #48]	@ (8002cfc <HAL_TIM_OC_MspInit+0x4c>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <HAL_TIM_OC_MspInit+0x4c>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	201e      	movs	r0, #30
 8002ce4:	f000 f9f9 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ce8:	201e      	movs	r0, #30
 8002cea:	f000 fa12 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40023800 	.word	0x40023800

08002d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a12      	ldr	r2, [pc, #72]	@ (8002d68 <HAL_TIM_MspPostInit+0x68>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d11d      	bne.n	8002d5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <HAL_TIM_MspPostInit+0x6c>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	4a10      	ldr	r2, [pc, #64]	@ (8002d6c <HAL_TIM_MspPostInit+0x6c>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d32:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <HAL_TIM_MspPostInit+0x6c>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_TIM3_PWM_Pin;
 8002d3e:	2340      	movs	r3, #64	@ 0x40
 8002d40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d42:	2302      	movs	r3, #2
 8002d44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_TIM3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	@ (8002d70 <HAL_TIM_MspPostInit+0x70>)
 8002d5a:	f000 fda1 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d5e:	bf00      	nop
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020000 	.word	0x40020000

08002d74 <BUZZER_set_enable>:
  /* USER CODE END TIM4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void BUZZER_set_enable(bool enable) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
	if(enable) {
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <BUZZER_set_enable+0x1a>
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002d84:	2100      	movs	r1, #0
 8002d86:	4806      	ldr	r0, [pc, #24]	@ (8002da0 <BUZZER_set_enable+0x2c>)
 8002d88:	f004 ff4a 	bl	8007c20 <HAL_TIM_PWM_Start_IT>
	} else {
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
	}
}
 8002d8c:	e003      	b.n	8002d96 <BUZZER_set_enable+0x22>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4803      	ldr	r0, [pc, #12]	@ (8002da0 <BUZZER_set_enable+0x2c>)
 8002d92:	f005 f843 	bl	8007e1c <HAL_TIM_PWM_Stop_IT>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000320 	.word	0x20000320

08002da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ddc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002da8:	f7ff fd56 	bl	8002858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dac:	480c      	ldr	r0, [pc, #48]	@ (8002de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dae:	490d      	ldr	r1, [pc, #52]	@ (8002de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002db0:	4a0d      	ldr	r2, [pc, #52]	@ (8002de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db4:	e002      	b.n	8002dbc <LoopCopyDataInit>

08002db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dba:	3304      	adds	r3, #4

08002dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc0:	d3f9      	bcc.n	8002db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8002df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc8:	e001      	b.n	8002dce <LoopFillZerobss>

08002dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dcc:	3204      	adds	r2, #4

08002dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd0:	d3fb      	bcc.n	8002dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dd2:	f006 f94d 	bl	8009070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dd6:	f7fe fd0d 	bl	80017f4 <main>
  bx  lr    
 8002dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002de8:	0800a49c 	.word	0x0800a49c
  ldr r2, =_sbss
 8002dec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002df0:	20000500 	.word	0x20000500

08002df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df4:	e7fe      	b.n	8002df4 <ADC_IRQHandler>
	...

08002df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <HAL_Init+0x40>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0d      	ldr	r2, [pc, #52]	@ (8002e38 <HAL_Init+0x40>)
 8002e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_Init+0x40>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <HAL_Init+0x40>)
 8002e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_Init+0x40>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <HAL_Init+0x40>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f000 f94f 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e26:	200f      	movs	r0, #15
 8002e28:	f000 f808 	bl	8002e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e2c:	f7ff fa6c 	bl	8002308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023c00 	.word	0x40023c00

08002e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e44:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_InitTick+0x54>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_InitTick+0x58>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f967 	bl	800312e <HAL_SYSTICK_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00e      	b.n	8002e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d80a      	bhi.n	8002e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e70:	2200      	movs	r2, #0
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	f000 f92f 	bl	80030da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e7c:	4a06      	ldr	r2, [pc, #24]	@ (8002e98 <HAL_InitTick+0x5c>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	20000014 	.word	0x20000014
 8002e98:	20000010 	.word	0x20000010

08002e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_IncTick+0x20>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_IncTick+0x24>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <HAL_IncTick+0x24>)
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000014 	.word	0x20000014
 8002ec0:	200003b0 	.word	0x200003b0

08002ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	@ (8002ed8 <HAL_GetTick+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	200003b0 	.word	0x200003b0

08002edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee4:	f7ff ffee 	bl	8002ec4 <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d005      	beq.n	8002f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <HAL_Delay+0x44>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f02:	bf00      	nop
 8002f04:	f7ff ffde 	bl	8002ec4 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d8f7      	bhi.n	8002f04 <HAL_Delay+0x28>
  {
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000014 	.word	0x20000014

08002f24 <__NVIC_SetPriorityGrouping>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f34:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_GetPriorityGrouping>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <__NVIC_GetPriorityGrouping+0x18>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 0307 	and.w	r3, r3, #7
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_EnableIRQ>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	db0b      	blt.n	8002fb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4907      	ldr	r1, [pc, #28]	@ (8002fc0 <__NVIC_EnableIRQ+0x38>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2001      	movs	r0, #1
 8002faa:	fa00 f202 	lsl.w	r2, r0, r2
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	@ (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	@ (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	@ 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	@ 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <SysTick_Config>:
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003090:	d301      	bcc.n	8003096 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003092:	2301      	movs	r3, #1
 8003094:	e00f      	b.n	80030b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003096:	4a0a      	ldr	r2, [pc, #40]	@ (80030c0 <SysTick_Config+0x40>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309e:	210f      	movs	r1, #15
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	f7ff ff8e 	bl	8002fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a8:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <SysTick_Config+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ae:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <SysTick_Config+0x40>)
 80030b0:	2207      	movs	r2, #7
 80030b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	e000e010 	.word	0xe000e010

080030c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff29 	bl	8002f24 <__NVIC_SetPriorityGrouping>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ec:	f7ff ff3e 	bl	8002f6c <__NVIC_GetPriorityGrouping>
 80030f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	f7ff ff8e 	bl	8003018 <NVIC_EncodePriority>
 80030fc:	4602      	mov	r2, r0
 80030fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff5d 	bl	8002fc4 <__NVIC_SetPriority>
}
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff31 	bl	8002f88 <__NVIC_EnableIRQ>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ffa2 	bl	8003080 <SysTick_Config>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7ff feb6 	bl	8002ec4 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e099      	b.n	8003298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003184:	e00f      	b.n	80031a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003186:	f7ff fe9d 	bl	8002ec4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b05      	cmp	r3, #5
 8003192:	d908      	bls.n	80031a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2203      	movs	r2, #3
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e078      	b.n	8003298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e8      	bne.n	8003186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4b38      	ldr	r3, [pc, #224]	@ (80032a0 <HAL_DMA_Init+0x158>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d107      	bne.n	8003210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	4313      	orrs	r3, r2
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	2b04      	cmp	r3, #4
 8003238:	d117      	bne.n	800326a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00e      	beq.n	800326a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 faab 	bl	80037a8 <DMA_CheckFifoParam>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2240      	movs	r2, #64	@ 0x40
 800325c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003266:	2301      	movs	r3, #1
 8003268:	e016      	b.n	8003298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa62 	bl	800373c <DMA_CalcBaseAndBitshift>
 8003278:	4603      	mov	r3, r0
 800327a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	223f      	movs	r2, #63	@ 0x3f
 8003282:	409a      	lsls	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	f010803f 	.word	0xf010803f

080032a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_DMA_Start_IT+0x26>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e040      	b.n	800334c <HAL_DMA_Start_IT+0xa8>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d12f      	bne.n	800333e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f9f4 	bl	80036e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	223f      	movs	r2, #63	@ 0x3f
 80032fe:	409a      	lsls	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0216 	orr.w	r2, r2, #22
 8003312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0208 	orr.w	r2, r2, #8
 800332a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e005      	b.n	800334a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003346:	2302      	movs	r3, #2
 8003348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800334a:	7dfb      	ldrb	r3, [r7, #23]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d004      	beq.n	8003372 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2280      	movs	r2, #128	@ 0x80
 800336c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e00c      	b.n	800338c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2205      	movs	r2, #5
 8003376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033a4:	4b8e      	ldr	r3, [pc, #568]	@ (80035e0 <HAL_DMA_IRQHandler+0x248>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a8e      	ldr	r2, [pc, #568]	@ (80035e4 <HAL_DMA_IRQHandler+0x24c>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0a9b      	lsrs	r3, r3, #10
 80033b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	2208      	movs	r2, #8
 80033c4:	409a      	lsls	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01a      	beq.n	8003404 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0204 	bic.w	r2, r2, #4
 80033ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f0:	2208      	movs	r2, #8
 80033f2:	409a      	lsls	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	2201      	movs	r2, #1
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d012      	beq.n	800343a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	2201      	movs	r2, #1
 8003428:	409a      	lsls	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003432:	f043 0202 	orr.w	r2, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343e:	2204      	movs	r2, #4
 8003440:	409a      	lsls	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d012      	beq.n	8003470 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00b      	beq.n	8003470 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345c:	2204      	movs	r2, #4
 800345e:	409a      	lsls	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003468:	f043 0204 	orr.w	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	2210      	movs	r2, #16
 8003476:	409a      	lsls	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d043      	beq.n	8003508 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d03c      	beq.n	8003508 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	2210      	movs	r2, #16
 8003494:	409a      	lsls	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d018      	beq.n	80034da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d108      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d024      	beq.n	8003508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
 80034c6:	e01f      	b.n	8003508 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01b      	beq.n	8003508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
 80034d8:	e016      	b.n	8003508 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0208 	bic.w	r2, r2, #8
 80034f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350c:	2220      	movs	r2, #32
 800350e:	409a      	lsls	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 808f 	beq.w	8003638 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8087 	beq.w	8003638 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	2220      	movs	r2, #32
 8003530:	409a      	lsls	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b05      	cmp	r3, #5
 8003540:	d136      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0216 	bic.w	r2, r2, #22
 8003550:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003560:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_DMA_IRQHandler+0x1da>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0208 	bic.w	r2, r2, #8
 8003580:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003586:	223f      	movs	r2, #63	@ 0x3f
 8003588:	409a      	lsls	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d07e      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
        }
        return;
 80035ae:	e079      	b.n	80036a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d01d      	beq.n	80035fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d031      	beq.n	8003638 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
 80035dc:	e02c      	b.n	8003638 <HAL_DMA_IRQHandler+0x2a0>
 80035de:	bf00      	nop
 80035e0:	2000000c 	.word	0x2000000c
 80035e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d023      	beq.n	8003638 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
 80035f8:	e01e      	b.n	8003638 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10f      	bne.n	8003628 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0210 	bic.w	r2, r2, #16
 8003616:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363c:	2b00      	cmp	r3, #0
 800363e:	d032      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d022      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2205      	movs	r2, #5
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3301      	adds	r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	429a      	cmp	r2, r3
 800366e:	d307      	bcc.n	8003680 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f2      	bne.n	8003664 <HAL_DMA_IRQHandler+0x2cc>
 800367e:	e000      	b.n	8003682 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003680:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
 80036a2:	e000      	b.n	80036a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036a4:	bf00      	nop
    }
  }
}
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036ba:	b2db      	uxtb	r3, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b40      	cmp	r3, #64	@ 0x40
 800370c:	d108      	bne.n	8003720 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800371e:	e007      	b.n	8003730 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	3b10      	subs	r3, #16
 800374c:	4a14      	ldr	r2, [pc, #80]	@ (80037a0 <DMA_CalcBaseAndBitshift+0x64>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003756:	4a13      	ldr	r2, [pc, #76]	@ (80037a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b03      	cmp	r3, #3
 8003768:	d909      	bls.n	800377e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	1d1a      	adds	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	@ 0x58
 800377c:	e007      	b.n	800378e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	aaaaaaab 	.word	0xaaaaaaab
 80037a4:	0800a450 	.word	0x0800a450

080037a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11f      	bne.n	8003802 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d856      	bhi.n	8003876 <DMA_CheckFifoParam+0xce>
 80037c8:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <DMA_CheckFifoParam+0x28>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037f3 	.word	0x080037f3
 80037d8:	080037e1 	.word	0x080037e1
 80037dc:	08003877 	.word	0x08003877
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d046      	beq.n	800387a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f0:	e043      	b.n	800387a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037fa:	d140      	bne.n	800387e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003800:	e03d      	b.n	800387e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800380a:	d121      	bne.n	8003850 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d837      	bhi.n	8003882 <DMA_CheckFifoParam+0xda>
 8003812:	a201      	add	r2, pc, #4	@ (adr r2, 8003818 <DMA_CheckFifoParam+0x70>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	08003829 	.word	0x08003829
 800381c:	0800382f 	.word	0x0800382f
 8003820:	08003829 	.word	0x08003829
 8003824:	08003841 	.word	0x08003841
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e030      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003832:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d025      	beq.n	8003886 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383e:	e022      	b.n	8003886 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003848:	d11f      	bne.n	800388a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800384e:	e01c      	b.n	800388a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d903      	bls.n	800385e <DMA_CheckFifoParam+0xb6>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d003      	beq.n	8003864 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800385c:	e018      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
      break;
 8003862:	e015      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00e      	beq.n	800388e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      break;
 8003874:	e00b      	b.n	800388e <DMA_CheckFifoParam+0xe6>
      break;
 8003876:	bf00      	nop
 8003878:	e00a      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 800387a:	bf00      	nop
 800387c:	e008      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 800387e:	bf00      	nop
 8003880:	e006      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 8003882:	bf00      	nop
 8003884:	e004      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 8003886:	bf00      	nop
 8003888:	e002      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;   
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 800388e:	bf00      	nop
    }
  } 
  
  return status; 
 8003890:	7bfb      	ldrb	r3, [r7, #15]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e159      	b.n	8003b70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038bc:	2201      	movs	r2, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	f040 8148 	bne.w	8003b6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d005      	beq.n	80038f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d130      	bne.n	8003954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0201 	and.w	r2, r3, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	2b03      	cmp	r3, #3
 800395e:	d017      	beq.n	8003990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d123      	bne.n	80039e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	220f      	movs	r2, #15
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80a2 	beq.w	8003b6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b57      	ldr	r3, [pc, #348]	@ (8003b88 <HAL_GPIO_Init+0x2e8>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	4a56      	ldr	r2, [pc, #344]	@ (8003b88 <HAL_GPIO_Init+0x2e8>)
 8003a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a36:	4b54      	ldr	r3, [pc, #336]	@ (8003b88 <HAL_GPIO_Init+0x2e8>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a42:	4a52      	ldr	r2, [pc, #328]	@ (8003b8c <HAL_GPIO_Init+0x2ec>)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a49      	ldr	r2, [pc, #292]	@ (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d019      	beq.n	8003aa2 <HAL_GPIO_Init+0x202>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a48      	ldr	r2, [pc, #288]	@ (8003b94 <HAL_GPIO_Init+0x2f4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_GPIO_Init+0x1fe>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a47      	ldr	r2, [pc, #284]	@ (8003b98 <HAL_GPIO_Init+0x2f8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00d      	beq.n	8003a9a <HAL_GPIO_Init+0x1fa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a46      	ldr	r2, [pc, #280]	@ (8003b9c <HAL_GPIO_Init+0x2fc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <HAL_GPIO_Init+0x1f6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a45      	ldr	r2, [pc, #276]	@ (8003ba0 <HAL_GPIO_Init+0x300>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <HAL_GPIO_Init+0x1f2>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	e008      	b.n	8003aa4 <HAL_GPIO_Init+0x204>
 8003a92:	2307      	movs	r3, #7
 8003a94:	e006      	b.n	8003aa4 <HAL_GPIO_Init+0x204>
 8003a96:	2303      	movs	r3, #3
 8003a98:	e004      	b.n	8003aa4 <HAL_GPIO_Init+0x204>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e002      	b.n	8003aa4 <HAL_GPIO_Init+0x204>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_GPIO_Init+0x204>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	f002 0203 	and.w	r2, r2, #3
 8003aaa:	0092      	lsls	r2, r2, #2
 8003aac:	4093      	lsls	r3, r2
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ab4:	4935      	ldr	r1, [pc, #212]	@ (8003b8c <HAL_GPIO_Init+0x2ec>)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	3302      	adds	r3, #2
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ac2:	4b38      	ldr	r3, [pc, #224]	@ (8003ba4 <HAL_GPIO_Init+0x304>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba4 <HAL_GPIO_Init+0x304>)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba4 <HAL_GPIO_Init+0x304>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b10:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <HAL_GPIO_Init+0x304>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b16:	4b23      	ldr	r3, [pc, #140]	@ (8003ba4 <HAL_GPIO_Init+0x304>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba4 <HAL_GPIO_Init+0x304>)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b40:	4b18      	ldr	r3, [pc, #96]	@ (8003ba4 <HAL_GPIO_Init+0x304>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b64:	4a0f      	ldr	r2, [pc, #60]	@ (8003ba4 <HAL_GPIO_Init+0x304>)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	f67f aea2 	bls.w	80038bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3724      	adds	r7, #36	@ 0x24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40013800 	.word	0x40013800
 8003b90:	40020000 	.word	0x40020000
 8003b94:	40020400 	.word	0x40020400
 8003b98:	40020800 	.word	0x40020800
 8003b9c:	40020c00 	.word	0x40020c00
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40013c00 	.word	0x40013c00

08003ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bb8:	787b      	ldrb	r3, [r7, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bc4:	e003      	b.n	8003bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bc6:	887b      	ldrh	r3, [r7, #2]
 8003bc8:	041a      	lsls	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	619a      	str	r2, [r3, #24]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003be6:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fc98 	bl	8002530 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40013c00 	.word	0x40013c00

08003c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e12b      	b.n	8003e76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fb60 	bl	80012f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2224      	movs	r2, #36	@ 0x24
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0201 	bic.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c70:	f003 f896 	bl	8006da0 <HAL_RCC_GetPCLK1Freq>
 8003c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4a81      	ldr	r2, [pc, #516]	@ (8003e80 <HAL_I2C_Init+0x274>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d807      	bhi.n	8003c90 <HAL_I2C_Init+0x84>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a80      	ldr	r2, [pc, #512]	@ (8003e84 <HAL_I2C_Init+0x278>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bf94      	ite	ls
 8003c88:	2301      	movls	r3, #1
 8003c8a:	2300      	movhi	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e006      	b.n	8003c9e <HAL_I2C_Init+0x92>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a7d      	ldr	r2, [pc, #500]	@ (8003e88 <HAL_I2C_Init+0x27c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bf94      	ite	ls
 8003c98:	2301      	movls	r3, #1
 8003c9a:	2300      	movhi	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0e7      	b.n	8003e76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a78      	ldr	r2, [pc, #480]	@ (8003e8c <HAL_I2C_Init+0x280>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0c9b      	lsrs	r3, r3, #18
 8003cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e80 <HAL_I2C_Init+0x274>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d802      	bhi.n	8003ce0 <HAL_I2C_Init+0xd4>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	e009      	b.n	8003cf4 <HAL_I2C_Init+0xe8>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	4a69      	ldr	r2, [pc, #420]	@ (8003e90 <HAL_I2C_Init+0x284>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	495c      	ldr	r1, [pc, #368]	@ (8003e80 <HAL_I2C_Init+0x274>)
 8003d10:	428b      	cmp	r3, r1
 8003d12:	d819      	bhi.n	8003d48 <HAL_I2C_Init+0x13c>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1e59      	subs	r1, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d22:	1c59      	adds	r1, r3, #1
 8003d24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d28:	400b      	ands	r3, r1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_I2C_Init+0x138>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1e59      	subs	r1, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d42:	e051      	b.n	8003de8 <HAL_I2C_Init+0x1dc>
 8003d44:	2304      	movs	r3, #4
 8003d46:	e04f      	b.n	8003de8 <HAL_I2C_Init+0x1dc>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d111      	bne.n	8003d74 <HAL_I2C_Init+0x168>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e58      	subs	r0, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	440b      	add	r3, r1
 8003d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e012      	b.n	8003d9a <HAL_I2C_Init+0x18e>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e58      	subs	r0, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	0099      	lsls	r1, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Init+0x196>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e022      	b.n	8003de8 <HAL_I2C_Init+0x1dc>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10e      	bne.n	8003dc8 <HAL_I2C_Init+0x1bc>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1e58      	subs	r0, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	440b      	add	r3, r1
 8003db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc6:	e00f      	b.n	8003de8 <HAL_I2C_Init+0x1dc>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1e58      	subs	r0, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	0099      	lsls	r1, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	6809      	ldr	r1, [r1, #0]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6911      	ldr	r1, [r2, #16]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	4311      	orrs	r1, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	000186a0 	.word	0x000186a0
 8003e84:	001e847f 	.word	0x001e847f
 8003e88:	003d08ff 	.word	0x003d08ff
 8003e8c:	431bde83 	.word	0x431bde83
 8003e90:	10624dd3 	.word	0x10624dd3

08003e94 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea6:	2b80      	cmp	r3, #128	@ 0x80
 8003ea8:	d103      	bne.n	8003eb2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	460b      	mov	r3, r1
 8003ece:	817b      	strh	r3, [r7, #10]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ed4:	f7fe fff6 	bl	8002ec4 <HAL_GetTick>
 8003ed8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	f040 80e0 	bne.w	80040a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2319      	movs	r3, #25
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4970      	ldr	r1, [pc, #448]	@ (80040b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f002 f8fe 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0d3      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2C_Master_Transmit+0x50>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e0cc      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d007      	beq.n	8003f36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2221      	movs	r2, #33	@ 0x21
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2210      	movs	r2, #16
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	893a      	ldrh	r2, [r7, #8]
 8003f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a50      	ldr	r2, [pc, #320]	@ (80040b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f78:	8979      	ldrh	r1, [r7, #10]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f001 fddc 	bl	8005b3c <I2C_MasterRequestWrite>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e08d      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fa4:	e066      	b.n	8004074 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	6a39      	ldr	r1, [r7, #32]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f002 f9bc 	bl	8006328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d107      	bne.n	8003fce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e06b      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d11b      	bne.n	8004048 <HAL_I2C_Master_Transmit+0x188>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d017      	beq.n	8004048 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	6a39      	ldr	r1, [r7, #32]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f002 f9b3 	bl	80063b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00d      	beq.n	8004074 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	2b04      	cmp	r3, #4
 800405e:	d107      	bne.n	8004070 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01a      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d194      	bne.n	8003fa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800408a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	00100002 	.word	0x00100002
 80040b8:	ffff0000 	.word	0xffff0000

080040bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	460b      	mov	r3, r1
 80040d0:	813b      	strh	r3, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d6:	f7fe fef5 	bl	8002ec4 <HAL_GetTick>
 80040da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	f040 80d9 	bne.w	800429c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2319      	movs	r3, #25
 80040f0:	2201      	movs	r2, #1
 80040f2:	496d      	ldr	r1, [pc, #436]	@ (80042a8 <HAL_I2C_Mem_Write+0x1ec>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f001 fffd 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
 8004102:	e0cc      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Mem_Write+0x56>
 800410e:	2302      	movs	r3, #2
 8004110:	e0c5      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d007      	beq.n	8004138 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2221      	movs	r2, #33	@ 0x21
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2240      	movs	r2, #64	@ 0x40
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a4d      	ldr	r2, [pc, #308]	@ (80042ac <HAL_I2C_Mem_Write+0x1f0>)
 8004178:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800417a:	88f8      	ldrh	r0, [r7, #6]
 800417c:	893a      	ldrh	r2, [r7, #8]
 800417e:	8979      	ldrh	r1, [r7, #10]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	4603      	mov	r3, r0
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f001 fd58 	bl	8005c40 <I2C_RequestMemoryWrite>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d052      	beq.n	800423c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e081      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f002 f8c2 	bl	8006328 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d107      	bne.n	80041c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e06b      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b04      	cmp	r3, #4
 8004202:	d11b      	bne.n	800423c <HAL_I2C_Mem_Write+0x180>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004208:	2b00      	cmp	r3, #0
 800420a:	d017      	beq.n	800423c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1aa      	bne.n	800419a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f002 f8b5 	bl	80063b8 <I2C_WaitOnBTFFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	2b04      	cmp	r3, #4
 800425a:	d107      	bne.n	800426c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e016      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	00100002 	.word	0x00100002
 80042ac:	ffff0000 	.word	0xffff0000

080042b0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	@ 0x28
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	460b      	mov	r3, r1
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ce:	f7fe fdf9 	bl	8002ec4 <HAL_GetTick>
 80042d2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b20      	cmp	r3, #32
 80042de:	f040 8136 	bne.w	800454e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80042e2:	4b9d      	ldr	r3, [pc, #628]	@ (8004558 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	08db      	lsrs	r3, r3, #3
 80042e8:	4a9c      	ldr	r2, [pc, #624]	@ (800455c <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0a1a      	lsrs	r2, r3, #8
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009a      	lsls	r2, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3b01      	subs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d112      	bne.n	800432e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
 800432c:	e110      	b.n	8004550 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b02      	cmp	r3, #2
 800433a:	d0df      	beq.n	80042fc <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_I2C_Mem_Write_DMA+0x9a>
 8004346:	2302      	movs	r3, #2
 8004348:	e102      	b.n	8004550 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b01      	cmp	r3, #1
 800435e:	d007      	beq.n	8004370 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800437e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2221      	movs	r2, #33	@ 0x21
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2240      	movs	r2, #64	@ 0x40
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800439a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80043a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a6c      	ldr	r2, [pc, #432]	@ (8004560 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80043b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80043b2:	897a      	ldrh	r2, [r7, #10]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80043b8:	893a      	ldrh	r2, [r7, #8]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80a9 	beq.w	8004526 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02a      	beq.n	8004432 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e0:	4a60      	ldr	r2, [pc, #384]	@ (8004564 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80043e2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004568 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80043ea:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f0:	2200      	movs	r2, #0
 80043f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f8:	2200      	movs	r2, #0
 80043fa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004400:	2200      	movs	r2, #0
 8004402:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004408:	2200      	movs	r2, #0
 800440a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	4619      	mov	r1, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3310      	adds	r3, #16
 800441c:	461a      	mov	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	f7fe ff3f 	bl	80032a4 <HAL_DMA_Start_IT>
 8004426:	4603      	mov	r3, r0
 8004428:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800442a:	7efb      	ldrb	r3, [r7, #27]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d166      	bne.n	80044fe <HAL_I2C_Mem_Write_DMA+0x24e>
 8004430:	e013      	b.n	800445a <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e07a      	b.n	8004550 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800445a:	88f8      	ldrh	r0, [r7, #6]
 800445c:	893a      	ldrh	r2, [r7, #8]
 800445e:	8979      	ldrh	r1, [r7, #10]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	2323      	movs	r3, #35	@ 0x23
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	4603      	mov	r3, r0
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f001 fbe8 	bl	8005c40 <I2C_RequestMemoryWrite>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d022      	beq.n	80044bc <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe ff6a 	bl	8003354 <HAL_DMA_Abort_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004488:	2200      	movs	r2, #0
 800448a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800449a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e049      	b.n	8004550 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044f8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e028      	b.n	8004550 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f043 0210 	orr.w	r2, r3, #16
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e014      	b.n	8004550 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	2000000c 	.word	0x2000000c
 800455c:	14f8b589 	.word	0x14f8b589
 8004560:	ffff0000 	.word	0xffff0000
 8004564:	08005d6d 	.word	0x08005d6d
 8004568:	08005f2b 	.word	0x08005f2b

0800456c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800458c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004594:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b10      	cmp	r3, #16
 800459a:	d003      	beq.n	80045a4 <HAL_I2C_EV_IRQHandler+0x38>
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	f040 80c1 	bne.w	8004726 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <HAL_I2C_EV_IRQHandler+0x6e>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80045c4:	d003      	beq.n	80045ce <HAL_I2C_EV_IRQHandler+0x62>
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80045cc:	d101      	bne.n	80045d2 <HAL_I2C_EV_IRQHandler+0x66>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_I2C_EV_IRQHandler+0x68>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f000 8132 	beq.w	800483e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00c      	beq.n	80045fe <HAL_I2C_EV_IRQHandler+0x92>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	0a5b      	lsrs	r3, r3, #9
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d006      	beq.n	80045fe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 ff8a 	bl	800650a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fcf4 	bl	8004fe4 <I2C_Master_SB>
 80045fc:	e092      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0xb2>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	0a5b      	lsrs	r3, r3, #9
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fd6a 	bl	80050f0 <I2C_Master_ADD10>
 800461c:	e082      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_I2C_EV_IRQHandler+0xd2>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	0a5b      	lsrs	r3, r3, #9
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fd84 	bl	8005144 <I2C_Master_ADDR>
 800463c:	e072      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d03b      	beq.n	80046c2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004658:	f000 80f3 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	09db      	lsrs	r3, r3, #7
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00f      	beq.n	8004688 <HAL_I2C_EV_IRQHandler+0x11c>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	0a9b      	lsrs	r3, r3, #10
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_I2C_EV_IRQHandler+0x11c>
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d103      	bne.n	8004688 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f94c 	bl	800491e <I2C_MasterTransmit_TXE>
 8004686:	e04d      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80d6 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	0a5b      	lsrs	r3, r3, #9
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80cf 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046a4:	7bbb      	ldrb	r3, [r7, #14]
 80046a6:	2b21      	cmp	r3, #33	@ 0x21
 80046a8:	d103      	bne.n	80046b2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f9d3 	bl	8004a56 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b0:	e0c7      	b.n	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b40      	cmp	r3, #64	@ 0x40
 80046b6:	f040 80c4 	bne.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa41 	bl	8004b42 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046c0:	e0bf      	b.n	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d0:	f000 80b7 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00f      	beq.n	8004700 <HAL_I2C_EV_IRQHandler+0x194>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	0a9b      	lsrs	r3, r3, #10
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <HAL_I2C_EV_IRQHandler+0x194>
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 faba 	bl	8004c72 <I2C_MasterReceive_RXNE>
 80046fe:	e011      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 809a 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	0a5b      	lsrs	r3, r3, #9
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8093 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fb70 	bl	8004e02 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004722:	e08e      	b.n	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004724:	e08d      	b.n	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e007      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d012      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x20e>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	0a5b      	lsrs	r3, r3, #9
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00c      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004770:	69b9      	ldr	r1, [r7, #24]
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 ff35 	bl	80055e2 <I2C_Slave_ADDR>
 8004778:	e066      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_I2C_EV_IRQHandler+0x22e>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0a5b      	lsrs	r3, r3, #9
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 ff70 	bl	8005678 <I2C_Slave_STOPF>
 8004798:	e056      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800479a:	7bbb      	ldrb	r3, [r7, #14]
 800479c:	2b21      	cmp	r3, #33	@ 0x21
 800479e:	d002      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x23a>
 80047a0:	7bbb      	ldrb	r3, [r7, #14]
 80047a2:	2b29      	cmp	r3, #41	@ 0x29
 80047a4:	d125      	bne.n	80047f2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	09db      	lsrs	r3, r3, #7
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00f      	beq.n	80047d2 <HAL_I2C_EV_IRQHandler+0x266>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	0a9b      	lsrs	r3, r3, #10
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_I2C_EV_IRQHandler+0x266>
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	089b      	lsrs	r3, r3, #2
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fe4b 	bl	8005466 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047d0:	e039      	b.n	8004846 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d033      	beq.n	8004846 <HAL_I2C_EV_IRQHandler+0x2da>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	0a5b      	lsrs	r3, r3, #9
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d02d      	beq.n	8004846 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fe78 	bl	80054e0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f0:	e029      	b.n	8004846 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00f      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x2b2>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	0a9b      	lsrs	r3, r3, #10
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x2b2>
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fe83 	bl	8005522 <I2C_SlaveReceive_RXNE>
 800481c:	e014      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00e      	beq.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	0a5b      	lsrs	r3, r3, #9
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 feb1 	bl	800559e <I2C_SlaveReceive_BTF>
 800483c:	e004      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800483e:	bf00      	nop
 8004840:	e002      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004846:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	70fb      	strb	r3, [r7, #3]
 80048aa:	4613      	mov	r3, r2
 80048ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004934:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	d150      	bne.n	80049e6 <I2C_MasterTransmit_TXE+0xc8>
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b21      	cmp	r3, #33	@ 0x21
 8004948:	d14d      	bne.n	80049e6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d01d      	beq.n	800498c <I2C_MasterTransmit_TXE+0x6e>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b20      	cmp	r3, #32
 8004954:	d01a      	beq.n	800498c <I2C_MasterTransmit_TXE+0x6e>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800495c:	d016      	beq.n	800498c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800496c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2211      	movs	r2, #17
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff62 	bl	800484e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800498a:	e060      	b.n	8004a4e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800499a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049aa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b40      	cmp	r3, #64	@ 0x40
 80049c4:	d107      	bne.n	80049d6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff ff7d 	bl	80048ce <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049d4:	e03b      	b.n	8004a4e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ff35 	bl	800484e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049e4:	e033      	b.n	8004a4e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b21      	cmp	r3, #33	@ 0x21
 80049ea:	d005      	beq.n	80049f8 <I2C_MasterTransmit_TXE+0xda>
 80049ec:	7bbb      	ldrb	r3, [r7, #14]
 80049ee:	2b40      	cmp	r3, #64	@ 0x40
 80049f0:	d12d      	bne.n	8004a4e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b22      	cmp	r3, #34	@ 0x22
 80049f6:	d12a      	bne.n	8004a4e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d108      	bne.n	8004a14 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a10:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a12:	e01c      	b.n	8004a4e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b40      	cmp	r3, #64	@ 0x40
 8004a1e:	d103      	bne.n	8004a28 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f88e 	bl	8004b42 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a26:	e012      	b.n	8004a4e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a4c:	e7ff      	b.n	8004a4e <I2C_MasterTransmit_TXE+0x130>
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b21      	cmp	r3, #33	@ 0x21
 8004a6e:	d164      	bne.n	8004b3a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d012      	beq.n	8004aa0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	781a      	ldrb	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a9e:	e04c      	b.n	8004b3a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d01d      	beq.n	8004ae2 <I2C_MasterTransmit_BTF+0x8c>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d01a      	beq.n	8004ae2 <I2C_MasterTransmit_BTF+0x8c>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ab2:	d016      	beq.n	8004ae2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ac2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2211      	movs	r2, #17
 8004ac8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff feb7 	bl	800484e <HAL_I2C_MasterTxCpltCallback>
}
 8004ae0:	e02b      	b.n	8004b3a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004af0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b00:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b40      	cmp	r3, #64	@ 0x40
 8004b1a:	d107      	bne.n	8004b2c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fed2 	bl	80048ce <HAL_I2C_MemTxCpltCallback>
}
 8004b2a:	e006      	b.n	8004b3a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fe8a 	bl	800484e <HAL_I2C_MasterTxCpltCallback>
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b50:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11d      	bne.n	8004b96 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d10b      	bne.n	8004b7a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b72:	1c9a      	adds	r2, r3, #2
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004b78:	e077      	b.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	121b      	asrs	r3, r3, #8
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b94:	e069      	b.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d10b      	bne.n	8004bb6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bb4:	e059      	b.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d152      	bne.n	8004c64 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	2b22      	cmp	r3, #34	@ 0x22
 8004bc2:	d10d      	bne.n	8004be0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bd2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bde:	e044      	b.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d015      	beq.n	8004c16 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b21      	cmp	r3, #33	@ 0x21
 8004bee:	d112      	bne.n	8004c16 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c14:	e029      	b.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d124      	bne.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b21      	cmp	r3, #33	@ 0x21
 8004c24:	d121      	bne.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c34:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c44:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fe36 	bl	80048ce <HAL_I2C_MemTxCpltCallback>
}
 8004c62:	e002      	b.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff f915 	bl	8003e94 <I2C_Flush_DR>
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b22      	cmp	r3, #34	@ 0x22
 8004c84:	f040 80b9 	bne.w	8004dfa <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d921      	bls.n	8004ce0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	f040 8096 	bne.w	8004dfa <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cdc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004cde:	e08c      	b.n	8004dfa <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d07f      	beq.n	8004de8 <I2C_MasterReceive_RXNE+0x176>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d002      	beq.n	8004cf4 <I2C_MasterReceive_RXNE+0x82>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d179      	bne.n	8004de8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 fba7 	bl	8006448 <I2C_WaitOnSTOPRequestThroughIT>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d14c      	bne.n	8004d9a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d0e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b40      	cmp	r3, #64	@ 0x40
 8004d58:	d10a      	bne.n	8004d70 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff fdba 	bl	80048e2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d6e:	e044      	b.n	8004dfa <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d002      	beq.n	8004d84 <I2C_MasterReceive_RXNE+0x112>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d103      	bne.n	8004d8c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d8a:	e002      	b.n	8004d92 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2212      	movs	r2, #18
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fd65 	bl	8004862 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d98:	e02f      	b.n	8004dfa <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004da8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fd88 	bl	80048f6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004de6:	e008      	b.n	8004dfa <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df6:	605a      	str	r2, [r3, #4]
}
 8004df8:	e7ff      	b.n	8004dfa <I2C_MasterReceive_RXNE+0x188>
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d11b      	bne.n	8004e52 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e28:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e50:	e0c4      	b.n	8004fdc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d129      	bne.n	8004eb0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e6a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d00a      	beq.n	8004e88 <I2C_MasterReceive_BTF+0x86>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d007      	beq.n	8004e88 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004eae:	e095      	b.n	8004fdc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d17d      	bne.n	8004fb6 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d002      	beq.n	8004ec6 <I2C_MasterReceive_BTF+0xc4>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d108      	bne.n	8004ed8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e016      	b.n	8004f06 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d002      	beq.n	8004ee4 <I2C_MasterReceive_BTF+0xe2>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d108      	bne.n	8004ef6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	e007      	b.n	8004f06 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f60:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b40      	cmp	r3, #64	@ 0x40
 8004f74:	d10a      	bne.n	8004f8c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fcac 	bl	80048e2 <HAL_I2C_MemRxCpltCallback>
}
 8004f8a:	e027      	b.n	8004fdc <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d002      	beq.n	8004fa0 <I2C_MasterReceive_BTF+0x19e>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d103      	bne.n	8004fa8 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fa6:	e002      	b.n	8004fae <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2212      	movs	r2, #18
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fc57 	bl	8004862 <HAL_I2C_MasterRxCpltCallback>
}
 8004fb4:	e012      	b.n	8004fdc <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b40      	cmp	r3, #64	@ 0x40
 8004ff6:	d117      	bne.n	8005028 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005010:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005012:	e067      	b.n	80050e4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005018:	b2db      	uxtb	r3, r3
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	611a      	str	r2, [r3, #16]
}
 8005026:	e05d      	b.n	80050e4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005030:	d133      	bne.n	800509a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b21      	cmp	r3, #33	@ 0x21
 800503c:	d109      	bne.n	8005052 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800504e:	611a      	str	r2, [r3, #16]
 8005050:	e008      	b.n	8005064 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	b2da      	uxtb	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <I2C_Master_SB+0x92>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d108      	bne.n	8005088 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	2b00      	cmp	r3, #0
 800507c:	d032      	beq.n	80050e4 <I2C_Master_SB+0x100>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d02d      	beq.n	80050e4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005096:	605a      	str	r2, [r3, #4]
}
 8005098:	e024      	b.n	80050e4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10e      	bne.n	80050c0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	11db      	asrs	r3, r3, #7
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f003 0306 	and.w	r3, r3, #6
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f063 030f 	orn	r3, r3, #15
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	611a      	str	r2, [r3, #16]
}
 80050be:	e011      	b.n	80050e4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10d      	bne.n	80050e4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	11db      	asrs	r3, r3, #7
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 0306 	and.w	r3, r3, #6
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f063 030e 	orn	r3, r3, #14
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	611a      	str	r2, [r3, #16]
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005108:	2b00      	cmp	r3, #0
 800510a:	d004      	beq.n	8005116 <I2C_Master_ADD10+0x26>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d108      	bne.n	8005128 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <I2C_Master_ADD10+0x48>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005136:	605a      	str	r2, [r3, #4]
  }
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005144:	b480      	push	{r7}
 8005146:	b091      	sub	sp, #68	@ 0x44
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005152:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b22      	cmp	r3, #34	@ 0x22
 800516c:	f040 8169 	bne.w	8005442 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10f      	bne.n	8005198 <I2C_Master_ADDR+0x54>
 8005178:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	d10b      	bne.n	8005198 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005180:	2300      	movs	r3, #0
 8005182:	633b      	str	r3, [r7, #48]	@ 0x30
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	633b      	str	r3, [r7, #48]	@ 0x30
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	633b      	str	r3, [r7, #48]	@ 0x30
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	e160      	b.n	800545a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11d      	bne.n	80051dc <I2C_Master_ADDR+0x98>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051a8:	d118      	bne.n	80051dc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051ce:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80051da:	e13e      	b.n	800545a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d113      	bne.n	800520e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e6:	2300      	movs	r3, #0
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e115      	b.n	800543a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	f040 808a 	bne.w	800532e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005220:	d137      	bne.n	8005292 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005230:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005240:	d113      	bne.n	800526a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005250:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	@ 0x24
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	e0e7      	b.n	800543a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526a:	2300      	movs	r3, #0
 800526c:	623b      	str	r3, [r7, #32]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	623b      	str	r3, [r7, #32]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	623b      	str	r3, [r7, #32]
 800527e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e0d3      	b.n	800543a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005294:	2b08      	cmp	r3, #8
 8005296:	d02e      	beq.n	80052f6 <I2C_Master_ADDR+0x1b2>
 8005298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529a:	2b20      	cmp	r3, #32
 800529c:	d02b      	beq.n	80052f6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800529e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a0:	2b12      	cmp	r3, #18
 80052a2:	d102      	bne.n	80052aa <I2C_Master_ADDR+0x166>
 80052a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d125      	bne.n	80052f6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d00e      	beq.n	80052ce <I2C_Master_ADDR+0x18a>
 80052b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d00b      	beq.n	80052ce <I2C_Master_ADDR+0x18a>
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d008      	beq.n	80052ce <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e007      	b.n	80052de <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	e0a1      	b.n	800543a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005304:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e085      	b.n	800543a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d14d      	bne.n	80053d4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	2b04      	cmp	r3, #4
 800533c:	d016      	beq.n	800536c <I2C_Master_ADDR+0x228>
 800533e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005340:	2b02      	cmp	r3, #2
 8005342:	d013      	beq.n	800536c <I2C_Master_ADDR+0x228>
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	2b10      	cmp	r3, #16
 8005348:	d010      	beq.n	800536c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005358:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e007      	b.n	800537c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800537a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538a:	d117      	bne.n	80053bc <I2C_Master_ADDR+0x278>
 800538c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005392:	d00b      	beq.n	80053ac <I2C_Master_ADDR+0x268>
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	2b01      	cmp	r3, #1
 8005398:	d008      	beq.n	80053ac <I2C_Master_ADDR+0x268>
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	2b08      	cmp	r3, #8
 800539e:	d005      	beq.n	80053ac <I2C_Master_ADDR+0x268>
 80053a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d002      	beq.n	80053ac <I2C_Master_ADDR+0x268>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d107      	bne.n	80053bc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053ba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053bc:	2300      	movs	r3, #0
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	e032      	b.n	800543a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053e2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f2:	d117      	bne.n	8005424 <I2C_Master_ADDR+0x2e0>
 80053f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053fa:	d00b      	beq.n	8005414 <I2C_Master_ADDR+0x2d0>
 80053fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d008      	beq.n	8005414 <I2C_Master_ADDR+0x2d0>
 8005402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005404:	2b08      	cmp	r3, #8
 8005406:	d005      	beq.n	8005414 <I2C_Master_ADDR+0x2d0>
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	2b10      	cmp	r3, #16
 800540c:	d002      	beq.n	8005414 <I2C_Master_ADDR+0x2d0>
 800540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005410:	2b20      	cmp	r3, #32
 8005412:	d107      	bne.n	8005424 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005422:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005440:	e00b      	b.n	800545a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	68fb      	ldr	r3, [r7, #12]
}
 8005458:	e7ff      	b.n	800545a <I2C_Master_ADDR+0x316>
 800545a:	bf00      	nop
 800545c:	3744      	adds	r7, #68	@ 0x44
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005474:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02b      	beq.n	80054d8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d114      	bne.n	80054d8 <I2C_SlaveTransmit_TXE+0x72>
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b29      	cmp	r3, #41	@ 0x29
 80054b2:	d111      	bne.n	80054d8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2221      	movs	r2, #33	@ 0x21
 80054c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2228      	movs	r2, #40	@ 0x28
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff f9cf 	bl	8004876 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d011      	beq.n	8005516 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	781a      	ldrb	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005530:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02c      	beq.n	8005596 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d114      	bne.n	8005596 <I2C_SlaveReceive_RXNE+0x74>
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005570:	d111      	bne.n	8005596 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005580:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2222      	movs	r2, #34	@ 0x22
 8005586:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2228      	movs	r2, #40	@ 0x28
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff f97a 	bl	800488a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d012      	beq.n	80055d6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055fc:	2b28      	cmp	r3, #40	@ 0x28
 80055fe:	d127      	bne.n	8005650 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800560e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	089b      	lsrs	r3, r3, #2
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	09db      	lsrs	r3, r3, #7
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	81bb      	strh	r3, [r7, #12]
 8005632:	e002      	b.n	800563a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005642:	89ba      	ldrh	r2, [r7, #12]
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff f928 	bl	800489e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800564e:	e00e      	b.n	800566e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005650:	2300      	movs	r3, #0
 8005652:	60bb      	str	r3, [r7, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005686:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005696:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005698:	2300      	movs	r3, #0
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d4:	d172      	bne.n	80057bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b22      	cmp	r3, #34	@ 0x22
 80056da:	d002      	beq.n	80056e2 <I2C_Slave_STOPF+0x6a>
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b2a      	cmp	r3, #42	@ 0x2a
 80056e0:	d135      	bne.n	800574e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f043 0204 	orr.w	r2, r3, #4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005714:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	4618      	mov	r0, r3
 800571c:	f7fd ffc6 	bl	80036ac <HAL_DMA_GetState>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d049      	beq.n	80057ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572a:	4a69      	ldr	r2, [pc, #420]	@ (80058d0 <I2C_Slave_STOPF+0x258>)
 800572c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005732:	4618      	mov	r0, r3
 8005734:	f7fd fe0e 	bl	8003354 <HAL_DMA_Abort_IT>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d03d      	beq.n	80057ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800574c:	e035      	b.n	80057ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	b29a      	uxth	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	f043 0204 	orr.w	r2, r3, #4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005780:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005786:	4618      	mov	r0, r3
 8005788:	f7fd ff90 	bl	80036ac <HAL_DMA_GetState>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d014      	beq.n	80057bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	4a4e      	ldr	r2, [pc, #312]	@ (80058d0 <I2C_Slave_STOPF+0x258>)
 8005798:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fd fdd8 	bl	8003354 <HAL_DMA_Abort_IT>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
 80057b8:	e000      	b.n	80057bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d03e      	beq.n	8005844 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d112      	bne.n	80057fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005804:	2b40      	cmp	r3, #64	@ 0x40
 8005806:	d112      	bne.n	800582e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	f043 0204 	orr.w	r2, r3, #4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f843 	bl	80058d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005852:	e039      	b.n	80058c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b2a      	cmp	r3, #42	@ 0x2a
 8005858:	d109      	bne.n	800586e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2228      	movs	r2, #40	@ 0x28
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff f80e 	bl	800488a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b28      	cmp	r3, #40	@ 0x28
 8005878:	d111      	bne.n	800589e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a15      	ldr	r2, [pc, #84]	@ (80058d4 <I2C_Slave_STOPF+0x25c>)
 800587e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff f80f 	bl	80048ba <HAL_I2C_ListenCpltCallback>
}
 800589c:	e014      	b.n	80058c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a2:	2b22      	cmp	r3, #34	@ 0x22
 80058a4:	d002      	beq.n	80058ac <I2C_Slave_STOPF+0x234>
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b22      	cmp	r3, #34	@ 0x22
 80058aa:	d10d      	bne.n	80058c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fe ffe1 	bl	800488a <HAL_I2C_SlaveRxCpltCallback>
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	08005fa5 	.word	0x08005fa5
 80058d4:	ffff0000 	.word	0xffff0000

080058d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d002      	beq.n	80058fc <I2C_ITError+0x24>
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	2b40      	cmp	r3, #64	@ 0x40
 80058fa:	d10a      	bne.n	8005912 <I2C_ITError+0x3a>
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2b22      	cmp	r3, #34	@ 0x22
 8005900:	d107      	bne.n	8005912 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005910:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005918:	2b28      	cmp	r3, #40	@ 0x28
 800591a:	d107      	bne.n	800592c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2228      	movs	r2, #40	@ 0x28
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800592a:	e015      	b.n	8005958 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800593a:	d00a      	beq.n	8005952 <I2C_ITError+0x7a>
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b60      	cmp	r3, #96	@ 0x60
 8005940:	d007      	beq.n	8005952 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005966:	d162      	bne.n	8005a2e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005976:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d020      	beq.n	80059c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598a:	4a6a      	ldr	r2, [pc, #424]	@ (8005b34 <I2C_ITError+0x25c>)
 800598c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005992:	4618      	mov	r0, r3
 8005994:	f7fd fcde 	bl	8003354 <HAL_DMA_Abort_IT>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8089 	beq.w	8005ab2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0201 	bic.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059c2:	4610      	mov	r0, r2
 80059c4:	4798      	blx	r3
 80059c6:	e074      	b.n	8005ab2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059cc:	4a59      	ldr	r2, [pc, #356]	@ (8005b34 <I2C_ITError+0x25c>)
 80059ce:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fd fcbd 	bl	8003354 <HAL_DMA_Abort_IT>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d068      	beq.n	8005ab2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ea:	2b40      	cmp	r3, #64	@ 0x40
 80059ec:	d10b      	bne.n	8005a06 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
 8005a2c:	e041      	b.n	8005ab2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b60      	cmp	r3, #96	@ 0x60
 8005a38:	d125      	bne.n	8005a86 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a52:	2b40      	cmp	r3, #64	@ 0x40
 8005a54:	d10b      	bne.n	8005a6e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fe ff43 	bl	800490a <HAL_I2C_AbortCpltCallback>
 8005a84:	e015      	b.n	8005ab2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a90:	2b40      	cmp	r3, #64	@ 0x40
 8005a92:	d10b      	bne.n	8005aac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7fe ff22 	bl	80048f6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10e      	bne.n	8005ae0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d104      	bne.n	8005ae0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005aee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d113      	bne.n	8005b2c <I2C_ITError+0x254>
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b28      	cmp	r3, #40	@ 0x28
 8005b08:	d110      	bne.n	8005b2c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b38 <I2C_ITError+0x260>)
 8005b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fe fec7 	bl	80048ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	08005fa5 	.word	0x08005fa5
 8005b38:	ffff0000 	.word	0xffff0000

08005b3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d006      	beq.n	8005b66 <I2C_MasterRequestWrite+0x2a>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d003      	beq.n	8005b66 <I2C_MasterRequestWrite+0x2a>
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b64:	d108      	bne.n	8005b78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e00b      	b.n	8005b90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	2b12      	cmp	r3, #18
 8005b7e:	d107      	bne.n	8005b90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 faa9 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb6:	d103      	bne.n	8005bc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e035      	b.n	8005c30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bcc:	d108      	bne.n	8005be0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bce:	897b      	ldrh	r3, [r7, #10]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bdc:	611a      	str	r2, [r3, #16]
 8005bde:	e01b      	b.n	8005c18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005be0:	897b      	ldrh	r3, [r7, #10]
 8005be2:	11db      	asrs	r3, r3, #7
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0306 	and.w	r3, r3, #6
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f063 030f 	orn	r3, r3, #15
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	490e      	ldr	r1, [pc, #56]	@ (8005c38 <I2C_MasterRequestWrite+0xfc>)
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 faf2 	bl	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e010      	b.n	8005c30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4907      	ldr	r1, [pc, #28]	@ (8005c3c <I2C_MasterRequestWrite+0x100>)
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fae2 	bl	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	00010008 	.word	0x00010008
 8005c3c:	00010002 	.word	0x00010002

08005c40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	4608      	mov	r0, r1
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	817b      	strh	r3, [r7, #10]
 8005c52:	460b      	mov	r3, r1
 8005c54:	813b      	strh	r3, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fa3c 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00d      	beq.n	8005c9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c90:	d103      	bne.n	8005c9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e05f      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	492d      	ldr	r1, [pc, #180]	@ (8005d68 <I2C_RequestMemoryWrite+0x128>)
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fa97 	bl	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e04c      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cdc:	6a39      	ldr	r1, [r7, #32]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fb22 	bl	8006328 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d107      	bne.n	8005d02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e02b      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0c:	893b      	ldrh	r3, [r7, #8]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	611a      	str	r2, [r3, #16]
 8005d16:	e021      	b.n	8005d5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d18:	893b      	ldrh	r3, [r7, #8]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d28:	6a39      	ldr	r1, [r7, #32]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fafc 	bl	8006328 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d107      	bne.n	8005d4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e005      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d52:	893b      	ldrh	r3, [r7, #8]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	00010002 	.word	0x00010002

08005d6c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d80:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d88:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005d9e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dac:	2200      	movs	r2, #0
 8005dae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005dc0:	7cfb      	ldrb	r3, [r7, #19]
 8005dc2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005dc6:	2b21      	cmp	r3, #33	@ 0x21
 8005dc8:	d007      	beq.n	8005dda <I2C_DMAXferCplt+0x6e>
 8005dca:	7cfb      	ldrb	r3, [r7, #19]
 8005dcc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005dd0:	2b22      	cmp	r3, #34	@ 0x22
 8005dd2:	d131      	bne.n	8005e38 <I2C_DMAXferCplt+0xcc>
 8005dd4:	7cbb      	ldrb	r3, [r7, #18]
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d12e      	bne.n	8005e38 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005de8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2200      	movs	r2, #0
 8005dee:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005df0:	7cfb      	ldrb	r3, [r7, #19]
 8005df2:	2b29      	cmp	r3, #41	@ 0x29
 8005df4:	d10a      	bne.n	8005e0c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2221      	movs	r2, #33	@ 0x21
 8005dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2228      	movs	r2, #40	@ 0x28
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e04:	6978      	ldr	r0, [r7, #20]
 8005e06:	f7fe fd36 	bl	8004876 <HAL_I2C_SlaveTxCpltCallback>
 8005e0a:	e00c      	b.n	8005e26 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e0c:	7cfb      	ldrb	r3, [r7, #19]
 8005e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e10:	d109      	bne.n	8005e26 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2222      	movs	r2, #34	@ 0x22
 8005e16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2228      	movs	r2, #40	@ 0x28
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e20:	6978      	ldr	r0, [r7, #20]
 8005e22:	f7fe fd32 	bl	800488a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005e34:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005e36:	e074      	b.n	8005f22 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d06e      	beq.n	8005f22 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d107      	bne.n	8005e5e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005e6c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e74:	d009      	beq.n	8005e8a <I2C_DMAXferCplt+0x11e>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d006      	beq.n	8005e8a <I2C_DMAXferCplt+0x11e>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005e82:	d002      	beq.n	8005e8a <I2C_DMAXferCplt+0x11e>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d107      	bne.n	8005e9a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e98:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ea8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005ec8:	6978      	ldr	r0, [r7, #20]
 8005eca:	f7fe fd14 	bl	80048f6 <HAL_I2C_ErrorCallback>
}
 8005ece:	e028      	b.n	8005f22 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b40      	cmp	r3, #64	@ 0x40
 8005ee2:	d10a      	bne.n	8005efa <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005ef2:	6978      	ldr	r0, [r7, #20]
 8005ef4:	f7fe fcf5 	bl	80048e2 <HAL_I2C_MemRxCpltCallback>
}
 8005ef8:	e013      	b.n	8005f22 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d002      	beq.n	8005f0e <I2C_DMAXferCplt+0x1a2>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d103      	bne.n	8005f16 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f14:	e002      	b.n	8005f1c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2212      	movs	r2, #18
 8005f1a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f1c:	6978      	ldr	r0, [r7, #20]
 8005f1e:	f7fe fca0 	bl	8004862 <HAL_I2C_MasterRxCpltCallback>
}
 8005f22:	bf00      	nop
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f44:	2200      	movs	r2, #0
 8005f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	2200      	movs	r2, #0
 8005f56:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fd fbb5 	bl	80036c8 <HAL_DMA_GetError>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d01b      	beq.n	8005f9c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f72:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8e:	f043 0210 	orr.w	r2, r3, #16
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7fe fcad 	bl	80048f6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80060ec <I2C_DMAAbort+0x148>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80060f0 <I2C_DMAAbort+0x14c>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	0a1a      	lsrs	r2, r3, #8
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	00da      	lsls	r2, r3, #3
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005fea:	e00a      	b.n	8006002 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006000:	d0ea      	beq.n	8005fd8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600e:	2200      	movs	r2, #0
 8006010:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601e:	2200      	movs	r2, #0
 8006020:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006030:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006044:	2200      	movs	r2, #0
 8006046:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	2200      	movs	r2, #0
 8006056:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b60      	cmp	r3, #96	@ 0x60
 8006072:	d10e      	bne.n	8006092 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800608a:	6978      	ldr	r0, [r7, #20]
 800608c:	f7fe fc3d 	bl	800490a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006090:	e027      	b.n	80060e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006092:	7cfb      	ldrb	r3, [r7, #19]
 8006094:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006098:	2b28      	cmp	r3, #40	@ 0x28
 800609a:	d117      	bne.n	80060cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2228      	movs	r2, #40	@ 0x28
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80060ca:	e007      	b.n	80060dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80060dc:	6978      	ldr	r0, [r7, #20]
 80060de:	f7fe fc0a 	bl	80048f6 <HAL_I2C_ErrorCallback>
}
 80060e2:	bf00      	nop
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	2000000c 	.word	0x2000000c
 80060f0:	14f8b589 	.word	0x14f8b589

080060f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006104:	e048      	b.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d044      	beq.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fc fed9 	bl	8002ec4 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d139      	bne.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d10d      	bne.n	800614a <I2C_WaitOnFlagUntilTimeout+0x56>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	43da      	mvns	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf0c      	ite	eq
 8006140:	2301      	moveq	r3, #1
 8006142:	2300      	movne	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	e00c      	b.n	8006164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	43da      	mvns	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	429a      	cmp	r2, r3
 8006168:	d116      	bne.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006184:	f043 0220 	orr.w	r2, r3, #32
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e023      	b.n	80061e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d10d      	bne.n	80061be <I2C_WaitOnFlagUntilTimeout+0xca>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	43da      	mvns	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4013      	ands	r3, r2
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	e00c      	b.n	80061d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	43da      	mvns	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4013      	ands	r3, r2
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d093      	beq.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061f6:	e071      	b.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006206:	d123      	bne.n	8006250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	f043 0204 	orr.w	r2, r3, #4
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e067      	b.n	8006320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006256:	d041      	beq.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006258:	f7fc fe34 	bl	8002ec4 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	429a      	cmp	r2, r3
 8006266:	d302      	bcc.n	800626e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d136      	bne.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d10c      	bne.n	8006292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	43da      	mvns	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	bf14      	ite	ne
 800628a:	2301      	movne	r3, #1
 800628c:	2300      	moveq	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e00b      	b.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	43da      	mvns	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4013      	ands	r3, r2
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d016      	beq.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c8:	f043 0220 	orr.w	r2, r3, #32
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e021      	b.n	8006320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	0c1b      	lsrs	r3, r3, #16
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d10c      	bne.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	43da      	mvns	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4013      	ands	r3, r2
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf14      	ite	ne
 80062f8:	2301      	movne	r3, #1
 80062fa:	2300      	moveq	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	e00b      	b.n	8006318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	43da      	mvns	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4013      	ands	r3, r2
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	bf14      	ite	ne
 8006312:	2301      	movne	r3, #1
 8006314:	2300      	moveq	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	f47f af6d 	bne.w	80061f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006334:	e034      	b.n	80063a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f8b8 	bl	80064ac <I2C_IsAcknowledgeFailed>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e034      	b.n	80063b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d028      	beq.n	80063a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634e:	f7fc fdb9 	bl	8002ec4 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d302      	bcc.n	8006364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11d      	bne.n	80063a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636e:	2b80      	cmp	r3, #128	@ 0x80
 8006370:	d016      	beq.n	80063a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e007      	b.n	80063b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063aa:	2b80      	cmp	r3, #128	@ 0x80
 80063ac:	d1c3      	bne.n	8006336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063c4:	e034      	b.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f870 	bl	80064ac <I2C_IsAcknowledgeFailed>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e034      	b.n	8006440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d028      	beq.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063de:	f7fc fd71 	bl	8002ec4 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d11d      	bne.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d016      	beq.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e007      	b.n	8006440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b04      	cmp	r3, #4
 800643c:	d1c3      	bne.n	80063c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006454:	4b13      	ldr	r3, [pc, #76]	@ (80064a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	08db      	lsrs	r3, r3, #3
 800645a:	4a13      	ldr	r2, [pc, #76]	@ (80064a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	0a1a      	lsrs	r2, r3, #8
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3b01      	subs	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d107      	bne.n	8006486 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	f043 0220 	orr.w	r2, r3, #32
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e008      	b.n	8006498 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006494:	d0e9      	beq.n	800646a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	2000000c 	.word	0x2000000c
 80064a8:	14f8b589 	.word	0x14f8b589

080064ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064c2:	d11b      	bne.n	80064fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e8:	f043 0204 	orr.w	r2, r3, #4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006516:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800651a:	d103      	bne.n	8006524 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006522:	e007      	b.n	8006534 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800652c:	d102      	bne.n	8006534 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2208      	movs	r2, #8
 8006532:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e267      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d075      	beq.n	800664a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800655e:	4b88      	ldr	r3, [pc, #544]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	2b04      	cmp	r3, #4
 8006568:	d00c      	beq.n	8006584 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800656a:	4b85      	ldr	r3, [pc, #532]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006572:	2b08      	cmp	r3, #8
 8006574:	d112      	bne.n	800659c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006576:	4b82      	ldr	r3, [pc, #520]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800657e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006582:	d10b      	bne.n	800659c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006584:	4b7e      	ldr	r3, [pc, #504]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d05b      	beq.n	8006648 <HAL_RCC_OscConfig+0x108>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d157      	bne.n	8006648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e242      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a4:	d106      	bne.n	80065b4 <HAL_RCC_OscConfig+0x74>
 80065a6:	4b76      	ldr	r3, [pc, #472]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a75      	ldr	r2, [pc, #468]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e01d      	b.n	80065f0 <HAL_RCC_OscConfig+0xb0>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065bc:	d10c      	bne.n	80065d8 <HAL_RCC_OscConfig+0x98>
 80065be:	4b70      	ldr	r3, [pc, #448]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a6f      	ldr	r2, [pc, #444]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a6c      	ldr	r2, [pc, #432]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	e00b      	b.n	80065f0 <HAL_RCC_OscConfig+0xb0>
 80065d8:	4b69      	ldr	r3, [pc, #420]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a68      	ldr	r2, [pc, #416]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	4b66      	ldr	r3, [pc, #408]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a65      	ldr	r2, [pc, #404]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80065ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d013      	beq.n	8006620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fc fc64 	bl	8002ec4 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006600:	f7fc fc60 	bl	8002ec4 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b64      	cmp	r3, #100	@ 0x64
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e207      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006612:	4b5b      	ldr	r3, [pc, #364]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0xc0>
 800661e:	e014      	b.n	800664a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006620:	f7fc fc50 	bl	8002ec4 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006628:	f7fc fc4c 	bl	8002ec4 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b64      	cmp	r3, #100	@ 0x64
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e1f3      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800663a:	4b51      	ldr	r3, [pc, #324]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0xe8>
 8006646:	e000      	b.n	800664a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d063      	beq.n	800671e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006656:	4b4a      	ldr	r3, [pc, #296]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 030c 	and.w	r3, r3, #12
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00b      	beq.n	800667a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006662:	4b47      	ldr	r3, [pc, #284]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800666a:	2b08      	cmp	r3, #8
 800666c:	d11c      	bne.n	80066a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800666e:	4b44      	ldr	r3, [pc, #272]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d116      	bne.n	80066a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800667a:	4b41      	ldr	r3, [pc, #260]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_RCC_OscConfig+0x152>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d001      	beq.n	8006692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e1c7      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006692:	4b3b      	ldr	r3, [pc, #236]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4937      	ldr	r1, [pc, #220]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066a6:	e03a      	b.n	800671e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d020      	beq.n	80066f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066b0:	4b34      	ldr	r3, [pc, #208]	@ (8006784 <HAL_RCC_OscConfig+0x244>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b6:	f7fc fc05 	bl	8002ec4 <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066be:	f7fc fc01 	bl	8002ec4 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e1a8      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0f0      	beq.n	80066be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066dc:	4b28      	ldr	r3, [pc, #160]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	4925      	ldr	r1, [pc, #148]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	600b      	str	r3, [r1, #0]
 80066f0:	e015      	b.n	800671e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066f2:	4b24      	ldr	r3, [pc, #144]	@ (8006784 <HAL_RCC_OscConfig+0x244>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f8:	f7fc fbe4 	bl	8002ec4 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006700:	f7fc fbe0 	bl	8002ec4 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e187      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006712:	4b1b      	ldr	r3, [pc, #108]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d036      	beq.n	8006798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d016      	beq.n	8006760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006732:	4b15      	ldr	r3, [pc, #84]	@ (8006788 <HAL_RCC_OscConfig+0x248>)
 8006734:	2201      	movs	r2, #1
 8006736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006738:	f7fc fbc4 	bl	8002ec4 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006740:	f7fc fbc0 	bl	8002ec4 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e167      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006752:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <HAL_RCC_OscConfig+0x240>)
 8006754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0f0      	beq.n	8006740 <HAL_RCC_OscConfig+0x200>
 800675e:	e01b      	b.n	8006798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006760:	4b09      	ldr	r3, [pc, #36]	@ (8006788 <HAL_RCC_OscConfig+0x248>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006766:	f7fc fbad 	bl	8002ec4 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800676c:	e00e      	b.n	800678c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800676e:	f7fc fba9 	bl	8002ec4 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d907      	bls.n	800678c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e150      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
 8006780:	40023800 	.word	0x40023800
 8006784:	42470000 	.word	0x42470000
 8006788:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800678c:	4b88      	ldr	r3, [pc, #544]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 800678e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1ea      	bne.n	800676e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8097 	beq.w	80068d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067a6:	2300      	movs	r3, #0
 80067a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067aa:	4b81      	ldr	r3, [pc, #516]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10f      	bne.n	80067d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b6:	2300      	movs	r3, #0
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	4b7d      	ldr	r3, [pc, #500]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 80067bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067be:	4a7c      	ldr	r2, [pc, #496]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 80067c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80067c6:	4b7a      	ldr	r3, [pc, #488]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ce:	60bb      	str	r3, [r7, #8]
 80067d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067d2:	2301      	movs	r3, #1
 80067d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d6:	4b77      	ldr	r3, [pc, #476]	@ (80069b4 <HAL_RCC_OscConfig+0x474>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d118      	bne.n	8006814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067e2:	4b74      	ldr	r3, [pc, #464]	@ (80069b4 <HAL_RCC_OscConfig+0x474>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a73      	ldr	r2, [pc, #460]	@ (80069b4 <HAL_RCC_OscConfig+0x474>)
 80067e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ee:	f7fc fb69 	bl	8002ec4 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f6:	f7fc fb65 	bl	8002ec4 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e10c      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006808:	4b6a      	ldr	r3, [pc, #424]	@ (80069b4 <HAL_RCC_OscConfig+0x474>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f0      	beq.n	80067f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d106      	bne.n	800682a <HAL_RCC_OscConfig+0x2ea>
 800681c:	4b64      	ldr	r3, [pc, #400]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006820:	4a63      	ldr	r2, [pc, #396]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6713      	str	r3, [r2, #112]	@ 0x70
 8006828:	e01c      	b.n	8006864 <HAL_RCC_OscConfig+0x324>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b05      	cmp	r3, #5
 8006830:	d10c      	bne.n	800684c <HAL_RCC_OscConfig+0x30c>
 8006832:	4b5f      	ldr	r3, [pc, #380]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 8006834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006836:	4a5e      	ldr	r2, [pc, #376]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 8006838:	f043 0304 	orr.w	r3, r3, #4
 800683c:	6713      	str	r3, [r2, #112]	@ 0x70
 800683e:	4b5c      	ldr	r3, [pc, #368]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006842:	4a5b      	ldr	r2, [pc, #364]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 8006844:	f043 0301 	orr.w	r3, r3, #1
 8006848:	6713      	str	r3, [r2, #112]	@ 0x70
 800684a:	e00b      	b.n	8006864 <HAL_RCC_OscConfig+0x324>
 800684c:	4b58      	ldr	r3, [pc, #352]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 800684e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006850:	4a57      	ldr	r2, [pc, #348]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	6713      	str	r3, [r2, #112]	@ 0x70
 8006858:	4b55      	ldr	r3, [pc, #340]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 800685a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685c:	4a54      	ldr	r2, [pc, #336]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 800685e:	f023 0304 	bic.w	r3, r3, #4
 8006862:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d015      	beq.n	8006898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686c:	f7fc fb2a 	bl	8002ec4 <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006872:	e00a      	b.n	800688a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006874:	f7fc fb26 	bl	8002ec4 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006882:	4293      	cmp	r3, r2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e0cb      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800688a:	4b49      	ldr	r3, [pc, #292]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 800688c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0ee      	beq.n	8006874 <HAL_RCC_OscConfig+0x334>
 8006896:	e014      	b.n	80068c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006898:	f7fc fb14 	bl	8002ec4 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a0:	f7fc fb10 	bl	8002ec4 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0b5      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068b6:	4b3e      	ldr	r3, [pc, #248]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1ee      	bne.n	80068a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d105      	bne.n	80068d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068c8:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 80068ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068cc:	4a38      	ldr	r2, [pc, #224]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 80068ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 80a1 	beq.w	8006a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068de:	4b34      	ldr	r3, [pc, #208]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d05c      	beq.n	80069a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d141      	bne.n	8006976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f2:	4b31      	ldr	r3, [pc, #196]	@ (80069b8 <HAL_RCC_OscConfig+0x478>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f8:	f7fc fae4 	bl	8002ec4 <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006900:	f7fc fae0 	bl	8002ec4 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e087      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006912:	4b27      	ldr	r3, [pc, #156]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69da      	ldr	r2, [r3, #28]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	019b      	lsls	r3, r3, #6
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006934:	085b      	lsrs	r3, r3, #1
 8006936:	3b01      	subs	r3, #1
 8006938:	041b      	lsls	r3, r3, #16
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	491b      	ldr	r1, [pc, #108]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 8006944:	4313      	orrs	r3, r2
 8006946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006948:	4b1b      	ldr	r3, [pc, #108]	@ (80069b8 <HAL_RCC_OscConfig+0x478>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694e:	f7fc fab9 	bl	8002ec4 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006956:	f7fc fab5 	bl	8002ec4 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e05c      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006968:	4b11      	ldr	r3, [pc, #68]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCC_OscConfig+0x416>
 8006974:	e054      	b.n	8006a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006976:	4b10      	ldr	r3, [pc, #64]	@ (80069b8 <HAL_RCC_OscConfig+0x478>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800697c:	f7fc faa2 	bl	8002ec4 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006984:	f7fc fa9e 	bl	8002ec4 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e045      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006996:	4b06      	ldr	r3, [pc, #24]	@ (80069b0 <HAL_RCC_OscConfig+0x470>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x444>
 80069a2:	e03d      	b.n	8006a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d107      	bne.n	80069bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e038      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
 80069b0:	40023800 	.word	0x40023800
 80069b4:	40007000 	.word	0x40007000
 80069b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069bc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a2c <HAL_RCC_OscConfig+0x4ec>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d028      	beq.n	8006a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d121      	bne.n	8006a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d11a      	bne.n	8006a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069ec:	4013      	ands	r3, r2
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d111      	bne.n	8006a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	3b01      	subs	r3, #1
 8006a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d001      	beq.n	8006a20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40023800 	.word	0x40023800

08006a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0cc      	b.n	8006bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a44:	4b68      	ldr	r3, [pc, #416]	@ (8006be8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d90c      	bls.n	8006a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a52:	4b65      	ldr	r3, [pc, #404]	@ (8006be8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5a:	4b63      	ldr	r3, [pc, #396]	@ (8006be8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d001      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0b8      	b.n	8006bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d020      	beq.n	8006aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a84:	4b59      	ldr	r3, [pc, #356]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4a58      	ldr	r2, [pc, #352]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a9c:	4b53      	ldr	r3, [pc, #332]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4a52      	ldr	r2, [pc, #328]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006aa2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aa8:	4b50      	ldr	r3, [pc, #320]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	494d      	ldr	r1, [pc, #308]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d044      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d107      	bne.n	8006ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ace:	4b47      	ldr	r3, [pc, #284]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d119      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e07f      	b.n	8006bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d003      	beq.n	8006aee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d107      	bne.n	8006afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aee:	4b3f      	ldr	r3, [pc, #252]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e06f      	b.n	8006bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afe:	4b3b      	ldr	r3, [pc, #236]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e067      	b.n	8006bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b0e:	4b37      	ldr	r3, [pc, #220]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f023 0203 	bic.w	r2, r3, #3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	4934      	ldr	r1, [pc, #208]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b20:	f7fc f9d0 	bl	8002ec4 <HAL_GetTick>
 8006b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b26:	e00a      	b.n	8006b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b28:	f7fc f9cc 	bl	8002ec4 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e04f      	b.n	8006bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 020c 	and.w	r2, r3, #12
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d1eb      	bne.n	8006b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b50:	4b25      	ldr	r3, [pc, #148]	@ (8006be8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d20c      	bcs.n	8006b78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b5e:	4b22      	ldr	r3, [pc, #136]	@ (8006be8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b66:	4b20      	ldr	r3, [pc, #128]	@ (8006be8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d001      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e032      	b.n	8006bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b84:	4b19      	ldr	r3, [pc, #100]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	4916      	ldr	r1, [pc, #88]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ba2:	4b12      	ldr	r3, [pc, #72]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	490e      	ldr	r1, [pc, #56]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bb6:	f000 f821 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bec <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	490a      	ldr	r1, [pc, #40]	@ (8006bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006bc8:	5ccb      	ldrb	r3, [r1, r3]
 8006bca:	fa22 f303 	lsr.w	r3, r2, r3
 8006bce:	4a09      	ldr	r2, [pc, #36]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006bd2:	4b09      	ldr	r3, [pc, #36]	@ (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fc f930 	bl	8002e3c <HAL_InitTick>

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40023c00 	.word	0x40023c00
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	0800a438 	.word	0x0800a438
 8006bf4:	2000000c 	.word	0x2000000c
 8006bf8:	20000010 	.word	0x20000010

08006bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c00:	b090      	sub	sp, #64	@ 0x40
 8006c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c14:	4b59      	ldr	r3, [pc, #356]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 030c 	and.w	r3, r3, #12
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d00d      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x40>
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	f200 80a1 	bhi.w	8006d68 <HAL_RCC_GetSysClockFreq+0x16c>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <HAL_RCC_GetSysClockFreq+0x34>
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d003      	beq.n	8006c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c2e:	e09b      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c30:	4b53      	ldr	r3, [pc, #332]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c34:	e09b      	b.n	8006d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c36:	4b53      	ldr	r3, [pc, #332]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c3a:	e098      	b.n	8006d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c46:	4b4d      	ldr	r3, [pc, #308]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d028      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c52:	4b4a      	ldr	r3, [pc, #296]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	099b      	lsrs	r3, r3, #6
 8006c58:	2200      	movs	r2, #0
 8006c5a:	623b      	str	r3, [r7, #32]
 8006c5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c64:	2100      	movs	r1, #0
 8006c66:	4b47      	ldr	r3, [pc, #284]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c68:	fb03 f201 	mul.w	r2, r3, r1
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	fb00 f303 	mul.w	r3, r0, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	4a43      	ldr	r2, [pc, #268]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c76:	fba0 1202 	umull	r1, r2, r0, r2
 8006c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c7c:	460a      	mov	r2, r1
 8006c7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c82:	4413      	add	r3, r2
 8006c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c88:	2200      	movs	r2, #0
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	61fa      	str	r2, [r7, #28]
 8006c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006c96:	f7f9 faf3 	bl	8000280 <__aeabi_uldivmod>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ca2:	e053      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ca4:	4b35      	ldr	r3, [pc, #212]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	099b      	lsrs	r3, r3, #6
 8006caa:	2200      	movs	r2, #0
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	617a      	str	r2, [r7, #20]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006cb6:	f04f 0b00 	mov.w	fp, #0
 8006cba:	4652      	mov	r2, sl
 8006cbc:	465b      	mov	r3, fp
 8006cbe:	f04f 0000 	mov.w	r0, #0
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	0159      	lsls	r1, r3, #5
 8006cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ccc:	0150      	lsls	r0, r2, #5
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	ebb2 080a 	subs.w	r8, r2, sl
 8006cd6:	eb63 090b 	sbc.w	r9, r3, fp
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ce6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006cea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006cee:	ebb2 0408 	subs.w	r4, r2, r8
 8006cf2:	eb63 0509 	sbc.w	r5, r3, r9
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	00eb      	lsls	r3, r5, #3
 8006d00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d04:	00e2      	lsls	r2, r4, #3
 8006d06:	4614      	mov	r4, r2
 8006d08:	461d      	mov	r5, r3
 8006d0a:	eb14 030a 	adds.w	r3, r4, sl
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	eb45 030b 	adc.w	r3, r5, fp
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d22:	4629      	mov	r1, r5
 8006d24:	028b      	lsls	r3, r1, #10
 8006d26:	4621      	mov	r1, r4
 8006d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	028a      	lsls	r2, r1, #10
 8006d30:	4610      	mov	r0, r2
 8006d32:	4619      	mov	r1, r3
 8006d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d36:	2200      	movs	r2, #0
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	60fa      	str	r2, [r7, #12]
 8006d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d40:	f7f9 fa9e 	bl	8000280 <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4613      	mov	r3, r2
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	0c1b      	lsrs	r3, r3, #16
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	3301      	adds	r3, #1
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d66:	e002      	b.n	8006d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d68:	4b05      	ldr	r3, [pc, #20]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3740      	adds	r7, #64	@ 0x40
 8006d74:	46bd      	mov	sp, r7
 8006d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	00f42400 	.word	0x00f42400
 8006d84:	017d7840 	.word	0x017d7840

08006d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d8c:	4b03      	ldr	r3, [pc, #12]	@ (8006d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	2000000c 	.word	0x2000000c

08006da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006da4:	f7ff fff0 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8006da8:	4602      	mov	r2, r0
 8006daa:	4b05      	ldr	r3, [pc, #20]	@ (8006dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	0a9b      	lsrs	r3, r3, #10
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	4903      	ldr	r1, [pc, #12]	@ (8006dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006db6:	5ccb      	ldrb	r3, [r1, r3]
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	0800a448 	.word	0x0800a448

08006dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d105      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d038      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006df0:	4b68      	ldr	r3, [pc, #416]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006df6:	f7fc f865 	bl	8002ec4 <HAL_GetTick>
 8006dfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dfc:	e008      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006dfe:	f7fc f861 	bl	8002ec4 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e0bd      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e10:	4b61      	ldr	r3, [pc, #388]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1f0      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	019b      	lsls	r3, r3, #6
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	071b      	lsls	r3, r3, #28
 8006e2e:	495a      	ldr	r1, [pc, #360]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e36:	4b57      	ldr	r3, [pc, #348]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e3c:	f7fc f842 	bl	8002ec4 <HAL_GetTick>
 8006e40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e44:	f7fc f83e 	bl	8002ec4 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e09a      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e56:	4b50      	ldr	r3, [pc, #320]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0f0      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 8083 	beq.w	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	4b48      	ldr	r3, [pc, #288]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e78:	4a47      	ldr	r2, [pc, #284]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e80:	4b45      	ldr	r3, [pc, #276]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e8c:	4b43      	ldr	r3, [pc, #268]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a42      	ldr	r2, [pc, #264]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e96:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e98:	f7fc f814 	bl	8002ec4 <HAL_GetTick>
 8006e9c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea0:	f7fc f810 	bl	8002ec4 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e06c      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ebe:	4b36      	ldr	r3, [pc, #216]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ec6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d02f      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d028      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006edc:	4b2e      	ldr	r3, [pc, #184]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ee4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ee8:	2201      	movs	r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eec:	4b2c      	ldr	r3, [pc, #176]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ef2:	4a29      	ldr	r2, [pc, #164]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ef8:	4b27      	ldr	r3, [pc, #156]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d114      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006f04:	f7fb ffde 	bl	8002ec4 <HAL_GetTick>
 8006f08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f0a:	e00a      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f0c:	f7fb ffda 	bl	8002ec4 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e034      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f22:	4b1d      	ldr	r3, [pc, #116]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0ee      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f3a:	d10d      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006f3c:	4b16      	ldr	r3, [pc, #88]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f50:	4911      	ldr	r1, [pc, #68]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	608b      	str	r3, [r1, #8]
 8006f56:	e005      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006f58:	4b0f      	ldr	r3, [pc, #60]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006f62:	6093      	str	r3, [r2, #8]
 8006f64:	4b0c      	ldr	r3, [pc, #48]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f70:	4909      	ldr	r1, [pc, #36]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	7d1a      	ldrb	r2, [r3, #20]
 8006f86:	4b07      	ldr	r3, [pc, #28]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006f88:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	42470068 	.word	0x42470068
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	40007000 	.word	0x40007000
 8006fa0:	42470e40 	.word	0x42470e40
 8006fa4:	424711e0 	.word	0x424711e0

08006fa8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e073      	b.n	80070a2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7f5b      	ldrb	r3, [r3, #29]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d105      	bne.n	8006fd0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fb f8c6 	bl	800215c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d055      	beq.n	8007090 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	22ca      	movs	r2, #202	@ 0xca
 8006fea:	625a      	str	r2, [r3, #36]	@ 0x24
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2253      	movs	r2, #83	@ 0x53
 8006ff2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fbd3 	bl	80077a0 <RTC_EnterInitMode>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d12c      	bne.n	800705e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007016:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6899      	ldr	r1, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68d2      	ldr	r2, [r2, #12]
 800703e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6919      	ldr	r1, [r3, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	041a      	lsls	r2, r3, #16
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fbda 	bl	800780e <RTC_ExitInitMode>
 800705a:	4603      	mov	r3, r0
 800705c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d110      	bne.n	8007086 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007072:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	22ff      	movs	r2, #255	@ 0xff
 800708c:	625a      	str	r2, [r3, #36]	@ 0x24
 800708e:	e001      	b.n	8007094 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d102      	bne.n	80070a0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80070aa:	b590      	push	{r4, r7, lr}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	7f1b      	ldrb	r3, [r3, #28]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_RTC_SetTime+0x1c>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e087      	b.n	80071d6 <HAL_RTC_SetTime+0x12c>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2202      	movs	r2, #2
 80070d0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d126      	bne.n	8007126 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2200      	movs	r2, #0
 80070ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fbb1 	bl	8007858 <RTC_ByteToBcd2>
 80070f6:	4603      	mov	r3, r0
 80070f8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fbaa 	bl	8007858 <RTC_ByteToBcd2>
 8007104:	4603      	mov	r3, r0
 8007106:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007108:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	789b      	ldrb	r3, [r3, #2]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fba2 	bl	8007858 <RTC_ByteToBcd2>
 8007114:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007116:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	78db      	ldrb	r3, [r3, #3]
 800711e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	e018      	b.n	8007158 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007146:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800714c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	78db      	ldrb	r3, [r3, #3]
 8007152:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	22ca      	movs	r2, #202	@ 0xca
 800715e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2253      	movs	r2, #83	@ 0x53
 8007166:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 fb19 	bl	80077a0 <RTC_EnterInitMode>
 800716e:	4603      	mov	r3, r0
 8007170:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007172:	7cfb      	ldrb	r3, [r7, #19]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d120      	bne.n	80071ba <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007182:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007186:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007196:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6899      	ldr	r1, [r3, #8]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 fb2c 	bl	800780e <RTC_ExitInitMode>
 80071b6:	4603      	mov	r3, r0
 80071b8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80071ba:	7cfb      	ldrb	r3, [r7, #19]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	22ff      	movs	r2, #255	@ 0xff
 80071cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	771a      	strb	r2, [r3, #28]

  return status;
 80071d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd90      	pop	{r4, r7, pc}

080071de <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007210:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007214:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007220:	b2da      	uxtb	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	0a1b      	lsrs	r3, r3, #8
 800722a:	b2db      	uxtb	r3, r3
 800722c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007230:	b2da      	uxtb	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800723e:	b2da      	uxtb	r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	0d9b      	lsrs	r3, r3, #22
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d11a      	bne.n	8007290 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fb18 	bl	8007894 <RTC_Bcd2ToByte>
 8007264:	4603      	mov	r3, r0
 8007266:	461a      	mov	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fb0f 	bl	8007894 <RTC_Bcd2ToByte>
 8007276:	4603      	mov	r3, r0
 8007278:	461a      	mov	r2, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	789b      	ldrb	r3, [r3, #2]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fb06 	bl	8007894 <RTC_Bcd2ToByte>
 8007288:	4603      	mov	r3, r0
 800728a:	461a      	mov	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800729a:	b590      	push	{r4, r7, lr}
 800729c:	b087      	sub	sp, #28
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	7f1b      	ldrb	r3, [r3, #28]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_RTC_SetDate+0x1c>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e071      	b.n	800739a <HAL_RTC_SetDate+0x100>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2201      	movs	r2, #1
 80072ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2202      	movs	r2, #2
 80072c0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10e      	bne.n	80072e6 <HAL_RTC_SetDate+0x4c>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	f023 0310 	bic.w	r3, r3, #16
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	330a      	adds	r3, #10
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11c      	bne.n	8007326 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	78db      	ldrb	r3, [r3, #3]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fab1 	bl	8007858 <RTC_ByteToBcd2>
 80072f6:	4603      	mov	r3, r0
 80072f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 faaa 	bl	8007858 <RTC_ByteToBcd2>
 8007304:	4603      	mov	r3, r0
 8007306:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007308:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	789b      	ldrb	r3, [r3, #2]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 faa2 	bl	8007858 <RTC_ByteToBcd2>
 8007314:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007316:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	e00e      	b.n	8007344 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	78db      	ldrb	r3, [r3, #3]
 800732a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007332:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007338:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	22ca      	movs	r2, #202	@ 0xca
 800734a:	625a      	str	r2, [r3, #36]	@ 0x24
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2253      	movs	r2, #83	@ 0x53
 8007352:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fa23 	bl	80077a0 <RTC_EnterInitMode>
 800735a:	4603      	mov	r3, r0
 800735c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800735e:	7cfb      	ldrb	r3, [r7, #19]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10c      	bne.n	800737e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800736e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007372:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 fa4a 	bl	800780e <RTC_ExitInitMode>
 800737a:	4603      	mov	r3, r0
 800737c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800737e:	7cfb      	ldrb	r3, [r7, #19]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	22ff      	movs	r2, #255	@ 0xff
 8007390:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	771a      	strb	r2, [r3, #28]

  return status;
 8007398:	7cfb      	ldrb	r3, [r7, #19]
}
 800739a:	4618      	mov	r0, r3
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd90      	pop	{r4, r7, pc}

080073a2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80073bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80073c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	0a1b      	lsrs	r3, r3, #8
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	0b5b      	lsrs	r3, r3, #13
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d11a      	bne.n	8007436 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	78db      	ldrb	r3, [r3, #3]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fa45 	bl	8007894 <RTC_Bcd2ToByte>
 800740a:	4603      	mov	r3, r0
 800740c:	461a      	mov	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fa3c 	bl	8007894 <RTC_Bcd2ToByte>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	789b      	ldrb	r3, [r3, #2]
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fa33 	bl	8007894 <RTC_Bcd2ToByte>
 800742e:	4603      	mov	r3, r0
 8007430:	461a      	mov	r2, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b089      	sub	sp, #36	@ 0x24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800744c:	4b9b      	ldr	r3, [pc, #620]	@ (80076bc <HAL_RTC_SetAlarm_IT+0x27c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a9b      	ldr	r2, [pc, #620]	@ (80076c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8007452:	fba2 2303 	umull	r2, r3, r2, r3
 8007456:	0adb      	lsrs	r3, r3, #11
 8007458:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800745c:	fb02 f303 	mul.w	r3, r2, r3
 8007460:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	7f1b      	ldrb	r3, [r3, #28]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_RTC_SetAlarm_IT+0x36>
 8007472:	2302      	movs	r3, #2
 8007474:	e11e      	b.n	80076b4 <HAL_RTC_SetAlarm_IT+0x274>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2202      	movs	r2, #2
 8007480:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d137      	bne.n	80074f8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2200      	movs	r2, #0
 800749a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 f9d9 	bl	8007858 <RTC_ByteToBcd2>
 80074a6:	4603      	mov	r3, r0
 80074a8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 f9d2 	bl	8007858 <RTC_ByteToBcd2>
 80074b4:	4603      	mov	r3, r0
 80074b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80074b8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	789b      	ldrb	r3, [r3, #2]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f9ca 	bl	8007858 <RTC_ByteToBcd2>
 80074c4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80074c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	78db      	ldrb	r3, [r3, #3]
 80074ce:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80074d0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f9bc 	bl	8007858 <RTC_ByteToBcd2>
 80074e0:	4603      	mov	r3, r0
 80074e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80074e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80074ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	e023      	b.n	8007540 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2200      	movs	r2, #0
 800750a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007518:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800751e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	78db      	ldrb	r3, [r3, #3]
 8007524:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007526:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800752e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8007530:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007536:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800753c:	4313      	orrs	r3, r2
 800753e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007548:	4313      	orrs	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	22ca      	movs	r2, #202	@ 0xca
 8007552:	625a      	str	r2, [r3, #36]	@ 0x24
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2253      	movs	r2, #83	@ 0x53
 800755a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007564:	d142      	bne.n	80075ec <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007574:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007586:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	3b01      	subs	r3, #1
 800758c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10b      	bne.n	80075ac <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	22ff      	movs	r2, #255	@ 0xff
 800759a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2203      	movs	r2, #3
 80075a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e083      	b.n	80076b4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0e6      	beq.n	8007588 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075d8:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075e8:	609a      	str	r2, [r3, #8]
 80075ea:	e04c      	b.n	8007686 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80075fa:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	b2da      	uxtb	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800760c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800760e:	4b2b      	ldr	r3, [pc, #172]	@ (80076bc <HAL_RTC_SetAlarm_IT+0x27c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2b      	ldr	r2, [pc, #172]	@ (80076c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8007614:	fba2 2303 	umull	r2, r3, r2, r3
 8007618:	0adb      	lsrs	r3, r3, #11
 800761a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	3b01      	subs	r3, #1
 8007628:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10b      	bne.n	8007648 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	22ff      	movs	r2, #255	@ 0xff
 8007636:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2203      	movs	r2, #3
 800763c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e035      	b.n	80076b4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0e6      	beq.n	8007624 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007674:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007684:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007686:	4b0f      	ldr	r3, [pc, #60]	@ (80076c4 <HAL_RTC_SetAlarm_IT+0x284>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a0e      	ldr	r2, [pc, #56]	@ (80076c4 <HAL_RTC_SetAlarm_IT+0x284>)
 800768c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007690:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007692:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <HAL_RTC_SetAlarm_IT+0x284>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	4a0b      	ldr	r2, [pc, #44]	@ (80076c4 <HAL_RTC_SetAlarm_IT+0x284>)
 8007698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800769c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	22ff      	movs	r2, #255	@ 0xff
 80076a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3724      	adds	r7, #36	@ 0x24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd90      	pop	{r4, r7, pc}
 80076bc:	2000000c 	.word	0x2000000c
 80076c0:	10624dd3 	.word	0x10624dd3
 80076c4:	40013c00 	.word	0x40013c00

080076c8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80076d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007750 <HAL_RTC_AlarmIRQHandler+0x88>)
 80076d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80076d6:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d012      	beq.n	800770c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007704:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fa ffe2 	bl	80026d0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d012      	beq.n	8007740 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	b2da      	uxtb	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007738:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f8c8 	bl	80078d0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	775a      	strb	r2, [r3, #29]
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40013c00 	.word	0x40013c00

08007754 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a0d      	ldr	r2, [pc, #52]	@ (800779c <HAL_RTC_WaitForSynchro+0x48>)
 8007766:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007768:	f7fb fbac 	bl	8002ec4 <HAL_GetTick>
 800776c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800776e:	e009      	b.n	8007784 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007770:	f7fb fba8 	bl	8002ec4 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800777e:	d901      	bls.n	8007784 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e007      	b.n	8007794 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0ee      	beq.n	8007770 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	00013f5f 	.word	0x00013f5f

080077a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d122      	bne.n	8007804 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80077cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077ce:	f7fb fb79 	bl	8002ec4 <HAL_GetTick>
 80077d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80077d4:	e00c      	b.n	80077f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077d6:	f7fb fb75 	bl	8002ec4 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077e4:	d904      	bls.n	80077f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2204      	movs	r2, #4
 80077ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d102      	bne.n	8007804 <RTC_EnterInitMode+0x64>
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d1e8      	bne.n	80077d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007828:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff ff8b 	bl	8007754 <HAL_RTC_WaitForSynchro>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d004      	beq.n	800784e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2204      	movs	r2, #4
 8007848:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007866:	e005      	b.n	8007874 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3301      	adds	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	3b0a      	subs	r3, #10
 8007872:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	2b09      	cmp	r3, #9
 8007878:	d8f6      	bhi.n	8007868 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	b2da      	uxtb	r2, r3
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	4313      	orrs	r3, r2
 8007886:	b2db      	uxtb	r3, r3
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	091b      	lsrs	r3, r3, #4
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	4413      	add	r3, r2
 80078c2:	b2db      	uxtb	r3, r3
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e041      	b.n	800797a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fb f9d0 	bl	8002cb0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f000 fe96 	bl	8008654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <HAL_TIM_OC_Start_IT+0x28>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	bf14      	ite	ne
 80079a4:	2301      	movne	r3, #1
 80079a6:	2300      	moveq	r3, #0
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	e022      	b.n	80079f2 <HAL_TIM_OC_Start_IT+0x6e>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d109      	bne.n	80079c6 <HAL_TIM_OC_Start_IT+0x42>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	bf14      	ite	ne
 80079be:	2301      	movne	r3, #1
 80079c0:	2300      	moveq	r3, #0
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	e015      	b.n	80079f2 <HAL_TIM_OC_Start_IT+0x6e>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d109      	bne.n	80079e0 <HAL_TIM_OC_Start_IT+0x5c>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	bf14      	ite	ne
 80079d8:	2301      	movne	r3, #1
 80079da:	2300      	moveq	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	e008      	b.n	80079f2 <HAL_TIM_OC_Start_IT+0x6e>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	bf14      	ite	ne
 80079ec:	2301      	movne	r3, #1
 80079ee:	2300      	moveq	r3, #0
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e0b3      	b.n	8007b62 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d104      	bne.n	8007a0a <HAL_TIM_OC_Start_IT+0x86>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a08:	e013      	b.n	8007a32 <HAL_TIM_OC_Start_IT+0xae>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d104      	bne.n	8007a1a <HAL_TIM_OC_Start_IT+0x96>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a18:	e00b      	b.n	8007a32 <HAL_TIM_OC_Start_IT+0xae>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d104      	bne.n	8007a2a <HAL_TIM_OC_Start_IT+0xa6>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a28:	e003      	b.n	8007a32 <HAL_TIM_OC_Start_IT+0xae>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b0c      	cmp	r3, #12
 8007a36:	d841      	bhi.n	8007abc <HAL_TIM_OC_Start_IT+0x138>
 8007a38:	a201      	add	r2, pc, #4	@ (adr r2, 8007a40 <HAL_TIM_OC_Start_IT+0xbc>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007a75 	.word	0x08007a75
 8007a44:	08007abd 	.word	0x08007abd
 8007a48:	08007abd 	.word	0x08007abd
 8007a4c:	08007abd 	.word	0x08007abd
 8007a50:	08007a87 	.word	0x08007a87
 8007a54:	08007abd 	.word	0x08007abd
 8007a58:	08007abd 	.word	0x08007abd
 8007a5c:	08007abd 	.word	0x08007abd
 8007a60:	08007a99 	.word	0x08007a99
 8007a64:	08007abd 	.word	0x08007abd
 8007a68:	08007abd 	.word	0x08007abd
 8007a6c:	08007abd 	.word	0x08007abd
 8007a70:	08007aab 	.word	0x08007aab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0202 	orr.w	r2, r2, #2
 8007a82:	60da      	str	r2, [r3, #12]
      break;
 8007a84:	e01d      	b.n	8007ac2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0204 	orr.w	r2, r2, #4
 8007a94:	60da      	str	r2, [r3, #12]
      break;
 8007a96:	e014      	b.n	8007ac2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0208 	orr.w	r2, r2, #8
 8007aa6:	60da      	str	r2, [r3, #12]
      break;
 8007aa8:	e00b      	b.n	8007ac2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f042 0210 	orr.w	r2, r2, #16
 8007ab8:	60da      	str	r2, [r3, #12]
      break;
 8007aba:	e002      	b.n	8007ac2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d14b      	bne.n	8007b60 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2201      	movs	r2, #1
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 ffd1 	bl	8008a78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a24      	ldr	r2, [pc, #144]	@ (8007b6c <HAL_TIM_OC_Start_IT+0x1e8>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d107      	bne.n	8007af0 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007aee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b6c <HAL_TIM_OC_Start_IT+0x1e8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d018      	beq.n	8007b2c <HAL_TIM_OC_Start_IT+0x1a8>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b02:	d013      	beq.n	8007b2c <HAL_TIM_OC_Start_IT+0x1a8>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a19      	ldr	r2, [pc, #100]	@ (8007b70 <HAL_TIM_OC_Start_IT+0x1ec>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00e      	beq.n	8007b2c <HAL_TIM_OC_Start_IT+0x1a8>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a18      	ldr	r2, [pc, #96]	@ (8007b74 <HAL_TIM_OC_Start_IT+0x1f0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d009      	beq.n	8007b2c <HAL_TIM_OC_Start_IT+0x1a8>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a16      	ldr	r2, [pc, #88]	@ (8007b78 <HAL_TIM_OC_Start_IT+0x1f4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d004      	beq.n	8007b2c <HAL_TIM_OC_Start_IT+0x1a8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a15      	ldr	r2, [pc, #84]	@ (8007b7c <HAL_TIM_OC_Start_IT+0x1f8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d111      	bne.n	8007b50 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b06      	cmp	r3, #6
 8007b3c:	d010      	beq.n	8007b60 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4e:	e007      	b.n	8007b60 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	40010000 	.word	0x40010000
 8007b70:	40000400 	.word	0x40000400
 8007b74:	40000800 	.word	0x40000800
 8007b78:	40000c00 	.word	0x40000c00
 8007b7c:	40014000 	.word	0x40014000

08007b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e041      	b.n	8007c16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fb f85a 	bl	8002c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 fd48 	bl	8008654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <HAL_TIM_PWM_Start_IT+0x28>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	bf14      	ite	ne
 8007c40:	2301      	movne	r3, #1
 8007c42:	2300      	moveq	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	e022      	b.n	8007c8e <HAL_TIM_PWM_Start_IT+0x6e>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d109      	bne.n	8007c62 <HAL_TIM_PWM_Start_IT+0x42>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	bf14      	ite	ne
 8007c5a:	2301      	movne	r3, #1
 8007c5c:	2300      	moveq	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	e015      	b.n	8007c8e <HAL_TIM_PWM_Start_IT+0x6e>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d109      	bne.n	8007c7c <HAL_TIM_PWM_Start_IT+0x5c>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	bf14      	ite	ne
 8007c74:	2301      	movne	r3, #1
 8007c76:	2300      	moveq	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	e008      	b.n	8007c8e <HAL_TIM_PWM_Start_IT+0x6e>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	bf14      	ite	ne
 8007c88:	2301      	movne	r3, #1
 8007c8a:	2300      	moveq	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e0b3      	b.n	8007dfe <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d104      	bne.n	8007ca6 <HAL_TIM_PWM_Start_IT+0x86>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ca4:	e013      	b.n	8007cce <HAL_TIM_PWM_Start_IT+0xae>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d104      	bne.n	8007cb6 <HAL_TIM_PWM_Start_IT+0x96>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cb4:	e00b      	b.n	8007cce <HAL_TIM_PWM_Start_IT+0xae>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d104      	bne.n	8007cc6 <HAL_TIM_PWM_Start_IT+0xa6>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cc4:	e003      	b.n	8007cce <HAL_TIM_PWM_Start_IT+0xae>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b0c      	cmp	r3, #12
 8007cd2:	d841      	bhi.n	8007d58 <HAL_TIM_PWM_Start_IT+0x138>
 8007cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <HAL_TIM_PWM_Start_IT+0xbc>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007d11 	.word	0x08007d11
 8007ce0:	08007d59 	.word	0x08007d59
 8007ce4:	08007d59 	.word	0x08007d59
 8007ce8:	08007d59 	.word	0x08007d59
 8007cec:	08007d23 	.word	0x08007d23
 8007cf0:	08007d59 	.word	0x08007d59
 8007cf4:	08007d59 	.word	0x08007d59
 8007cf8:	08007d59 	.word	0x08007d59
 8007cfc:	08007d35 	.word	0x08007d35
 8007d00:	08007d59 	.word	0x08007d59
 8007d04:	08007d59 	.word	0x08007d59
 8007d08:	08007d59 	.word	0x08007d59
 8007d0c:	08007d47 	.word	0x08007d47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0202 	orr.w	r2, r2, #2
 8007d1e:	60da      	str	r2, [r3, #12]
      break;
 8007d20:	e01d      	b.n	8007d5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0204 	orr.w	r2, r2, #4
 8007d30:	60da      	str	r2, [r3, #12]
      break;
 8007d32:	e014      	b.n	8007d5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0208 	orr.w	r2, r2, #8
 8007d42:	60da      	str	r2, [r3, #12]
      break;
 8007d44:	e00b      	b.n	8007d5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0210 	orr.w	r2, r2, #16
 8007d54:	60da      	str	r2, [r3, #12]
      break;
 8007d56:	e002      	b.n	8007d5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d14b      	bne.n	8007dfc <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 fe83 	bl	8008a78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a24      	ldr	r2, [pc, #144]	@ (8007e08 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d107      	bne.n	8007d8c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d8a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1d      	ldr	r2, [pc, #116]	@ (8007e08 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d018      	beq.n	8007dc8 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d9e:	d013      	beq.n	8007dc8 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a19      	ldr	r2, [pc, #100]	@ (8007e0c <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00e      	beq.n	8007dc8 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a18      	ldr	r2, [pc, #96]	@ (8007e10 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d009      	beq.n	8007dc8 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a16      	ldr	r2, [pc, #88]	@ (8007e14 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d004      	beq.n	8007dc8 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a15      	ldr	r2, [pc, #84]	@ (8007e18 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d111      	bne.n	8007dec <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b06      	cmp	r3, #6
 8007dd8:	d010      	beq.n	8007dfc <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0201 	orr.w	r2, r2, #1
 8007de8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dea:	e007      	b.n	8007dfc <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	40010000 	.word	0x40010000
 8007e0c:	40000400 	.word	0x40000400
 8007e10:	40000800 	.word	0x40000800
 8007e14:	40000c00 	.word	0x40000c00
 8007e18:	40014000 	.word	0x40014000

08007e1c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b0c      	cmp	r3, #12
 8007e2e:	d841      	bhi.n	8007eb4 <HAL_TIM_PWM_Stop_IT+0x98>
 8007e30:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e6d 	.word	0x08007e6d
 8007e3c:	08007eb5 	.word	0x08007eb5
 8007e40:	08007eb5 	.word	0x08007eb5
 8007e44:	08007eb5 	.word	0x08007eb5
 8007e48:	08007e7f 	.word	0x08007e7f
 8007e4c:	08007eb5 	.word	0x08007eb5
 8007e50:	08007eb5 	.word	0x08007eb5
 8007e54:	08007eb5 	.word	0x08007eb5
 8007e58:	08007e91 	.word	0x08007e91
 8007e5c:	08007eb5 	.word	0x08007eb5
 8007e60:	08007eb5 	.word	0x08007eb5
 8007e64:	08007eb5 	.word	0x08007eb5
 8007e68:	08007ea3 	.word	0x08007ea3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0202 	bic.w	r2, r2, #2
 8007e7a:	60da      	str	r2, [r3, #12]
      break;
 8007e7c:	e01d      	b.n	8007eba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0204 	bic.w	r2, r2, #4
 8007e8c:	60da      	str	r2, [r3, #12]
      break;
 8007e8e:	e014      	b.n	8007eba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0208 	bic.w	r2, r2, #8
 8007e9e:	60da      	str	r2, [r3, #12]
      break;
 8007ea0:	e00b      	b.n	8007eba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0210 	bic.w	r2, r2, #16
 8007eb0:	60da      	str	r2, [r3, #12]
      break;
 8007eb2:	e002      	b.n	8007eba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d157      	bne.n	8007f70 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fdd5 	bl	8008a78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8007f7c <HAL_TIM_PWM_Stop_IT+0x160>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d117      	bne.n	8007f08 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6a1a      	ldr	r2, [r3, #32]
 8007ede:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10f      	bne.n	8007f08 <HAL_TIM_PWM_Stop_IT+0xec>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6a1a      	ldr	r2, [r3, #32]
 8007eee:	f240 4344 	movw	r3, #1092	@ 0x444
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d107      	bne.n	8007f08 <HAL_TIM_PWM_Stop_IT+0xec>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f06:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a1a      	ldr	r2, [r3, #32]
 8007f0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007f12:	4013      	ands	r3, r2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10f      	bne.n	8007f38 <HAL_TIM_PWM_Stop_IT+0x11c>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6a1a      	ldr	r2, [r3, #32]
 8007f1e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007f22:	4013      	ands	r3, r2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <HAL_TIM_PWM_Stop_IT+0x11c>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d104      	bne.n	8007f48 <HAL_TIM_PWM_Stop_IT+0x12c>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f46:	e013      	b.n	8007f70 <HAL_TIM_PWM_Stop_IT+0x154>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d104      	bne.n	8007f58 <HAL_TIM_PWM_Stop_IT+0x13c>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f56:	e00b      	b.n	8007f70 <HAL_TIM_PWM_Stop_IT+0x154>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d104      	bne.n	8007f68 <HAL_TIM_PWM_Stop_IT+0x14c>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f66:	e003      	b.n	8007f70 <HAL_TIM_PWM_Stop_IT+0x154>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000

08007f80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e097      	b.n	80080c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d106      	bne.n	8007fae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7fa fdcd 	bl	8002b48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fc4:	f023 0307 	bic.w	r3, r3, #7
 8007fc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f000 fb3d 	bl	8008654 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008002:	f023 0303 	bic.w	r3, r3, #3
 8008006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	021b      	lsls	r3, r3, #8
 8008012:	4313      	orrs	r3, r2
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008020:	f023 030c 	bic.w	r3, r3, #12
 8008024:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800802c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	4313      	orrs	r3, r2
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4313      	orrs	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	011a      	lsls	r2, r3, #4
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	031b      	lsls	r3, r3, #12
 8008050:	4313      	orrs	r3, r2
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800805e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008066:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	4313      	orrs	r3, r2
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80080f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d110      	bne.n	800811e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d102      	bne.n	8008108 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008102:	7b7b      	ldrb	r3, [r7, #13]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d001      	beq.n	800810c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e069      	b.n	80081e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800811c:	e031      	b.n	8008182 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b04      	cmp	r3, #4
 8008122:	d110      	bne.n	8008146 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d102      	bne.n	8008130 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800812a:	7b3b      	ldrb	r3, [r7, #12]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d001      	beq.n	8008134 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e055      	b.n	80081e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008144:	e01d      	b.n	8008182 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d108      	bne.n	800815e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d105      	bne.n	800815e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008152:	7b7b      	ldrb	r3, [r7, #13]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d102      	bne.n	800815e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008158:	7b3b      	ldrb	r3, [r7, #12]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d001      	beq.n	8008162 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e03e      	b.n	80081e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2202      	movs	r2, #2
 800816e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2202      	movs	r2, #2
 8008176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2202      	movs	r2, #2
 800817e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <HAL_TIM_Encoder_Start+0xc4>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b04      	cmp	r3, #4
 800818c:	d008      	beq.n	80081a0 <HAL_TIM_Encoder_Start+0xd4>
 800818e:	e00f      	b.n	80081b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2201      	movs	r2, #1
 8008196:	2100      	movs	r1, #0
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fc6d 	bl	8008a78 <TIM_CCxChannelCmd>
      break;
 800819e:	e016      	b.n	80081ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2201      	movs	r2, #1
 80081a6:	2104      	movs	r1, #4
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fc65 	bl	8008a78 <TIM_CCxChannelCmd>
      break;
 80081ae:	e00e      	b.n	80081ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2201      	movs	r2, #1
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fc5d 	bl	8008a78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2201      	movs	r2, #1
 80081c4:	2104      	movs	r1, #4
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fc56 	bl	8008a78 <TIM_CCxChannelCmd>
      break;
 80081cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0201 	orr.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d020      	beq.n	800824c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01b      	beq.n	800824c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0202 	mvn.w	r2, #2
 800821c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f9fa 	bl	800862c <HAL_TIM_IC_CaptureCallback>
 8008238:	e005      	b.n	8008246 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f9ec 	bl	8008618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fa f927 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d020      	beq.n	8008298 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01b      	beq.n	8008298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f06f 0204 	mvn.w	r2, #4
 8008268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f9d4 	bl	800862c <HAL_TIM_IC_CaptureCallback>
 8008284:	e005      	b.n	8008292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f9c6 	bl	8008618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7fa f901 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d020      	beq.n	80082e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01b      	beq.n	80082e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0208 	mvn.w	r2, #8
 80082b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2204      	movs	r2, #4
 80082ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f9ae 	bl	800862c <HAL_TIM_IC_CaptureCallback>
 80082d0:	e005      	b.n	80082de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f9a0 	bl	8008618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7fa f8db 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f003 0310 	and.w	r3, r3, #16
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d020      	beq.n	8008330 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01b      	beq.n	8008330 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0210 	mvn.w	r2, #16
 8008300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2208      	movs	r2, #8
 8008306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f988 	bl	800862c <HAL_TIM_IC_CaptureCallback>
 800831c:	e005      	b.n	800832a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f97a 	bl	8008618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7fa f8b5 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00c      	beq.n	8008354 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d007      	beq.n	8008354 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0201 	mvn.w	r2, #1
 800834c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f958 	bl	8008604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00c      	beq.n	8008378 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fc1e 	bl	8008bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00c      	beq.n	800839c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008388:	2b00      	cmp	r3, #0
 800838a:	d007      	beq.n	800839c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f952 	bl	8008640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f003 0320 	and.w	r3, r3, #32
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00c      	beq.n	80083c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f06f 0220 	mvn.w	r2, #32
 80083b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fbf0 	bl	8008ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083c0:	bf00      	nop
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e048      	b.n	8008478 <HAL_TIM_OC_ConfigChannel+0xb0>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b0c      	cmp	r3, #12
 80083f2:	d839      	bhi.n	8008468 <HAL_TIM_OC_ConfigChannel+0xa0>
 80083f4:	a201      	add	r2, pc, #4	@ (adr r2, 80083fc <HAL_TIM_OC_ConfigChannel+0x34>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	08008431 	.word	0x08008431
 8008400:	08008469 	.word	0x08008469
 8008404:	08008469 	.word	0x08008469
 8008408:	08008469 	.word	0x08008469
 800840c:	0800843f 	.word	0x0800843f
 8008410:	08008469 	.word	0x08008469
 8008414:	08008469 	.word	0x08008469
 8008418:	08008469 	.word	0x08008469
 800841c:	0800844d 	.word	0x0800844d
 8008420:	08008469 	.word	0x08008469
 8008424:	08008469 	.word	0x08008469
 8008428:	08008469 	.word	0x08008469
 800842c:	0800845b 	.word	0x0800845b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68b9      	ldr	r1, [r7, #8]
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f992 	bl	8008760 <TIM_OC1_SetConfig>
      break;
 800843c:	e017      	b.n	800846e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f9f1 	bl	800882c <TIM_OC2_SetConfig>
      break;
 800844a:	e010      	b.n	800846e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fa56 	bl	8008904 <TIM_OC3_SetConfig>
      break;
 8008458:	e009      	b.n	800846e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fab9 	bl	80089d8 <TIM_OC4_SetConfig>
      break;
 8008466:	e002      	b.n	800846e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	75fb      	strb	r3, [r7, #23]
      break;
 800846c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800849a:	2302      	movs	r3, #2
 800849c:	e0ae      	b.n	80085fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b0c      	cmp	r3, #12
 80084aa:	f200 809f 	bhi.w	80085ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084ae:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084e9 	.word	0x080084e9
 80084b8:	080085ed 	.word	0x080085ed
 80084bc:	080085ed 	.word	0x080085ed
 80084c0:	080085ed 	.word	0x080085ed
 80084c4:	08008529 	.word	0x08008529
 80084c8:	080085ed 	.word	0x080085ed
 80084cc:	080085ed 	.word	0x080085ed
 80084d0:	080085ed 	.word	0x080085ed
 80084d4:	0800856b 	.word	0x0800856b
 80084d8:	080085ed 	.word	0x080085ed
 80084dc:	080085ed 	.word	0x080085ed
 80084e0:	080085ed 	.word	0x080085ed
 80084e4:	080085ab 	.word	0x080085ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f936 	bl	8008760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699a      	ldr	r2, [r3, #24]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0208 	orr.w	r2, r2, #8
 8008502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699a      	ldr	r2, [r3, #24]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0204 	bic.w	r2, r2, #4
 8008512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6999      	ldr	r1, [r3, #24]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	691a      	ldr	r2, [r3, #16]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	619a      	str	r2, [r3, #24]
      break;
 8008526:	e064      	b.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f97c 	bl	800882c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	699a      	ldr	r2, [r3, #24]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699a      	ldr	r2, [r3, #24]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6999      	ldr	r1, [r3, #24]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	021a      	lsls	r2, r3, #8
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	619a      	str	r2, [r3, #24]
      break;
 8008568:	e043      	b.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68b9      	ldr	r1, [r7, #8]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f9c7 	bl	8008904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	69da      	ldr	r2, [r3, #28]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f042 0208 	orr.w	r2, r2, #8
 8008584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69da      	ldr	r2, [r3, #28]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0204 	bic.w	r2, r2, #4
 8008594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69d9      	ldr	r1, [r3, #28]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	61da      	str	r2, [r3, #28]
      break;
 80085a8:	e023      	b.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fa11 	bl	80089d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69da      	ldr	r2, [r3, #28]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69d9      	ldr	r1, [r3, #28]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	021a      	lsls	r2, r3, #8
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	61da      	str	r2, [r3, #28]
      break;
 80085ea:	e002      	b.n	80085f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	75fb      	strb	r3, [r7, #23]
      break;
 80085f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a37      	ldr	r2, [pc, #220]	@ (8008744 <TIM_Base_SetConfig+0xf0>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00f      	beq.n	800868c <TIM_Base_SetConfig+0x38>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008672:	d00b      	beq.n	800868c <TIM_Base_SetConfig+0x38>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a34      	ldr	r2, [pc, #208]	@ (8008748 <TIM_Base_SetConfig+0xf4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d007      	beq.n	800868c <TIM_Base_SetConfig+0x38>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a33      	ldr	r2, [pc, #204]	@ (800874c <TIM_Base_SetConfig+0xf8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d003      	beq.n	800868c <TIM_Base_SetConfig+0x38>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a32      	ldr	r2, [pc, #200]	@ (8008750 <TIM_Base_SetConfig+0xfc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d108      	bne.n	800869e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	4313      	orrs	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a28      	ldr	r2, [pc, #160]	@ (8008744 <TIM_Base_SetConfig+0xf0>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01b      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ac:	d017      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a25      	ldr	r2, [pc, #148]	@ (8008748 <TIM_Base_SetConfig+0xf4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d013      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a24      	ldr	r2, [pc, #144]	@ (800874c <TIM_Base_SetConfig+0xf8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d00f      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a23      	ldr	r2, [pc, #140]	@ (8008750 <TIM_Base_SetConfig+0xfc>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00b      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a22      	ldr	r2, [pc, #136]	@ (8008754 <TIM_Base_SetConfig+0x100>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d007      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a21      	ldr	r2, [pc, #132]	@ (8008758 <TIM_Base_SetConfig+0x104>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d003      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a20      	ldr	r2, [pc, #128]	@ (800875c <TIM_Base_SetConfig+0x108>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d108      	bne.n	80086f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a0c      	ldr	r2, [pc, #48]	@ (8008744 <TIM_Base_SetConfig+0xf0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d103      	bne.n	800871e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f043 0204 	orr.w	r2, r3, #4
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	601a      	str	r2, [r3, #0]
}
 8008736:	bf00      	nop
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	40010000 	.word	0x40010000
 8008748:	40000400 	.word	0x40000400
 800874c:	40000800 	.word	0x40000800
 8008750:	40000c00 	.word	0x40000c00
 8008754:	40014000 	.word	0x40014000
 8008758:	40014400 	.word	0x40014400
 800875c:	40014800 	.word	0x40014800

08008760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	f023 0201 	bic.w	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f023 0303 	bic.w	r3, r3, #3
 8008796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f023 0302 	bic.w	r3, r3, #2
 80087a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008828 <TIM_OC1_SetConfig+0xc8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d10c      	bne.n	80087d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f023 0308 	bic.w	r3, r3, #8
 80087c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f023 0304 	bic.w	r3, r3, #4
 80087d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a13      	ldr	r2, [pc, #76]	@ (8008828 <TIM_OC1_SetConfig+0xc8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d111      	bne.n	8008802 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	4313      	orrs	r3, r2
 8008800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	621a      	str	r2, [r3, #32]
}
 800881c:	bf00      	nop
 800881e:	371c      	adds	r7, #28
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	40010000 	.word	0x40010000

0800882c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	f023 0210 	bic.w	r2, r3, #16
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800885a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f023 0320 	bic.w	r3, r3, #32
 8008876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a1e      	ldr	r2, [pc, #120]	@ (8008900 <TIM_OC2_SetConfig+0xd4>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d10d      	bne.n	80088a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	011b      	lsls	r3, r3, #4
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	4313      	orrs	r3, r2
 800889e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a15      	ldr	r2, [pc, #84]	@ (8008900 <TIM_OC2_SetConfig+0xd4>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d113      	bne.n	80088d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40010000 	.word	0x40010000

08008904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0303 	bic.w	r3, r3, #3
 800893a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800894c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a1d      	ldr	r2, [pc, #116]	@ (80089d4 <TIM_OC3_SetConfig+0xd0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d10d      	bne.n	800897e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	021b      	lsls	r3, r3, #8
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800897c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a14      	ldr	r2, [pc, #80]	@ (80089d4 <TIM_OC3_SetConfig+0xd0>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d113      	bne.n	80089ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800898c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	621a      	str	r2, [r3, #32]
}
 80089c8:	bf00      	nop
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40010000 	.word	0x40010000

080089d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	031b      	lsls	r3, r3, #12
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a10      	ldr	r2, [pc, #64]	@ (8008a74 <TIM_OC4_SetConfig+0x9c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d109      	bne.n	8008a4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	019b      	lsls	r3, r3, #6
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	621a      	str	r2, [r3, #32]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	40010000 	.word	0x40010000

08008a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f003 031f 	and.w	r3, r3, #31
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6a1a      	ldr	r2, [r3, #32]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	43db      	mvns	r3, r3
 8008a9a:	401a      	ands	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a1a      	ldr	r2, [r3, #32]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 031f 	and.w	r3, r3, #31
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	621a      	str	r2, [r3, #32]
}
 8008ab6:	bf00      	nop
 8008ab8:	371c      	adds	r7, #28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
	...

08008ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e050      	b.n	8008b7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d018      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b28:	d013      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a18      	ldr	r2, [pc, #96]	@ (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00e      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a16      	ldr	r2, [pc, #88]	@ (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d009      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a15      	ldr	r2, [pc, #84]	@ (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d004      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a13      	ldr	r2, [pc, #76]	@ (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d10c      	bne.n	8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	40010000 	.word	0x40010000
 8008b90:	40000400 	.word	0x40000400
 8008b94:	40000800 	.word	0x40000800
 8008b98:	40000c00 	.word	0x40000c00
 8008b9c:	40014000 	.word	0x40014000

08008ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <malloc>:
 8008bc8:	4b02      	ldr	r3, [pc, #8]	@ (8008bd4 <malloc+0xc>)
 8008bca:	4601      	mov	r1, r0
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	f000 b825 	b.w	8008c1c <_malloc_r>
 8008bd2:	bf00      	nop
 8008bd4:	20000024 	.word	0x20000024

08008bd8 <sbrk_aligned>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	4e0f      	ldr	r6, [pc, #60]	@ (8008c18 <sbrk_aligned+0x40>)
 8008bdc:	460c      	mov	r4, r1
 8008bde:	6831      	ldr	r1, [r6, #0]
 8008be0:	4605      	mov	r5, r0
 8008be2:	b911      	cbnz	r1, 8008bea <sbrk_aligned+0x12>
 8008be4:	f000 fa1c 	bl	8009020 <_sbrk_r>
 8008be8:	6030      	str	r0, [r6, #0]
 8008bea:	4621      	mov	r1, r4
 8008bec:	4628      	mov	r0, r5
 8008bee:	f000 fa17 	bl	8009020 <_sbrk_r>
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	d103      	bne.n	8008bfe <sbrk_aligned+0x26>
 8008bf6:	f04f 34ff 	mov.w	r4, #4294967295
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
 8008bfe:	1cc4      	adds	r4, r0, #3
 8008c00:	f024 0403 	bic.w	r4, r4, #3
 8008c04:	42a0      	cmp	r0, r4
 8008c06:	d0f8      	beq.n	8008bfa <sbrk_aligned+0x22>
 8008c08:	1a21      	subs	r1, r4, r0
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 fa08 	bl	8009020 <_sbrk_r>
 8008c10:	3001      	adds	r0, #1
 8008c12:	d1f2      	bne.n	8008bfa <sbrk_aligned+0x22>
 8008c14:	e7ef      	b.n	8008bf6 <sbrk_aligned+0x1e>
 8008c16:	bf00      	nop
 8008c18:	200003b4 	.word	0x200003b4

08008c1c <_malloc_r>:
 8008c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c20:	1ccd      	adds	r5, r1, #3
 8008c22:	f025 0503 	bic.w	r5, r5, #3
 8008c26:	3508      	adds	r5, #8
 8008c28:	2d0c      	cmp	r5, #12
 8008c2a:	bf38      	it	cc
 8008c2c:	250c      	movcc	r5, #12
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	4606      	mov	r6, r0
 8008c32:	db01      	blt.n	8008c38 <_malloc_r+0x1c>
 8008c34:	42a9      	cmp	r1, r5
 8008c36:	d904      	bls.n	8008c42 <_malloc_r+0x26>
 8008c38:	230c      	movs	r3, #12
 8008c3a:	6033      	str	r3, [r6, #0]
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d18 <_malloc_r+0xfc>
 8008c46:	f000 f869 	bl	8008d1c <__malloc_lock>
 8008c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c4e:	461c      	mov	r4, r3
 8008c50:	bb44      	cbnz	r4, 8008ca4 <_malloc_r+0x88>
 8008c52:	4629      	mov	r1, r5
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff ffbf 	bl	8008bd8 <sbrk_aligned>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	d158      	bne.n	8008d12 <_malloc_r+0xf6>
 8008c60:	f8d8 4000 	ldr.w	r4, [r8]
 8008c64:	4627      	mov	r7, r4
 8008c66:	2f00      	cmp	r7, #0
 8008c68:	d143      	bne.n	8008cf2 <_malloc_r+0xd6>
 8008c6a:	2c00      	cmp	r4, #0
 8008c6c:	d04b      	beq.n	8008d06 <_malloc_r+0xea>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	4639      	mov	r1, r7
 8008c72:	4630      	mov	r0, r6
 8008c74:	eb04 0903 	add.w	r9, r4, r3
 8008c78:	f000 f9d2 	bl	8009020 <_sbrk_r>
 8008c7c:	4581      	cmp	r9, r0
 8008c7e:	d142      	bne.n	8008d06 <_malloc_r+0xea>
 8008c80:	6821      	ldr	r1, [r4, #0]
 8008c82:	1a6d      	subs	r5, r5, r1
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7ff ffa6 	bl	8008bd8 <sbrk_aligned>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d03a      	beq.n	8008d06 <_malloc_r+0xea>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	442b      	add	r3, r5
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	f8d8 3000 	ldr.w	r3, [r8]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	bb62      	cbnz	r2, 8008cf8 <_malloc_r+0xdc>
 8008c9e:	f8c8 7000 	str.w	r7, [r8]
 8008ca2:	e00f      	b.n	8008cc4 <_malloc_r+0xa8>
 8008ca4:	6822      	ldr	r2, [r4, #0]
 8008ca6:	1b52      	subs	r2, r2, r5
 8008ca8:	d420      	bmi.n	8008cec <_malloc_r+0xd0>
 8008caa:	2a0b      	cmp	r2, #11
 8008cac:	d917      	bls.n	8008cde <_malloc_r+0xc2>
 8008cae:	1961      	adds	r1, r4, r5
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	6025      	str	r5, [r4, #0]
 8008cb4:	bf18      	it	ne
 8008cb6:	6059      	strne	r1, [r3, #4]
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	bf08      	it	eq
 8008cbc:	f8c8 1000 	streq.w	r1, [r8]
 8008cc0:	5162      	str	r2, [r4, r5]
 8008cc2:	604b      	str	r3, [r1, #4]
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f000 f82f 	bl	8008d28 <__malloc_unlock>
 8008cca:	f104 000b 	add.w	r0, r4, #11
 8008cce:	1d23      	adds	r3, r4, #4
 8008cd0:	f020 0007 	bic.w	r0, r0, #7
 8008cd4:	1ac2      	subs	r2, r0, r3
 8008cd6:	bf1c      	itt	ne
 8008cd8:	1a1b      	subne	r3, r3, r0
 8008cda:	50a3      	strne	r3, [r4, r2]
 8008cdc:	e7af      	b.n	8008c3e <_malloc_r+0x22>
 8008cde:	6862      	ldr	r2, [r4, #4]
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	bf0c      	ite	eq
 8008ce4:	f8c8 2000 	streq.w	r2, [r8]
 8008ce8:	605a      	strne	r2, [r3, #4]
 8008cea:	e7eb      	b.n	8008cc4 <_malloc_r+0xa8>
 8008cec:	4623      	mov	r3, r4
 8008cee:	6864      	ldr	r4, [r4, #4]
 8008cf0:	e7ae      	b.n	8008c50 <_malloc_r+0x34>
 8008cf2:	463c      	mov	r4, r7
 8008cf4:	687f      	ldr	r7, [r7, #4]
 8008cf6:	e7b6      	b.n	8008c66 <_malloc_r+0x4a>
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	d1fb      	bne.n	8008cf8 <_malloc_r+0xdc>
 8008d00:	2300      	movs	r3, #0
 8008d02:	6053      	str	r3, [r2, #4]
 8008d04:	e7de      	b.n	8008cc4 <_malloc_r+0xa8>
 8008d06:	230c      	movs	r3, #12
 8008d08:	6033      	str	r3, [r6, #0]
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f000 f80c 	bl	8008d28 <__malloc_unlock>
 8008d10:	e794      	b.n	8008c3c <_malloc_r+0x20>
 8008d12:	6005      	str	r5, [r0, #0]
 8008d14:	e7d6      	b.n	8008cc4 <_malloc_r+0xa8>
 8008d16:	bf00      	nop
 8008d18:	200003b8 	.word	0x200003b8

08008d1c <__malloc_lock>:
 8008d1c:	4801      	ldr	r0, [pc, #4]	@ (8008d24 <__malloc_lock+0x8>)
 8008d1e:	f000 b9cc 	b.w	80090ba <__retarget_lock_acquire_recursive>
 8008d22:	bf00      	nop
 8008d24:	200004fc 	.word	0x200004fc

08008d28 <__malloc_unlock>:
 8008d28:	4801      	ldr	r0, [pc, #4]	@ (8008d30 <__malloc_unlock+0x8>)
 8008d2a:	f000 b9c7 	b.w	80090bc <__retarget_lock_release_recursive>
 8008d2e:	bf00      	nop
 8008d30:	200004fc 	.word	0x200004fc

08008d34 <std>:
 8008d34:	2300      	movs	r3, #0
 8008d36:	b510      	push	{r4, lr}
 8008d38:	4604      	mov	r4, r0
 8008d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d42:	6083      	str	r3, [r0, #8]
 8008d44:	8181      	strh	r1, [r0, #12]
 8008d46:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d48:	81c2      	strh	r2, [r0, #14]
 8008d4a:	6183      	str	r3, [r0, #24]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	2208      	movs	r2, #8
 8008d50:	305c      	adds	r0, #92	@ 0x5c
 8008d52:	f000 f928 	bl	8008fa6 <memset>
 8008d56:	4b0d      	ldr	r3, [pc, #52]	@ (8008d8c <std+0x58>)
 8008d58:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d90 <std+0x5c>)
 8008d5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d94 <std+0x60>)
 8008d60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d62:	4b0d      	ldr	r3, [pc, #52]	@ (8008d98 <std+0x64>)
 8008d64:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d66:	4b0d      	ldr	r3, [pc, #52]	@ (8008d9c <std+0x68>)
 8008d68:	6224      	str	r4, [r4, #32]
 8008d6a:	429c      	cmp	r4, r3
 8008d6c:	d006      	beq.n	8008d7c <std+0x48>
 8008d6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d72:	4294      	cmp	r4, r2
 8008d74:	d002      	beq.n	8008d7c <std+0x48>
 8008d76:	33d0      	adds	r3, #208	@ 0xd0
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	d105      	bne.n	8008d88 <std+0x54>
 8008d7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d84:	f000 b998 	b.w	80090b8 <__retarget_lock_init_recursive>
 8008d88:	bd10      	pop	{r4, pc}
 8008d8a:	bf00      	nop
 8008d8c:	08008f21 	.word	0x08008f21
 8008d90:	08008f43 	.word	0x08008f43
 8008d94:	08008f7b 	.word	0x08008f7b
 8008d98:	08008f9f 	.word	0x08008f9f
 8008d9c:	200003bc 	.word	0x200003bc

08008da0 <stdio_exit_handler>:
 8008da0:	4a02      	ldr	r2, [pc, #8]	@ (8008dac <stdio_exit_handler+0xc>)
 8008da2:	4903      	ldr	r1, [pc, #12]	@ (8008db0 <stdio_exit_handler+0x10>)
 8008da4:	4803      	ldr	r0, [pc, #12]	@ (8008db4 <stdio_exit_handler+0x14>)
 8008da6:	f000 b869 	b.w	8008e7c <_fwalk_sglue>
 8008daa:	bf00      	nop
 8008dac:	20000018 	.word	0x20000018
 8008db0:	08009aa9 	.word	0x08009aa9
 8008db4:	20000028 	.word	0x20000028

08008db8 <cleanup_stdio>:
 8008db8:	6841      	ldr	r1, [r0, #4]
 8008dba:	4b0c      	ldr	r3, [pc, #48]	@ (8008dec <cleanup_stdio+0x34>)
 8008dbc:	4299      	cmp	r1, r3
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	d001      	beq.n	8008dc8 <cleanup_stdio+0x10>
 8008dc4:	f000 fe70 	bl	8009aa8 <_fflush_r>
 8008dc8:	68a1      	ldr	r1, [r4, #8]
 8008dca:	4b09      	ldr	r3, [pc, #36]	@ (8008df0 <cleanup_stdio+0x38>)
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	d002      	beq.n	8008dd6 <cleanup_stdio+0x1e>
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 fe69 	bl	8009aa8 <_fflush_r>
 8008dd6:	68e1      	ldr	r1, [r4, #12]
 8008dd8:	4b06      	ldr	r3, [pc, #24]	@ (8008df4 <cleanup_stdio+0x3c>)
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	d004      	beq.n	8008de8 <cleanup_stdio+0x30>
 8008dde:	4620      	mov	r0, r4
 8008de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de4:	f000 be60 	b.w	8009aa8 <_fflush_r>
 8008de8:	bd10      	pop	{r4, pc}
 8008dea:	bf00      	nop
 8008dec:	200003bc 	.word	0x200003bc
 8008df0:	20000424 	.word	0x20000424
 8008df4:	2000048c 	.word	0x2000048c

08008df8 <global_stdio_init.part.0>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8008e28 <global_stdio_init.part.0+0x30>)
 8008dfc:	4c0b      	ldr	r4, [pc, #44]	@ (8008e2c <global_stdio_init.part.0+0x34>)
 8008dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8008e30 <global_stdio_init.part.0+0x38>)
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	4620      	mov	r0, r4
 8008e04:	2200      	movs	r2, #0
 8008e06:	2104      	movs	r1, #4
 8008e08:	f7ff ff94 	bl	8008d34 <std>
 8008e0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e10:	2201      	movs	r2, #1
 8008e12:	2109      	movs	r1, #9
 8008e14:	f7ff ff8e 	bl	8008d34 <std>
 8008e18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e22:	2112      	movs	r1, #18
 8008e24:	f7ff bf86 	b.w	8008d34 <std>
 8008e28:	200004f4 	.word	0x200004f4
 8008e2c:	200003bc 	.word	0x200003bc
 8008e30:	08008da1 	.word	0x08008da1

08008e34 <__sfp_lock_acquire>:
 8008e34:	4801      	ldr	r0, [pc, #4]	@ (8008e3c <__sfp_lock_acquire+0x8>)
 8008e36:	f000 b940 	b.w	80090ba <__retarget_lock_acquire_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	200004fd 	.word	0x200004fd

08008e40 <__sfp_lock_release>:
 8008e40:	4801      	ldr	r0, [pc, #4]	@ (8008e48 <__sfp_lock_release+0x8>)
 8008e42:	f000 b93b 	b.w	80090bc <__retarget_lock_release_recursive>
 8008e46:	bf00      	nop
 8008e48:	200004fd 	.word	0x200004fd

08008e4c <__sinit>:
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	4604      	mov	r4, r0
 8008e50:	f7ff fff0 	bl	8008e34 <__sfp_lock_acquire>
 8008e54:	6a23      	ldr	r3, [r4, #32]
 8008e56:	b11b      	cbz	r3, 8008e60 <__sinit+0x14>
 8008e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e5c:	f7ff bff0 	b.w	8008e40 <__sfp_lock_release>
 8008e60:	4b04      	ldr	r3, [pc, #16]	@ (8008e74 <__sinit+0x28>)
 8008e62:	6223      	str	r3, [r4, #32]
 8008e64:	4b04      	ldr	r3, [pc, #16]	@ (8008e78 <__sinit+0x2c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1f5      	bne.n	8008e58 <__sinit+0xc>
 8008e6c:	f7ff ffc4 	bl	8008df8 <global_stdio_init.part.0>
 8008e70:	e7f2      	b.n	8008e58 <__sinit+0xc>
 8008e72:	bf00      	nop
 8008e74:	08008db9 	.word	0x08008db9
 8008e78:	200004f4 	.word	0x200004f4

08008e7c <_fwalk_sglue>:
 8008e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e80:	4607      	mov	r7, r0
 8008e82:	4688      	mov	r8, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	2600      	movs	r6, #0
 8008e88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e8c:	f1b9 0901 	subs.w	r9, r9, #1
 8008e90:	d505      	bpl.n	8008e9e <_fwalk_sglue+0x22>
 8008e92:	6824      	ldr	r4, [r4, #0]
 8008e94:	2c00      	cmp	r4, #0
 8008e96:	d1f7      	bne.n	8008e88 <_fwalk_sglue+0xc>
 8008e98:	4630      	mov	r0, r6
 8008e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e9e:	89ab      	ldrh	r3, [r5, #12]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d907      	bls.n	8008eb4 <_fwalk_sglue+0x38>
 8008ea4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	d003      	beq.n	8008eb4 <_fwalk_sglue+0x38>
 8008eac:	4629      	mov	r1, r5
 8008eae:	4638      	mov	r0, r7
 8008eb0:	47c0      	blx	r8
 8008eb2:	4306      	orrs	r6, r0
 8008eb4:	3568      	adds	r5, #104	@ 0x68
 8008eb6:	e7e9      	b.n	8008e8c <_fwalk_sglue+0x10>

08008eb8 <iprintf>:
 8008eb8:	b40f      	push	{r0, r1, r2, r3}
 8008eba:	b507      	push	{r0, r1, r2, lr}
 8008ebc:	4906      	ldr	r1, [pc, #24]	@ (8008ed8 <iprintf+0x20>)
 8008ebe:	ab04      	add	r3, sp, #16
 8008ec0:	6808      	ldr	r0, [r1, #0]
 8008ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec6:	6881      	ldr	r1, [r0, #8]
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	f000 fac5 	bl	8009458 <_vfiprintf_r>
 8008ece:	b003      	add	sp, #12
 8008ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ed4:	b004      	add	sp, #16
 8008ed6:	4770      	bx	lr
 8008ed8:	20000024 	.word	0x20000024

08008edc <siprintf>:
 8008edc:	b40e      	push	{r1, r2, r3}
 8008ede:	b510      	push	{r4, lr}
 8008ee0:	b09d      	sub	sp, #116	@ 0x74
 8008ee2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008ee4:	9002      	str	r0, [sp, #8]
 8008ee6:	9006      	str	r0, [sp, #24]
 8008ee8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008eec:	480a      	ldr	r0, [pc, #40]	@ (8008f18 <siprintf+0x3c>)
 8008eee:	9107      	str	r1, [sp, #28]
 8008ef0:	9104      	str	r1, [sp, #16]
 8008ef2:	490a      	ldr	r1, [pc, #40]	@ (8008f1c <siprintf+0x40>)
 8008ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef8:	9105      	str	r1, [sp, #20]
 8008efa:	2400      	movs	r4, #0
 8008efc:	a902      	add	r1, sp, #8
 8008efe:	6800      	ldr	r0, [r0, #0]
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008f04:	f000 f982 	bl	800920c <_svfiprintf_r>
 8008f08:	9b02      	ldr	r3, [sp, #8]
 8008f0a:	701c      	strb	r4, [r3, #0]
 8008f0c:	b01d      	add	sp, #116	@ 0x74
 8008f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f12:	b003      	add	sp, #12
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20000024 	.word	0x20000024
 8008f1c:	ffff0208 	.word	0xffff0208

08008f20 <__sread>:
 8008f20:	b510      	push	{r4, lr}
 8008f22:	460c      	mov	r4, r1
 8008f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f28:	f000 f868 	bl	8008ffc <_read_r>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	bfab      	itete	ge
 8008f30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f32:	89a3      	ldrhlt	r3, [r4, #12]
 8008f34:	181b      	addge	r3, r3, r0
 8008f36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f3a:	bfac      	ite	ge
 8008f3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f3e:	81a3      	strhlt	r3, [r4, #12]
 8008f40:	bd10      	pop	{r4, pc}

08008f42 <__swrite>:
 8008f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	461f      	mov	r7, r3
 8008f48:	898b      	ldrh	r3, [r1, #12]
 8008f4a:	05db      	lsls	r3, r3, #23
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	4616      	mov	r6, r2
 8008f52:	d505      	bpl.n	8008f60 <__swrite+0x1e>
 8008f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f58:	2302      	movs	r3, #2
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f000 f83c 	bl	8008fd8 <_lseek_r>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	463b      	mov	r3, r7
 8008f70:	4628      	mov	r0, r5
 8008f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f76:	f000 b863 	b.w	8009040 <_write_r>

08008f7a <__sseek>:
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f82:	f000 f829 	bl	8008fd8 <_lseek_r>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	bf15      	itete	ne
 8008f8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f96:	81a3      	strheq	r3, [r4, #12]
 8008f98:	bf18      	it	ne
 8008f9a:	81a3      	strhne	r3, [r4, #12]
 8008f9c:	bd10      	pop	{r4, pc}

08008f9e <__sclose>:
 8008f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa2:	f000 b809 	b.w	8008fb8 <_close_r>

08008fa6 <memset>:
 8008fa6:	4402      	add	r2, r0
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d100      	bne.n	8008fb0 <memset+0xa>
 8008fae:	4770      	bx	lr
 8008fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb4:	e7f9      	b.n	8008faa <memset+0x4>
	...

08008fb8 <_close_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4d06      	ldr	r5, [pc, #24]	@ (8008fd4 <_close_r+0x1c>)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	602b      	str	r3, [r5, #0]
 8008fc4:	f7f9 fbdd 	bl	8002782 <_close>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_close_r+0x1a>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_close_r+0x1a>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	200004f8 	.word	0x200004f8

08008fd8 <_lseek_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4d07      	ldr	r5, [pc, #28]	@ (8008ff8 <_lseek_r+0x20>)
 8008fdc:	4604      	mov	r4, r0
 8008fde:	4608      	mov	r0, r1
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	602a      	str	r2, [r5, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f7f9 fbf2 	bl	80027d0 <_lseek>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d102      	bne.n	8008ff6 <_lseek_r+0x1e>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	b103      	cbz	r3, 8008ff6 <_lseek_r+0x1e>
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	200004f8 	.word	0x200004f8

08008ffc <_read_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4d07      	ldr	r5, [pc, #28]	@ (800901c <_read_r+0x20>)
 8009000:	4604      	mov	r4, r0
 8009002:	4608      	mov	r0, r1
 8009004:	4611      	mov	r1, r2
 8009006:	2200      	movs	r2, #0
 8009008:	602a      	str	r2, [r5, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	f7f9 fb80 	bl	8002710 <_read>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_read_r+0x1e>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_read_r+0x1e>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	200004f8 	.word	0x200004f8

08009020 <_sbrk_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d06      	ldr	r5, [pc, #24]	@ (800903c <_sbrk_r+0x1c>)
 8009024:	2300      	movs	r3, #0
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	602b      	str	r3, [r5, #0]
 800902c:	f7f9 fbde 	bl	80027ec <_sbrk>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_sbrk_r+0x1a>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_sbrk_r+0x1a>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	200004f8 	.word	0x200004f8

08009040 <_write_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d07      	ldr	r5, [pc, #28]	@ (8009060 <_write_r+0x20>)
 8009044:	4604      	mov	r4, r0
 8009046:	4608      	mov	r0, r1
 8009048:	4611      	mov	r1, r2
 800904a:	2200      	movs	r2, #0
 800904c:	602a      	str	r2, [r5, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	f7f9 fb7b 	bl	800274a <_write>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_write_r+0x1e>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_write_r+0x1e>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	200004f8 	.word	0x200004f8

08009064 <__errno>:
 8009064:	4b01      	ldr	r3, [pc, #4]	@ (800906c <__errno+0x8>)
 8009066:	6818      	ldr	r0, [r3, #0]
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	20000024 	.word	0x20000024

08009070 <__libc_init_array>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	4d0d      	ldr	r5, [pc, #52]	@ (80090a8 <__libc_init_array+0x38>)
 8009074:	4c0d      	ldr	r4, [pc, #52]	@ (80090ac <__libc_init_array+0x3c>)
 8009076:	1b64      	subs	r4, r4, r5
 8009078:	10a4      	asrs	r4, r4, #2
 800907a:	2600      	movs	r6, #0
 800907c:	42a6      	cmp	r6, r4
 800907e:	d109      	bne.n	8009094 <__libc_init_array+0x24>
 8009080:	4d0b      	ldr	r5, [pc, #44]	@ (80090b0 <__libc_init_array+0x40>)
 8009082:	4c0c      	ldr	r4, [pc, #48]	@ (80090b4 <__libc_init_array+0x44>)
 8009084:	f000 feae 	bl	8009de4 <_init>
 8009088:	1b64      	subs	r4, r4, r5
 800908a:	10a4      	asrs	r4, r4, #2
 800908c:	2600      	movs	r6, #0
 800908e:	42a6      	cmp	r6, r4
 8009090:	d105      	bne.n	800909e <__libc_init_array+0x2e>
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	f855 3b04 	ldr.w	r3, [r5], #4
 8009098:	4798      	blx	r3
 800909a:	3601      	adds	r6, #1
 800909c:	e7ee      	b.n	800907c <__libc_init_array+0xc>
 800909e:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a2:	4798      	blx	r3
 80090a4:	3601      	adds	r6, #1
 80090a6:	e7f2      	b.n	800908e <__libc_init_array+0x1e>
 80090a8:	0800a494 	.word	0x0800a494
 80090ac:	0800a494 	.word	0x0800a494
 80090b0:	0800a494 	.word	0x0800a494
 80090b4:	0800a498 	.word	0x0800a498

080090b8 <__retarget_lock_init_recursive>:
 80090b8:	4770      	bx	lr

080090ba <__retarget_lock_acquire_recursive>:
 80090ba:	4770      	bx	lr

080090bc <__retarget_lock_release_recursive>:
 80090bc:	4770      	bx	lr
	...

080090c0 <_free_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4605      	mov	r5, r0
 80090c4:	2900      	cmp	r1, #0
 80090c6:	d041      	beq.n	800914c <_free_r+0x8c>
 80090c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090cc:	1f0c      	subs	r4, r1, #4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfb8      	it	lt
 80090d2:	18e4      	addlt	r4, r4, r3
 80090d4:	f7ff fe22 	bl	8008d1c <__malloc_lock>
 80090d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009150 <_free_r+0x90>)
 80090da:	6813      	ldr	r3, [r2, #0]
 80090dc:	b933      	cbnz	r3, 80090ec <_free_r+0x2c>
 80090de:	6063      	str	r3, [r4, #4]
 80090e0:	6014      	str	r4, [r2, #0]
 80090e2:	4628      	mov	r0, r5
 80090e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e8:	f7ff be1e 	b.w	8008d28 <__malloc_unlock>
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	d908      	bls.n	8009102 <_free_r+0x42>
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	1821      	adds	r1, r4, r0
 80090f4:	428b      	cmp	r3, r1
 80090f6:	bf01      	itttt	eq
 80090f8:	6819      	ldreq	r1, [r3, #0]
 80090fa:	685b      	ldreq	r3, [r3, #4]
 80090fc:	1809      	addeq	r1, r1, r0
 80090fe:	6021      	streq	r1, [r4, #0]
 8009100:	e7ed      	b.n	80090de <_free_r+0x1e>
 8009102:	461a      	mov	r2, r3
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	b10b      	cbz	r3, 800910c <_free_r+0x4c>
 8009108:	42a3      	cmp	r3, r4
 800910a:	d9fa      	bls.n	8009102 <_free_r+0x42>
 800910c:	6811      	ldr	r1, [r2, #0]
 800910e:	1850      	adds	r0, r2, r1
 8009110:	42a0      	cmp	r0, r4
 8009112:	d10b      	bne.n	800912c <_free_r+0x6c>
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	4401      	add	r1, r0
 8009118:	1850      	adds	r0, r2, r1
 800911a:	4283      	cmp	r3, r0
 800911c:	6011      	str	r1, [r2, #0]
 800911e:	d1e0      	bne.n	80090e2 <_free_r+0x22>
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	6053      	str	r3, [r2, #4]
 8009126:	4408      	add	r0, r1
 8009128:	6010      	str	r0, [r2, #0]
 800912a:	e7da      	b.n	80090e2 <_free_r+0x22>
 800912c:	d902      	bls.n	8009134 <_free_r+0x74>
 800912e:	230c      	movs	r3, #12
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	e7d6      	b.n	80090e2 <_free_r+0x22>
 8009134:	6820      	ldr	r0, [r4, #0]
 8009136:	1821      	adds	r1, r4, r0
 8009138:	428b      	cmp	r3, r1
 800913a:	bf04      	itt	eq
 800913c:	6819      	ldreq	r1, [r3, #0]
 800913e:	685b      	ldreq	r3, [r3, #4]
 8009140:	6063      	str	r3, [r4, #4]
 8009142:	bf04      	itt	eq
 8009144:	1809      	addeq	r1, r1, r0
 8009146:	6021      	streq	r1, [r4, #0]
 8009148:	6054      	str	r4, [r2, #4]
 800914a:	e7ca      	b.n	80090e2 <_free_r+0x22>
 800914c:	bd38      	pop	{r3, r4, r5, pc}
 800914e:	bf00      	nop
 8009150:	200003b8 	.word	0x200003b8

08009154 <__ssputs_r>:
 8009154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009158:	688e      	ldr	r6, [r1, #8]
 800915a:	461f      	mov	r7, r3
 800915c:	42be      	cmp	r6, r7
 800915e:	680b      	ldr	r3, [r1, #0]
 8009160:	4682      	mov	sl, r0
 8009162:	460c      	mov	r4, r1
 8009164:	4690      	mov	r8, r2
 8009166:	d82d      	bhi.n	80091c4 <__ssputs_r+0x70>
 8009168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800916c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009170:	d026      	beq.n	80091c0 <__ssputs_r+0x6c>
 8009172:	6965      	ldr	r5, [r4, #20]
 8009174:	6909      	ldr	r1, [r1, #16]
 8009176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800917a:	eba3 0901 	sub.w	r9, r3, r1
 800917e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009182:	1c7b      	adds	r3, r7, #1
 8009184:	444b      	add	r3, r9
 8009186:	106d      	asrs	r5, r5, #1
 8009188:	429d      	cmp	r5, r3
 800918a:	bf38      	it	cc
 800918c:	461d      	movcc	r5, r3
 800918e:	0553      	lsls	r3, r2, #21
 8009190:	d527      	bpl.n	80091e2 <__ssputs_r+0x8e>
 8009192:	4629      	mov	r1, r5
 8009194:	f7ff fd42 	bl	8008c1c <_malloc_r>
 8009198:	4606      	mov	r6, r0
 800919a:	b360      	cbz	r0, 80091f6 <__ssputs_r+0xa2>
 800919c:	6921      	ldr	r1, [r4, #16]
 800919e:	464a      	mov	r2, r9
 80091a0:	f000 fd58 	bl	8009c54 <memcpy>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	6126      	str	r6, [r4, #16]
 80091b2:	6165      	str	r5, [r4, #20]
 80091b4:	444e      	add	r6, r9
 80091b6:	eba5 0509 	sub.w	r5, r5, r9
 80091ba:	6026      	str	r6, [r4, #0]
 80091bc:	60a5      	str	r5, [r4, #8]
 80091be:	463e      	mov	r6, r7
 80091c0:	42be      	cmp	r6, r7
 80091c2:	d900      	bls.n	80091c6 <__ssputs_r+0x72>
 80091c4:	463e      	mov	r6, r7
 80091c6:	6820      	ldr	r0, [r4, #0]
 80091c8:	4632      	mov	r2, r6
 80091ca:	4641      	mov	r1, r8
 80091cc:	f000 fd28 	bl	8009c20 <memmove>
 80091d0:	68a3      	ldr	r3, [r4, #8]
 80091d2:	1b9b      	subs	r3, r3, r6
 80091d4:	60a3      	str	r3, [r4, #8]
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	4433      	add	r3, r6
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	2000      	movs	r0, #0
 80091de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e2:	462a      	mov	r2, r5
 80091e4:	f000 fd44 	bl	8009c70 <_realloc_r>
 80091e8:	4606      	mov	r6, r0
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d1e0      	bne.n	80091b0 <__ssputs_r+0x5c>
 80091ee:	6921      	ldr	r1, [r4, #16]
 80091f0:	4650      	mov	r0, sl
 80091f2:	f7ff ff65 	bl	80090c0 <_free_r>
 80091f6:	230c      	movs	r3, #12
 80091f8:	f8ca 3000 	str.w	r3, [sl]
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009202:	81a3      	strh	r3, [r4, #12]
 8009204:	f04f 30ff 	mov.w	r0, #4294967295
 8009208:	e7e9      	b.n	80091de <__ssputs_r+0x8a>
	...

0800920c <_svfiprintf_r>:
 800920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	4698      	mov	r8, r3
 8009212:	898b      	ldrh	r3, [r1, #12]
 8009214:	061b      	lsls	r3, r3, #24
 8009216:	b09d      	sub	sp, #116	@ 0x74
 8009218:	4607      	mov	r7, r0
 800921a:	460d      	mov	r5, r1
 800921c:	4614      	mov	r4, r2
 800921e:	d510      	bpl.n	8009242 <_svfiprintf_r+0x36>
 8009220:	690b      	ldr	r3, [r1, #16]
 8009222:	b973      	cbnz	r3, 8009242 <_svfiprintf_r+0x36>
 8009224:	2140      	movs	r1, #64	@ 0x40
 8009226:	f7ff fcf9 	bl	8008c1c <_malloc_r>
 800922a:	6028      	str	r0, [r5, #0]
 800922c:	6128      	str	r0, [r5, #16]
 800922e:	b930      	cbnz	r0, 800923e <_svfiprintf_r+0x32>
 8009230:	230c      	movs	r3, #12
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	b01d      	add	sp, #116	@ 0x74
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923e:	2340      	movs	r3, #64	@ 0x40
 8009240:	616b      	str	r3, [r5, #20]
 8009242:	2300      	movs	r3, #0
 8009244:	9309      	str	r3, [sp, #36]	@ 0x24
 8009246:	2320      	movs	r3, #32
 8009248:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800924c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009250:	2330      	movs	r3, #48	@ 0x30
 8009252:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093f0 <_svfiprintf_r+0x1e4>
 8009256:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800925a:	f04f 0901 	mov.w	r9, #1
 800925e:	4623      	mov	r3, r4
 8009260:	469a      	mov	sl, r3
 8009262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009266:	b10a      	cbz	r2, 800926c <_svfiprintf_r+0x60>
 8009268:	2a25      	cmp	r2, #37	@ 0x25
 800926a:	d1f9      	bne.n	8009260 <_svfiprintf_r+0x54>
 800926c:	ebba 0b04 	subs.w	fp, sl, r4
 8009270:	d00b      	beq.n	800928a <_svfiprintf_r+0x7e>
 8009272:	465b      	mov	r3, fp
 8009274:	4622      	mov	r2, r4
 8009276:	4629      	mov	r1, r5
 8009278:	4638      	mov	r0, r7
 800927a:	f7ff ff6b 	bl	8009154 <__ssputs_r>
 800927e:	3001      	adds	r0, #1
 8009280:	f000 80a7 	beq.w	80093d2 <_svfiprintf_r+0x1c6>
 8009284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009286:	445a      	add	r2, fp
 8009288:	9209      	str	r2, [sp, #36]	@ 0x24
 800928a:	f89a 3000 	ldrb.w	r3, [sl]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 809f 	beq.w	80093d2 <_svfiprintf_r+0x1c6>
 8009294:	2300      	movs	r3, #0
 8009296:	f04f 32ff 	mov.w	r2, #4294967295
 800929a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800929e:	f10a 0a01 	add.w	sl, sl, #1
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	9307      	str	r3, [sp, #28]
 80092a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80092ac:	4654      	mov	r4, sl
 80092ae:	2205      	movs	r2, #5
 80092b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b4:	484e      	ldr	r0, [pc, #312]	@ (80093f0 <_svfiprintf_r+0x1e4>)
 80092b6:	f7f6 ff93 	bl	80001e0 <memchr>
 80092ba:	9a04      	ldr	r2, [sp, #16]
 80092bc:	b9d8      	cbnz	r0, 80092f6 <_svfiprintf_r+0xea>
 80092be:	06d0      	lsls	r0, r2, #27
 80092c0:	bf44      	itt	mi
 80092c2:	2320      	movmi	r3, #32
 80092c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092c8:	0711      	lsls	r1, r2, #28
 80092ca:	bf44      	itt	mi
 80092cc:	232b      	movmi	r3, #43	@ 0x2b
 80092ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092d2:	f89a 3000 	ldrb.w	r3, [sl]
 80092d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80092d8:	d015      	beq.n	8009306 <_svfiprintf_r+0xfa>
 80092da:	9a07      	ldr	r2, [sp, #28]
 80092dc:	4654      	mov	r4, sl
 80092de:	2000      	movs	r0, #0
 80092e0:	f04f 0c0a 	mov.w	ip, #10
 80092e4:	4621      	mov	r1, r4
 80092e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ea:	3b30      	subs	r3, #48	@ 0x30
 80092ec:	2b09      	cmp	r3, #9
 80092ee:	d94b      	bls.n	8009388 <_svfiprintf_r+0x17c>
 80092f0:	b1b0      	cbz	r0, 8009320 <_svfiprintf_r+0x114>
 80092f2:	9207      	str	r2, [sp, #28]
 80092f4:	e014      	b.n	8009320 <_svfiprintf_r+0x114>
 80092f6:	eba0 0308 	sub.w	r3, r0, r8
 80092fa:	fa09 f303 	lsl.w	r3, r9, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	46a2      	mov	sl, r4
 8009304:	e7d2      	b.n	80092ac <_svfiprintf_r+0xa0>
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	1d19      	adds	r1, r3, #4
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	9103      	str	r1, [sp, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	bfbb      	ittet	lt
 8009312:	425b      	neglt	r3, r3
 8009314:	f042 0202 	orrlt.w	r2, r2, #2
 8009318:	9307      	strge	r3, [sp, #28]
 800931a:	9307      	strlt	r3, [sp, #28]
 800931c:	bfb8      	it	lt
 800931e:	9204      	strlt	r2, [sp, #16]
 8009320:	7823      	ldrb	r3, [r4, #0]
 8009322:	2b2e      	cmp	r3, #46	@ 0x2e
 8009324:	d10a      	bne.n	800933c <_svfiprintf_r+0x130>
 8009326:	7863      	ldrb	r3, [r4, #1]
 8009328:	2b2a      	cmp	r3, #42	@ 0x2a
 800932a:	d132      	bne.n	8009392 <_svfiprintf_r+0x186>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	1d1a      	adds	r2, r3, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	9203      	str	r2, [sp, #12]
 8009334:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009338:	3402      	adds	r4, #2
 800933a:	9305      	str	r3, [sp, #20]
 800933c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009400 <_svfiprintf_r+0x1f4>
 8009340:	7821      	ldrb	r1, [r4, #0]
 8009342:	2203      	movs	r2, #3
 8009344:	4650      	mov	r0, sl
 8009346:	f7f6 ff4b 	bl	80001e0 <memchr>
 800934a:	b138      	cbz	r0, 800935c <_svfiprintf_r+0x150>
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	eba0 000a 	sub.w	r0, r0, sl
 8009352:	2240      	movs	r2, #64	@ 0x40
 8009354:	4082      	lsls	r2, r0
 8009356:	4313      	orrs	r3, r2
 8009358:	3401      	adds	r4, #1
 800935a:	9304      	str	r3, [sp, #16]
 800935c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009360:	4824      	ldr	r0, [pc, #144]	@ (80093f4 <_svfiprintf_r+0x1e8>)
 8009362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009366:	2206      	movs	r2, #6
 8009368:	f7f6 ff3a 	bl	80001e0 <memchr>
 800936c:	2800      	cmp	r0, #0
 800936e:	d036      	beq.n	80093de <_svfiprintf_r+0x1d2>
 8009370:	4b21      	ldr	r3, [pc, #132]	@ (80093f8 <_svfiprintf_r+0x1ec>)
 8009372:	bb1b      	cbnz	r3, 80093bc <_svfiprintf_r+0x1b0>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	3307      	adds	r3, #7
 8009378:	f023 0307 	bic.w	r3, r3, #7
 800937c:	3308      	adds	r3, #8
 800937e:	9303      	str	r3, [sp, #12]
 8009380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009382:	4433      	add	r3, r6
 8009384:	9309      	str	r3, [sp, #36]	@ 0x24
 8009386:	e76a      	b.n	800925e <_svfiprintf_r+0x52>
 8009388:	fb0c 3202 	mla	r2, ip, r2, r3
 800938c:	460c      	mov	r4, r1
 800938e:	2001      	movs	r0, #1
 8009390:	e7a8      	b.n	80092e4 <_svfiprintf_r+0xd8>
 8009392:	2300      	movs	r3, #0
 8009394:	3401      	adds	r4, #1
 8009396:	9305      	str	r3, [sp, #20]
 8009398:	4619      	mov	r1, r3
 800939a:	f04f 0c0a 	mov.w	ip, #10
 800939e:	4620      	mov	r0, r4
 80093a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093a4:	3a30      	subs	r2, #48	@ 0x30
 80093a6:	2a09      	cmp	r2, #9
 80093a8:	d903      	bls.n	80093b2 <_svfiprintf_r+0x1a6>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0c6      	beq.n	800933c <_svfiprintf_r+0x130>
 80093ae:	9105      	str	r1, [sp, #20]
 80093b0:	e7c4      	b.n	800933c <_svfiprintf_r+0x130>
 80093b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093b6:	4604      	mov	r4, r0
 80093b8:	2301      	movs	r3, #1
 80093ba:	e7f0      	b.n	800939e <_svfiprintf_r+0x192>
 80093bc:	ab03      	add	r3, sp, #12
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	462a      	mov	r2, r5
 80093c2:	4b0e      	ldr	r3, [pc, #56]	@ (80093fc <_svfiprintf_r+0x1f0>)
 80093c4:	a904      	add	r1, sp, #16
 80093c6:	4638      	mov	r0, r7
 80093c8:	f3af 8000 	nop.w
 80093cc:	1c42      	adds	r2, r0, #1
 80093ce:	4606      	mov	r6, r0
 80093d0:	d1d6      	bne.n	8009380 <_svfiprintf_r+0x174>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	065b      	lsls	r3, r3, #25
 80093d6:	f53f af2d 	bmi.w	8009234 <_svfiprintf_r+0x28>
 80093da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093dc:	e72c      	b.n	8009238 <_svfiprintf_r+0x2c>
 80093de:	ab03      	add	r3, sp, #12
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	462a      	mov	r2, r5
 80093e4:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <_svfiprintf_r+0x1f0>)
 80093e6:	a904      	add	r1, sp, #16
 80093e8:	4638      	mov	r0, r7
 80093ea:	f000 f9bb 	bl	8009764 <_printf_i>
 80093ee:	e7ed      	b.n	80093cc <_svfiprintf_r+0x1c0>
 80093f0:	0800a458 	.word	0x0800a458
 80093f4:	0800a462 	.word	0x0800a462
 80093f8:	00000000 	.word	0x00000000
 80093fc:	08009155 	.word	0x08009155
 8009400:	0800a45e 	.word	0x0800a45e

08009404 <__sfputc_r>:
 8009404:	6893      	ldr	r3, [r2, #8]
 8009406:	3b01      	subs	r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	b410      	push	{r4}
 800940c:	6093      	str	r3, [r2, #8]
 800940e:	da08      	bge.n	8009422 <__sfputc_r+0x1e>
 8009410:	6994      	ldr	r4, [r2, #24]
 8009412:	42a3      	cmp	r3, r4
 8009414:	db01      	blt.n	800941a <__sfputc_r+0x16>
 8009416:	290a      	cmp	r1, #10
 8009418:	d103      	bne.n	8009422 <__sfputc_r+0x1e>
 800941a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800941e:	f000 bb6b 	b.w	8009af8 <__swbuf_r>
 8009422:	6813      	ldr	r3, [r2, #0]
 8009424:	1c58      	adds	r0, r3, #1
 8009426:	6010      	str	r0, [r2, #0]
 8009428:	7019      	strb	r1, [r3, #0]
 800942a:	4608      	mov	r0, r1
 800942c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009430:	4770      	bx	lr

08009432 <__sfputs_r>:
 8009432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009434:	4606      	mov	r6, r0
 8009436:	460f      	mov	r7, r1
 8009438:	4614      	mov	r4, r2
 800943a:	18d5      	adds	r5, r2, r3
 800943c:	42ac      	cmp	r4, r5
 800943e:	d101      	bne.n	8009444 <__sfputs_r+0x12>
 8009440:	2000      	movs	r0, #0
 8009442:	e007      	b.n	8009454 <__sfputs_r+0x22>
 8009444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009448:	463a      	mov	r2, r7
 800944a:	4630      	mov	r0, r6
 800944c:	f7ff ffda 	bl	8009404 <__sfputc_r>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d1f3      	bne.n	800943c <__sfputs_r+0xa>
 8009454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009458 <_vfiprintf_r>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	460d      	mov	r5, r1
 800945e:	b09d      	sub	sp, #116	@ 0x74
 8009460:	4614      	mov	r4, r2
 8009462:	4698      	mov	r8, r3
 8009464:	4606      	mov	r6, r0
 8009466:	b118      	cbz	r0, 8009470 <_vfiprintf_r+0x18>
 8009468:	6a03      	ldr	r3, [r0, #32]
 800946a:	b90b      	cbnz	r3, 8009470 <_vfiprintf_r+0x18>
 800946c:	f7ff fcee 	bl	8008e4c <__sinit>
 8009470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009472:	07d9      	lsls	r1, r3, #31
 8009474:	d405      	bmi.n	8009482 <_vfiprintf_r+0x2a>
 8009476:	89ab      	ldrh	r3, [r5, #12]
 8009478:	059a      	lsls	r2, r3, #22
 800947a:	d402      	bmi.n	8009482 <_vfiprintf_r+0x2a>
 800947c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800947e:	f7ff fe1c 	bl	80090ba <__retarget_lock_acquire_recursive>
 8009482:	89ab      	ldrh	r3, [r5, #12]
 8009484:	071b      	lsls	r3, r3, #28
 8009486:	d501      	bpl.n	800948c <_vfiprintf_r+0x34>
 8009488:	692b      	ldr	r3, [r5, #16]
 800948a:	b99b      	cbnz	r3, 80094b4 <_vfiprintf_r+0x5c>
 800948c:	4629      	mov	r1, r5
 800948e:	4630      	mov	r0, r6
 8009490:	f000 fb70 	bl	8009b74 <__swsetup_r>
 8009494:	b170      	cbz	r0, 80094b4 <_vfiprintf_r+0x5c>
 8009496:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009498:	07dc      	lsls	r4, r3, #31
 800949a:	d504      	bpl.n	80094a6 <_vfiprintf_r+0x4e>
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	b01d      	add	sp, #116	@ 0x74
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	89ab      	ldrh	r3, [r5, #12]
 80094a8:	0598      	lsls	r0, r3, #22
 80094aa:	d4f7      	bmi.n	800949c <_vfiprintf_r+0x44>
 80094ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ae:	f7ff fe05 	bl	80090bc <__retarget_lock_release_recursive>
 80094b2:	e7f3      	b.n	800949c <_vfiprintf_r+0x44>
 80094b4:	2300      	movs	r3, #0
 80094b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80094b8:	2320      	movs	r3, #32
 80094ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094be:	f8cd 800c 	str.w	r8, [sp, #12]
 80094c2:	2330      	movs	r3, #48	@ 0x30
 80094c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009674 <_vfiprintf_r+0x21c>
 80094c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094cc:	f04f 0901 	mov.w	r9, #1
 80094d0:	4623      	mov	r3, r4
 80094d2:	469a      	mov	sl, r3
 80094d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094d8:	b10a      	cbz	r2, 80094de <_vfiprintf_r+0x86>
 80094da:	2a25      	cmp	r2, #37	@ 0x25
 80094dc:	d1f9      	bne.n	80094d2 <_vfiprintf_r+0x7a>
 80094de:	ebba 0b04 	subs.w	fp, sl, r4
 80094e2:	d00b      	beq.n	80094fc <_vfiprintf_r+0xa4>
 80094e4:	465b      	mov	r3, fp
 80094e6:	4622      	mov	r2, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	4630      	mov	r0, r6
 80094ec:	f7ff ffa1 	bl	8009432 <__sfputs_r>
 80094f0:	3001      	adds	r0, #1
 80094f2:	f000 80a7 	beq.w	8009644 <_vfiprintf_r+0x1ec>
 80094f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094f8:	445a      	add	r2, fp
 80094fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80094fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 809f 	beq.w	8009644 <_vfiprintf_r+0x1ec>
 8009506:	2300      	movs	r3, #0
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009510:	f10a 0a01 	add.w	sl, sl, #1
 8009514:	9304      	str	r3, [sp, #16]
 8009516:	9307      	str	r3, [sp, #28]
 8009518:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800951c:	931a      	str	r3, [sp, #104]	@ 0x68
 800951e:	4654      	mov	r4, sl
 8009520:	2205      	movs	r2, #5
 8009522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009526:	4853      	ldr	r0, [pc, #332]	@ (8009674 <_vfiprintf_r+0x21c>)
 8009528:	f7f6 fe5a 	bl	80001e0 <memchr>
 800952c:	9a04      	ldr	r2, [sp, #16]
 800952e:	b9d8      	cbnz	r0, 8009568 <_vfiprintf_r+0x110>
 8009530:	06d1      	lsls	r1, r2, #27
 8009532:	bf44      	itt	mi
 8009534:	2320      	movmi	r3, #32
 8009536:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800953a:	0713      	lsls	r3, r2, #28
 800953c:	bf44      	itt	mi
 800953e:	232b      	movmi	r3, #43	@ 0x2b
 8009540:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009544:	f89a 3000 	ldrb.w	r3, [sl]
 8009548:	2b2a      	cmp	r3, #42	@ 0x2a
 800954a:	d015      	beq.n	8009578 <_vfiprintf_r+0x120>
 800954c:	9a07      	ldr	r2, [sp, #28]
 800954e:	4654      	mov	r4, sl
 8009550:	2000      	movs	r0, #0
 8009552:	f04f 0c0a 	mov.w	ip, #10
 8009556:	4621      	mov	r1, r4
 8009558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800955c:	3b30      	subs	r3, #48	@ 0x30
 800955e:	2b09      	cmp	r3, #9
 8009560:	d94b      	bls.n	80095fa <_vfiprintf_r+0x1a2>
 8009562:	b1b0      	cbz	r0, 8009592 <_vfiprintf_r+0x13a>
 8009564:	9207      	str	r2, [sp, #28]
 8009566:	e014      	b.n	8009592 <_vfiprintf_r+0x13a>
 8009568:	eba0 0308 	sub.w	r3, r0, r8
 800956c:	fa09 f303 	lsl.w	r3, r9, r3
 8009570:	4313      	orrs	r3, r2
 8009572:	9304      	str	r3, [sp, #16]
 8009574:	46a2      	mov	sl, r4
 8009576:	e7d2      	b.n	800951e <_vfiprintf_r+0xc6>
 8009578:	9b03      	ldr	r3, [sp, #12]
 800957a:	1d19      	adds	r1, r3, #4
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	9103      	str	r1, [sp, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	bfbb      	ittet	lt
 8009584:	425b      	neglt	r3, r3
 8009586:	f042 0202 	orrlt.w	r2, r2, #2
 800958a:	9307      	strge	r3, [sp, #28]
 800958c:	9307      	strlt	r3, [sp, #28]
 800958e:	bfb8      	it	lt
 8009590:	9204      	strlt	r2, [sp, #16]
 8009592:	7823      	ldrb	r3, [r4, #0]
 8009594:	2b2e      	cmp	r3, #46	@ 0x2e
 8009596:	d10a      	bne.n	80095ae <_vfiprintf_r+0x156>
 8009598:	7863      	ldrb	r3, [r4, #1]
 800959a:	2b2a      	cmp	r3, #42	@ 0x2a
 800959c:	d132      	bne.n	8009604 <_vfiprintf_r+0x1ac>
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	1d1a      	adds	r2, r3, #4
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	9203      	str	r2, [sp, #12]
 80095a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095aa:	3402      	adds	r4, #2
 80095ac:	9305      	str	r3, [sp, #20]
 80095ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009684 <_vfiprintf_r+0x22c>
 80095b2:	7821      	ldrb	r1, [r4, #0]
 80095b4:	2203      	movs	r2, #3
 80095b6:	4650      	mov	r0, sl
 80095b8:	f7f6 fe12 	bl	80001e0 <memchr>
 80095bc:	b138      	cbz	r0, 80095ce <_vfiprintf_r+0x176>
 80095be:	9b04      	ldr	r3, [sp, #16]
 80095c0:	eba0 000a 	sub.w	r0, r0, sl
 80095c4:	2240      	movs	r2, #64	@ 0x40
 80095c6:	4082      	lsls	r2, r0
 80095c8:	4313      	orrs	r3, r2
 80095ca:	3401      	adds	r4, #1
 80095cc:	9304      	str	r3, [sp, #16]
 80095ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d2:	4829      	ldr	r0, [pc, #164]	@ (8009678 <_vfiprintf_r+0x220>)
 80095d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095d8:	2206      	movs	r2, #6
 80095da:	f7f6 fe01 	bl	80001e0 <memchr>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d03f      	beq.n	8009662 <_vfiprintf_r+0x20a>
 80095e2:	4b26      	ldr	r3, [pc, #152]	@ (800967c <_vfiprintf_r+0x224>)
 80095e4:	bb1b      	cbnz	r3, 800962e <_vfiprintf_r+0x1d6>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	3307      	adds	r3, #7
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	3308      	adds	r3, #8
 80095f0:	9303      	str	r3, [sp, #12]
 80095f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f4:	443b      	add	r3, r7
 80095f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f8:	e76a      	b.n	80094d0 <_vfiprintf_r+0x78>
 80095fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80095fe:	460c      	mov	r4, r1
 8009600:	2001      	movs	r0, #1
 8009602:	e7a8      	b.n	8009556 <_vfiprintf_r+0xfe>
 8009604:	2300      	movs	r3, #0
 8009606:	3401      	adds	r4, #1
 8009608:	9305      	str	r3, [sp, #20]
 800960a:	4619      	mov	r1, r3
 800960c:	f04f 0c0a 	mov.w	ip, #10
 8009610:	4620      	mov	r0, r4
 8009612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009616:	3a30      	subs	r2, #48	@ 0x30
 8009618:	2a09      	cmp	r2, #9
 800961a:	d903      	bls.n	8009624 <_vfiprintf_r+0x1cc>
 800961c:	2b00      	cmp	r3, #0
 800961e:	d0c6      	beq.n	80095ae <_vfiprintf_r+0x156>
 8009620:	9105      	str	r1, [sp, #20]
 8009622:	e7c4      	b.n	80095ae <_vfiprintf_r+0x156>
 8009624:	fb0c 2101 	mla	r1, ip, r1, r2
 8009628:	4604      	mov	r4, r0
 800962a:	2301      	movs	r3, #1
 800962c:	e7f0      	b.n	8009610 <_vfiprintf_r+0x1b8>
 800962e:	ab03      	add	r3, sp, #12
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	462a      	mov	r2, r5
 8009634:	4b12      	ldr	r3, [pc, #72]	@ (8009680 <_vfiprintf_r+0x228>)
 8009636:	a904      	add	r1, sp, #16
 8009638:	4630      	mov	r0, r6
 800963a:	f3af 8000 	nop.w
 800963e:	4607      	mov	r7, r0
 8009640:	1c78      	adds	r0, r7, #1
 8009642:	d1d6      	bne.n	80095f2 <_vfiprintf_r+0x19a>
 8009644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009646:	07d9      	lsls	r1, r3, #31
 8009648:	d405      	bmi.n	8009656 <_vfiprintf_r+0x1fe>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	059a      	lsls	r2, r3, #22
 800964e:	d402      	bmi.n	8009656 <_vfiprintf_r+0x1fe>
 8009650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009652:	f7ff fd33 	bl	80090bc <__retarget_lock_release_recursive>
 8009656:	89ab      	ldrh	r3, [r5, #12]
 8009658:	065b      	lsls	r3, r3, #25
 800965a:	f53f af1f 	bmi.w	800949c <_vfiprintf_r+0x44>
 800965e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009660:	e71e      	b.n	80094a0 <_vfiprintf_r+0x48>
 8009662:	ab03      	add	r3, sp, #12
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	462a      	mov	r2, r5
 8009668:	4b05      	ldr	r3, [pc, #20]	@ (8009680 <_vfiprintf_r+0x228>)
 800966a:	a904      	add	r1, sp, #16
 800966c:	4630      	mov	r0, r6
 800966e:	f000 f879 	bl	8009764 <_printf_i>
 8009672:	e7e4      	b.n	800963e <_vfiprintf_r+0x1e6>
 8009674:	0800a458 	.word	0x0800a458
 8009678:	0800a462 	.word	0x0800a462
 800967c:	00000000 	.word	0x00000000
 8009680:	08009433 	.word	0x08009433
 8009684:	0800a45e 	.word	0x0800a45e

08009688 <_printf_common>:
 8009688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800968c:	4616      	mov	r6, r2
 800968e:	4698      	mov	r8, r3
 8009690:	688a      	ldr	r2, [r1, #8]
 8009692:	690b      	ldr	r3, [r1, #16]
 8009694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009698:	4293      	cmp	r3, r2
 800969a:	bfb8      	it	lt
 800969c:	4613      	movlt	r3, r2
 800969e:	6033      	str	r3, [r6, #0]
 80096a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096a4:	4607      	mov	r7, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	b10a      	cbz	r2, 80096ae <_printf_common+0x26>
 80096aa:	3301      	adds	r3, #1
 80096ac:	6033      	str	r3, [r6, #0]
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	0699      	lsls	r1, r3, #26
 80096b2:	bf42      	ittt	mi
 80096b4:	6833      	ldrmi	r3, [r6, #0]
 80096b6:	3302      	addmi	r3, #2
 80096b8:	6033      	strmi	r3, [r6, #0]
 80096ba:	6825      	ldr	r5, [r4, #0]
 80096bc:	f015 0506 	ands.w	r5, r5, #6
 80096c0:	d106      	bne.n	80096d0 <_printf_common+0x48>
 80096c2:	f104 0a19 	add.w	sl, r4, #25
 80096c6:	68e3      	ldr	r3, [r4, #12]
 80096c8:	6832      	ldr	r2, [r6, #0]
 80096ca:	1a9b      	subs	r3, r3, r2
 80096cc:	42ab      	cmp	r3, r5
 80096ce:	dc26      	bgt.n	800971e <_printf_common+0x96>
 80096d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096d4:	6822      	ldr	r2, [r4, #0]
 80096d6:	3b00      	subs	r3, #0
 80096d8:	bf18      	it	ne
 80096da:	2301      	movne	r3, #1
 80096dc:	0692      	lsls	r2, r2, #26
 80096de:	d42b      	bmi.n	8009738 <_printf_common+0xb0>
 80096e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096e4:	4641      	mov	r1, r8
 80096e6:	4638      	mov	r0, r7
 80096e8:	47c8      	blx	r9
 80096ea:	3001      	adds	r0, #1
 80096ec:	d01e      	beq.n	800972c <_printf_common+0xa4>
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	f003 0306 	and.w	r3, r3, #6
 80096f6:	2b04      	cmp	r3, #4
 80096f8:	bf02      	ittt	eq
 80096fa:	68e5      	ldreq	r5, [r4, #12]
 80096fc:	6833      	ldreq	r3, [r6, #0]
 80096fe:	1aed      	subeq	r5, r5, r3
 8009700:	68a3      	ldr	r3, [r4, #8]
 8009702:	bf0c      	ite	eq
 8009704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009708:	2500      	movne	r5, #0
 800970a:	4293      	cmp	r3, r2
 800970c:	bfc4      	itt	gt
 800970e:	1a9b      	subgt	r3, r3, r2
 8009710:	18ed      	addgt	r5, r5, r3
 8009712:	2600      	movs	r6, #0
 8009714:	341a      	adds	r4, #26
 8009716:	42b5      	cmp	r5, r6
 8009718:	d11a      	bne.n	8009750 <_printf_common+0xc8>
 800971a:	2000      	movs	r0, #0
 800971c:	e008      	b.n	8009730 <_printf_common+0xa8>
 800971e:	2301      	movs	r3, #1
 8009720:	4652      	mov	r2, sl
 8009722:	4641      	mov	r1, r8
 8009724:	4638      	mov	r0, r7
 8009726:	47c8      	blx	r9
 8009728:	3001      	adds	r0, #1
 800972a:	d103      	bne.n	8009734 <_printf_common+0xac>
 800972c:	f04f 30ff 	mov.w	r0, #4294967295
 8009730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009734:	3501      	adds	r5, #1
 8009736:	e7c6      	b.n	80096c6 <_printf_common+0x3e>
 8009738:	18e1      	adds	r1, r4, r3
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	2030      	movs	r0, #48	@ 0x30
 800973e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009742:	4422      	add	r2, r4
 8009744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800974c:	3302      	adds	r3, #2
 800974e:	e7c7      	b.n	80096e0 <_printf_common+0x58>
 8009750:	2301      	movs	r3, #1
 8009752:	4622      	mov	r2, r4
 8009754:	4641      	mov	r1, r8
 8009756:	4638      	mov	r0, r7
 8009758:	47c8      	blx	r9
 800975a:	3001      	adds	r0, #1
 800975c:	d0e6      	beq.n	800972c <_printf_common+0xa4>
 800975e:	3601      	adds	r6, #1
 8009760:	e7d9      	b.n	8009716 <_printf_common+0x8e>
	...

08009764 <_printf_i>:
 8009764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	7e0f      	ldrb	r7, [r1, #24]
 800976a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800976c:	2f78      	cmp	r7, #120	@ 0x78
 800976e:	4691      	mov	r9, r2
 8009770:	4680      	mov	r8, r0
 8009772:	460c      	mov	r4, r1
 8009774:	469a      	mov	sl, r3
 8009776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800977a:	d807      	bhi.n	800978c <_printf_i+0x28>
 800977c:	2f62      	cmp	r7, #98	@ 0x62
 800977e:	d80a      	bhi.n	8009796 <_printf_i+0x32>
 8009780:	2f00      	cmp	r7, #0
 8009782:	f000 80d1 	beq.w	8009928 <_printf_i+0x1c4>
 8009786:	2f58      	cmp	r7, #88	@ 0x58
 8009788:	f000 80b8 	beq.w	80098fc <_printf_i+0x198>
 800978c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009794:	e03a      	b.n	800980c <_printf_i+0xa8>
 8009796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800979a:	2b15      	cmp	r3, #21
 800979c:	d8f6      	bhi.n	800978c <_printf_i+0x28>
 800979e:	a101      	add	r1, pc, #4	@ (adr r1, 80097a4 <_printf_i+0x40>)
 80097a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097a4:	080097fd 	.word	0x080097fd
 80097a8:	08009811 	.word	0x08009811
 80097ac:	0800978d 	.word	0x0800978d
 80097b0:	0800978d 	.word	0x0800978d
 80097b4:	0800978d 	.word	0x0800978d
 80097b8:	0800978d 	.word	0x0800978d
 80097bc:	08009811 	.word	0x08009811
 80097c0:	0800978d 	.word	0x0800978d
 80097c4:	0800978d 	.word	0x0800978d
 80097c8:	0800978d 	.word	0x0800978d
 80097cc:	0800978d 	.word	0x0800978d
 80097d0:	0800990f 	.word	0x0800990f
 80097d4:	0800983b 	.word	0x0800983b
 80097d8:	080098c9 	.word	0x080098c9
 80097dc:	0800978d 	.word	0x0800978d
 80097e0:	0800978d 	.word	0x0800978d
 80097e4:	08009931 	.word	0x08009931
 80097e8:	0800978d 	.word	0x0800978d
 80097ec:	0800983b 	.word	0x0800983b
 80097f0:	0800978d 	.word	0x0800978d
 80097f4:	0800978d 	.word	0x0800978d
 80097f8:	080098d1 	.word	0x080098d1
 80097fc:	6833      	ldr	r3, [r6, #0]
 80097fe:	1d1a      	adds	r2, r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6032      	str	r2, [r6, #0]
 8009804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800980c:	2301      	movs	r3, #1
 800980e:	e09c      	b.n	800994a <_printf_i+0x1e6>
 8009810:	6833      	ldr	r3, [r6, #0]
 8009812:	6820      	ldr	r0, [r4, #0]
 8009814:	1d19      	adds	r1, r3, #4
 8009816:	6031      	str	r1, [r6, #0]
 8009818:	0606      	lsls	r6, r0, #24
 800981a:	d501      	bpl.n	8009820 <_printf_i+0xbc>
 800981c:	681d      	ldr	r5, [r3, #0]
 800981e:	e003      	b.n	8009828 <_printf_i+0xc4>
 8009820:	0645      	lsls	r5, r0, #25
 8009822:	d5fb      	bpl.n	800981c <_printf_i+0xb8>
 8009824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009828:	2d00      	cmp	r5, #0
 800982a:	da03      	bge.n	8009834 <_printf_i+0xd0>
 800982c:	232d      	movs	r3, #45	@ 0x2d
 800982e:	426d      	negs	r5, r5
 8009830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009834:	4858      	ldr	r0, [pc, #352]	@ (8009998 <_printf_i+0x234>)
 8009836:	230a      	movs	r3, #10
 8009838:	e011      	b.n	800985e <_printf_i+0xfa>
 800983a:	6821      	ldr	r1, [r4, #0]
 800983c:	6833      	ldr	r3, [r6, #0]
 800983e:	0608      	lsls	r0, r1, #24
 8009840:	f853 5b04 	ldr.w	r5, [r3], #4
 8009844:	d402      	bmi.n	800984c <_printf_i+0xe8>
 8009846:	0649      	lsls	r1, r1, #25
 8009848:	bf48      	it	mi
 800984a:	b2ad      	uxthmi	r5, r5
 800984c:	2f6f      	cmp	r7, #111	@ 0x6f
 800984e:	4852      	ldr	r0, [pc, #328]	@ (8009998 <_printf_i+0x234>)
 8009850:	6033      	str	r3, [r6, #0]
 8009852:	bf14      	ite	ne
 8009854:	230a      	movne	r3, #10
 8009856:	2308      	moveq	r3, #8
 8009858:	2100      	movs	r1, #0
 800985a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800985e:	6866      	ldr	r6, [r4, #4]
 8009860:	60a6      	str	r6, [r4, #8]
 8009862:	2e00      	cmp	r6, #0
 8009864:	db05      	blt.n	8009872 <_printf_i+0x10e>
 8009866:	6821      	ldr	r1, [r4, #0]
 8009868:	432e      	orrs	r6, r5
 800986a:	f021 0104 	bic.w	r1, r1, #4
 800986e:	6021      	str	r1, [r4, #0]
 8009870:	d04b      	beq.n	800990a <_printf_i+0x1a6>
 8009872:	4616      	mov	r6, r2
 8009874:	fbb5 f1f3 	udiv	r1, r5, r3
 8009878:	fb03 5711 	mls	r7, r3, r1, r5
 800987c:	5dc7      	ldrb	r7, [r0, r7]
 800987e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009882:	462f      	mov	r7, r5
 8009884:	42bb      	cmp	r3, r7
 8009886:	460d      	mov	r5, r1
 8009888:	d9f4      	bls.n	8009874 <_printf_i+0x110>
 800988a:	2b08      	cmp	r3, #8
 800988c:	d10b      	bne.n	80098a6 <_printf_i+0x142>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	07df      	lsls	r7, r3, #31
 8009892:	d508      	bpl.n	80098a6 <_printf_i+0x142>
 8009894:	6923      	ldr	r3, [r4, #16]
 8009896:	6861      	ldr	r1, [r4, #4]
 8009898:	4299      	cmp	r1, r3
 800989a:	bfde      	ittt	le
 800989c:	2330      	movle	r3, #48	@ 0x30
 800989e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098a6:	1b92      	subs	r2, r2, r6
 80098a8:	6122      	str	r2, [r4, #16]
 80098aa:	f8cd a000 	str.w	sl, [sp]
 80098ae:	464b      	mov	r3, r9
 80098b0:	aa03      	add	r2, sp, #12
 80098b2:	4621      	mov	r1, r4
 80098b4:	4640      	mov	r0, r8
 80098b6:	f7ff fee7 	bl	8009688 <_printf_common>
 80098ba:	3001      	adds	r0, #1
 80098bc:	d14a      	bne.n	8009954 <_printf_i+0x1f0>
 80098be:	f04f 30ff 	mov.w	r0, #4294967295
 80098c2:	b004      	add	sp, #16
 80098c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	f043 0320 	orr.w	r3, r3, #32
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	4832      	ldr	r0, [pc, #200]	@ (800999c <_printf_i+0x238>)
 80098d2:	2778      	movs	r7, #120	@ 0x78
 80098d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	6831      	ldr	r1, [r6, #0]
 80098dc:	061f      	lsls	r7, r3, #24
 80098de:	f851 5b04 	ldr.w	r5, [r1], #4
 80098e2:	d402      	bmi.n	80098ea <_printf_i+0x186>
 80098e4:	065f      	lsls	r7, r3, #25
 80098e6:	bf48      	it	mi
 80098e8:	b2ad      	uxthmi	r5, r5
 80098ea:	6031      	str	r1, [r6, #0]
 80098ec:	07d9      	lsls	r1, r3, #31
 80098ee:	bf44      	itt	mi
 80098f0:	f043 0320 	orrmi.w	r3, r3, #32
 80098f4:	6023      	strmi	r3, [r4, #0]
 80098f6:	b11d      	cbz	r5, 8009900 <_printf_i+0x19c>
 80098f8:	2310      	movs	r3, #16
 80098fa:	e7ad      	b.n	8009858 <_printf_i+0xf4>
 80098fc:	4826      	ldr	r0, [pc, #152]	@ (8009998 <_printf_i+0x234>)
 80098fe:	e7e9      	b.n	80098d4 <_printf_i+0x170>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	f023 0320 	bic.w	r3, r3, #32
 8009906:	6023      	str	r3, [r4, #0]
 8009908:	e7f6      	b.n	80098f8 <_printf_i+0x194>
 800990a:	4616      	mov	r6, r2
 800990c:	e7bd      	b.n	800988a <_printf_i+0x126>
 800990e:	6833      	ldr	r3, [r6, #0]
 8009910:	6825      	ldr	r5, [r4, #0]
 8009912:	6961      	ldr	r1, [r4, #20]
 8009914:	1d18      	adds	r0, r3, #4
 8009916:	6030      	str	r0, [r6, #0]
 8009918:	062e      	lsls	r6, r5, #24
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	d501      	bpl.n	8009922 <_printf_i+0x1be>
 800991e:	6019      	str	r1, [r3, #0]
 8009920:	e002      	b.n	8009928 <_printf_i+0x1c4>
 8009922:	0668      	lsls	r0, r5, #25
 8009924:	d5fb      	bpl.n	800991e <_printf_i+0x1ba>
 8009926:	8019      	strh	r1, [r3, #0]
 8009928:	2300      	movs	r3, #0
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	4616      	mov	r6, r2
 800992e:	e7bc      	b.n	80098aa <_printf_i+0x146>
 8009930:	6833      	ldr	r3, [r6, #0]
 8009932:	1d1a      	adds	r2, r3, #4
 8009934:	6032      	str	r2, [r6, #0]
 8009936:	681e      	ldr	r6, [r3, #0]
 8009938:	6862      	ldr	r2, [r4, #4]
 800993a:	2100      	movs	r1, #0
 800993c:	4630      	mov	r0, r6
 800993e:	f7f6 fc4f 	bl	80001e0 <memchr>
 8009942:	b108      	cbz	r0, 8009948 <_printf_i+0x1e4>
 8009944:	1b80      	subs	r0, r0, r6
 8009946:	6060      	str	r0, [r4, #4]
 8009948:	6863      	ldr	r3, [r4, #4]
 800994a:	6123      	str	r3, [r4, #16]
 800994c:	2300      	movs	r3, #0
 800994e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009952:	e7aa      	b.n	80098aa <_printf_i+0x146>
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	4632      	mov	r2, r6
 8009958:	4649      	mov	r1, r9
 800995a:	4640      	mov	r0, r8
 800995c:	47d0      	blx	sl
 800995e:	3001      	adds	r0, #1
 8009960:	d0ad      	beq.n	80098be <_printf_i+0x15a>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	079b      	lsls	r3, r3, #30
 8009966:	d413      	bmi.n	8009990 <_printf_i+0x22c>
 8009968:	68e0      	ldr	r0, [r4, #12]
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	4298      	cmp	r0, r3
 800996e:	bfb8      	it	lt
 8009970:	4618      	movlt	r0, r3
 8009972:	e7a6      	b.n	80098c2 <_printf_i+0x15e>
 8009974:	2301      	movs	r3, #1
 8009976:	4632      	mov	r2, r6
 8009978:	4649      	mov	r1, r9
 800997a:	4640      	mov	r0, r8
 800997c:	47d0      	blx	sl
 800997e:	3001      	adds	r0, #1
 8009980:	d09d      	beq.n	80098be <_printf_i+0x15a>
 8009982:	3501      	adds	r5, #1
 8009984:	68e3      	ldr	r3, [r4, #12]
 8009986:	9903      	ldr	r1, [sp, #12]
 8009988:	1a5b      	subs	r3, r3, r1
 800998a:	42ab      	cmp	r3, r5
 800998c:	dcf2      	bgt.n	8009974 <_printf_i+0x210>
 800998e:	e7eb      	b.n	8009968 <_printf_i+0x204>
 8009990:	2500      	movs	r5, #0
 8009992:	f104 0619 	add.w	r6, r4, #25
 8009996:	e7f5      	b.n	8009984 <_printf_i+0x220>
 8009998:	0800a469 	.word	0x0800a469
 800999c:	0800a47a 	.word	0x0800a47a

080099a0 <__sflush_r>:
 80099a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a8:	0716      	lsls	r6, r2, #28
 80099aa:	4605      	mov	r5, r0
 80099ac:	460c      	mov	r4, r1
 80099ae:	d454      	bmi.n	8009a5a <__sflush_r+0xba>
 80099b0:	684b      	ldr	r3, [r1, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	dc02      	bgt.n	80099bc <__sflush_r+0x1c>
 80099b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	dd48      	ble.n	8009a4e <__sflush_r+0xae>
 80099bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099be:	2e00      	cmp	r6, #0
 80099c0:	d045      	beq.n	8009a4e <__sflush_r+0xae>
 80099c2:	2300      	movs	r3, #0
 80099c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099c8:	682f      	ldr	r7, [r5, #0]
 80099ca:	6a21      	ldr	r1, [r4, #32]
 80099cc:	602b      	str	r3, [r5, #0]
 80099ce:	d030      	beq.n	8009a32 <__sflush_r+0x92>
 80099d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	0759      	lsls	r1, r3, #29
 80099d6:	d505      	bpl.n	80099e4 <__sflush_r+0x44>
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	1ad2      	subs	r2, r2, r3
 80099dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099de:	b10b      	cbz	r3, 80099e4 <__sflush_r+0x44>
 80099e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099e2:	1ad2      	subs	r2, r2, r3
 80099e4:	2300      	movs	r3, #0
 80099e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099e8:	6a21      	ldr	r1, [r4, #32]
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b0      	blx	r6
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	d106      	bne.n	8009a02 <__sflush_r+0x62>
 80099f4:	6829      	ldr	r1, [r5, #0]
 80099f6:	291d      	cmp	r1, #29
 80099f8:	d82b      	bhi.n	8009a52 <__sflush_r+0xb2>
 80099fa:	4a2a      	ldr	r2, [pc, #168]	@ (8009aa4 <__sflush_r+0x104>)
 80099fc:	40ca      	lsrs	r2, r1
 80099fe:	07d6      	lsls	r6, r2, #31
 8009a00:	d527      	bpl.n	8009a52 <__sflush_r+0xb2>
 8009a02:	2200      	movs	r2, #0
 8009a04:	6062      	str	r2, [r4, #4]
 8009a06:	04d9      	lsls	r1, r3, #19
 8009a08:	6922      	ldr	r2, [r4, #16]
 8009a0a:	6022      	str	r2, [r4, #0]
 8009a0c:	d504      	bpl.n	8009a18 <__sflush_r+0x78>
 8009a0e:	1c42      	adds	r2, r0, #1
 8009a10:	d101      	bne.n	8009a16 <__sflush_r+0x76>
 8009a12:	682b      	ldr	r3, [r5, #0]
 8009a14:	b903      	cbnz	r3, 8009a18 <__sflush_r+0x78>
 8009a16:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a1a:	602f      	str	r7, [r5, #0]
 8009a1c:	b1b9      	cbz	r1, 8009a4e <__sflush_r+0xae>
 8009a1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a22:	4299      	cmp	r1, r3
 8009a24:	d002      	beq.n	8009a2c <__sflush_r+0x8c>
 8009a26:	4628      	mov	r0, r5
 8009a28:	f7ff fb4a 	bl	80090c0 <_free_r>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a30:	e00d      	b.n	8009a4e <__sflush_r+0xae>
 8009a32:	2301      	movs	r3, #1
 8009a34:	4628      	mov	r0, r5
 8009a36:	47b0      	blx	r6
 8009a38:	4602      	mov	r2, r0
 8009a3a:	1c50      	adds	r0, r2, #1
 8009a3c:	d1c9      	bne.n	80099d2 <__sflush_r+0x32>
 8009a3e:	682b      	ldr	r3, [r5, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0c6      	beq.n	80099d2 <__sflush_r+0x32>
 8009a44:	2b1d      	cmp	r3, #29
 8009a46:	d001      	beq.n	8009a4c <__sflush_r+0xac>
 8009a48:	2b16      	cmp	r3, #22
 8009a4a:	d11e      	bne.n	8009a8a <__sflush_r+0xea>
 8009a4c:	602f      	str	r7, [r5, #0]
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e022      	b.n	8009a98 <__sflush_r+0xf8>
 8009a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a56:	b21b      	sxth	r3, r3
 8009a58:	e01b      	b.n	8009a92 <__sflush_r+0xf2>
 8009a5a:	690f      	ldr	r7, [r1, #16]
 8009a5c:	2f00      	cmp	r7, #0
 8009a5e:	d0f6      	beq.n	8009a4e <__sflush_r+0xae>
 8009a60:	0793      	lsls	r3, r2, #30
 8009a62:	680e      	ldr	r6, [r1, #0]
 8009a64:	bf08      	it	eq
 8009a66:	694b      	ldreq	r3, [r1, #20]
 8009a68:	600f      	str	r7, [r1, #0]
 8009a6a:	bf18      	it	ne
 8009a6c:	2300      	movne	r3, #0
 8009a6e:	eba6 0807 	sub.w	r8, r6, r7
 8009a72:	608b      	str	r3, [r1, #8]
 8009a74:	f1b8 0f00 	cmp.w	r8, #0
 8009a78:	dde9      	ble.n	8009a4e <__sflush_r+0xae>
 8009a7a:	6a21      	ldr	r1, [r4, #32]
 8009a7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a7e:	4643      	mov	r3, r8
 8009a80:	463a      	mov	r2, r7
 8009a82:	4628      	mov	r0, r5
 8009a84:	47b0      	blx	r6
 8009a86:	2800      	cmp	r0, #0
 8009a88:	dc08      	bgt.n	8009a9c <__sflush_r+0xfc>
 8009a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	f04f 30ff 	mov.w	r0, #4294967295
 8009a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a9c:	4407      	add	r7, r0
 8009a9e:	eba8 0800 	sub.w	r8, r8, r0
 8009aa2:	e7e7      	b.n	8009a74 <__sflush_r+0xd4>
 8009aa4:	20400001 	.word	0x20400001

08009aa8 <_fflush_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	690b      	ldr	r3, [r1, #16]
 8009aac:	4605      	mov	r5, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	b913      	cbnz	r3, 8009ab8 <_fflush_r+0x10>
 8009ab2:	2500      	movs	r5, #0
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	b118      	cbz	r0, 8009ac2 <_fflush_r+0x1a>
 8009aba:	6a03      	ldr	r3, [r0, #32]
 8009abc:	b90b      	cbnz	r3, 8009ac2 <_fflush_r+0x1a>
 8009abe:	f7ff f9c5 	bl	8008e4c <__sinit>
 8009ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0f3      	beq.n	8009ab2 <_fflush_r+0xa>
 8009aca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009acc:	07d0      	lsls	r0, r2, #31
 8009ace:	d404      	bmi.n	8009ada <_fflush_r+0x32>
 8009ad0:	0599      	lsls	r1, r3, #22
 8009ad2:	d402      	bmi.n	8009ada <_fflush_r+0x32>
 8009ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ad6:	f7ff faf0 	bl	80090ba <__retarget_lock_acquire_recursive>
 8009ada:	4628      	mov	r0, r5
 8009adc:	4621      	mov	r1, r4
 8009ade:	f7ff ff5f 	bl	80099a0 <__sflush_r>
 8009ae2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ae4:	07da      	lsls	r2, r3, #31
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	d4e4      	bmi.n	8009ab4 <_fflush_r+0xc>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	059b      	lsls	r3, r3, #22
 8009aee:	d4e1      	bmi.n	8009ab4 <_fflush_r+0xc>
 8009af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009af2:	f7ff fae3 	bl	80090bc <__retarget_lock_release_recursive>
 8009af6:	e7dd      	b.n	8009ab4 <_fflush_r+0xc>

08009af8 <__swbuf_r>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	460e      	mov	r6, r1
 8009afc:	4614      	mov	r4, r2
 8009afe:	4605      	mov	r5, r0
 8009b00:	b118      	cbz	r0, 8009b0a <__swbuf_r+0x12>
 8009b02:	6a03      	ldr	r3, [r0, #32]
 8009b04:	b90b      	cbnz	r3, 8009b0a <__swbuf_r+0x12>
 8009b06:	f7ff f9a1 	bl	8008e4c <__sinit>
 8009b0a:	69a3      	ldr	r3, [r4, #24]
 8009b0c:	60a3      	str	r3, [r4, #8]
 8009b0e:	89a3      	ldrh	r3, [r4, #12]
 8009b10:	071a      	lsls	r2, r3, #28
 8009b12:	d501      	bpl.n	8009b18 <__swbuf_r+0x20>
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	b943      	cbnz	r3, 8009b2a <__swbuf_r+0x32>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f000 f82a 	bl	8009b74 <__swsetup_r>
 8009b20:	b118      	cbz	r0, 8009b2a <__swbuf_r+0x32>
 8009b22:	f04f 37ff 	mov.w	r7, #4294967295
 8009b26:	4638      	mov	r0, r7
 8009b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	6922      	ldr	r2, [r4, #16]
 8009b2e:	1a98      	subs	r0, r3, r2
 8009b30:	6963      	ldr	r3, [r4, #20]
 8009b32:	b2f6      	uxtb	r6, r6
 8009b34:	4283      	cmp	r3, r0
 8009b36:	4637      	mov	r7, r6
 8009b38:	dc05      	bgt.n	8009b46 <__swbuf_r+0x4e>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f7ff ffb3 	bl	8009aa8 <_fflush_r>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d1ed      	bne.n	8009b22 <__swbuf_r+0x2a>
 8009b46:	68a3      	ldr	r3, [r4, #8]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	60a3      	str	r3, [r4, #8]
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	6022      	str	r2, [r4, #0]
 8009b52:	701e      	strb	r6, [r3, #0]
 8009b54:	6962      	ldr	r2, [r4, #20]
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d004      	beq.n	8009b66 <__swbuf_r+0x6e>
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	07db      	lsls	r3, r3, #31
 8009b60:	d5e1      	bpl.n	8009b26 <__swbuf_r+0x2e>
 8009b62:	2e0a      	cmp	r6, #10
 8009b64:	d1df      	bne.n	8009b26 <__swbuf_r+0x2e>
 8009b66:	4621      	mov	r1, r4
 8009b68:	4628      	mov	r0, r5
 8009b6a:	f7ff ff9d 	bl	8009aa8 <_fflush_r>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d0d9      	beq.n	8009b26 <__swbuf_r+0x2e>
 8009b72:	e7d6      	b.n	8009b22 <__swbuf_r+0x2a>

08009b74 <__swsetup_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4b29      	ldr	r3, [pc, #164]	@ (8009c1c <__swsetup_r+0xa8>)
 8009b78:	4605      	mov	r5, r0
 8009b7a:	6818      	ldr	r0, [r3, #0]
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	b118      	cbz	r0, 8009b88 <__swsetup_r+0x14>
 8009b80:	6a03      	ldr	r3, [r0, #32]
 8009b82:	b90b      	cbnz	r3, 8009b88 <__swsetup_r+0x14>
 8009b84:	f7ff f962 	bl	8008e4c <__sinit>
 8009b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b8c:	0719      	lsls	r1, r3, #28
 8009b8e:	d422      	bmi.n	8009bd6 <__swsetup_r+0x62>
 8009b90:	06da      	lsls	r2, r3, #27
 8009b92:	d407      	bmi.n	8009ba4 <__swsetup_r+0x30>
 8009b94:	2209      	movs	r2, #9
 8009b96:	602a      	str	r2, [r5, #0]
 8009b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b9c:	81a3      	strh	r3, [r4, #12]
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba2:	e033      	b.n	8009c0c <__swsetup_r+0x98>
 8009ba4:	0758      	lsls	r0, r3, #29
 8009ba6:	d512      	bpl.n	8009bce <__swsetup_r+0x5a>
 8009ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009baa:	b141      	cbz	r1, 8009bbe <__swsetup_r+0x4a>
 8009bac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bb0:	4299      	cmp	r1, r3
 8009bb2:	d002      	beq.n	8009bba <__swsetup_r+0x46>
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f7ff fa83 	bl	80090c0 <_free_r>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bc4:	81a3      	strh	r3, [r4, #12]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	6063      	str	r3, [r4, #4]
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	f043 0308 	orr.w	r3, r3, #8
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	6923      	ldr	r3, [r4, #16]
 8009bd8:	b94b      	cbnz	r3, 8009bee <__swsetup_r+0x7a>
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009be4:	d003      	beq.n	8009bee <__swsetup_r+0x7a>
 8009be6:	4621      	mov	r1, r4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 f895 	bl	8009d18 <__smakebuf_r>
 8009bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf2:	f013 0201 	ands.w	r2, r3, #1
 8009bf6:	d00a      	beq.n	8009c0e <__swsetup_r+0x9a>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	60a2      	str	r2, [r4, #8]
 8009bfc:	6962      	ldr	r2, [r4, #20]
 8009bfe:	4252      	negs	r2, r2
 8009c00:	61a2      	str	r2, [r4, #24]
 8009c02:	6922      	ldr	r2, [r4, #16]
 8009c04:	b942      	cbnz	r2, 8009c18 <__swsetup_r+0xa4>
 8009c06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c0a:	d1c5      	bne.n	8009b98 <__swsetup_r+0x24>
 8009c0c:	bd38      	pop	{r3, r4, r5, pc}
 8009c0e:	0799      	lsls	r1, r3, #30
 8009c10:	bf58      	it	pl
 8009c12:	6962      	ldrpl	r2, [r4, #20]
 8009c14:	60a2      	str	r2, [r4, #8]
 8009c16:	e7f4      	b.n	8009c02 <__swsetup_r+0x8e>
 8009c18:	2000      	movs	r0, #0
 8009c1a:	e7f7      	b.n	8009c0c <__swsetup_r+0x98>
 8009c1c:	20000024 	.word	0x20000024

08009c20 <memmove>:
 8009c20:	4288      	cmp	r0, r1
 8009c22:	b510      	push	{r4, lr}
 8009c24:	eb01 0402 	add.w	r4, r1, r2
 8009c28:	d902      	bls.n	8009c30 <memmove+0x10>
 8009c2a:	4284      	cmp	r4, r0
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	d807      	bhi.n	8009c40 <memmove+0x20>
 8009c30:	1e43      	subs	r3, r0, #1
 8009c32:	42a1      	cmp	r1, r4
 8009c34:	d008      	beq.n	8009c48 <memmove+0x28>
 8009c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c3e:	e7f8      	b.n	8009c32 <memmove+0x12>
 8009c40:	4402      	add	r2, r0
 8009c42:	4601      	mov	r1, r0
 8009c44:	428a      	cmp	r2, r1
 8009c46:	d100      	bne.n	8009c4a <memmove+0x2a>
 8009c48:	bd10      	pop	{r4, pc}
 8009c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c52:	e7f7      	b.n	8009c44 <memmove+0x24>

08009c54 <memcpy>:
 8009c54:	440a      	add	r2, r1
 8009c56:	4291      	cmp	r1, r2
 8009c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c5c:	d100      	bne.n	8009c60 <memcpy+0xc>
 8009c5e:	4770      	bx	lr
 8009c60:	b510      	push	{r4, lr}
 8009c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c6a:	4291      	cmp	r1, r2
 8009c6c:	d1f9      	bne.n	8009c62 <memcpy+0xe>
 8009c6e:	bd10      	pop	{r4, pc}

08009c70 <_realloc_r>:
 8009c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c74:	4607      	mov	r7, r0
 8009c76:	4614      	mov	r4, r2
 8009c78:	460d      	mov	r5, r1
 8009c7a:	b921      	cbnz	r1, 8009c86 <_realloc_r+0x16>
 8009c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c80:	4611      	mov	r1, r2
 8009c82:	f7fe bfcb 	b.w	8008c1c <_malloc_r>
 8009c86:	b92a      	cbnz	r2, 8009c94 <_realloc_r+0x24>
 8009c88:	f7ff fa1a 	bl	80090c0 <_free_r>
 8009c8c:	4625      	mov	r5, r4
 8009c8e:	4628      	mov	r0, r5
 8009c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c94:	f000 f89e 	bl	8009dd4 <_malloc_usable_size_r>
 8009c98:	4284      	cmp	r4, r0
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	d802      	bhi.n	8009ca4 <_realloc_r+0x34>
 8009c9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ca2:	d8f4      	bhi.n	8009c8e <_realloc_r+0x1e>
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	f7fe ffb8 	bl	8008c1c <_malloc_r>
 8009cac:	4680      	mov	r8, r0
 8009cae:	b908      	cbnz	r0, 8009cb4 <_realloc_r+0x44>
 8009cb0:	4645      	mov	r5, r8
 8009cb2:	e7ec      	b.n	8009c8e <_realloc_r+0x1e>
 8009cb4:	42b4      	cmp	r4, r6
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	4629      	mov	r1, r5
 8009cba:	bf28      	it	cs
 8009cbc:	4632      	movcs	r2, r6
 8009cbe:	f7ff ffc9 	bl	8009c54 <memcpy>
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f7ff f9fb 	bl	80090c0 <_free_r>
 8009cca:	e7f1      	b.n	8009cb0 <_realloc_r+0x40>

08009ccc <__swhatbuf_r>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	460c      	mov	r4, r1
 8009cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	b096      	sub	sp, #88	@ 0x58
 8009cd8:	4615      	mov	r5, r2
 8009cda:	461e      	mov	r6, r3
 8009cdc:	da0d      	bge.n	8009cfa <__swhatbuf_r+0x2e>
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ce4:	f04f 0100 	mov.w	r1, #0
 8009ce8:	bf14      	ite	ne
 8009cea:	2340      	movne	r3, #64	@ 0x40
 8009cec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	6031      	str	r1, [r6, #0]
 8009cf4:	602b      	str	r3, [r5, #0]
 8009cf6:	b016      	add	sp, #88	@ 0x58
 8009cf8:	bd70      	pop	{r4, r5, r6, pc}
 8009cfa:	466a      	mov	r2, sp
 8009cfc:	f000 f848 	bl	8009d90 <_fstat_r>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	dbec      	blt.n	8009cde <__swhatbuf_r+0x12>
 8009d04:	9901      	ldr	r1, [sp, #4]
 8009d06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d0e:	4259      	negs	r1, r3
 8009d10:	4159      	adcs	r1, r3
 8009d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d16:	e7eb      	b.n	8009cf0 <__swhatbuf_r+0x24>

08009d18 <__smakebuf_r>:
 8009d18:	898b      	ldrh	r3, [r1, #12]
 8009d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d1c:	079d      	lsls	r5, r3, #30
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460c      	mov	r4, r1
 8009d22:	d507      	bpl.n	8009d34 <__smakebuf_r+0x1c>
 8009d24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	6123      	str	r3, [r4, #16]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	6163      	str	r3, [r4, #20]
 8009d30:	b003      	add	sp, #12
 8009d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d34:	ab01      	add	r3, sp, #4
 8009d36:	466a      	mov	r2, sp
 8009d38:	f7ff ffc8 	bl	8009ccc <__swhatbuf_r>
 8009d3c:	9f00      	ldr	r7, [sp, #0]
 8009d3e:	4605      	mov	r5, r0
 8009d40:	4639      	mov	r1, r7
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7fe ff6a 	bl	8008c1c <_malloc_r>
 8009d48:	b948      	cbnz	r0, 8009d5e <__smakebuf_r+0x46>
 8009d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d4e:	059a      	lsls	r2, r3, #22
 8009d50:	d4ee      	bmi.n	8009d30 <__smakebuf_r+0x18>
 8009d52:	f023 0303 	bic.w	r3, r3, #3
 8009d56:	f043 0302 	orr.w	r3, r3, #2
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	e7e2      	b.n	8009d24 <__smakebuf_r+0xc>
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	6020      	str	r0, [r4, #0]
 8009d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d66:	81a3      	strh	r3, [r4, #12]
 8009d68:	9b01      	ldr	r3, [sp, #4]
 8009d6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d6e:	b15b      	cbz	r3, 8009d88 <__smakebuf_r+0x70>
 8009d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d74:	4630      	mov	r0, r6
 8009d76:	f000 f81d 	bl	8009db4 <_isatty_r>
 8009d7a:	b128      	cbz	r0, 8009d88 <__smakebuf_r+0x70>
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	f023 0303 	bic.w	r3, r3, #3
 8009d82:	f043 0301 	orr.w	r3, r3, #1
 8009d86:	81a3      	strh	r3, [r4, #12]
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	431d      	orrs	r5, r3
 8009d8c:	81a5      	strh	r5, [r4, #12]
 8009d8e:	e7cf      	b.n	8009d30 <__smakebuf_r+0x18>

08009d90 <_fstat_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4d07      	ldr	r5, [pc, #28]	@ (8009db0 <_fstat_r+0x20>)
 8009d94:	2300      	movs	r3, #0
 8009d96:	4604      	mov	r4, r0
 8009d98:	4608      	mov	r0, r1
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	602b      	str	r3, [r5, #0]
 8009d9e:	f7f8 fcfc 	bl	800279a <_fstat>
 8009da2:	1c43      	adds	r3, r0, #1
 8009da4:	d102      	bne.n	8009dac <_fstat_r+0x1c>
 8009da6:	682b      	ldr	r3, [r5, #0]
 8009da8:	b103      	cbz	r3, 8009dac <_fstat_r+0x1c>
 8009daa:	6023      	str	r3, [r4, #0]
 8009dac:	bd38      	pop	{r3, r4, r5, pc}
 8009dae:	bf00      	nop
 8009db0:	200004f8 	.word	0x200004f8

08009db4 <_isatty_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d06      	ldr	r5, [pc, #24]	@ (8009dd0 <_isatty_r+0x1c>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	602b      	str	r3, [r5, #0]
 8009dc0:	f7f8 fcfb 	bl	80027ba <_isatty>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_isatty_r+0x1a>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_isatty_r+0x1a>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	200004f8 	.word	0x200004f8

08009dd4 <_malloc_usable_size_r>:
 8009dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd8:	1f18      	subs	r0, r3, #4
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfbc      	itt	lt
 8009dde:	580b      	ldrlt	r3, [r1, r0]
 8009de0:	18c0      	addlt	r0, r0, r3
 8009de2:	4770      	bx	lr

08009de4 <_init>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	bf00      	nop
 8009de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dea:	bc08      	pop	{r3}
 8009dec:	469e      	mov	lr, r3
 8009dee:	4770      	bx	lr

08009df0 <_fini>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	bf00      	nop
 8009df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df6:	bc08      	pop	{r3}
 8009df8:	469e      	mov	lr, r3
 8009dfa:	4770      	bx	lr
